/*! For license information please see bundle.11b12b7f478e388c.js.LICENSE.txt */
(()=>{var t={831:(t,e,q)=>{"use strict";const n=100,i=301,r=302,o=306,a=1e3,s=1001,l=1002,c=1003,h=1006,u=1008,m=1009,d=1012,p=1014,f=1015,g=1016,x=1020,v=1022,y=1023,_=1026,b=1027,A=2300,w=2301,M=2302,S=2400,E=2401,C=2402,T=3e3,z=3001,L=3007,R=3002,I=7680,P=35044,B=35048,k="300 es";class D{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const q=this._listeners;void 0===q[t]&&(q[t]=[]),-1===q[t].indexOf(e)&&q[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const q=this._listeners;return void 0!==q[t]&&-1!==q[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const q=this._listeners[t];if(void 0!==q){const t=q.indexOf(e);-1!==t&&q.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const q=e.slice(0);for(let e=0,n=q.length;e<n;e++)q[e].call(this,t);t.target=null}}}let O=1234567;const N=Math.PI/180,F=180/Math.PI,H=[];for(let t=0;t<256;t++)H[t]=(t<16?"0":"")+t.toString(16);const U="undefined"!=typeof crypto&&"randomUUID"in crypto;function V(){if(U)return crypto.randomUUID().toUpperCase();const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,q=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(H[255&t]+H[t>>8&255]+H[t>>16&255]+H[t>>24&255]+"-"+H[255&e]+H[e>>8&255]+"-"+H[e>>16&15|64]+H[e>>24&255]+"-"+H[63&q|128]+H[q>>8&255]+"-"+H[q>>16&255]+H[q>>24&255]+H[255&n]+H[n>>8&255]+H[n>>16&255]+H[n>>24&255]).toUpperCase()}function G(t,e,q){return Math.max(e,Math.min(q,t))}function W(t,e){return(t%e+e)%e}function j(t,e,q){return(1-q)*t+q*e}function Z(t){return 0==(t&t-1)&&0!==t}function X(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}var Y=Object.freeze({__proto__:null,DEG2RAD:N,RAD2DEG:F,generateUUID:V,clamp:G,euclideanModulo:W,mapLinear:function(t,e,q,n,i){return n+(t-e)*(i-n)/(q-e)},inverseLerp:function(t,e,q){return t!==e?(q-t)/(e-t):0},lerp:j,damp:function(t,e,q,n){return j(t,e,1-Math.exp(-q*n))},pingpong:function(t,e=1){return e-Math.abs(W(t,2*e)-e)},smoothstep:function(t,e,q){return t<=e?0:t>=q?1:(t=(t-e)/(q-e))*t*(3-2*t)},smootherstep:function(t,e,q){return t<=e?0:t>=q?1:(t=(t-e)/(q-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){return void 0!==t&&(O=t%2147483647),O=16807*O%2147483647,(O-1)/2147483646},degToRad:function(t){return t*N},radToDeg:function(t){return t*F},isPowerOfTwo:Z,ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:X,setQuaternionFromProperEuler:function(t,e,q,n,i){const r=Math.cos,o=Math.sin,a=r(q/2),s=o(q/2),l=r((e+n)/2),c=o((e+n)/2),h=r((e-n)/2),u=o((e-n)/2),m=r((n-e)/2),d=o((n-e)/2);switch(i){case"XYX":t.set(a*c,s*h,s*u,a*l);break;case"YZY":t.set(s*u,a*c,s*h,a*l);break;case"ZXZ":t.set(s*h,s*u,a*c,a*l);break;case"XZX":t.set(a*c,s*d,s*m,a*l);break;case"YXY":t.set(s*m,a*c,s*d,a*l);break;case"ZYZ":t.set(s*d,s*m,a*c,a*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}});class J{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,q=this.y,n=t.elements;return this.x=n[0]*e+n[3]*q+n[6],this.y=n[1]*e+n[4]*q+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const q=this.length();return this.divideScalar(q||1).multiplyScalar(Math.max(t,Math.min(e,q)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,q=this.y-t.y;return e*e+q*q}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,q){return this.x=t.x+(e.x-t.x)*q,this.y=t.y+(e.y-t.y)*q,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,q){return void 0!==q&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const q=Math.cos(e),n=Math.sin(e),i=this.x-t.x,r=this.y-t.y;return this.x=i*q-r*n+t.x,this.y=i*n+r*q+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}J.prototype.isVector2=!0;class ${constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,q,n,i,r,o,a,s){const l=this.elements;return l[0]=t,l[1]=n,l[2]=o,l[3]=e,l[4]=i,l[5]=a,l[6]=q,l[7]=r,l[8]=s,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,q=t.elements;return e[0]=q[0],e[1]=q[1],e[2]=q[2],e[3]=q[3],e[4]=q[4],e[5]=q[5],e[6]=q[6],e[7]=q[7],e[8]=q[8],this}extractBasis(t,e,q){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),q.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const q=t.elements,n=e.elements,i=this.elements,r=q[0],o=q[3],a=q[6],s=q[1],l=q[4],c=q[7],h=q[2],u=q[5],m=q[8],d=n[0],p=n[3],f=n[6],g=n[1],x=n[4],v=n[7],y=n[2],_=n[5],b=n[8];return i[0]=r*d+o*g+a*y,i[3]=r*p+o*x+a*_,i[6]=r*f+o*v+a*b,i[1]=s*d+l*g+c*y,i[4]=s*p+l*x+c*_,i[7]=s*f+l*v+c*b,i[2]=h*d+u*g+m*y,i[5]=h*p+u*x+m*_,i[8]=h*f+u*v+m*b,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],q=t[1],n=t[2],i=t[3],r=t[4],o=t[5],a=t[6],s=t[7],l=t[8];return e*r*l-e*o*s-q*i*l+q*o*a+n*i*s-n*r*a}invert(){const t=this.elements,e=t[0],q=t[1],n=t[2],i=t[3],r=t[4],o=t[5],a=t[6],s=t[7],l=t[8],c=l*r-o*s,h=o*a-l*i,u=s*i-r*a,m=e*c+q*h+n*u;if(0===m)return this.set(0,0,0,0,0,0,0,0,0);const d=1/m;return t[0]=c*d,t[1]=(n*s-l*q)*d,t[2]=(o*q-n*r)*d,t[3]=h*d,t[4]=(l*e-n*a)*d,t[5]=(n*i-o*e)*d,t[6]=u*d,t[7]=(q*a-s*e)*d,t[8]=(r*e-q*i)*d,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,q,n,i,r,o){const a=Math.cos(i),s=Math.sin(i);return this.set(q*a,q*s,-q*(a*r+s*o)+r+t,-n*s,n*a,-n*(-s*r+a*o)+o+e,0,0,1),this}scale(t,e){const q=this.elements;return q[0]*=t,q[3]*=t,q[6]*=t,q[1]*=e,q[4]*=e,q[7]*=e,this}rotate(t){const e=Math.cos(t),q=Math.sin(t),n=this.elements,i=n[0],r=n[3],o=n[6],a=n[1],s=n[4],l=n[7];return n[0]=e*i+q*a,n[3]=e*r+q*s,n[6]=e*o+q*l,n[1]=-q*i+e*a,n[4]=-q*r+e*s,n[7]=-q*o+e*l,this}translate(t,e){const q=this.elements;return q[0]+=t*q[2],q[3]+=t*q[5],q[6]+=t*q[8],q[1]+=e*q[2],q[4]+=e*q[5],q[7]+=e*q[8],this}equals(t){const e=this.elements,q=t.elements;for(let t=0;t<9;t++)if(e[t]!==q[t])return!1;return!0}fromArray(t,e=0){for(let q=0;q<9;q++)this.elements[q]=t[q+e];return this}toArray(t=[],e=0){const q=this.elements;return t[e]=q[0],t[e+1]=q[1],t[e+2]=q[2],t[e+3]=q[3],t[e+4]=q[4],t[e+5]=q[5],t[e+6]=q[6],t[e+7]=q[7],t[e+8]=q[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}function K(t){if(0===t.length)return-1/0;let e=t[0];for(let q=1,n=t.length;q<n;++q)t[q]>e&&(e=t[q]);return e}function Q(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function tt(t,e=0){let q=3735928559^e,n=1103547991^e;for(let e,i=0;i<t.length;i++)e=t.charCodeAt(i),q=Math.imul(q^e,2654435761),n=Math.imul(n^e,1597334677);return q=Math.imul(q^q>>>16,2246822507)^Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507)^Math.imul(q^q>>>13,3266489909),4294967296*(2097151&n)+(q>>>0)}let et;$.prototype.isMatrix3=!0,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;class qt{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===et&&(et=Q("canvas")),et.width=t.width,et.height=t.height;const q=et.getContext("2d");t instanceof ImageData?q.putImageData(t,0,0):q.drawImage(t,0,0,t.width,t.height),e=et}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}}let nt=0;class it extends D{constructor(t=it.DEFAULT_IMAGE,e=it.DEFAULT_MAPPING,q=1001,n=1001,i=1006,r=1008,o=1023,a=1009,s=1,l=3e3){super(),Object.defineProperty(this,"id",{value:nt++}),this.uuid=V(),this.name="",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=q,this.wrapT=n,this.magFilter=i,this.minFilter=r,this.anisotropy=s,this.format=o,this.internalFormat=null,this.type=a,this.offset=new J(0,0),this.repeat=new J(1,1),this.center=new J(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new $,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=l,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const q={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const n=this.image;if(void 0===n.uuid&&(n.uuid=V()),!e&&void 0===t.images[n.uuid]){let e;if(Array.isArray(n)){e=[];for(let t=0,q=n.length;t<q;t++)n[t].isDataTexture?e.push(rt(n[t].image)):e.push(rt(n[t]))}else e=rt(n);t.images[n.uuid]={uuid:n.uuid,url:e}}q.image=n.uuid}return"{}"!==JSON.stringify(this.userData)&&(q.userData=this.userData),e||(t.textures[this.uuid]=q),q}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case a:t.x=t.x-Math.floor(t.x);break;case s:t.x=t.x<0?0:1;break;case l:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case a:t.y=t.y-Math.floor(t.y);break;case s:t.y=t.y<0?0:1;break;case l:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&this.version++}}function rt(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?qt.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}it.DEFAULT_IMAGE=void 0,it.DEFAULT_MAPPING=300,it.prototype.isTexture=!0;class ot{constructor(t=0,e=0,q=0,n=1){this.x=t,this.y=e,this.z=q,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,q,n){return this.x=t,this.y=e,this.z=q,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,q=this.y,n=this.z,i=this.w,r=t.elements;return this.x=r[0]*e+r[4]*q+r[8]*n+r[12]*i,this.y=r[1]*e+r[5]*q+r[9]*n+r[13]*i,this.z=r[2]*e+r[6]*q+r[10]*n+r[14]*i,this.w=r[3]*e+r[7]*q+r[11]*n+r[15]*i,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,q,n,i;const r=.01,o=.1,a=t.elements,s=a[0],l=a[4],c=a[8],h=a[1],u=a[5],m=a[9],d=a[2],p=a[6],f=a[10];if(Math.abs(l-h)<r&&Math.abs(c-d)<r&&Math.abs(m-p)<r){if(Math.abs(l+h)<o&&Math.abs(c+d)<o&&Math.abs(m+p)<o&&Math.abs(s+u+f-3)<o)return this.set(1,0,0,0),this;e=Math.PI;const t=(s+1)/2,a=(u+1)/2,g=(f+1)/2,x=(l+h)/4,v=(c+d)/4,y=(m+p)/4;return t>a&&t>g?t<r?(q=0,n=.707106781,i=.707106781):(q=Math.sqrt(t),n=x/q,i=v/q):a>g?a<r?(q=.707106781,n=0,i=.707106781):(n=Math.sqrt(a),q=x/n,i=y/n):g<r?(q=.707106781,n=.707106781,i=0):(i=Math.sqrt(g),q=v/i,n=y/i),this.set(q,n,i,e),this}let g=Math.sqrt((p-m)*(p-m)+(c-d)*(c-d)+(h-l)*(h-l));return Math.abs(g)<.001&&(g=1),this.x=(p-m)/g,this.y=(c-d)/g,this.z=(h-l)/g,this.w=Math.acos((s+u+f-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const q=this.length();return this.divideScalar(q||1).multiplyScalar(Math.max(t,Math.min(e,q)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,q){return this.x=t.x+(e.x-t.x)*q,this.y=t.y+(e.y-t.y)*q,this.z=t.z+(e.z-t.z)*q,this.w=t.w+(e.w-t.w)*q,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,q){return void 0!==q&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}ot.prototype.isVector4=!0;class at extends D{constructor(t,e,q={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new ot(0,0,t,e),this.scissorTest=!1,this.viewport=new ot(0,0,t,e),this.texture=new it(void 0,q.mapping,q.wrapS,q.wrapT,q.magFilter,q.minFilter,q.format,q.type,q.anisotropy,q.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:t,height:e,depth:1},this.texture.generateMipmaps=void 0!==q.generateMipmaps&&q.generateMipmaps,this.texture.internalFormat=void 0!==q.internalFormat?q.internalFormat:null,this.texture.minFilter=void 0!==q.minFilter?q.minFilter:h,this.depthBuffer=void 0===q.depthBuffer||q.depthBuffer,this.stencilBuffer=void 0!==q.stencilBuffer&&q.stencilBuffer,this.depthTexture=void 0!==q.depthTexture?q.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,q=1){this.width===t&&this.height===e&&this.depth===q||(this.width=t,this.height=e,this.depth=q,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=q,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}at.prototype.isWebGLRenderTarget=!0,class extends at{constructor(t,e,q){super(t,e);const n=this.texture;this.texture=[];for(let t=0;t<q;t++)this.texture[t]=n.clone()}setSize(t,e,q=1){if(this.width!==t||this.height!==e||this.depth!==q){this.width=t,this.height=e,this.depth=q;for(let n=0,i=this.texture.length;n<i;n++)this.texture[n].image.width=t,this.texture[n].image.height=e,this.texture[n].image.depth=q;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,q=t.texture.length;e<q;e++)this.texture[e]=t.texture[e].clone();return this}}.prototype.isWebGLMultipleRenderTargets=!0;class st extends at{constructor(t,e,q){super(t,e,q),this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}st.prototype.isWebGLMultisampleRenderTarget=!0;class lt{constructor(t=0,e=0,q=0,n=1){this._x=t,this._y=e,this._z=q,this._w=n}static slerp(t,e,q,n){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),q.slerpQuaternions(t,e,n)}static slerpFlat(t,e,q,n,i,r,o){let a=q[n+0],s=q[n+1],l=q[n+2],c=q[n+3];const h=i[r+0],u=i[r+1],m=i[r+2],d=i[r+3];if(0===o)return t[e+0]=a,t[e+1]=s,t[e+2]=l,void(t[e+3]=c);if(1===o)return t[e+0]=h,t[e+1]=u,t[e+2]=m,void(t[e+3]=d);if(c!==d||a!==h||s!==u||l!==m){let t=1-o;const e=a*h+s*u+l*m+c*d,q=e>=0?1:-1,n=1-e*e;if(n>Number.EPSILON){const i=Math.sqrt(n),r=Math.atan2(i,e*q);t=Math.sin(t*r)/i,o=Math.sin(o*r)/i}const i=o*q;if(a=a*t+h*i,s=s*t+u*i,l=l*t+m*i,c=c*t+d*i,t===1-o){const t=1/Math.sqrt(a*a+s*s+l*l+c*c);a*=t,s*=t,l*=t,c*=t}}t[e]=a,t[e+1]=s,t[e+2]=l,t[e+3]=c}static multiplyQuaternionsFlat(t,e,q,n,i,r){const o=q[n],a=q[n+1],s=q[n+2],l=q[n+3],c=i[r],h=i[r+1],u=i[r+2],m=i[r+3];return t[e]=o*m+l*c+a*u-s*h,t[e+1]=a*m+l*h+s*c-o*u,t[e+2]=s*m+l*u+o*h-a*c,t[e+3]=l*m-o*c-a*h-s*u,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,q,n){return this._x=t,this._y=e,this._z=q,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const q=t._x,n=t._y,i=t._z,r=t._order,o=Math.cos,a=Math.sin,s=o(q/2),l=o(n/2),c=o(i/2),h=a(q/2),u=a(n/2),m=a(i/2);switch(r){case"XYZ":this._x=h*l*c+s*u*m,this._y=s*u*c-h*l*m,this._z=s*l*m+h*u*c,this._w=s*l*c-h*u*m;break;case"YXZ":this._x=h*l*c+s*u*m,this._y=s*u*c-h*l*m,this._z=s*l*m-h*u*c,this._w=s*l*c+h*u*m;break;case"ZXY":this._x=h*l*c-s*u*m,this._y=s*u*c+h*l*m,this._z=s*l*m+h*u*c,this._w=s*l*c-h*u*m;break;case"ZYX":this._x=h*l*c-s*u*m,this._y=s*u*c+h*l*m,this._z=s*l*m-h*u*c,this._w=s*l*c+h*u*m;break;case"YZX":this._x=h*l*c+s*u*m,this._y=s*u*c+h*l*m,this._z=s*l*m-h*u*c,this._w=s*l*c-h*u*m;break;case"XZY":this._x=h*l*c-s*u*m,this._y=s*u*c-h*l*m,this._z=s*l*m+h*u*c,this._w=s*l*c+h*u*m;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+r)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const q=e/2,n=Math.sin(q);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(q),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,q=e[0],n=e[4],i=e[8],r=e[1],o=e[5],a=e[9],s=e[2],l=e[6],c=e[10],h=q+o+c;if(h>0){const t=.5/Math.sqrt(h+1);this._w=.25/t,this._x=(l-a)*t,this._y=(i-s)*t,this._z=(r-n)*t}else if(q>o&&q>c){const t=2*Math.sqrt(1+q-o-c);this._w=(l-a)/t,this._x=.25*t,this._y=(n+r)/t,this._z=(i+s)/t}else if(o>c){const t=2*Math.sqrt(1+o-q-c);this._w=(i-s)/t,this._x=(n+r)/t,this._y=.25*t,this._z=(a+l)/t}else{const t=2*Math.sqrt(1+c-q-o);this._w=(r-n)/t,this._x=(i+s)/t,this._y=(a+l)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let q=t.dot(e)+1;return q<Number.EPSILON?(q=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=q):(this._x=0,this._y=-t.z,this._z=t.y,this._w=q)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=q),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(G(this.dot(t),-1,1)))}rotateTowards(t,e){const q=this.angleTo(t);if(0===q)return this;const n=Math.min(1,e/q);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const q=t._x,n=t._y,i=t._z,r=t._w,o=e._x,a=e._y,s=e._z,l=e._w;return this._x=q*l+r*o+n*s-i*a,this._y=n*l+r*a+i*o-q*s,this._z=i*l+r*s+q*a-n*o,this._w=r*l-q*o-n*a-i*s,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const q=this._x,n=this._y,i=this._z,r=this._w;let o=r*t._w+q*t._x+n*t._y+i*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=r,this._x=q,this._y=n,this._z=i,this;const a=1-o*o;if(a<=Number.EPSILON){const t=1-e;return this._w=t*r+e*this._w,this._x=t*q+e*this._x,this._y=t*n+e*this._y,this._z=t*i+e*this._z,this.normalize(),this._onChangeCallback(),this}const s=Math.sqrt(a),l=Math.atan2(s,o),c=Math.sin((1-e)*l)/s,h=Math.sin(e*l)/s;return this._w=r*c+this._w*h,this._x=q*c+this._x*h,this._y=n*c+this._y*h,this._z=i*c+this._z*h,this._onChangeCallback(),this}slerpQuaternions(t,e,q){this.copy(t).slerp(e,q)}random(){const t=Math.random(),e=Math.sqrt(1-t),q=Math.sqrt(t),n=2*Math.PI*Math.random(),i=2*Math.PI*Math.random();return this.set(e*Math.cos(n),q*Math.sin(i),q*Math.cos(i),e*Math.sin(n))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}lt.prototype.isQuaternion=!0;class ct{constructor(t=0,e=0,q=0){this.x=t,this.y=e,this.z=q}set(t,e,q){return void 0===q&&(q=this.z),this.x=t,this.y=e,this.z=q,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(ut.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ut.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,q=this.y,n=this.z,i=t.elements;return this.x=i[0]*e+i[3]*q+i[6]*n,this.y=i[1]*e+i[4]*q+i[7]*n,this.z=i[2]*e+i[5]*q+i[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,q=this.y,n=this.z,i=t.elements,r=1/(i[3]*e+i[7]*q+i[11]*n+i[15]);return this.x=(i[0]*e+i[4]*q+i[8]*n+i[12])*r,this.y=(i[1]*e+i[5]*q+i[9]*n+i[13])*r,this.z=(i[2]*e+i[6]*q+i[10]*n+i[14])*r,this}applyQuaternion(t){const e=this.x,q=this.y,n=this.z,i=t.x,r=t.y,o=t.z,a=t.w,s=a*e+r*n-o*q,l=a*q+o*e-i*n,c=a*n+i*q-r*e,h=-i*e-r*q-o*n;return this.x=s*a+h*-i+l*-o-c*-r,this.y=l*a+h*-r+c*-i-s*-o,this.z=c*a+h*-o+s*-r-l*-i,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,q=this.y,n=this.z,i=t.elements;return this.x=i[0]*e+i[4]*q+i[8]*n,this.y=i[1]*e+i[5]*q+i[9]*n,this.z=i[2]*e+i[6]*q+i[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const q=this.length();return this.divideScalar(q||1).multiplyScalar(Math.max(t,Math.min(e,q)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,q){return this.x=t.x+(e.x-t.x)*q,this.y=t.y+(e.y-t.y)*q,this.z=t.z+(e.z-t.z)*q,this}cross(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const q=t.x,n=t.y,i=t.z,r=e.x,o=e.y,a=e.z;return this.x=n*a-i*o,this.y=i*r-q*a,this.z=q*o-n*r,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const q=t.dot(this)/e;return this.copy(t).multiplyScalar(q)}projectOnPlane(t){return ht.copy(this).projectOnVector(t),this.sub(ht)}reflect(t){return this.sub(ht.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const q=this.dot(t)/e;return Math.acos(G(q,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,q=this.y-t.y,n=this.z-t.z;return e*e+q*q+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,q){const n=Math.sin(e)*t;return this.x=n*Math.sin(q),this.y=Math.cos(e)*t,this.z=n*Math.cos(q),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,q){return this.x=t*Math.sin(e),this.y=q,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),q=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=q,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,q){return void 0!==q&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=2*(Math.random()-.5),e=Math.random()*Math.PI*2,q=Math.sqrt(1-t**2);return this.x=q*Math.cos(e),this.y=q*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}ct.prototype.isVector3=!0;const ht=new ct,ut=new lt;class mt{constructor(t=new ct(1/0,1/0,1/0),e=new ct(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,q=1/0,n=1/0,i=-1/0,r=-1/0,o=-1/0;for(let a=0,s=t.length;a<s;a+=3){const s=t[a],l=t[a+1],c=t[a+2];s<e&&(e=s),l<q&&(q=l),c<n&&(n=c),s>i&&(i=s),l>r&&(r=l),c>o&&(o=c)}return this.min.set(e,q,n),this.max.set(i,r,o),this}setFromBufferAttribute(t){let e=1/0,q=1/0,n=1/0,i=-1/0,r=-1/0,o=-1/0;for(let a=0,s=t.count;a<s;a++){const s=t.getX(a),l=t.getY(a),c=t.getZ(a);s<e&&(e=s),l<q&&(q=l),c<n&&(n=c),s>i&&(i=s),l>r&&(r=l),c>o&&(o=c)}return this.min.set(e,q,n),this.max.set(i,r,o),this}setFromPoints(t){this.makeEmpty();for(let e=0,q=t.length;e<q;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const q=pt.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(q),this.max.copy(t).add(q),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),ft.copy(e.boundingBox),ft.applyMatrix4(t.matrixWorld),this.union(ft));const q=t.children;for(let t=0,e=q.length;t<e;t++)this.expandByObject(q[t]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,pt),pt.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,q;return t.normal.x>0?(e=t.normal.x*this.min.x,q=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,q=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,q+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,q+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,q+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,q+=t.normal.z*this.min.z),e<=-t.constant&&q>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(At),wt.subVectors(this.max,At),gt.subVectors(t.a,At),xt.subVectors(t.b,At),vt.subVectors(t.c,At),yt.subVectors(xt,gt),_t.subVectors(vt,xt),bt.subVectors(gt,vt);let e=[0,-yt.z,yt.y,0,-_t.z,_t.y,0,-bt.z,bt.y,yt.z,0,-yt.x,_t.z,0,-_t.x,bt.z,0,-bt.x,-yt.y,yt.x,0,-_t.y,_t.x,0,-bt.y,bt.x,0];return!!Et(e,gt,xt,vt,wt)&&(e=[1,0,0,0,1,0,0,0,1],!!Et(e,gt,xt,vt,wt)&&(Mt.crossVectors(yt,_t),e=[Mt.x,Mt.y,Mt.z],Et(e,gt,xt,vt,wt)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return pt.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(pt).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(dt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),dt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),dt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),dt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),dt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),dt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),dt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),dt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(dt)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}mt.prototype.isBox3=!0;const dt=[new ct,new ct,new ct,new ct,new ct,new ct,new ct,new ct],pt=new ct,ft=new mt,gt=new ct,xt=new ct,vt=new ct,yt=new ct,_t=new ct,bt=new ct,At=new ct,wt=new ct,Mt=new ct,St=new ct;function Et(t,e,q,n,i){for(let r=0,o=t.length-3;r<=o;r+=3){St.fromArray(t,r);const o=i.x*Math.abs(St.x)+i.y*Math.abs(St.y)+i.z*Math.abs(St.z),a=e.dot(St),s=q.dot(St),l=n.dot(St);if(Math.max(-Math.max(a,s,l),Math.min(a,s,l))>o)return!1}return!0}const Ct=new mt,Tt=new ct,zt=new ct,Lt=new ct;class Rt{constructor(t=new ct,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const q=this.center;void 0!==e?q.copy(e):Ct.setFromPoints(t).getCenter(q);let n=0;for(let e=0,i=t.length;e<i;e++)n=Math.max(n,q.distanceToSquared(t[e]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const q=this.center.distanceToSquared(t);return e.copy(t),q>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){Lt.subVectors(t,this.center);const e=Lt.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),q=.5*(t-this.radius);this.center.add(Lt.multiplyScalar(q/t)),this.radius+=q}return this}union(t){return zt.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(Tt.copy(t.center).add(zt)),this.expandByPoint(Tt.copy(t.center).sub(zt)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const It=new ct,Pt=new ct,Bt=new ct,kt=new ct,Dt=new ct,Ot=new ct,Nt=new ct;class Ft{constructor(t=new ct,e=new ct(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,It)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const q=e.dot(this.direction);return q<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(q).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=It.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(It.copy(this.direction).multiplyScalar(e).add(this.origin),It.distanceToSquared(t))}distanceSqToSegment(t,e,q,n){Pt.copy(t).add(e).multiplyScalar(.5),Bt.copy(e).sub(t).normalize(),kt.copy(this.origin).sub(Pt);const i=.5*t.distanceTo(e),r=-this.direction.dot(Bt),o=kt.dot(this.direction),a=-kt.dot(Bt),s=kt.lengthSq(),l=Math.abs(1-r*r);let c,h,u,m;if(l>0)if(c=r*a-o,h=r*o-a,m=i*l,c>=0)if(h>=-m)if(h<=m){const t=1/l;c*=t,h*=t,u=c*(c+r*h+2*o)+h*(r*c+h+2*a)+s}else h=i,c=Math.max(0,-(r*h+o)),u=-c*c+h*(h+2*a)+s;else h=-i,c=Math.max(0,-(r*h+o)),u=-c*c+h*(h+2*a)+s;else h<=-m?(c=Math.max(0,-(-r*i+o)),h=c>0?-i:Math.min(Math.max(-i,-a),i),u=-c*c+h*(h+2*a)+s):h<=m?(c=0,h=Math.min(Math.max(-i,-a),i),u=h*(h+2*a)+s):(c=Math.max(0,-(r*i+o)),h=c>0?i:Math.min(Math.max(-i,-a),i),u=-c*c+h*(h+2*a)+s);else h=r>0?-i:i,c=Math.max(0,-(r*h+o)),u=-c*c+h*(h+2*a)+s;return q&&q.copy(this.direction).multiplyScalar(c).add(this.origin),n&&n.copy(Bt).multiplyScalar(h).add(Pt),u}intersectSphere(t,e){It.subVectors(t.center,this.origin);const q=It.dot(this.direction),n=It.dot(It)-q*q,i=t.radius*t.radius;if(n>i)return null;const r=Math.sqrt(i-n),o=q-r,a=q+r;return o<0&&a<0?null:o<0?this.at(a,e):this.at(o,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const q=-(this.origin.dot(t.normal)+t.constant)/e;return q>=0?q:null}intersectPlane(t,e){const q=this.distanceToPlane(t);return null===q?null:this.at(q,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let q,n,i,r,o,a;const s=1/this.direction.x,l=1/this.direction.y,c=1/this.direction.z,h=this.origin;return s>=0?(q=(t.min.x-h.x)*s,n=(t.max.x-h.x)*s):(q=(t.max.x-h.x)*s,n=(t.min.x-h.x)*s),l>=0?(i=(t.min.y-h.y)*l,r=(t.max.y-h.y)*l):(i=(t.max.y-h.y)*l,r=(t.min.y-h.y)*l),q>r||i>n?null:((i>q||q!=q)&&(q=i),(r<n||n!=n)&&(n=r),c>=0?(o=(t.min.z-h.z)*c,a=(t.max.z-h.z)*c):(o=(t.max.z-h.z)*c,a=(t.min.z-h.z)*c),q>a||o>n?null:((o>q||q!=q)&&(q=o),(a<n||n!=n)&&(n=a),n<0?null:this.at(q>=0?q:n,e)))}intersectsBox(t){return null!==this.intersectBox(t,It)}intersectTriangle(t,e,q,n,i){Dt.subVectors(e,t),Ot.subVectors(q,t),Nt.crossVectors(Dt,Ot);let r,o=this.direction.dot(Nt);if(o>0){if(n)return null;r=1}else{if(!(o<0))return null;r=-1,o=-o}kt.subVectors(this.origin,t);const a=r*this.direction.dot(Ot.crossVectors(kt,Ot));if(a<0)return null;const s=r*this.direction.dot(Dt.cross(kt));if(s<0)return null;if(a+s>o)return null;const l=-r*kt.dot(Nt);return l<0?null:this.at(l/o,i)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Ht{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,q,n,i,r,o,a,s,l,c,h,u,m,d,p){const f=this.elements;return f[0]=t,f[4]=e,f[8]=q,f[12]=n,f[1]=i,f[5]=r,f[9]=o,f[13]=a,f[2]=s,f[6]=l,f[10]=c,f[14]=h,f[3]=u,f[7]=m,f[11]=d,f[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Ht).fromArray(this.elements)}copy(t){const e=this.elements,q=t.elements;return e[0]=q[0],e[1]=q[1],e[2]=q[2],e[3]=q[3],e[4]=q[4],e[5]=q[5],e[6]=q[6],e[7]=q[7],e[8]=q[8],e[9]=q[9],e[10]=q[10],e[11]=q[11],e[12]=q[12],e[13]=q[13],e[14]=q[14],e[15]=q[15],this}copyPosition(t){const e=this.elements,q=t.elements;return e[12]=q[12],e[13]=q[13],e[14]=q[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,q){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),q.setFromMatrixColumn(this,2),this}makeBasis(t,e,q){return this.set(t.x,e.x,q.x,0,t.y,e.y,q.y,0,t.z,e.z,q.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,q=t.elements,n=1/Ut.setFromMatrixColumn(t,0).length(),i=1/Ut.setFromMatrixColumn(t,1).length(),r=1/Ut.setFromMatrixColumn(t,2).length();return e[0]=q[0]*n,e[1]=q[1]*n,e[2]=q[2]*n,e[3]=0,e[4]=q[4]*i,e[5]=q[5]*i,e[6]=q[6]*i,e[7]=0,e[8]=q[8]*r,e[9]=q[9]*r,e[10]=q[10]*r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,q=t.x,n=t.y,i=t.z,r=Math.cos(q),o=Math.sin(q),a=Math.cos(n),s=Math.sin(n),l=Math.cos(i),c=Math.sin(i);if("XYZ"===t.order){const t=r*l,q=r*c,n=o*l,i=o*c;e[0]=a*l,e[4]=-a*c,e[8]=s,e[1]=q+n*s,e[5]=t-i*s,e[9]=-o*a,e[2]=i-t*s,e[6]=n+q*s,e[10]=r*a}else if("YXZ"===t.order){const t=a*l,q=a*c,n=s*l,i=s*c;e[0]=t+i*o,e[4]=n*o-q,e[8]=r*s,e[1]=r*c,e[5]=r*l,e[9]=-o,e[2]=q*o-n,e[6]=i+t*o,e[10]=r*a}else if("ZXY"===t.order){const t=a*l,q=a*c,n=s*l,i=s*c;e[0]=t-i*o,e[4]=-r*c,e[8]=n+q*o,e[1]=q+n*o,e[5]=r*l,e[9]=i-t*o,e[2]=-r*s,e[6]=o,e[10]=r*a}else if("ZYX"===t.order){const t=r*l,q=r*c,n=o*l,i=o*c;e[0]=a*l,e[4]=n*s-q,e[8]=t*s+i,e[1]=a*c,e[5]=i*s+t,e[9]=q*s-n,e[2]=-s,e[6]=o*a,e[10]=r*a}else if("YZX"===t.order){const t=r*a,q=r*s,n=o*a,i=o*s;e[0]=a*l,e[4]=i-t*c,e[8]=n*c+q,e[1]=c,e[5]=r*l,e[9]=-o*l,e[2]=-s*l,e[6]=q*c+n,e[10]=t-i*c}else if("XZY"===t.order){const t=r*a,q=r*s,n=o*a,i=o*s;e[0]=a*l,e[4]=-c,e[8]=s*l,e[1]=t*c+i,e[5]=r*l,e[9]=q*c-n,e[2]=n*c-q,e[6]=o*l,e[10]=i*c+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Gt,t,Wt)}lookAt(t,e,q){const n=this.elements;return Xt.subVectors(t,e),0===Xt.lengthSq()&&(Xt.z=1),Xt.normalize(),jt.crossVectors(q,Xt),0===jt.lengthSq()&&(1===Math.abs(q.z)?Xt.x+=1e-4:Xt.z+=1e-4,Xt.normalize(),jt.crossVectors(q,Xt)),jt.normalize(),Zt.crossVectors(Xt,jt),n[0]=jt.x,n[4]=Zt.x,n[8]=Xt.x,n[1]=jt.y,n[5]=Zt.y,n[9]=Xt.y,n[2]=jt.z,n[6]=Zt.z,n[10]=Xt.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const q=t.elements,n=e.elements,i=this.elements,r=q[0],o=q[4],a=q[8],s=q[12],l=q[1],c=q[5],h=q[9],u=q[13],m=q[2],d=q[6],p=q[10],f=q[14],g=q[3],x=q[7],v=q[11],y=q[15],_=n[0],b=n[4],A=n[8],w=n[12],M=n[1],S=n[5],E=n[9],C=n[13],T=n[2],z=n[6],L=n[10],R=n[14],I=n[3],P=n[7],B=n[11],k=n[15];return i[0]=r*_+o*M+a*T+s*I,i[4]=r*b+o*S+a*z+s*P,i[8]=r*A+o*E+a*L+s*B,i[12]=r*w+o*C+a*R+s*k,i[1]=l*_+c*M+h*T+u*I,i[5]=l*b+c*S+h*z+u*P,i[9]=l*A+c*E+h*L+u*B,i[13]=l*w+c*C+h*R+u*k,i[2]=m*_+d*M+p*T+f*I,i[6]=m*b+d*S+p*z+f*P,i[10]=m*A+d*E+p*L+f*B,i[14]=m*w+d*C+p*R+f*k,i[3]=g*_+x*M+v*T+y*I,i[7]=g*b+x*S+v*z+y*P,i[11]=g*A+x*E+v*L+y*B,i[15]=g*w+x*C+v*R+y*k,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],q=t[4],n=t[8],i=t[12],r=t[1],o=t[5],a=t[9],s=t[13],l=t[2],c=t[6],h=t[10],u=t[14];return t[3]*(+i*a*c-n*s*c-i*o*h+q*s*h+n*o*u-q*a*u)+t[7]*(+e*a*u-e*s*h+i*r*h-n*r*u+n*s*l-i*a*l)+t[11]*(+e*s*c-e*o*u-i*r*c+q*r*u+i*o*l-q*s*l)+t[15]*(-n*o*l-e*a*c+e*o*h+n*r*c-q*r*h+q*a*l)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,q){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=q),this}invert(){const t=this.elements,e=t[0],q=t[1],n=t[2],i=t[3],r=t[4],o=t[5],a=t[6],s=t[7],l=t[8],c=t[9],h=t[10],u=t[11],m=t[12],d=t[13],p=t[14],f=t[15],g=c*p*s-d*h*s+d*a*u-o*p*u-c*a*f+o*h*f,x=m*h*s-l*p*s-m*a*u+r*p*u+l*a*f-r*h*f,v=l*d*s-m*c*s+m*o*u-r*d*u-l*o*f+r*c*f,y=m*c*a-l*d*a-m*o*h+r*d*h+l*o*p-r*c*p,_=e*g+q*x+n*v+i*y;if(0===_)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/_;return t[0]=g*b,t[1]=(d*h*i-c*p*i-d*n*u+q*p*u+c*n*f-q*h*f)*b,t[2]=(o*p*i-d*a*i+d*n*s-q*p*s-o*n*f+q*a*f)*b,t[3]=(c*a*i-o*h*i-c*n*s+q*h*s+o*n*u-q*a*u)*b,t[4]=x*b,t[5]=(l*p*i-m*h*i+m*n*u-e*p*u-l*n*f+e*h*f)*b,t[6]=(m*a*i-r*p*i-m*n*s+e*p*s+r*n*f-e*a*f)*b,t[7]=(r*h*i-l*a*i+l*n*s-e*h*s-r*n*u+e*a*u)*b,t[8]=v*b,t[9]=(m*c*i-l*d*i-m*q*u+e*d*u+l*q*f-e*c*f)*b,t[10]=(r*d*i-m*o*i+m*q*s-e*d*s-r*q*f+e*o*f)*b,t[11]=(l*o*i-r*c*i-l*q*s+e*c*s+r*q*u-e*o*u)*b,t[12]=y*b,t[13]=(l*d*n-m*c*n+m*q*h-e*d*h-l*q*p+e*c*p)*b,t[14]=(m*o*n-r*d*n-m*q*a+e*d*a+r*q*p-e*o*p)*b,t[15]=(r*c*n-l*o*n+l*q*a-e*c*a-r*q*h+e*o*h)*b,this}scale(t){const e=this.elements,q=t.x,n=t.y,i=t.z;return e[0]*=q,e[4]*=n,e[8]*=i,e[1]*=q,e[5]*=n,e[9]*=i,e[2]*=q,e[6]*=n,e[10]*=i,e[3]*=q,e[7]*=n,e[11]*=i,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],q=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,q,n))}makeTranslation(t,e,q){return this.set(1,0,0,t,0,1,0,e,0,0,1,q,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),q=Math.sin(t);return this.set(1,0,0,0,0,e,-q,0,0,q,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),q=Math.sin(t);return this.set(e,0,q,0,0,1,0,0,-q,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),q=Math.sin(t);return this.set(e,-q,0,0,q,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const q=Math.cos(e),n=Math.sin(e),i=1-q,r=t.x,o=t.y,a=t.z,s=i*r,l=i*o;return this.set(s*r+q,s*o-n*a,s*a+n*o,0,s*o+n*a,l*o+q,l*a-n*r,0,s*a-n*o,l*a+n*r,i*a*a+q,0,0,0,0,1),this}makeScale(t,e,q){return this.set(t,0,0,0,0,e,0,0,0,0,q,0,0,0,0,1),this}makeShear(t,e,q,n,i,r){return this.set(1,q,i,0,t,1,r,0,e,n,1,0,0,0,0,1),this}compose(t,e,q){const n=this.elements,i=e._x,r=e._y,o=e._z,a=e._w,s=i+i,l=r+r,c=o+o,h=i*s,u=i*l,m=i*c,d=r*l,p=r*c,f=o*c,g=a*s,x=a*l,v=a*c,y=q.x,_=q.y,b=q.z;return n[0]=(1-(d+f))*y,n[1]=(u+v)*y,n[2]=(m-x)*y,n[3]=0,n[4]=(u-v)*_,n[5]=(1-(h+f))*_,n[6]=(p+g)*_,n[7]=0,n[8]=(m+x)*b,n[9]=(p-g)*b,n[10]=(1-(h+d))*b,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,q){const n=this.elements;let i=Ut.set(n[0],n[1],n[2]).length();const r=Ut.set(n[4],n[5],n[6]).length(),o=Ut.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),t.x=n[12],t.y=n[13],t.z=n[14],Vt.copy(this);const a=1/i,s=1/r,l=1/o;return Vt.elements[0]*=a,Vt.elements[1]*=a,Vt.elements[2]*=a,Vt.elements[4]*=s,Vt.elements[5]*=s,Vt.elements[6]*=s,Vt.elements[8]*=l,Vt.elements[9]*=l,Vt.elements[10]*=l,e.setFromRotationMatrix(Vt),q.x=i,q.y=r,q.z=o,this}makePerspective(t,e,q,n,i,r){void 0===r&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const o=this.elements,a=2*i/(e-t),s=2*i/(q-n),l=(e+t)/(e-t),c=(q+n)/(q-n),h=-(r+i)/(r-i),u=-2*r*i/(r-i);return o[0]=a,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=s,o[9]=c,o[13]=0,o[2]=0,o[6]=0,o[10]=h,o[14]=u,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,q,n,i,r){const o=this.elements,a=1/(e-t),s=1/(q-n),l=1/(r-i),c=(e+t)*a,h=(q+n)*s,u=(r+i)*l;return o[0]=2*a,o[4]=0,o[8]=0,o[12]=-c,o[1]=0,o[5]=2*s,o[9]=0,o[13]=-h,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-u,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,q=t.elements;for(let t=0;t<16;t++)if(e[t]!==q[t])return!1;return!0}fromArray(t,e=0){for(let q=0;q<16;q++)this.elements[q]=t[q+e];return this}toArray(t=[],e=0){const q=this.elements;return t[e]=q[0],t[e+1]=q[1],t[e+2]=q[2],t[e+3]=q[3],t[e+4]=q[4],t[e+5]=q[5],t[e+6]=q[6],t[e+7]=q[7],t[e+8]=q[8],t[e+9]=q[9],t[e+10]=q[10],t[e+11]=q[11],t[e+12]=q[12],t[e+13]=q[13],t[e+14]=q[14],t[e+15]=q[15],t}}Ht.prototype.isMatrix4=!0;const Ut=new ct,Vt=new Ht,Gt=new ct(0,0,0),Wt=new ct(1,1,1),jt=new ct,Zt=new ct,Xt=new ct,Yt=new Ht,Jt=new lt;class $t{constructor(t=0,e=0,q=0,n=$t.DefaultOrder){this._x=t,this._y=e,this._z=q,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,q,n=this._order){return this._x=t,this._y=e,this._z=q,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,q=!0){const n=t.elements,i=n[0],r=n[4],o=n[8],a=n[1],s=n[5],l=n[9],c=n[2],h=n[6],u=n[10];switch(e){case"XYZ":this._y=Math.asin(G(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-l,u),this._z=Math.atan2(-r,i)):(this._x=Math.atan2(h,s),this._z=0);break;case"YXZ":this._x=Math.asin(-G(l,-1,1)),Math.abs(l)<.9999999?(this._y=Math.atan2(o,u),this._z=Math.atan2(a,s)):(this._y=Math.atan2(-c,i),this._z=0);break;case"ZXY":this._x=Math.asin(G(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-c,u),this._z=Math.atan2(-r,s)):(this._y=0,this._z=Math.atan2(a,i));break;case"ZYX":this._y=Math.asin(-G(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(h,u),this._z=Math.atan2(a,i)):(this._x=0,this._z=Math.atan2(-r,s));break;case"YZX":this._z=Math.asin(G(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-l,s),this._y=Math.atan2(-c,i)):(this._x=0,this._y=Math.atan2(o,u));break;case"XZY":this._z=Math.asin(-G(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(h,s),this._y=Math.atan2(o,i)):(this._x=Math.atan2(-l,u),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===q&&this._onChangeCallback(),this}setFromQuaternion(t,e,q){return Yt.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Yt,e,q)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Jt.setFromEuler(this),this.setFromQuaternion(Jt,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new ct(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}$t.prototype.isEuler=!0,$t.DefaultOrder="XYZ",$t.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Kt{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}}let Qt=0;const te=new ct,ee=new lt,qe=new Ht,ne=new ct,ie=new ct,re=new ct,oe=new lt,ae=new ct(1,0,0),se=new ct(0,1,0),le=new ct(0,0,1),ce={type:"added"},he={type:"removed"};class ue extends D{constructor(){super(),Object.defineProperty(this,"id",{value:Qt++}),this.uuid=V(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ue.DefaultUp.clone();const t=new ct,e=new $t,q=new lt,n=new ct(1,1,1);e._onChange((function(){q.setFromEuler(e,!1)})),q._onChange((function(){e.setFromQuaternion(q,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:q},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Ht},normalMatrix:{value:new $}}),this.matrix=new Ht,this.matrixWorld=new Ht,this.matrixAutoUpdate=ue.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Kt,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return ee.setFromAxisAngle(t,e),this.quaternion.multiply(ee),this}rotateOnWorldAxis(t,e){return ee.setFromAxisAngle(t,e),this.quaternion.premultiply(ee),this}rotateX(t){return this.rotateOnAxis(ae,t)}rotateY(t){return this.rotateOnAxis(se,t)}rotateZ(t){return this.rotateOnAxis(le,t)}translateOnAxis(t,e){return te.copy(t).applyQuaternion(this.quaternion),this.position.add(te.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(ae,t)}translateY(t){return this.translateOnAxis(se,t)}translateZ(t){return this.translateOnAxis(le,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(qe.copy(this.matrixWorld).invert())}lookAt(t,e,q){t.isVector3?ne.copy(t):ne.set(t,e,q);const n=this.parent;this.updateWorldMatrix(!0,!1),ie.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?qe.lookAt(ie,ne,this.up):qe.lookAt(ne,ie,this.up),this.quaternion.setFromRotationMatrix(qe),n&&(qe.extractRotation(n.matrixWorld),ee.setFromRotationMatrix(qe),this.quaternion.premultiply(ee.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(ce)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(he)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(he)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),qe.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),qe.multiply(t.parent.matrixWorld)),t.applyMatrix4(qe),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let q=0,n=this.children.length;q<n;q++){const n=this.children[q].getObjectByProperty(t,e);if(void 0!==n)return n}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ie,t,re),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ie,oe,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let q=0,n=e.length;q<n;q++)e[q].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let q=0,n=e.length;q<n;q++)e[q].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let q=0,n=e.length;q<n;q++)e[q].updateMatrixWorld(t)}updateWorldMatrix(t,e){const q=this.parent;if(!0===t&&null!==q&&q.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,q=t.length;e<q;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||"string"==typeof t,q={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},q.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};function i(e,q){return void 0===e[q.uuid]&&(e[q.uuid]=q.toJSON(t)),q.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(n.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=i(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const q=e.shapes;if(Array.isArray(q))for(let e=0,n=q.length;e<n;e++){const n=q[e];i(t.shapes,n)}else i(t.shapes,q)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(i(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let q=0,n=this.material.length;q<n;q++)e.push(i(t.materials,this.material[q]));n.material=e}else n.material=i(t.materials,this.material);if(this.children.length>0){n.children=[];for(let e=0;e<this.children.length;e++)n.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let e=0;e<this.animations.length;e++){const q=this.animations[e];n.animations.push(i(t.animations,q))}}if(e){const e=r(t.geometries),n=r(t.materials),i=r(t.textures),o=r(t.images),a=r(t.shapes),s=r(t.skeletons),l=r(t.animations);e.length>0&&(q.geometries=e),n.length>0&&(q.materials=n),i.length>0&&(q.textures=i),o.length>0&&(q.images=o),a.length>0&&(q.shapes=a),s.length>0&&(q.skeletons=s),l.length>0&&(q.animations=l)}return q.object=n,q;function r(t){const e=[];for(const q in t){const n=t[q];delete n.metadata,e.push(n)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const q=t.children[e];this.add(q.clone())}return this}}ue.DefaultUp=new ct(0,1,0),ue.DefaultMatrixAutoUpdate=!0,ue.prototype.isObject3D=!0;const me=new ct,de=new ct,pe=new ct,fe=new ct,ge=new ct,xe=new ct,ve=new ct,ye=new ct,_e=new ct,be=new ct;class Ae{constructor(t=new ct,e=new ct,q=new ct){this.a=t,this.b=e,this.c=q}static getNormal(t,e,q,n){n.subVectors(q,e),me.subVectors(t,e),n.cross(me);const i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)}static getBarycoord(t,e,q,n,i){me.subVectors(n,e),de.subVectors(q,e),pe.subVectors(t,e);const r=me.dot(me),o=me.dot(de),a=me.dot(pe),s=de.dot(de),l=de.dot(pe),c=r*s-o*o;if(0===c)return i.set(-2,-1,-1);const h=1/c,u=(s*a-o*l)*h,m=(r*l-o*a)*h;return i.set(1-u-m,m,u)}static containsPoint(t,e,q,n){return this.getBarycoord(t,e,q,n,fe),fe.x>=0&&fe.y>=0&&fe.x+fe.y<=1}static getUV(t,e,q,n,i,r,o,a){return this.getBarycoord(t,e,q,n,fe),a.set(0,0),a.addScaledVector(i,fe.x),a.addScaledVector(r,fe.y),a.addScaledVector(o,fe.z),a}static isFrontFacing(t,e,q,n){return me.subVectors(q,e),de.subVectors(t,e),me.cross(de).dot(n)<0}set(t,e,q){return this.a.copy(t),this.b.copy(e),this.c.copy(q),this}setFromPointsAndIndices(t,e,q,n){return this.a.copy(t[e]),this.b.copy(t[q]),this.c.copy(t[n]),this}setFromAttributeAndIndices(t,e,q,n){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,q),this.c.fromBufferAttribute(t,n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return me.subVectors(this.c,this.b),de.subVectors(this.a,this.b),.5*me.cross(de).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Ae.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Ae.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,q,n,i){return Ae.getUV(t,this.a,this.b,this.c,e,q,n,i)}containsPoint(t){return Ae.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Ae.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const q=this.a,n=this.b,i=this.c;let r,o;ge.subVectors(n,q),xe.subVectors(i,q),ye.subVectors(t,q);const a=ge.dot(ye),s=xe.dot(ye);if(a<=0&&s<=0)return e.copy(q);_e.subVectors(t,n);const l=ge.dot(_e),c=xe.dot(_e);if(l>=0&&c<=l)return e.copy(n);const h=a*c-l*s;if(h<=0&&a>=0&&l<=0)return r=a/(a-l),e.copy(q).addScaledVector(ge,r);be.subVectors(t,i);const u=ge.dot(be),m=xe.dot(be);if(m>=0&&u<=m)return e.copy(i);const d=u*s-a*m;if(d<=0&&s>=0&&m<=0)return o=s/(s-m),e.copy(q).addScaledVector(xe,o);const p=l*m-u*c;if(p<=0&&c-l>=0&&u-m>=0)return ve.subVectors(i,n),o=(c-l)/(c-l+(u-m)),e.copy(n).addScaledVector(ve,o);const f=1/(p+d+h);return r=d*f,o=h*f,e.copy(q).addScaledVector(ge,r).addScaledVector(xe,o)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let we=0;class Me extends D{constructor(){super(),Object.defineProperty(this,"id",{value:we++}),this.uuid=V(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.format=y,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=n,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=I,this.stencilZFail=I,this.stencilZPass=I,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const q=t[e];if(void 0===q){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if("shading"===e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===q;continue}const n=this[e];void 0!==n?n&&n.isColor?n.set(q):n&&n.isVector3&&q&&q.isVector3?n.copy(q):this[e]=q:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const q={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(t){const e=[];for(const q in t){const n=t[q];delete n.metadata,e.push(n)}return e}if(q.uuid=this.uuid,q.type=this.type,""!==this.name&&(q.name=this.name),this.color&&this.color.isColor&&(q.color=this.color.getHex()),void 0!==this.roughness&&(q.roughness=this.roughness),void 0!==this.metalness&&(q.metalness=this.metalness),void 0!==this.sheen&&(q.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(q.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(q.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(q.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(q.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(q.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(q.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(q.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(q.shininess=this.shininess),void 0!==this.clearcoat&&(q.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(q.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(q.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(q.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(q.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,q.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(q.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(q.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(q.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(q.lightMap=this.lightMap.toJSON(t).uuid,q.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(q.aoMap=this.aoMap.toJSON(t).uuid,q.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(q.bumpMap=this.bumpMap.toJSON(t).uuid,q.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(q.normalMap=this.normalMap.toJSON(t).uuid,q.normalMapType=this.normalMapType,q.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(q.displacementMap=this.displacementMap.toJSON(t).uuid,q.displacementScale=this.displacementScale,q.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(q.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(q.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(q.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(q.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(q.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(q.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(q.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(q.combine=this.combine)),void 0!==this.envMapIntensity&&(q.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(q.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(q.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(q.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(q.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(q.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(q.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(q.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(q.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(q.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(q.size=this.size),null!==this.shadowSide&&(q.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(q.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(q.blending=this.blending),0!==this.side&&(q.side=this.side),this.vertexColors&&(q.vertexColors=!0),this.opacity<1&&(q.opacity=this.opacity),this.format!==y&&(q.format=this.format),!0===this.transparent&&(q.transparent=this.transparent),q.depthFunc=this.depthFunc,q.depthTest=this.depthTest,q.depthWrite=this.depthWrite,q.colorWrite=this.colorWrite,q.stencilWrite=this.stencilWrite,q.stencilWriteMask=this.stencilWriteMask,q.stencilFunc=this.stencilFunc,q.stencilRef=this.stencilRef,q.stencilFuncMask=this.stencilFuncMask,q.stencilFail=this.stencilFail,q.stencilZFail=this.stencilZFail,q.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(q.rotation=this.rotation),!0===this.polygonOffset&&(q.polygonOffset=!0),0!==this.polygonOffsetFactor&&(q.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(q.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(q.linewidth=this.linewidth),void 0!==this.dashSize&&(q.dashSize=this.dashSize),void 0!==this.gapSize&&(q.gapSize=this.gapSize),void 0!==this.scale&&(q.scale=this.scale),!0===this.dithering&&(q.dithering=!0),this.alphaTest>0&&(q.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(q.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(q.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(q.wireframe=this.wireframe),this.wireframeLinewidth>1&&(q.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(q.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(q.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(q.flatShading=this.flatShading),!1===this.visible&&(q.visible=!1),!1===this.toneMapped&&(q.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(q.userData=this.userData),e){const e=n(t.textures),i=n(t.images);e.length>0&&(q.textures=e),i.length>0&&(q.images=i)}return q}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.format=t.format,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let q=null;if(null!==e){const t=e.length;q=new Array(t);for(let n=0;n!==t;++n)q[n]=e[n].clone()}return this.clippingPlanes=q,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}Me.prototype.isMaterial=!0;const Se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Ee={h:0,s:0,l:0},Ce={h:0,s:0,l:0};function Te(t,e,q){return q<0&&(q+=1),q>1&&(q-=1),q<1/6?t+6*(e-t)*q:q<.5?e:q<2/3?t+6*(e-t)*(2/3-q):t}function ze(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Le(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class Re{constructor(t,e,q){return void 0===e&&void 0===q?this.set(t):this.setRGB(t,e,q)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,q){return this.r=t,this.g=e,this.b=q,this}setHSL(t,e,q){if(t=W(t,1),e=G(e,0,1),q=G(q,0,1),0===e)this.r=this.g=this.b=q;else{const n=q<=.5?q*(1+e):q+e-q*e,i=2*q-n;this.r=Te(i,n,t+1/3),this.g=Te(i,n,t),this.b=Te(i,n,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let q;if(q=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const n=q[1],i=q[2];switch(n){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i)){const q=parseFloat(t[1])/360,n=parseInt(t[2],10)/100,i=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(q,n,i)}}}else if(q=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=q[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Se[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const q=e>0?1/e:1;return this.r=Math.pow(t.r,q),this.g=Math.pow(t.g,q),this.b=Math.pow(t.b,q),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=ze(t.r),this.g=ze(t.g),this.b=ze(t.b),this}copyLinearToSRGB(t){return this.r=Le(t.r),this.g=Le(t.g),this.b=Le(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,q=this.g,n=this.b,i=Math.max(e,q,n),r=Math.min(e,q,n);let o,a;const s=(r+i)/2;if(r===i)o=0,a=0;else{const t=i-r;switch(a=s<=.5?t/(i+r):t/(2-i-r),i){case e:o=(q-n)/t+(q<n?6:0);break;case q:o=(n-e)/t+2;break;case n:o=(e-q)/t+4}o/=6}return t.h=o,t.s=a,t.l=s,t}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(t,e,q){return this.getHSL(Ee),Ee.h+=t,Ee.s+=e,Ee.l+=q,this.setHSL(Ee.h,Ee.s,Ee.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,q){return this.r=t.r+(e.r-t.r)*q,this.g=t.g+(e.g-t.g)*q,this.b=t.b+(e.b-t.b)*q,this}lerpHSL(t,e){this.getHSL(Ee),t.getHSL(Ce);const q=j(Ee.h,Ce.h,e),n=j(Ee.s,Ce.s,e),i=j(Ee.l,Ce.l,e);return this.setHSL(q,n,i),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Re.NAMES=Se,Re.prototype.isColor=!0,Re.prototype.r=1,Re.prototype.g=1,Re.prototype.b=1;class Ie extends Me{constructor(t){super(),this.type="MeshBasicMaterial",this.color=new Re(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}Ie.prototype.isMeshBasicMaterial=!0;const Pe=new ct,Be=new J;class ke{constructor(t,e,q){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===q,this.usage=P,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,q){t*=this.itemSize,q*=e.itemSize;for(let n=0,i=this.itemSize;n<i;n++)this.array[t+n]=e.array[q+n];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let q=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),i=new Re),e[q++]=i.r,e[q++]=i.g,e[q++]=i.b}return this}copyVector2sArray(t){const e=this.array;let q=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),i=new J),e[q++]=i.x,e[q++]=i.y}return this}copyVector3sArray(t){const e=this.array;let q=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),i=new ct),e[q++]=i.x,e[q++]=i.y,e[q++]=i.z}return this}copyVector4sArray(t){const e=this.array;let q=0;for(let n=0,i=t.length;n<i;n++){let i=t[n];void 0===i&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),i=new ot),e[q++]=i.x,e[q++]=i.y,e[q++]=i.z,e[q++]=i.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,q=this.count;e<q;e++)Be.fromBufferAttribute(this,e),Be.applyMatrix3(t),this.setXY(e,Be.x,Be.y);else if(3===this.itemSize)for(let e=0,q=this.count;e<q;e++)Pe.fromBufferAttribute(this,e),Pe.applyMatrix3(t),this.setXYZ(e,Pe.x,Pe.y,Pe.z);return this}applyMatrix4(t){for(let e=0,q=this.count;e<q;e++)Pe.x=this.getX(e),Pe.y=this.getY(e),Pe.z=this.getZ(e),Pe.applyMatrix4(t),this.setXYZ(e,Pe.x,Pe.y,Pe.z);return this}applyNormalMatrix(t){for(let e=0,q=this.count;e<q;e++)Pe.x=this.getX(e),Pe.y=this.getY(e),Pe.z=this.getZ(e),Pe.applyNormalMatrix(t),this.setXYZ(e,Pe.x,Pe.y,Pe.z);return this}transformDirection(t){for(let e=0,q=this.count;e<q;e++)Pe.x=this.getX(e),Pe.y=this.getY(e),Pe.z=this.getZ(e),Pe.transformDirection(t),this.setXYZ(e,Pe.x,Pe.y,Pe.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,q){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=q,this}setXYZ(t,e,q,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=q,this.array[t+2]=n,this}setXYZW(t,e,q,n,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=q,this.array[t+2]=n,this.array[t+3]=i,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==P&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}ke.prototype.isBufferAttribute=!0;class De extends ke{constructor(t,e,q){super(new Uint16Array(t),e,q)}}class Oe extends ke{constructor(t,e,q){super(new Uint32Array(t),e,q)}}(class extends ke{constructor(t,e,q){super(new Uint16Array(t),e,q)}}).prototype.isFloat16BufferAttribute=!0;class Ne extends ke{constructor(t,e,q){super(new Float32Array(t),e,q)}}let Fe=0;const He=new Ht,Ue=new ue,Ve=new ct,Ge=new mt,We=new mt,je=new ct;class Ze extends D{constructor(){super(),Object.defineProperty(this,"id",{value:Fe++}),this.uuid=V(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(K(t)>65535?Oe:De)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,q=0){this.groups.push({start:t,count:e,materialIndex:q})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const q=this.attributes.normal;if(void 0!==q){const e=(new $).getNormalMatrix(t);q.applyNormalMatrix(e),q.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(t),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return He.makeRotationFromQuaternion(t),this.applyMatrix4(He),this}rotateX(t){return He.makeRotationX(t),this.applyMatrix4(He),this}rotateY(t){return He.makeRotationY(t),this.applyMatrix4(He),this}rotateZ(t){return He.makeRotationZ(t),this.applyMatrix4(He),this}translate(t,e,q){return He.makeTranslation(t,e,q),this.applyMatrix4(He),this}scale(t,e,q){return He.makeScale(t,e,q),this.applyMatrix4(He),this}lookAt(t){return Ue.lookAt(t),Ue.updateMatrix(),this.applyMatrix4(Ue.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ve).negate(),this.translate(Ve.x,Ve.y,Ve.z),this}setFromPoints(t){const e=[];for(let q=0,n=t.length;q<n;q++){const n=t[q];e.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new Ne(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new mt);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new ct(-1/0,-1/0,-1/0),new ct(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,q=e.length;t<q;t++){const q=e[t];Ge.setFromBufferAttribute(q),this.morphTargetsRelative?(je.addVectors(this.boundingBox.min,Ge.min),this.boundingBox.expandByPoint(je),je.addVectors(this.boundingBox.max,Ge.max),this.boundingBox.expandByPoint(je)):(this.boundingBox.expandByPoint(Ge.min),this.boundingBox.expandByPoint(Ge.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Rt);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new ct,1/0);if(t){const q=this.boundingSphere.center;if(Ge.setFromBufferAttribute(t),e)for(let t=0,q=e.length;t<q;t++){const q=e[t];We.setFromBufferAttribute(q),this.morphTargetsRelative?(je.addVectors(Ge.min,We.min),Ge.expandByPoint(je),je.addVectors(Ge.max,We.max),Ge.expandByPoint(je)):(Ge.expandByPoint(We.min),Ge.expandByPoint(We.max))}Ge.getCenter(q);let n=0;for(let e=0,i=t.count;e<i;e++)je.fromBufferAttribute(t,e),n=Math.max(n,q.distanceToSquared(je));if(e)for(let i=0,r=e.length;i<r;i++){const r=e[i],o=this.morphTargetsRelative;for(let e=0,i=r.count;e<i;e++)je.fromBufferAttribute(r,e),o&&(Ve.fromBufferAttribute(t,e),je.add(Ve)),n=Math.max(n,q.distanceToSquared(je))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const q=t.array,n=e.position.array,i=e.normal.array,r=e.uv.array,o=n.length/3;void 0===e.tangent&&this.setAttribute("tangent",new ke(new Float32Array(4*o),4));const a=e.tangent.array,s=[],l=[];for(let t=0;t<o;t++)s[t]=new ct,l[t]=new ct;const c=new ct,h=new ct,u=new ct,m=new J,d=new J,p=new J,f=new ct,g=new ct;function x(t,e,q){c.fromArray(n,3*t),h.fromArray(n,3*e),u.fromArray(n,3*q),m.fromArray(r,2*t),d.fromArray(r,2*e),p.fromArray(r,2*q),h.sub(c),u.sub(c),d.sub(m),p.sub(m);const i=1/(d.x*p.y-p.x*d.y);isFinite(i)&&(f.copy(h).multiplyScalar(p.y).addScaledVector(u,-d.y).multiplyScalar(i),g.copy(u).multiplyScalar(d.x).addScaledVector(h,-p.x).multiplyScalar(i),s[t].add(f),s[e].add(f),s[q].add(f),l[t].add(g),l[e].add(g),l[q].add(g))}let v=this.groups;0===v.length&&(v=[{start:0,count:q.length}]);for(let t=0,e=v.length;t<e;++t){const e=v[t],n=e.start;for(let t=n,i=n+e.count;t<i;t+=3)x(q[t+0],q[t+1],q[t+2])}const y=new ct,_=new ct,b=new ct,A=new ct;function w(t){b.fromArray(i,3*t),A.copy(b);const e=s[t];y.copy(e),y.sub(b.multiplyScalar(b.dot(e))).normalize(),_.crossVectors(A,e);const q=_.dot(l[t])<0?-1:1;a[4*t]=y.x,a[4*t+1]=y.y,a[4*t+2]=y.z,a[4*t+3]=q}for(let t=0,e=v.length;t<e;++t){const e=v[t],n=e.start;for(let t=n,i=n+e.count;t<i;t+=3)w(q[t+0]),w(q[t+1]),w(q[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let q=this.getAttribute("normal");if(void 0===q)q=new ke(new Float32Array(3*e.count),3),this.setAttribute("normal",q);else for(let t=0,e=q.count;t<e;t++)q.setXYZ(t,0,0,0);const n=new ct,i=new ct,r=new ct,o=new ct,a=new ct,s=new ct,l=new ct,c=new ct;if(t)for(let h=0,u=t.count;h<u;h+=3){const u=t.getX(h+0),m=t.getX(h+1),d=t.getX(h+2);n.fromBufferAttribute(e,u),i.fromBufferAttribute(e,m),r.fromBufferAttribute(e,d),l.subVectors(r,i),c.subVectors(n,i),l.cross(c),o.fromBufferAttribute(q,u),a.fromBufferAttribute(q,m),s.fromBufferAttribute(q,d),o.add(l),a.add(l),s.add(l),q.setXYZ(u,o.x,o.y,o.z),q.setXYZ(m,a.x,a.y,a.z),q.setXYZ(d,s.x,s.y,s.z)}else for(let t=0,o=e.count;t<o;t+=3)n.fromBufferAttribute(e,t+0),i.fromBufferAttribute(e,t+1),r.fromBufferAttribute(e,t+2),l.subVectors(r,i),c.subVectors(n,i),l.cross(c),q.setXYZ(t+0,l.x,l.y,l.z),q.setXYZ(t+1,l.x,l.y,l.z),q.setXYZ(t+2,l.x,l.y,l.z);this.normalizeNormals(),q.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const q=this.attributes;for(const n in q){if(void 0===t.attributes[n])continue;const i=q[n].array,r=t.attributes[n],o=r.array,a=r.itemSize*e,s=Math.min(o.length,i.length-a);for(let t=0,e=a;t<s;t++,e++)i[e]=o[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,q=t.count;e<q;e++)je.fromBufferAttribute(t,e),je.normalize(),t.setXYZ(e,je.x,je.y,je.z)}toNonIndexed(){function t(t,e){const q=t.array,n=t.itemSize,i=t.normalized,r=new q.constructor(e.length*n);let o=0,a=0;for(let i=0,s=e.length;i<s;i++){o=t.isInterleavedBufferAttribute?e[i]*t.data.stride+t.offset:e[i]*n;for(let t=0;t<n;t++)r[a++]=q[o++]}return new ke(r,n,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Ze,q=this.index.array,n=this.attributes;for(const i in n){const r=t(n[i],q);e.setAttribute(i,r)}const i=this.morphAttributes;for(const n in i){const r=[],o=i[n];for(let e=0,n=o.length;e<n;e++){const n=t(o[e],q);r.push(n)}e.morphAttributes[n]=r}e.morphTargetsRelative=this.morphTargetsRelative;const r=this.groups;for(let t=0,q=r.length;t<q;t++){const q=r[t];e.addGroup(q.start,q.count,q.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const q in e)void 0!==e[q]&&(t[q]=e[q]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const q=this.attributes;for(const e in q){const n=q[e];t.data.attributes[e]=n.toJSON(t.data)}const n={};let i=!1;for(const e in this.morphAttributes){const q=this.morphAttributes[e],r=[];for(let e=0,n=q.length;e<n;e++){const n=q[e];r.push(n.toJSON(t.data))}r.length>0&&(n[e]=r,i=!0)}i&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const r=this.groups;r.length>0&&(t.data.groups=JSON.parse(JSON.stringify(r)));const o=this.boundingSphere;return null!==o&&(t.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const q=t.index;null!==q&&this.setIndex(q.clone(e));const n=t.attributes;for(const t in n){const q=n[t];this.setAttribute(t,q.clone(e))}const i=t.morphAttributes;for(const t in i){const q=[],n=i[t];for(let t=0,i=n.length;t<i;t++)q.push(n[t].clone(e));this.morphAttributes[t]=q}this.morphTargetsRelative=t.morphTargetsRelative;const r=t.groups;for(let t=0,e=r.length;t<e;t++){const e=r[t];this.addGroup(e.start,e.count,e.materialIndex)}const o=t.boundingBox;null!==o&&(this.boundingBox=o.clone());const a=t.boundingSphere;return null!==a&&(this.boundingSphere=a.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,void 0!==t.parameters&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}Ze.prototype.isBufferGeometry=!0;const Xe=new Ht,Ye=new Ft,Je=new Rt,$e=new ct,Ke=new ct,Qe=new ct,tq=new ct,eq=new ct,qq=new ct,nq=new ct,iq=new ct,rq=new ct,oq=new J,aq=new J,sq=new J,lq=new ct,cq=new ct;class hq extends ue{constructor(t=new Ze,e=new Ie){super(),this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,q=Object.keys(e);if(q.length>0){const t=e[q[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,q=t.length;e<q;e++){const q=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[q]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(t,e){const q=this.geometry,n=this.material,i=this.matrixWorld;if(void 0===n)return;if(null===q.boundingSphere&&q.computeBoundingSphere(),Je.copy(q.boundingSphere),Je.applyMatrix4(i),!1===t.ray.intersectsSphere(Je))return;if(Xe.copy(i).invert(),Ye.copy(t.ray).applyMatrix4(Xe),null!==q.boundingBox&&!1===Ye.intersectsBox(q.boundingBox))return;let r;if(q.isBufferGeometry){const i=q.index,o=q.attributes.position,a=q.morphAttributes.position,s=q.morphTargetsRelative,l=q.attributes.uv,c=q.attributes.uv2,h=q.groups,u=q.drawRange;if(null!==i)if(Array.isArray(n))for(let q=0,m=h.length;q<m;q++){const m=h[q],d=n[m.materialIndex];for(let q=Math.max(m.start,u.start),n=Math.min(i.count,Math.min(m.start+m.count,u.start+u.count));q<n;q+=3){const n=i.getX(q),h=i.getX(q+1),u=i.getX(q+2);r=uq(this,d,t,Ye,o,a,s,l,c,n,h,u),r&&(r.faceIndex=Math.floor(q/3),r.face.materialIndex=m.materialIndex,e.push(r))}}else for(let q=Math.max(0,u.start),h=Math.min(i.count,u.start+u.count);q<h;q+=3){const h=i.getX(q),u=i.getX(q+1),m=i.getX(q+2);r=uq(this,n,t,Ye,o,a,s,l,c,h,u,m),r&&(r.faceIndex=Math.floor(q/3),e.push(r))}else if(void 0!==o)if(Array.isArray(n))for(let q=0,i=h.length;q<i;q++){const i=h[q],m=n[i.materialIndex];for(let q=Math.max(i.start,u.start),n=Math.min(o.count,Math.min(i.start+i.count,u.start+u.count));q<n;q+=3)r=uq(this,m,t,Ye,o,a,s,l,c,q,q+1,q+2),r&&(r.faceIndex=Math.floor(q/3),r.face.materialIndex=i.materialIndex,e.push(r))}else for(let q=Math.max(0,u.start),i=Math.min(o.count,u.start+u.count);q<i;q+=3)r=uq(this,n,t,Ye,o,a,s,l,c,q,q+1,q+2),r&&(r.faceIndex=Math.floor(q/3),e.push(r))}else q.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function uq(t,e,q,n,i,r,o,a,s,l,c,h){$e.fromBufferAttribute(i,l),Ke.fromBufferAttribute(i,c),Qe.fromBufferAttribute(i,h);const u=t.morphTargetInfluences;if(r&&u){nq.set(0,0,0),iq.set(0,0,0),rq.set(0,0,0);for(let t=0,e=r.length;t<e;t++){const e=u[t],q=r[t];0!==e&&(tq.fromBufferAttribute(q,l),eq.fromBufferAttribute(q,c),qq.fromBufferAttribute(q,h),o?(nq.addScaledVector(tq,e),iq.addScaledVector(eq,e),rq.addScaledVector(qq,e)):(nq.addScaledVector(tq.sub($e),e),iq.addScaledVector(eq.sub(Ke),e),rq.addScaledVector(qq.sub(Qe),e)))}$e.add(nq),Ke.add(iq),Qe.add(rq)}t.isSkinnedMesh&&(t.boneTransform(l,$e),t.boneTransform(c,Ke),t.boneTransform(h,Qe));const m=function(t,e,q,n,i,r,o,a){let s;if(s=1===e.side?n.intersectTriangle(o,r,i,!0,a):n.intersectTriangle(i,r,o,2!==e.side,a),null===s)return null;cq.copy(a),cq.applyMatrix4(t.matrixWorld);const l=q.ray.origin.distanceTo(cq);return l<q.near||l>q.far?null:{distance:l,point:cq.clone(),object:t}}(t,e,q,n,$e,Ke,Qe,lq);if(m){a&&(oq.fromBufferAttribute(a,l),aq.fromBufferAttribute(a,c),sq.fromBufferAttribute(a,h),m.uv=Ae.getUV(lq,$e,Ke,Qe,oq,aq,sq,new J)),s&&(oq.fromBufferAttribute(s,l),aq.fromBufferAttribute(s,c),sq.fromBufferAttribute(s,h),m.uv2=Ae.getUV(lq,$e,Ke,Qe,oq,aq,sq,new J));const t={a:l,b:c,c:h,normal:new ct,materialIndex:0};Ae.getNormal($e,Ke,Qe,t.normal),m.face=t}return m}hq.prototype.isMesh=!0;class mq extends Ze{constructor(t=1,e=1,q=1,n=1,i=1,r=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:q,widthSegments:n,heightSegments:i,depthSegments:r};const o=this;n=Math.floor(n),i=Math.floor(i),r=Math.floor(r);const a=[],s=[],l=[],c=[];let h=0,u=0;function m(t,e,q,n,i,r,m,d,p,f,g){const x=r/p,v=m/f,y=r/2,_=m/2,b=d/2,A=p+1,w=f+1;let M=0,S=0;const E=new ct;for(let r=0;r<w;r++){const o=r*v-_;for(let a=0;a<A;a++){const h=a*x-y;E[t]=h*n,E[e]=o*i,E[q]=b,s.push(E.x,E.y,E.z),E[t]=0,E[e]=0,E[q]=d>0?1:-1,l.push(E.x,E.y,E.z),c.push(a/p),c.push(1-r/f),M+=1}}for(let t=0;t<f;t++)for(let e=0;e<p;e++){const q=h+e+A*t,n=h+e+A*(t+1),i=h+(e+1)+A*(t+1),r=h+(e+1)+A*t;a.push(q,n,r),a.push(n,i,r),S+=6}o.addGroup(u,S,g),u+=S,h+=M}m("z","y","x",-1,-1,q,e,t,r,i,0),m("z","y","x",1,-1,q,e,-t,r,i,1),m("x","z","y",1,1,t,q,e,n,r,2),m("x","z","y",1,-1,t,q,-e,n,r,3),m("x","y","z",1,-1,t,e,q,n,i,4),m("x","y","z",-1,-1,t,e,-q,n,i,5),this.setIndex(a),this.setAttribute("position",new Ne(s,3)),this.setAttribute("normal",new Ne(l,3)),this.setAttribute("uv",new Ne(c,2))}static fromJSON(t){return new mq(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function dq(t){const e={};for(const q in t){e[q]={};for(const n in t[q]){const i=t[q][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?e[q][n]=i.clone():Array.isArray(i)?e[q][n]=i.slice():e[q][n]=i}}return e}function pq(t){const e={};for(let q=0;q<t.length;q++){const n=dq(t[q]);for(const t in n)e[t]=n[t]}return e}const fq={clone:dq,merge:pq};class gq extends Me{constructor(t){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=dq(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const q in this.uniforms){const n=this.uniforms[q].value;n&&n.isTexture?e.uniforms[q]={type:"t",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[q]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[q]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[q]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[q]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[q]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[q]={type:"m4",value:n.toArray()}:e.uniforms[q]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const q={};for(const t in this.extensions)!0===this.extensions[t]&&(q[t]=!0);return Object.keys(q).length>0&&(e.extensions=q),e}}gq.prototype.isShaderMaterial=!0;class xq extends ue{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Ht,this.projectionMatrix=new Ht,this.projectionMatrixInverse=new Ht}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}xq.prototype.isCamera=!0;class vq extends xq{constructor(t=50,e=1,q=.1,n=2e3){super(),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=q,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*F*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*N*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*F*Math.atan(Math.tan(.5*N*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,q,n,i,r){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=q,this.view.offsetY=n,this.view.width=i,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*N*this.fov)/this.zoom,q=2*e,n=this.aspect*q,i=-.5*n;const r=this.view;if(null!==this.view&&this.view.enabled){const t=r.fullWidth,o=r.fullHeight;i+=r.offsetX*n/t,e-=r.offsetY*q/o,n*=r.width/t,q*=r.height/o}const o=this.filmOffset;0!==o&&(i+=t*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+n,e,e-q,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}vq.prototype.isPerspectiveCamera=!0;const yq=90;class _q extends ue{constructor(t,e,q){if(super(),this.type="CubeCamera",!0!==q.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=q;const n=new vq(yq,1,t,e);n.layers=this.layers,n.up.set(0,-1,0),n.lookAt(new ct(1,0,0)),this.add(n);const i=new vq(yq,1,t,e);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new ct(-1,0,0)),this.add(i);const r=new vq(yq,1,t,e);r.layers=this.layers,r.up.set(0,0,1),r.lookAt(new ct(0,1,0)),this.add(r);const o=new vq(yq,1,t,e);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(new ct(0,-1,0)),this.add(o);const a=new vq(yq,1,t,e);a.layers=this.layers,a.up.set(0,-1,0),a.lookAt(new ct(0,0,1)),this.add(a);const s=new vq(yq,1,t,e);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new ct(0,0,-1)),this.add(s)}update(t,e){null===this.parent&&this.updateMatrixWorld();const q=this.renderTarget,[n,i,r,o,a,s]=this.children,l=t.xr.enabled,c=t.getRenderTarget();t.xr.enabled=!1;const h=q.texture.generateMipmaps;q.texture.generateMipmaps=!1,t.setRenderTarget(q,0),t.render(e,n),t.setRenderTarget(q,1),t.render(e,i),t.setRenderTarget(q,2),t.render(e,r),t.setRenderTarget(q,3),t.render(e,o),t.setRenderTarget(q,4),t.render(e,a),q.texture.generateMipmaps=h,t.setRenderTarget(q,5),t.render(e,s),t.setRenderTarget(c),t.xr.enabled=l}}class bq extends it{constructor(t,e,q,n,r,o,a,s,l,c){super(t=void 0!==t?t:[],e=void 0!==e?e:i,q,n,r,o,a,s,l,c),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}bq.prototype.isCubeTexture=!0;class Aq extends at{constructor(t,e,q){Number.isInteger(e)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),e=q),super(t,t,e),e=e||{},this.texture=new bq(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:h,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=y,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const q={tEquirect:{value:null}},n="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",i="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",r=new mq(5,5,5),o=new gq({name:"CubemapFromEquirect",uniforms:dq(q),vertexShader:n,fragmentShader:i,side:1,blending:0});o.uniforms.tEquirect.value=e;const a=new hq(r,o),s=e.minFilter;return e.minFilter===u&&(e.minFilter=h),new _q(1,10,this).update(t,a),e.minFilter=s,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,q,n){const i=t.getRenderTarget();for(let i=0;i<6;i++)t.setRenderTarget(this,i),t.clear(e,q,n);t.setRenderTarget(i)}}Aq.prototype.isWebGLCubeRenderTarget=!0;const wq=new ct,Mq=new ct,Sq=new $;class Eq{constructor(t=new ct(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,q,n){return this.normal.set(t,e,q),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,q){const n=wq.subVectors(q,e).cross(Mq.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const q=t.delta(wq),n=this.normal.dot(q);if(0===n)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const i=-(t.start.dot(this.normal)+this.constant)/n;return i<0||i>1?null:e.copy(q).multiplyScalar(i).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),q=this.distanceToPoint(t.end);return e<0&&q>0||q<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const q=e||Sq.getNormalMatrix(t),n=this.coplanarPoint(wq).applyMatrix4(t),i=this.normal.applyMatrix3(q).normalize();return this.constant=-n.dot(i),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Eq.prototype.isPlane=!0;const Cq=new Rt,Tq=new ct;class zq{constructor(t=new Eq,e=new Eq,q=new Eq,n=new Eq,i=new Eq,r=new Eq){this.planes=[t,e,q,n,i,r]}set(t,e,q,n,i,r){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(q),o[3].copy(n),o[4].copy(i),o[5].copy(r),this}copy(t){const e=this.planes;for(let q=0;q<6;q++)e[q].copy(t.planes[q]);return this}setFromProjectionMatrix(t){const e=this.planes,q=t.elements,n=q[0],i=q[1],r=q[2],o=q[3],a=q[4],s=q[5],l=q[6],c=q[7],h=q[8],u=q[9],m=q[10],d=q[11],p=q[12],f=q[13],g=q[14],x=q[15];return e[0].setComponents(o-n,c-a,d-h,x-p).normalize(),e[1].setComponents(o+n,c+a,d+h,x+p).normalize(),e[2].setComponents(o+i,c+s,d+u,x+f).normalize(),e[3].setComponents(o-i,c-s,d-u,x-f).normalize(),e[4].setComponents(o-r,c-l,d-m,x-g).normalize(),e[5].setComponents(o+r,c+l,d+m,x+g).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),Cq.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(Cq)}intersectsSprite(t){return Cq.center.set(0,0,0),Cq.radius=.7071067811865476,Cq.applyMatrix4(t.matrixWorld),this.intersectsSphere(Cq)}intersectsSphere(t){const e=this.planes,q=t.center,n=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(q)<n)return!1;return!0}intersectsBox(t){const e=this.planes;for(let q=0;q<6;q++){const n=e[q];if(Tq.x=n.normal.x>0?t.max.x:t.min.x,Tq.y=n.normal.y>0?t.max.y:t.min.y,Tq.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(Tq)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let q=0;q<6;q++)if(e[q].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Lq(){let t=null,e=!1,q=null,n=null;function i(e,r){q(e,r),n=t.requestAnimationFrame(i)}return{start:function(){!0!==e&&null!==q&&(n=t.requestAnimationFrame(i),e=!0)},stop:function(){t.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(t){q=t},setContext:function(e){t=e}}}function Rq(t,e){const q=e.isWebGL2,n=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),n.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const q=n.get(e);q&&(t.deleteBuffer(q.buffer),n.delete(e))},update:function(e,i){if(e.isGLBufferAttribute){const t=n.get(e);return void((!t||t.version<e.version)&&n.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const r=n.get(e);void 0===r?n.set(e,function(e,n){const i=e.array,r=e.usage,o=t.createBuffer();t.bindBuffer(n,o),t.bufferData(n,i,r),e.onUploadCallback();let a=5126;return i instanceof Float32Array?a=5126:i instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):i instanceof Uint16Array?e.isFloat16BufferAttribute?q?a=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):a=5123:i instanceof Int16Array?a=5122:i instanceof Uint32Array?a=5125:i instanceof Int32Array?a=5124:i instanceof Int8Array?a=5120:(i instanceof Uint8Array||i instanceof Uint8ClampedArray)&&(a=5121),{buffer:o,type:a,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version}}(e,i)):r.version<e.version&&(function(e,n,i){const r=n.array,o=n.updateRange;t.bindBuffer(i,e),-1===o.count?t.bufferSubData(i,0,r):(q?t.bufferSubData(i,o.offset*r.BYTES_PER_ELEMENT,r,o.offset,o.count):t.bufferSubData(i,o.offset*r.BYTES_PER_ELEMENT,r.subarray(o.offset,o.offset+o.count)),o.count=-1)}(r.buffer,e,i),r.version=e.version)}}}class Iq extends Ze{constructor(t=1,e=1,q=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:q,heightSegments:n};const i=t/2,r=e/2,o=Math.floor(q),a=Math.floor(n),s=o+1,l=a+1,c=t/o,h=e/a,u=[],m=[],d=[],p=[];for(let t=0;t<l;t++){const e=t*h-r;for(let q=0;q<s;q++){const n=q*c-i;m.push(n,-e,0),d.push(0,0,1),p.push(q/o),p.push(1-t/a)}}for(let t=0;t<a;t++)for(let e=0;e<o;e++){const q=e+s*t,n=e+s*(t+1),i=e+1+s*(t+1),r=e+1+s*t;u.push(q,n,r),u.push(n,i,r)}this.setIndex(u),this.setAttribute("position",new Ne(m,3)),this.setAttribute("normal",new Ne(d,3)),this.setAttribute("uv",new Ne(p,2))}static fromJSON(t){return new Iq(t.width,t.height,t.widthSegments,t.heightSegments)}}const Pq={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( float roughness, float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},Bq={common:{diffuse:{value:new Re(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new $},uv2Transform:{value:new $},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new J(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Re(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Re(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new $}},sprite:{diffuse:{value:new Re(16777215)},opacity:{value:1},center:{value:new J(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new $}}},kq={basic:{uniforms:pq([Bq.common,Bq.specularmap,Bq.envmap,Bq.aomap,Bq.lightmap,Bq.fog]),vertexShader:Pq.meshbasic_vert,fragmentShader:Pq.meshbasic_frag},lambert:{uniforms:pq([Bq.common,Bq.specularmap,Bq.envmap,Bq.aomap,Bq.lightmap,Bq.emissivemap,Bq.fog,Bq.lights,{emissive:{value:new Re(0)}}]),vertexShader:Pq.meshlambert_vert,fragmentShader:Pq.meshlambert_frag},phong:{uniforms:pq([Bq.common,Bq.specularmap,Bq.envmap,Bq.aomap,Bq.lightmap,Bq.emissivemap,Bq.bumpmap,Bq.normalmap,Bq.displacementmap,Bq.fog,Bq.lights,{emissive:{value:new Re(0)},specular:{value:new Re(1118481)},shininess:{value:30}}]),vertexShader:Pq.meshphong_vert,fragmentShader:Pq.meshphong_frag},standard:{uniforms:pq([Bq.common,Bq.envmap,Bq.aomap,Bq.lightmap,Bq.emissivemap,Bq.bumpmap,Bq.normalmap,Bq.displacementmap,Bq.roughnessmap,Bq.metalnessmap,Bq.fog,Bq.lights,{emissive:{value:new Re(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Pq.meshphysical_vert,fragmentShader:Pq.meshphysical_frag},toon:{uniforms:pq([Bq.common,Bq.aomap,Bq.lightmap,Bq.emissivemap,Bq.bumpmap,Bq.normalmap,Bq.displacementmap,Bq.gradientmap,Bq.fog,Bq.lights,{emissive:{value:new Re(0)}}]),vertexShader:Pq.meshtoon_vert,fragmentShader:Pq.meshtoon_frag},matcap:{uniforms:pq([Bq.common,Bq.bumpmap,Bq.normalmap,Bq.displacementmap,Bq.fog,{matcap:{value:null}}]),vertexShader:Pq.meshmatcap_vert,fragmentShader:Pq.meshmatcap_frag},points:{uniforms:pq([Bq.points,Bq.fog]),vertexShader:Pq.points_vert,fragmentShader:Pq.points_frag},dashed:{uniforms:pq([Bq.common,Bq.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Pq.linedashed_vert,fragmentShader:Pq.linedashed_frag},depth:{uniforms:pq([Bq.common,Bq.displacementmap]),vertexShader:Pq.depth_vert,fragmentShader:Pq.depth_frag},normal:{uniforms:pq([Bq.common,Bq.bumpmap,Bq.normalmap,Bq.displacementmap,{opacity:{value:1}}]),vertexShader:Pq.meshnormal_vert,fragmentShader:Pq.meshnormal_frag},sprite:{uniforms:pq([Bq.sprite,Bq.fog]),vertexShader:Pq.sprite_vert,fragmentShader:Pq.sprite_frag},background:{uniforms:{uvTransform:{value:new $},t2D:{value:null}},vertexShader:Pq.background_vert,fragmentShader:Pq.background_frag},cube:{uniforms:pq([Bq.envmap,{opacity:{value:1}}]),vertexShader:Pq.cube_vert,fragmentShader:Pq.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Pq.equirect_vert,fragmentShader:Pq.equirect_frag},distanceRGBA:{uniforms:pq([Bq.common,Bq.displacementmap,{referencePosition:{value:new ct},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Pq.distanceRGBA_vert,fragmentShader:Pq.distanceRGBA_frag},shadow:{uniforms:pq([Bq.lights,Bq.fog,{color:{value:new Re(0)},opacity:{value:1}}]),vertexShader:Pq.shadow_vert,fragmentShader:Pq.shadow_frag}};function Dq(t,e,q,n,i){const r=new Re(0);let a,s,l=0,c=null,h=0,u=null;function m(t,e){q.buffers.color.setClear(t.r,t.g,t.b,e,i)}return{getClearColor:function(){return r},setClearColor:function(t,e=1){r.set(t),l=e,m(r,l)},getClearAlpha:function(){return l},setClearAlpha:function(t){l=t,m(r,l)},render:function(q,i){let d=!1,p=!0===i.isScene?i.background:null;p&&p.isTexture&&(p=e.get(p));const f=t.xr,g=f.getSession&&f.getSession();g&&"additive"===g.environmentBlendMode&&(p=null),null===p?m(r,l):p&&p.isColor&&(m(p,1),d=!0),(t.autoClear||d)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),p&&(p.isCubeTexture||p.mapping===o)?(void 0===s&&(s=new hq(new mq(1,1,1),new gq({name:"BackgroundCubeMaterial",uniforms:dq(kq.cube.uniforms),vertexShader:kq.cube.vertexShader,fragmentShader:kq.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),s.geometry.deleteAttribute("normal"),s.geometry.deleteAttribute("uv"),s.onBeforeRender=function(t,e,q){this.matrixWorld.copyPosition(q.matrixWorld)},Object.defineProperty(s.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(s)),s.material.uniforms.envMap.value=p,s.material.uniforms.flipEnvMap.value=p.isCubeTexture&&!1===p.isRenderTargetTexture?-1:1,c===p&&h===p.version&&u===t.toneMapping||(s.material.needsUpdate=!0,c=p,h=p.version,u=t.toneMapping),q.unshift(s,s.geometry,s.material,0,0,null)):p&&p.isTexture&&(void 0===a&&(a=new hq(new Iq(2,2),new gq({name:"BackgroundMaterial",uniforms:dq(kq.background.uniforms),vertexShader:kq.background.vertexShader,fragmentShader:kq.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),a.geometry.deleteAttribute("normal"),Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(a)),a.material.uniforms.t2D.value=p,!0===p.matrixAutoUpdate&&p.updateMatrix(),a.material.uniforms.uvTransform.value.copy(p.matrix),c===p&&h===p.version&&u===t.toneMapping||(a.material.needsUpdate=!0,c=p,h=p.version,u=t.toneMapping),q.unshift(a,a.geometry,a.material,0,0,null))}}}function Oq(t,e,q,n){const i=t.getParameter(34921),r=n.isWebGL2?null:e.get("OES_vertex_array_object"),o=n.isWebGL2||null!==r,a={},s=u(null);let l=s;function c(e){return n.isWebGL2?t.bindVertexArray(e):r.bindVertexArrayOES(e)}function h(e){return n.isWebGL2?t.deleteVertexArray(e):r.deleteVertexArrayOES(e)}function u(t){const e=[],q=[],n=[];for(let t=0;t<i;t++)e[t]=0,q[t]=0,n[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:q,attributeDivisors:n,object:t,attributes:{},index:null}}function m(){const t=l.newAttributes;for(let e=0,q=t.length;e<q;e++)t[e]=0}function d(t){p(t,0)}function p(q,i){const r=l.newAttributes,o=l.enabledAttributes,a=l.attributeDivisors;r[q]=1,0===o[q]&&(t.enableVertexAttribArray(q),o[q]=1),a[q]!==i&&((n.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](q,i),a[q]=i)}function f(){const e=l.newAttributes,q=l.enabledAttributes;for(let n=0,i=q.length;n<i;n++)q[n]!==e[n]&&(t.disableVertexAttribArray(n),q[n]=0)}function g(e,q,i,r,o,a){!0!==n.isWebGL2||5124!==i&&5125!==i?t.vertexAttribPointer(e,q,i,r,o,a):t.vertexAttribIPointer(e,q,i,o,a)}function x(){v(),l!==s&&(l=s,c(l.object))}function v(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:function(i,s,h,x,v){let y=!1;if(o){const e=function(e,q,i){const o=!0===i.wireframe;let s=a[e.id];void 0===s&&(s={},a[e.id]=s);let l=s[q.id];void 0===l&&(l={},s[q.id]=l);let c=l[o];return void 0===c&&(c=u(n.isWebGL2?t.createVertexArray():r.createVertexArrayOES()),l[o]=c),c}(x,h,s);l!==e&&(l=e,c(l.object)),y=function(t,e){const q=l.attributes,n=t.attributes;let i=0;for(const t in n){const e=q[t],r=n[t];if(void 0===e)return!0;if(e.attribute!==r)return!0;if(e.data!==r.data)return!0;i++}return l.attributesNum!==i||l.index!==e}(x,v),y&&function(t,e){const q={},n=t.attributes;let i=0;for(const t in n){const e=n[t],r={};r.attribute=e,e.data&&(r.data=e.data),q[t]=r,i++}l.attributes=q,l.attributesNum=i,l.index=e}(x,v)}else{const t=!0===s.wireframe;l.geometry===x.id&&l.program===h.id&&l.wireframe===t||(l.geometry=x.id,l.program=h.id,l.wireframe=t,y=!0)}!0===i.isInstancedMesh&&(y=!0),null!==v&&q.update(v,34963),y&&(function(i,r,o,a){if(!1===n.isWebGL2&&(i.isInstancedMesh||a.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;m();const s=a.attributes,l=o.getAttributes(),c=r.defaultAttributeValues;for(const e in l){const n=l[e];if(n.location>=0){let r=s[e];if(void 0===r&&("instanceMatrix"===e&&i.instanceMatrix&&(r=i.instanceMatrix),"instanceColor"===e&&i.instanceColor&&(r=i.instanceColor)),void 0!==r){const e=r.normalized,o=r.itemSize,s=q.get(r);if(void 0===s)continue;const l=s.buffer,c=s.type,h=s.bytesPerElement;if(r.isInterleavedBufferAttribute){const q=r.data,s=q.stride,u=r.offset;if(q&&q.isInstancedInterleavedBuffer){for(let t=0;t<n.locationSize;t++)p(n.location+t,q.meshPerAttribute);!0!==i.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=q.meshPerAttribute*q.count)}else for(let t=0;t<n.locationSize;t++)d(n.location+t);t.bindBuffer(34962,l);for(let t=0;t<n.locationSize;t++)g(n.location+t,o/n.locationSize,c,e,s*h,(u+o/n.locationSize*t)*h)}else{if(r.isInstancedBufferAttribute){for(let t=0;t<n.locationSize;t++)p(n.location+t,r.meshPerAttribute);!0!==i.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=r.meshPerAttribute*r.count)}else for(let t=0;t<n.locationSize;t++)d(n.location+t);t.bindBuffer(34962,l);for(let t=0;t<n.locationSize;t++)g(n.location+t,o/n.locationSize,c,e,o*h,o/n.locationSize*t*h)}}else if(void 0!==c){const q=c[e];if(void 0!==q)switch(q.length){case 2:t.vertexAttrib2fv(n.location,q);break;case 3:t.vertexAttrib3fv(n.location,q);break;case 4:t.vertexAttrib4fv(n.location,q);break;default:t.vertexAttrib1fv(n.location,q)}}}}f()}(i,s,h,x),null!==v&&t.bindBuffer(34963,q.get(v).buffer))},reset:x,resetDefaultState:v,dispose:function(){x();for(const t in a){const e=a[t];for(const t in e){const q=e[t];for(const t in q)h(q[t].object),delete q[t];delete e[t]}delete a[t]}},releaseStatesOfGeometry:function(t){if(void 0===a[t.id])return;const e=a[t.id];for(const t in e){const q=e[t];for(const t in q)h(q[t].object),delete q[t];delete e[t]}delete a[t.id]},releaseStatesOfProgram:function(t){for(const e in a){const q=a[e];if(void 0===q[t.id])continue;const n=q[t.id];for(const t in n)h(n[t].object),delete n[t];delete q[t.id]}},initAttributes:m,enableAttribute:d,disableUnusedAttributes:f}}function Nq(t,e,q,n){const i=n.isWebGL2;let r;this.setMode=function(t){r=t},this.render=function(e,n){t.drawArrays(r,e,n),q.update(n,r,1)},this.renderInstances=function(n,o,a){if(0===a)return;let s,l;if(i)s=t,l="drawArraysInstanced";else if(s=e.get("ANGLE_instanced_arrays"),l="drawArraysInstancedANGLE",null===s)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");s[l](r,n,o,a),q.update(o,r,a)}}function Fq(t,e,q){let n;function i(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const r="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let o=void 0!==q.precision?q.precision:"highp";const a=i(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);const s=r||e.has("WEBGL_draw_buffers"),l=!0===q.logarithmicDepthBuffer,c=t.getParameter(34930),h=t.getParameter(35660),u=t.getParameter(3379),m=t.getParameter(34076),d=t.getParameter(34921),p=t.getParameter(36347),f=t.getParameter(36348),g=t.getParameter(36349),x=h>0,v=r||e.has("OES_texture_float");return{isWebGL2:r,drawBuffers:s,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===e.has("EXT_texture_filter_anisotropic")){const q=e.get("EXT_texture_filter_anisotropic");n=t.getParameter(q.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:i,precision:o,logarithmicDepthBuffer:l,maxTextures:c,maxVertexTextures:h,maxTextureSize:u,maxCubemapSize:m,maxAttributes:d,maxVertexUniforms:p,maxVaryings:f,maxFragmentUniforms:g,vertexTextures:x,floatFragmentTextures:v,floatVertexTextures:x&&v,maxSamples:r?t.getParameter(36183):0}}function Hq(t){const e=this;let q=null,n=0,i=!1,r=!1;const o=new Eq,a=new $,s={value:null,needsUpdate:!1};function l(){s.value!==q&&(s.value=q,s.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function c(t,q,n,i){const r=null!==t?t.length:0;let l=null;if(0!==r){if(l=s.value,!0!==i||null===l){const e=n+4*r,i=q.matrixWorldInverse;a.getNormalMatrix(i),(null===l||l.length<e)&&(l=new Float32Array(e));for(let e=0,q=n;e!==r;++e,q+=4)o.copy(t[e]).applyMatrix4(i,a),o.normal.toArray(l,q),l[q+3]=o.constant}s.value=l,s.needsUpdate=!0}return e.numPlanes=r,e.numIntersection=0,l}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,r){const o=0!==t.length||e||0!==n||i;return i=e,q=c(t,r,0),n=t.length,o},this.beginShadows=function(){r=!0,c(null)},this.endShadows=function(){r=!1,l()},this.setState=function(e,o,a){const h=e.clippingPlanes,u=e.clipIntersection,m=e.clipShadows,d=t.get(e);if(!i||null===h||0===h.length||r&&!m)r?c(null):l();else{const t=r?0:n,e=4*t;let i=d.clippingState||null;s.value=i,i=c(h,o,e,a);for(let t=0;t!==e;++t)i[t]=q[t];d.clippingState=i,this.numIntersection=u?this.numPlanes:0,this.numPlanes+=t}}}function Uq(t){let e=new WeakMap;function q(t,e){return 303===e?t.mapping=i:304===e&&(t.mapping=r),t}function n(t){const q=t.target;q.removeEventListener("dispose",n);const i=e.get(q);void 0!==i&&(e.delete(q),i.dispose())}return{get:function(i){if(i&&i.isTexture&&!1===i.isRenderTargetTexture){const r=i.mapping;if(303===r||304===r){if(e.has(i))return q(e.get(i).texture,i.mapping);{const r=i.image;if(r&&r.height>0){const o=t.getRenderTarget(),a=new Aq(r.height/2);return a.fromEquirectangularTexture(t,i),e.set(i,a),t.setRenderTarget(o),i.addEventListener("dispose",n),q(a.texture,i.mapping)}return null}}}return i},dispose:function(){e=new WeakMap}}}kq.physical={uniforms:pq([kq.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new J(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new Re(0)},sheenColorMap:{value:null},sheenRoughness:{value:0},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new J},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Re(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularColor:{value:new Re(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Pq.meshphysical_vert,fragmentShader:Pq.meshphysical_frag};class Vq extends xq{constructor(t=-1,e=1,q=1,n=-1,i=.1,r=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=q,this.bottom=n,this.near=i,this.far=r,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,q,n,i,r){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=q,this.view.offsetY=n,this.view.width=i,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),q=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let i=q-t,r=q+t,o=n+e,a=n-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;i+=t*this.view.offsetX,r=i+t*this.view.width,o-=e*this.view.offsetY,a=o-e*this.view.height}this.projectionMatrix.makeOrthographic(i,r,o,a,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}Vq.prototype.isOrthographicCamera=!0;class Gq extends gq{constructor(t){super(t),this.type="RawShaderMaterial"}}Gq.prototype.isRawShaderMaterial=!0;const Wq=Math.pow(2,8),jq=[.125,.215,.35,.446,.526,.582],Zq=5+jq.length,Xq={[T]:0,[z]:1,[R]:2,3004:3,3005:4,3006:5,[L]:6},Yq=new Vq,{_lodPlanes:Jq,_sizeLods:$q,_sigmas:Kq}=an(),Qq=new Re;let tn=null;const en=(1+Math.sqrt(5))/2,qn=1/en,nn=[new ct(1,1,1),new ct(-1,1,1),new ct(1,1,-1),new ct(-1,1,-1),new ct(0,en,qn),new ct(0,en,-qn),new ct(qn,0,en),new ct(-qn,0,en),new ct(en,qn,0),new ct(-en,qn,0)];class rn{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._blurMaterial=function(t){const e=new Float32Array(20),q=new ct(0,1,0);return new Gq({name:"SphericalGaussianBlur",defines:{n:20},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:e},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:q},inputEncoding:{value:Xq[3e3]},outputEncoding:{value:Xq[3e3]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,q=.1,n=100){tn=this._renderer.getRenderTarget();const i=this._allocateTargets();return this._sceneToCubeUV(t,q,n,i),e>0&&this._blur(i,0,0,e),this._applyPMREM(i),this._cleanup(i),i}fromEquirectangular(t){return this._fromTexture(t)}fromCubemap(t){return this._fromTexture(t)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=hn(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=cn(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let t=0;t<Jq.length;t++)Jq[t].dispose()}_cleanup(t){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(tn),t.scissorTest=!1,ln(t,0,0,t.width,t.height)}_fromTexture(t){tn=this._renderer.getRenderTarget();const e=this._allocateTargets(t);return this._textureToCubeUV(t,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(t){const e={magFilter:c,minFilter:c,generateMipmaps:!1,type:m,format:1023,encoding:on(t)?t.encoding:R,depthBuffer:!1},q=sn(e);return q.depthBuffer=!t,this._pingPongRenderTarget=sn(e),q}_compileMaterial(t){const e=new hq(Jq[0],t);this._renderer.compile(e,Yq)}_sceneToCubeUV(t,e,q,n){const i=new vq(90,1,e,q),r=[1,-1,1,1,1,1],o=[1,1,1,-1,-1,-1],a=this._renderer,s=a.autoClear,l=a.outputEncoding,c=a.toneMapping;a.getClearColor(Qq),a.toneMapping=0,a.outputEncoding=T,a.autoClear=!1;const h=new Ie({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),u=new hq(new mq,h);let m=!1;const d=t.background;d?d.isColor&&(h.color.copy(d),t.background=null,m=!0):(h.color.copy(Qq),m=!0);for(let e=0;e<6;e++){const q=e%3;0==q?(i.up.set(0,r[e],0),i.lookAt(o[e],0,0)):1==q?(i.up.set(0,0,r[e]),i.lookAt(0,o[e],0)):(i.up.set(0,r[e],0),i.lookAt(0,0,o[e])),ln(n,q*Wq,e>2?Wq:0,Wq,Wq),a.setRenderTarget(n),m&&a.render(u,i),a.render(t,i)}u.geometry.dispose(),u.material.dispose(),a.toneMapping=c,a.outputEncoding=l,a.autoClear=s,t.background=d}_setEncoding(t,e){!0===this._renderer.capabilities.isWebGL2&&e.format===y&&e.type===m&&e.encoding===z?t.value=Xq[3e3]:t.value=Xq[e.encoding]}_textureToCubeUV(t,e){const q=this._renderer,n=t.mapping===i||t.mapping===r;n?null==this._cubemapShader&&(this._cubemapShader=hn()):null==this._equirectShader&&(this._equirectShader=cn());const o=n?this._cubemapShader:this._equirectShader,a=new hq(Jq[0],o),s=o.uniforms;s.envMap.value=t,n||s.texelSize.value.set(1/t.image.width,1/t.image.height),this._setEncoding(s.inputEncoding,t),this._setEncoding(s.outputEncoding,e.texture),ln(e,0,0,3*Wq,2*Wq),q.setRenderTarget(e),q.render(a,Yq)}_applyPMREM(t){const e=this._renderer,q=e.autoClear;e.autoClear=!1;for(let e=1;e<Zq;e++){const q=Math.sqrt(Kq[e]*Kq[e]-Kq[e-1]*Kq[e-1]),n=nn[(e-1)%nn.length];this._blur(t,e-1,e,q,n)}e.autoClear=q}_blur(t,e,q,n,i){const r=this._pingPongRenderTarget;this._halfBlur(t,r,e,q,n,"latitudinal",i),this._halfBlur(r,t,q,q,n,"longitudinal",i)}_halfBlur(t,e,q,n,i,r,o){const a=this._renderer,s=this._blurMaterial;"latitudinal"!==r&&"longitudinal"!==r&&console.error("blur direction must be either latitudinal or longitudinal!");const l=new hq(Jq[n],s),c=s.uniforms,h=$q[q]-1,u=isFinite(i)?Math.PI/(2*h):2*Math.PI/39,m=i/u,d=isFinite(i)?1+Math.floor(3*m):20;d>20&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${d} samples when the maximum is set to 20`);const p=[];let f=0;for(let t=0;t<20;++t){const e=t/m,q=Math.exp(-e*e/2);p.push(q),0==t?f+=q:t<d&&(f+=2*q)}for(let t=0;t<p.length;t++)p[t]=p[t]/f;c.envMap.value=t.texture,c.samples.value=d,c.weights.value=p,c.latitudinal.value="latitudinal"===r,o&&(c.poleAxis.value=o),c.dTheta.value=u,c.mipInt.value=8-q,this._setEncoding(c.inputEncoding,t.texture),this._setEncoding(c.outputEncoding,t.texture);const g=$q[n];ln(e,3*Math.max(0,Wq-2*g),(0===n?0:2*Wq)+2*g*(n>4?n-8+4:0),3*g,2*g),a.setRenderTarget(e),a.render(l,Yq)}}function on(t){return void 0!==t&&t.type===m&&(t.encoding===T||t.encoding===z||t.encoding===L)}function an(){const t=[],e=[],q=[];let n=8;for(let i=0;i<Zq;i++){const r=Math.pow(2,n);e.push(r);let o=1/r;i>4?o=jq[i-8+4-1]:0==i&&(o=0),q.push(o);const a=1/(r-1),s=-a/2,l=1+a/2,c=[s,s,l,s,l,l,s,s,l,l,s,l],h=6,u=6,m=3,d=2,p=1,f=new Float32Array(m*u*h),g=new Float32Array(d*u*h),x=new Float32Array(p*u*h);for(let t=0;t<h;t++){const e=t%3*2/3-1,q=t>2?0:-1,n=[e,q,0,e+2/3,q,0,e+2/3,q+1,0,e,q,0,e+2/3,q+1,0,e,q+1,0];f.set(n,m*u*t),g.set(c,d*u*t);const i=[t,t,t,t,t,t];x.set(i,p*u*t)}const v=new Ze;v.setAttribute("position",new ke(f,m)),v.setAttribute("uv",new ke(g,d)),v.setAttribute("faceIndex",new ke(x,p)),t.push(v),n>4&&n--}return{_lodPlanes:t,_sizeLods:e,_sigmas:q}}function sn(t){const e=new at(3*Wq,3*Wq,t);return e.texture.mapping=o,e.texture.name="PMREM.cubeUv",e.scissorTest=!0,e}function ln(t,e,q,n,i){t.viewport.set(e,q,n,i),t.scissor.set(e,q,n,i)}function cn(){const t=new J(1,1);return new Gq({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:t},inputEncoding:{value:Xq[3e3]},outputEncoding:{value:Xq[3e3]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function hn(){return new Gq({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:Xq[3e3]},outputEncoding:{value:Xq[3e3]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function un(t){let e=new WeakMap,q=null;function n(t){const q=t.target;q.removeEventListener("dispose",n);const i=e.get(q);void 0!==i&&(e.delete(q),i.dispose())}return{get:function(o){if(o&&o.isTexture&&!1===o.isRenderTargetTexture){const a=o.mapping,s=303===a||304===a,l=a===i||a===r;if(s||l){if(e.has(o))return e.get(o).texture;{const i=o.image;if(s&&i&&i.height>0||l&&i&&function(t){let e=0;for(let q=0;q<6;q++)void 0!==t[q]&&e++;return 6===e}(i)){const i=t.getRenderTarget();null===q&&(q=new rn(t));const r=s?q.fromEquirectangular(o):q.fromCubemap(o);return e.set(o,r),t.setRenderTarget(i),o.addEventListener("dispose",n),r.texture}return null}}}return o},dispose:function(){e=new WeakMap,null!==q&&(q.dispose(),q=null)}}}function mn(t){const e={};function q(q){if(void 0!==e[q])return e[q];let n;switch(q){case"WEBGL_depth_texture":n=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=t.getExtension(q)}return e[q]=n,n}return{has:function(t){return null!==q(t)},init:function(t){t.isWebGL2?q("EXT_color_buffer_float"):(q("WEBGL_depth_texture"),q("OES_texture_float"),q("OES_texture_half_float"),q("OES_texture_half_float_linear"),q("OES_standard_derivatives"),q("OES_element_index_uint"),q("OES_vertex_array_object"),q("ANGLE_instanced_arrays")),q("OES_texture_float_linear"),q("EXT_color_buffer_half_float")},get:function(t){const e=q(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function dn(t,e,q,n){const i={},r=new WeakMap;function o(t){const a=t.target;null!==a.index&&e.remove(a.index);for(const t in a.attributes)e.remove(a.attributes[t]);a.removeEventListener("dispose",o),delete i[a.id];const s=r.get(a);s&&(e.remove(s),r.delete(a)),n.releaseStatesOfGeometry(a),!0===a.isInstancedBufferGeometry&&delete a._maxInstanceCount,q.memory.geometries--}function a(t){const q=[],n=t.index,i=t.attributes.position;let o=0;if(null!==n){const t=n.array;o=n.version;for(let e=0,n=t.length;e<n;e+=3){const n=t[e+0],i=t[e+1],r=t[e+2];q.push(n,i,i,r,r,n)}}else{const t=i.array;o=i.version;for(let e=0,n=t.length/3-1;e<n;e+=3){const t=e+0,n=e+1,i=e+2;q.push(t,n,n,i,i,t)}}const a=new(K(q)>65535?Oe:De)(q,1);a.version=o;const s=r.get(t);s&&e.remove(s),r.set(t,a)}return{get:function(t,e){return!0===i[e.id]||(e.addEventListener("dispose",o),i[e.id]=!0,q.memory.geometries++),e},update:function(t){const q=t.attributes;for(const t in q)e.update(q[t],34962);const n=t.morphAttributes;for(const t in n){const q=n[t];for(let t=0,n=q.length;t<n;t++)e.update(q[t],34962)}},getWireframeAttribute:function(t){const e=r.get(t);if(e){const q=t.index;null!==q&&e.version<q.version&&a(t)}else a(t);return r.get(t)}}}function pn(t,e,q,n){const i=n.isWebGL2;let r,o,a;this.setMode=function(t){r=t},this.setIndex=function(t){o=t.type,a=t.bytesPerElement},this.render=function(e,n){t.drawElements(r,n,o,e*a),q.update(n,r,1)},this.renderInstances=function(n,s,l){if(0===l)return;let c,h;if(i)c=t,h="drawElementsInstanced";else if(c=e.get("ANGLE_instanced_arrays"),h="drawElementsInstancedANGLE",null===c)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[h](r,s,o,n*a,l),q.update(s,r,l)}}function fn(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,q,n){switch(e.calls++,q){case 4:e.triangles+=n*(t/3);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",q)}}}}class gn extends it{constructor(t=null,e=1,q=1,n=1){super(null),this.image={data:t,width:e,height:q,depth:n},this.magFilter=c,this.minFilter=c,this.wrapR=s,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}function xn(t,e){return t[0]-e[0]}function vn(t,e){return Math.abs(e[1])-Math.abs(t[1])}function yn(t,e){let q=1;const n=e.isInterleavedBufferAttribute?e.data.array:e.array;n instanceof Int8Array?q=127:n instanceof Int16Array?q=32767:n instanceof Int32Array?q=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",n),t.divideScalar(q)}function _n(t,e,q){const n={},i=new Float32Array(8),r=new WeakMap,o=new ct,a=[];for(let t=0;t<8;t++)a[t]=[t,0];return{update:function(s,l,c,h){const u=s.morphTargetInfluences;if(!0===e.isWebGL2){const n=l.morphAttributes.position.length;let i=r.get(l);if(void 0===i||i.count!==n){void 0!==i&&i.texture.dispose();const t=void 0!==l.morphAttributes.normal,q=l.morphAttributes.position,a=l.morphAttributes.normal||[],s=!0===t?2:1;let c=l.attributes.position.count*s,h=1;c>e.maxTextureSize&&(h=Math.ceil(c/e.maxTextureSize),c=e.maxTextureSize);const u=new Float32Array(c*h*4*n),m=new gn(u,c,h,n);m.format=y,m.type=f;const d=4*s;for(let e=0;e<n;e++){const n=q[e],i=a[e],r=c*h*4*e;for(let e=0;e<n.count;e++){o.fromBufferAttribute(n,e),!0===n.normalized&&yn(o,n);const q=e*d;u[r+q+0]=o.x,u[r+q+1]=o.y,u[r+q+2]=o.z,u[r+q+3]=0,!0===t&&(o.fromBufferAttribute(i,e),!0===i.normalized&&yn(o,i),u[r+q+4]=o.x,u[r+q+5]=o.y,u[r+q+6]=o.z,u[r+q+7]=0)}}i={count:n,texture:m,size:new J(c,h)},r.set(l,i)}let a=0;for(let t=0;t<u.length;t++)a+=u[t];const s=l.morphTargetsRelative?1:1-a;h.getUniforms().setValue(t,"morphTargetBaseInfluence",s),h.getUniforms().setValue(t,"morphTargetInfluences",u),h.getUniforms().setValue(t,"morphTargetsTexture",i.texture,q),h.getUniforms().setValue(t,"morphTargetsTextureSize",i.size)}else{const e=void 0===u?0:u.length;let q=n[l.id];if(void 0===q||q.length!==e){q=[];for(let t=0;t<e;t++)q[t]=[t,0];n[l.id]=q}for(let t=0;t<e;t++){const e=q[t];e[0]=t,e[1]=u[t]}q.sort(vn);for(let t=0;t<8;t++)t<e&&q[t][1]?(a[t][0]=q[t][0],a[t][1]=q[t][1]):(a[t][0]=Number.MAX_SAFE_INTEGER,a[t][1]=0);a.sort(xn);const r=l.morphAttributes.position,o=l.morphAttributes.normal;let s=0;for(let t=0;t<8;t++){const e=a[t],q=e[0],n=e[1];q!==Number.MAX_SAFE_INTEGER&&n?(r&&l.getAttribute("morphTarget"+t)!==r[q]&&l.setAttribute("morphTarget"+t,r[q]),o&&l.getAttribute("morphNormal"+t)!==o[q]&&l.setAttribute("morphNormal"+t,o[q]),i[t]=n,s+=n):(r&&!0===l.hasAttribute("morphTarget"+t)&&l.deleteAttribute("morphTarget"+t),o&&!0===l.hasAttribute("morphNormal"+t)&&l.deleteAttribute("morphNormal"+t),i[t]=0)}const c=l.morphTargetsRelative?1:1-s;h.getUniforms().setValue(t,"morphTargetBaseInfluence",c),h.getUniforms().setValue(t,"morphTargetInfluences",i)}}}}function bn(t,e,q,n){let i=new WeakMap;function r(t){const e=t.target;e.removeEventListener("dispose",r),q.remove(e.instanceMatrix),null!==e.instanceColor&&q.remove(e.instanceColor)}return{update:function(t){const o=n.render.frame,a=t.geometry,s=e.get(t,a);return i.get(s)!==o&&(e.update(s),i.set(s,o)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",r)&&t.addEventListener("dispose",r),q.update(t.instanceMatrix,34962),null!==t.instanceColor&&q.update(t.instanceColor,34962)),s},dispose:function(){i=new WeakMap}}}gn.prototype.isDataTexture2DArray=!0;class An extends it{constructor(t=null,e=1,q=1,n=1){super(null),this.image={data:t,width:e,height:q,depth:n},this.magFilter=c,this.minFilter=c,this.wrapR=s,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}An.prototype.isDataTexture3D=!0;const wn=new it,Mn=new gn,Sn=new An,En=new bq,Cn=[],Tn=[],zn=new Float32Array(16),Ln=new Float32Array(9),Rn=new Float32Array(4);function In(t,e,q){const n=t[0];if(n<=0||n>0)return t;const i=e*q;let r=Cn[i];if(void 0===r&&(r=new Float32Array(i),Cn[i]=r),0!==e){n.toArray(r,0);for(let n=1,i=0;n!==e;++n)i+=q,t[n].toArray(r,i)}return r}function Pn(t,e){if(t.length!==e.length)return!1;for(let q=0,n=t.length;q<n;q++)if(t[q]!==e[q])return!1;return!0}function Bn(t,e){for(let q=0,n=e.length;q<n;q++)t[q]=e[q]}function kn(t,e){let q=Tn[e];void 0===q&&(q=new Int32Array(e),Tn[e]=q);for(let n=0;n!==e;++n)q[n]=t.allocateTextureUnit();return q}function Dn(t,e){const q=this.cache;q[0]!==e&&(t.uniform1f(this.addr,e),q[0]=e)}function On(t,e){const q=this.cache;if(void 0!==e.x)q[0]===e.x&&q[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),q[0]=e.x,q[1]=e.y);else{if(Pn(q,e))return;t.uniform2fv(this.addr,e),Bn(q,e)}}function Nn(t,e){const q=this.cache;if(void 0!==e.x)q[0]===e.x&&q[1]===e.y&&q[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),q[0]=e.x,q[1]=e.y,q[2]=e.z);else if(void 0!==e.r)q[0]===e.r&&q[1]===e.g&&q[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),q[0]=e.r,q[1]=e.g,q[2]=e.b);else{if(Pn(q,e))return;t.uniform3fv(this.addr,e),Bn(q,e)}}function Fn(t,e){const q=this.cache;if(void 0!==e.x)q[0]===e.x&&q[1]===e.y&&q[2]===e.z&&q[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),q[0]=e.x,q[1]=e.y,q[2]=e.z,q[3]=e.w);else{if(Pn(q,e))return;t.uniform4fv(this.addr,e),Bn(q,e)}}function Hn(t,e){const q=this.cache,n=e.elements;if(void 0===n){if(Pn(q,e))return;t.uniformMatrix2fv(this.addr,!1,e),Bn(q,e)}else{if(Pn(q,n))return;Rn.set(n),t.uniformMatrix2fv(this.addr,!1,Rn),Bn(q,n)}}function Un(t,e){const q=this.cache,n=e.elements;if(void 0===n){if(Pn(q,e))return;t.uniformMatrix3fv(this.addr,!1,e),Bn(q,e)}else{if(Pn(q,n))return;Ln.set(n),t.uniformMatrix3fv(this.addr,!1,Ln),Bn(q,n)}}function Vn(t,e){const q=this.cache,n=e.elements;if(void 0===n){if(Pn(q,e))return;t.uniformMatrix4fv(this.addr,!1,e),Bn(q,e)}else{if(Pn(q,n))return;zn.set(n),t.uniformMatrix4fv(this.addr,!1,zn),Bn(q,n)}}function Gn(t,e){const q=this.cache;q[0]!==e&&(t.uniform1i(this.addr,e),q[0]=e)}function Wn(t,e){const q=this.cache;Pn(q,e)||(t.uniform2iv(this.addr,e),Bn(q,e))}function jn(t,e){const q=this.cache;Pn(q,e)||(t.uniform3iv(this.addr,e),Bn(q,e))}function Zn(t,e){const q=this.cache;Pn(q,e)||(t.uniform4iv(this.addr,e),Bn(q,e))}function Xn(t,e){const q=this.cache;q[0]!==e&&(t.uniform1ui(this.addr,e),q[0]=e)}function Yn(t,e){const q=this.cache;Pn(q,e)||(t.uniform2uiv(this.addr,e),Bn(q,e))}function Jn(t,e){const q=this.cache;Pn(q,e)||(t.uniform3uiv(this.addr,e),Bn(q,e))}function $n(t,e){const q=this.cache;Pn(q,e)||(t.uniform4uiv(this.addr,e),Bn(q,e))}function Kn(t,e,q){const n=this.cache,i=q.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),q.safeSetTexture2D(e||wn,i)}function Qn(t,e,q){const n=this.cache,i=q.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),q.setTexture3D(e||Sn,i)}function ti(t,e,q){const n=this.cache,i=q.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),q.safeSetTextureCube(e||En,i)}function ei(t,e,q){const n=this.cache,i=q.allocateTextureUnit();n[0]!==i&&(t.uniform1i(this.addr,i),n[0]=i),q.setTexture2DArray(e||Mn,i)}function qi(t,e){t.uniform1fv(this.addr,e)}function ni(t,e){const q=In(e,this.size,2);t.uniform2fv(this.addr,q)}function ii(t,e){const q=In(e,this.size,3);t.uniform3fv(this.addr,q)}function ri(t,e){const q=In(e,this.size,4);t.uniform4fv(this.addr,q)}function oi(t,e){const q=In(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,q)}function ai(t,e){const q=In(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,q)}function si(t,e){const q=In(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,q)}function li(t,e){t.uniform1iv(this.addr,e)}function ci(t,e){t.uniform2iv(this.addr,e)}function hi(t,e){t.uniform3iv(this.addr,e)}function ui(t,e){t.uniform4iv(this.addr,e)}function mi(t,e){t.uniform1uiv(this.addr,e)}function di(t,e){t.uniform2uiv(this.addr,e)}function pi(t,e){t.uniform3uiv(this.addr,e)}function fi(t,e){t.uniform4uiv(this.addr,e)}function gi(t,e,q){const n=e.length,i=kn(q,n);t.uniform1iv(this.addr,i);for(let t=0;t!==n;++t)q.safeSetTexture2D(e[t]||wn,i[t])}function xi(t,e,q){const n=e.length,i=kn(q,n);t.uniform1iv(this.addr,i);for(let t=0;t!==n;++t)q.safeSetTextureCube(e[t]||En,i[t])}function vi(t,e,q){this.id=t,this.addr=q,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Dn;case 35664:return On;case 35665:return Nn;case 35666:return Fn;case 35674:return Hn;case 35675:return Un;case 35676:return Vn;case 5124:case 35670:return Gn;case 35667:case 35671:return Wn;case 35668:case 35672:return jn;case 35669:case 35673:return Zn;case 5125:return Xn;case 36294:return Yn;case 36295:return Jn;case 36296:return $n;case 35678:case 36198:case 36298:case 36306:case 35682:return Kn;case 35679:case 36299:case 36307:return Qn;case 35680:case 36300:case 36308:case 36293:return ti;case 36289:case 36303:case 36311:case 36292:return ei}}(e.type)}function yi(t,e,q){this.id=t,this.addr=q,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return qi;case 35664:return ni;case 35665:return ii;case 35666:return ri;case 35674:return oi;case 35675:return ai;case 35676:return si;case 5124:case 35670:return li;case 35667:case 35671:return ci;case 35668:case 35672:return hi;case 35669:case 35673:return ui;case 5125:return mi;case 36294:return di;case 36295:return pi;case 36296:return fi;case 35678:case 36198:case 36298:case 36306:case 35682:return gi;case 35680:case 36300:case 36308:case 36293:return xi}}(e.type)}function _i(t){this.id=t,this.seq=[],this.map={}}yi.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),Bn(e,t)},_i.prototype.setValue=function(t,e,q){const n=this.seq;for(let i=0,r=n.length;i!==r;++i){const r=n[i];r.setValue(t,e[r.id],q)}};const bi=/(\w+)(\])?(\[|\.)?/g;function Ai(t,e){t.seq.push(e),t.map[e.id]=e}function wi(t,e,q){const n=t.name,i=n.length;for(bi.lastIndex=0;;){const r=bi.exec(n),o=bi.lastIndex;let a=r[1];const s="]"===r[2],l=r[3];if(s&&(a|=0),void 0===l||"["===l&&o+2===i){Ai(q,void 0===l?new vi(a,t,e):new yi(a,t,e));break}{let t=q.map[a];void 0===t&&(t=new _i(a),Ai(q,t)),q=t}}}function Mi(t,e){this.seq=[],this.map={};const q=t.getProgramParameter(e,35718);for(let n=0;n<q;++n){const q=t.getActiveUniform(e,n);wi(q,t.getUniformLocation(e,q.name),this)}}function Si(t,e,q){const n=t.createShader(e);return t.shaderSource(n,q),t.compileShader(n),n}Mi.prototype.setValue=function(t,e,q,n){const i=this.map[e];void 0!==i&&i.setValue(t,q,n)},Mi.prototype.setOptional=function(t,e,q){const n=e[q];void 0!==n&&this.setValue(t,q,n)},Mi.upload=function(t,e,q,n){for(let i=0,r=e.length;i!==r;++i){const r=e[i],o=q[r.id];!1!==o.needsUpdate&&r.setValue(t,o.value,n)}},Mi.seqWithValue=function(t,e){const q=[];for(let n=0,i=t.length;n!==i;++n){const i=t[n];i.id in e&&q.push(i)}return q};let Ei=0;function Ci(t){switch(t){case T:return["Linear","( value )"];case z:return["sRGB","( value )"];case R:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case L:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}function Ti(t,e,q){const n=t.getShaderParameter(e,35713),i=t.getShaderInfoLog(e).trim();return n&&""===i?"":q.toUpperCase()+"\n\n"+i+"\n\n"+function(t){const e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}(t.getShaderSource(e))}function zi(t,e){const q=Ci(e);return"vec4 "+t+"( vec4 value ) { return "+q[0]+"ToLinear"+q[1]+"; }"}function Li(t,e){const q=Ci(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+q[0]+q[1]+"; }"}function Ri(t,e){let q;switch(e){case 1:q="Linear";break;case 2:q="Reinhard";break;case 3:q="OptimizedCineon";break;case 4:q="ACESFilmic";break;case 5:q="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),q="Linear"}return"vec3 "+t+"( vec3 color ) { return "+q+"ToneMapping( color ); }"}function Ii(t){return""!==t}function Pi(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Bi(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const ki=/^[ \t]*#include +<([\w\d./]+)>/gm;function Di(t){return t.replace(ki,Oi)}function Oi(t,e){const q=Pq[e];if(void 0===q)throw new Error("Can not resolve #include <"+e+">");return Di(q)}const Ni=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Fi=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Hi(t){return t.replace(Fi,Vi).replace(Ni,Ui)}function Ui(t,e,q,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Vi(0,e,q,n)}function Vi(t,e,q,n){let i="";for(let t=parseInt(e);t<parseInt(q);t++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return i}function Gi(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Wi(t,e,q,n){const a=t.getContext(),s=q.defines;let l=q.vertexShader,c=q.fragmentShader;const h=function(t){let e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(q),u=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case i:case r:e="ENVMAP_TYPE_CUBE";break;case o:case 307:e="ENVMAP_TYPE_CUBE_UV"}return e}(q),m=function(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case r:case 307:e="ENVMAP_MODE_REFRACTION"}return e}(q),d=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(q),p=t.gammaFactor>0?t.gammaFactor:1,f=q.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Ii).join("\n")}(q),g=function(t){const e=[];for(const q in t){const n=t[q];!1!==n&&e.push("#define "+q+" "+n)}return e.join("\n")}(s),x=a.createProgram();let y,_,b=q.glslVersion?"#version "+q.glslVersion+"\n":"";q.isRawShaderMaterial?(y=[g].filter(Ii).join("\n"),y.length>0&&(y+="\n"),_=[f,g].filter(Ii).join("\n"),_.length>0&&(_+="\n")):(y=[Gi(q),"#define SHADER_NAME "+q.shaderName,g,q.instancing?"#define USE_INSTANCING":"",q.instancingColor?"#define USE_INSTANCING_COLOR":"",q.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+p,"#define MAX_BONES "+q.maxBones,q.useFog&&q.fog?"#define USE_FOG":"",q.useFog&&q.fogExp2?"#define FOG_EXP2":"",q.map?"#define USE_MAP":"",q.envMap?"#define USE_ENVMAP":"",q.envMap?"#define "+m:"",q.lightMap?"#define USE_LIGHTMAP":"",q.aoMap?"#define USE_AOMAP":"",q.emissiveMap?"#define USE_EMISSIVEMAP":"",q.bumpMap?"#define USE_BUMPMAP":"",q.normalMap?"#define USE_NORMALMAP":"",q.normalMap&&q.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",q.normalMap&&q.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",q.clearcoatMap?"#define USE_CLEARCOATMAP":"",q.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",q.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",q.displacementMap&&q.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",q.specularMap?"#define USE_SPECULARMAP":"",q.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",q.specularColorMap?"#define USE_SPECULARCOLORMAP":"",q.roughnessMap?"#define USE_ROUGHNESSMAP":"",q.metalnessMap?"#define USE_METALNESSMAP":"",q.alphaMap?"#define USE_ALPHAMAP":"",q.transmission?"#define USE_TRANSMISSION":"",q.transmissionMap?"#define USE_TRANSMISSIONMAP":"",q.thicknessMap?"#define USE_THICKNESSMAP":"",q.sheenColorMap?"#define USE_SHEENCOLORMAP":"",q.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",q.vertexTangents?"#define USE_TANGENT":"",q.vertexColors?"#define USE_COLOR":"",q.vertexAlphas?"#define USE_COLOR_ALPHA":"",q.vertexUvs?"#define USE_UV":"",q.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",q.flatShading?"#define FLAT_SHADED":"",q.skinning?"#define USE_SKINNING":"",q.useVertexTexture?"#define BONE_TEXTURE":"",q.morphTargets?"#define USE_MORPHTARGETS":"",q.morphNormals&&!1===q.flatShading?"#define USE_MORPHNORMALS":"",q.morphTargets&&q.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",q.morphTargets&&q.isWebGL2?"#define MORPHTARGETS_COUNT "+q.morphTargetsCount:"",q.doubleSided?"#define DOUBLE_SIDED":"",q.flipSided?"#define FLIP_SIDED":"",q.shadowMapEnabled?"#define USE_SHADOWMAP":"",q.shadowMapEnabled?"#define "+h:"",q.sizeAttenuation?"#define USE_SIZEATTENUATION":"",q.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",q.logarithmicDepthBuffer&&q.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Ii).join("\n"),_=[f,Gi(q),"#define SHADER_NAME "+q.shaderName,g,"#define GAMMA_FACTOR "+p,q.useFog&&q.fog?"#define USE_FOG":"",q.useFog&&q.fogExp2?"#define FOG_EXP2":"",q.map?"#define USE_MAP":"",q.matcap?"#define USE_MATCAP":"",q.envMap?"#define USE_ENVMAP":"",q.envMap?"#define "+u:"",q.envMap?"#define "+m:"",q.envMap?"#define "+d:"",q.lightMap?"#define USE_LIGHTMAP":"",q.aoMap?"#define USE_AOMAP":"",q.emissiveMap?"#define USE_EMISSIVEMAP":"",q.bumpMap?"#define USE_BUMPMAP":"",q.normalMap?"#define USE_NORMALMAP":"",q.normalMap&&q.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",q.normalMap&&q.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",q.clearcoat?"#define USE_CLEARCOAT":"",q.clearcoatMap?"#define USE_CLEARCOATMAP":"",q.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",q.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",q.specularMap?"#define USE_SPECULARMAP":"",q.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",q.specularColorMap?"#define USE_SPECULARCOLORMAP":"",q.roughnessMap?"#define USE_ROUGHNESSMAP":"",q.metalnessMap?"#define USE_METALNESSMAP":"",q.alphaMap?"#define USE_ALPHAMAP":"",q.alphaTest?"#define USE_ALPHATEST":"",q.sheen?"#define USE_SHEEN":"",q.sheenColorMap?"#define USE_SHEENCOLORMAP":"",q.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",q.transmission?"#define USE_TRANSMISSION":"",q.transmissionMap?"#define USE_TRANSMISSIONMAP":"",q.thicknessMap?"#define USE_THICKNESSMAP":"",q.vertexTangents?"#define USE_TANGENT":"",q.vertexColors||q.instancingColor?"#define USE_COLOR":"",q.vertexAlphas?"#define USE_COLOR_ALPHA":"",q.vertexUvs?"#define USE_UV":"",q.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",q.gradientMap?"#define USE_GRADIENTMAP":"",q.flatShading?"#define FLAT_SHADED":"",q.doubleSided?"#define DOUBLE_SIDED":"",q.flipSided?"#define FLIP_SIDED":"",q.shadowMapEnabled?"#define USE_SHADOWMAP":"",q.shadowMapEnabled?"#define "+h:"",q.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",q.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",q.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",q.logarithmicDepthBuffer&&q.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(q.extensionShaderTextureLOD||q.envMap)&&q.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==q.toneMapping?"#define TONE_MAPPING":"",0!==q.toneMapping?Pq.tonemapping_pars_fragment:"",0!==q.toneMapping?Ri("toneMapping",q.toneMapping):"",q.dithering?"#define DITHERING":"",q.format===v?"#define OPAQUE":"",Pq.encodings_pars_fragment,q.map?zi("mapTexelToLinear",q.mapEncoding):"",q.matcap?zi("matcapTexelToLinear",q.matcapEncoding):"",q.envMap?zi("envMapTexelToLinear",q.envMapEncoding):"",q.emissiveMap?zi("emissiveMapTexelToLinear",q.emissiveMapEncoding):"",q.specularColorMap?zi("specularColorMapTexelToLinear",q.specularColorMapEncoding):"",q.sheenColorMap?zi("sheenColorMapTexelToLinear",q.sheenColorMapEncoding):"",q.lightMap?zi("lightMapTexelToLinear",q.lightMapEncoding):"",Li("linearToOutputTexel",q.outputEncoding),q.depthPacking?"#define DEPTH_PACKING "+q.depthPacking:"","\n"].filter(Ii).join("\n")),l=Di(l),l=Pi(l,q),l=Bi(l,q),c=Di(c),c=Pi(c,q),c=Bi(c,q),l=Hi(l),c=Hi(c),q.isWebGL2&&!0!==q.isRawShaderMaterial&&(b="#version 300 es\n",y=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+y,_=["#define varying in",q.glslVersion===k?"":"out highp vec4 pc_fragColor;",q.glslVersion===k?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const A=b+_+c,w=Si(a,35633,b+y+l),M=Si(a,35632,A);if(a.attachShader(x,w),a.attachShader(x,M),void 0!==q.index0AttributeName?a.bindAttribLocation(x,0,q.index0AttributeName):!0===q.morphTargets&&a.bindAttribLocation(x,0,"position"),a.linkProgram(x),t.debug.checkShaderErrors){const t=a.getProgramInfoLog(x).trim(),e=a.getShaderInfoLog(w).trim(),q=a.getShaderInfoLog(M).trim();let n=!0,i=!0;if(!1===a.getProgramParameter(x,35714)){n=!1;const e=Ti(a,w,"vertex"),q=Ti(a,M,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(x,35715)+"\n\nProgram Info Log: "+t+"\n"+e+"\n"+q)}else""!==t?console.warn("THREE.WebGLProgram: Program Info Log:",t):""!==e&&""!==q||(i=!1);i&&(this.diagnostics={runnable:n,programLog:t,vertexShader:{log:e,prefix:y},fragmentShader:{log:q,prefix:_}})}let S,E;return a.deleteShader(w),a.deleteShader(M),this.getUniforms=function(){return void 0===S&&(S=new Mi(a,x)),S},this.getAttributes=function(){return void 0===E&&(E=function(t,e){const q={},n=t.getProgramParameter(e,35721);for(let i=0;i<n;i++){const n=t.getActiveAttrib(e,i),r=n.name;let o=1;35674===n.type&&(o=2),35675===n.type&&(o=3),35676===n.type&&(o=4),q[r]={type:n.type,location:t.getAttribLocation(e,r),locationSize:o}}return q}(a,x)),E},this.destroy=function(){n.releaseStatesOfProgram(this),a.deleteProgram(x),this.program=void 0},this.name=q.shaderName,this.id=Ei++,this.cacheKey=e,this.usedTimes=1,this.program=x,this.vertexShader=w,this.fragmentShader=M,this}function ji(t,e,q,n,i,r,a){const s=[],l=i.isWebGL2,c=i.logarithmicDepthBuffer,h=i.floatVertexTextures,u=i.maxVertexUniforms,d=i.vertexTextures;let p=i.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},g=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoat","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap",,"roughnessMap","metalnessMap","gradientMap","alphaMap","alphaTest","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","morphTargetsCount","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","format","specularIntensityMap","specularColorMap","specularColorMapEncoding","transmission","transmissionMap","thicknessMap","sheen","sheenColorMap","sheenColorMapEncoding","sheenRoughnessMap"];function x(t){let e;return t&&t.isTexture?e=t.encoding:t&&t.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=t.texture.encoding):e=T,l&&t&&t.isTexture&&t.format===y&&t.type===m&&t.encoding===z&&(e=T),e}return{getParameters:function(r,s,m,g,v){const y=g.fog,_=r.isMeshStandardMaterial?g.environment:null,b=(r.isMeshStandardMaterial?q:e).get(r.envMap||_),A=f[r.type],w=v.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(h)return 1024;{const t=u,q=Math.floor((t-20)/4),n=Math.min(q,e.length);return n<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+n+"."),0):n}}(v):0;let M,S;if(null!==r.precision&&(p=i.getMaxPrecision(r.precision),p!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",p,"instead.")),A){const t=kq[A];M=t.vertexShader,S=t.fragmentShader}else M=r.vertexShader,S=r.fragmentShader;const E=t.getRenderTarget(),C=r.alphaTest>0,T=r.clearcoat>0;return{isWebGL2:l,shaderID:A,shaderName:r.type,vertexShader:M,fragmentShader:S,defines:r.defines,isRawShaderMaterial:!0===r.isRawShaderMaterial,glslVersion:r.glslVersion,precision:p,instancing:!0===v.isInstancedMesh,instancingColor:!0===v.isInstancedMesh&&null!==v.instanceColor,supportsVertexTextures:d,outputEncoding:null!==E?x(E.texture):t.outputEncoding,map:!!r.map,mapEncoding:x(r.map),matcap:!!r.matcap,matcapEncoding:x(r.matcap),envMap:!!b,envMapMode:b&&b.mapping,envMapEncoding:x(b),envMapCubeUV:!!b&&(b.mapping===o||307===b.mapping),lightMap:!!r.lightMap,lightMapEncoding:x(r.lightMap),aoMap:!!r.aoMap,emissiveMap:!!r.emissiveMap,emissiveMapEncoding:x(r.emissiveMap),bumpMap:!!r.bumpMap,normalMap:!!r.normalMap,objectSpaceNormalMap:1===r.normalMapType,tangentSpaceNormalMap:0===r.normalMapType,clearcoat:T,clearcoatMap:T&&!!r.clearcoatMap,clearcoatRoughnessMap:T&&!!r.clearcoatRoughnessMap,clearcoatNormalMap:T&&!!r.clearcoatNormalMap,displacementMap:!!r.displacementMap,roughnessMap:!!r.roughnessMap,metalnessMap:!!r.metalnessMap,specularMap:!!r.specularMap,specularIntensityMap:!!r.specularIntensityMap,specularColorMap:!!r.specularColorMap,specularColorMapEncoding:x(r.specularColorMap),alphaMap:!!r.alphaMap,alphaTest:C,gradientMap:!!r.gradientMap,sheen:r.sheen>0,sheenColorMap:!!r.sheenColorMap,sheenColorMapEncoding:x(r.sheenColorMap),sheenRoughnessMap:!!r.sheenRoughnessMap,transmission:r.transmission>0,transmissionMap:!!r.transmissionMap,thicknessMap:!!r.thicknessMap,combine:r.combine,vertexTangents:!!r.normalMap&&!!v.geometry&&!!v.geometry.attributes.tangent,vertexColors:r.vertexColors,vertexAlphas:!0===r.vertexColors&&!!v.geometry&&!!v.geometry.attributes.color&&4===v.geometry.attributes.color.itemSize,vertexUvs:!!r.map||!!r.bumpMap||!!r.normalMap||!!r.specularMap||!!r.alphaMap||!!r.emissiveMap||!!r.roughnessMap||!!r.metalnessMap||!!r.clearcoatMap||!!r.clearcoatRoughnessMap||!!r.clearcoatNormalMap||!!r.displacementMap||!!r.transmissionMap||!!r.thicknessMap||!!r.specularIntensityMap||!!r.specularColorMap||!!r.sheenColorMap||r.sheenRoughnessMap,uvsVertexOnly:!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatNormalMap||r.transmission>0||r.transmissionMap||r.thicknessMap||r.specularIntensityMap||r.specularColorMap||!!r.sheen>0||r.sheenColorMap||r.sheenRoughnessMap||!r.displacementMap),fog:!!y,useFog:r.fog,fogExp2:y&&y.isFogExp2,flatShading:!!r.flatShading,sizeAttenuation:r.sizeAttenuation,logarithmicDepthBuffer:c,skinning:!0===v.isSkinnedMesh&&w>0,maxBones:w,useVertexTexture:h,morphTargets:!!v.geometry&&!!v.geometry.morphAttributes.position,morphNormals:!!v.geometry&&!!v.geometry.morphAttributes.normal,morphTargetsCount:v.geometry&&v.geometry.morphAttributes.position?v.geometry.morphAttributes.position.length:0,numDirLights:s.directional.length,numPointLights:s.point.length,numSpotLights:s.spot.length,numRectAreaLights:s.rectArea.length,numHemiLights:s.hemi.length,numDirLightShadows:s.directionalShadowMap.length,numPointLightShadows:s.pointShadowMap.length,numSpotLightShadows:s.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,format:r.format,dithering:r.dithering,shadowMapEnabled:t.shadowMap.enabled&&m.length>0,shadowMapType:t.shadowMap.type,toneMapping:r.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:r.premultipliedAlpha,doubleSided:2===r.side,flipSided:1===r.side,depthPacking:void 0!==r.depthPacking&&r.depthPacking,index0AttributeName:r.index0AttributeName,extensionDerivatives:r.extensions&&r.extensions.derivatives,extensionFragDepth:r.extensions&&r.extensions.fragDepth,extensionDrawBuffers:r.extensions&&r.extensions.drawBuffers,extensionShaderTextureLOD:r.extensions&&r.extensions.shaderTextureLOD,rendererExtensionFragDepth:l||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:l||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:l||n.has("EXT_shader_texture_lod"),customProgramCacheKey:r.customProgramCacheKey()}},getProgramCacheKey:function(e){const q=[];if(e.shaderID?q.push(e.shaderID):(q.push(tt(e.fragmentShader)),q.push(tt(e.vertexShader))),void 0!==e.defines)for(const t in e.defines)q.push(t),q.push(e.defines[t]);if(!1===e.isRawShaderMaterial){for(let t=0;t<g.length;t++)q.push(e[g[t]]);q.push(t.outputEncoding),q.push(t.gammaFactor)}return q.push(e.customProgramCacheKey),q.join()},getUniforms:function(t){const e=f[t.type];let q;if(e){const t=kq[e];q=fq.clone(t.uniforms)}else q=t.uniforms;return q},acquireProgram:function(e,q){let n;for(let t=0,e=s.length;t<e;t++){const e=s[t];if(e.cacheKey===q){n=e,++n.usedTimes;break}}return void 0===n&&(n=new Wi(t,q,e,r),s.push(n)),n},releaseProgram:function(t){if(0==--t.usedTimes){const e=s.indexOf(t);s[e]=s[s.length-1],s.pop(),t.destroy()}},programs:s}}function Zi(){let t=new WeakMap;return{get:function(e){let q=t.get(e);return void 0===q&&(q={},t.set(e,q)),q},remove:function(e){t.delete(e)},update:function(e,q,n){t.get(e)[q]=n},dispose:function(){t=new WeakMap}}}function Xi(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Yi(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Ji(t){const e=[];let q=0;const n=[],i=[],r=[],o={id:-1};function a(n,i,r,a,s,l){let c=e[q];const h=t.get(r);return void 0===c?(c={id:n.id,object:n,geometry:i,material:r,program:h.program||o,groupOrder:a,renderOrder:n.renderOrder,z:s,group:l},e[q]=c):(c.id=n.id,c.object=n,c.geometry=i,c.material=r,c.program=h.program||o,c.groupOrder=a,c.renderOrder=n.renderOrder,c.z=s,c.group=l),q++,c}return{opaque:n,transmissive:i,transparent:r,init:function(){q=0,n.length=0,i.length=0,r.length=0},push:function(t,e,q,o,s,l){const c=a(t,e,q,o,s,l);q.transmission>0?i.push(c):!0===q.transparent?r.push(c):n.push(c)},unshift:function(t,e,q,o,s,l){const c=a(t,e,q,o,s,l);q.transmission>0?i.unshift(c):!0===q.transparent?r.unshift(c):n.unshift(c)},finish:function(){for(let t=q,n=e.length;t<n;t++){const q=e[t];if(null===q.id)break;q.id=null,q.object=null,q.geometry=null,q.material=null,q.program=null,q.group=null}},sort:function(t,e){n.length>1&&n.sort(t||Xi),i.length>1&&i.sort(e||Yi),r.length>1&&r.sort(e||Yi)}}}function $i(t){let e=new WeakMap;return{get:function(q,n){let i;return!1===e.has(q)?(i=new Ji(t),e.set(q,[i])):n>=e.get(q).length?(i=new Ji(t),e.get(q).push(i)):i=e.get(q)[n],i},dispose:function(){e=new WeakMap}}}function Ki(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let q;switch(e.type){case"DirectionalLight":q={direction:new ct,color:new Re};break;case"SpotLight":q={position:new ct,direction:new ct,color:new Re,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":q={position:new ct,color:new Re,distance:0,decay:0};break;case"HemisphereLight":q={direction:new ct,skyColor:new Re,groundColor:new Re};break;case"RectAreaLight":q={color:new Re,position:new ct,halfWidth:new ct,halfHeight:new ct}}return t[e.id]=q,q}}}let Qi=0;function tr(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function er(t,e){const q=new Ki,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let q;switch(e.type){case"DirectionalLight":case"SpotLight":q={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new J};break;case"PointLight":q={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new J,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=q,q}}}(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)i.probe.push(new ct);const r=new ct,o=new Ht,a=new Ht;return{setup:function(r,o){let a=0,s=0,l=0;for(let t=0;t<9;t++)i.probe[t].set(0,0,0);let c=0,h=0,u=0,m=0,d=0,p=0,f=0,g=0;r.sort(tr);const x=!0!==o?Math.PI:1;for(let t=0,e=r.length;t<e;t++){const e=r[t],o=e.color,v=e.intensity,y=e.distance,_=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)a+=o.r*v*x,s+=o.g*v*x,l+=o.b*v*x;else if(e.isLightProbe)for(let t=0;t<9;t++)i.probe[t].addScaledVector(e.sh.coefficients[t],v);else if(e.isDirectionalLight){const t=q.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*x),e.castShadow){const t=e.shadow,q=n.get(e);q.shadowBias=t.bias,q.shadowNormalBias=t.normalBias,q.shadowRadius=t.radius,q.shadowMapSize=t.mapSize,i.directionalShadow[c]=q,i.directionalShadowMap[c]=_,i.directionalShadowMatrix[c]=e.shadow.matrix,p++}i.directional[c]=t,c++}else if(e.isSpotLight){const t=q.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(o).multiplyScalar(v*x),t.distance=y,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,q=n.get(e);q.shadowBias=t.bias,q.shadowNormalBias=t.normalBias,q.shadowRadius=t.radius,q.shadowMapSize=t.mapSize,i.spotShadow[u]=q,i.spotShadowMap[u]=_,i.spotShadowMatrix[u]=e.shadow.matrix,g++}i.spot[u]=t,u++}else if(e.isRectAreaLight){const t=q.get(e);t.color.copy(o).multiplyScalar(v),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),i.rectArea[m]=t,m++}else if(e.isPointLight){const t=q.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*x),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,q=n.get(e);q.shadowBias=t.bias,q.shadowNormalBias=t.normalBias,q.shadowRadius=t.radius,q.shadowMapSize=t.mapSize,q.shadowCameraNear=t.camera.near,q.shadowCameraFar=t.camera.far,i.pointShadow[h]=q,i.pointShadowMap[h]=_,i.pointShadowMatrix[h]=e.shadow.matrix,f++}i.point[h]=t,h++}else if(e.isHemisphereLight){const t=q.get(e);t.skyColor.copy(e.color).multiplyScalar(v*x),t.groundColor.copy(e.groundColor).multiplyScalar(v*x),i.hemi[d]=t,d++}}m>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(i.rectAreaLTC1=Bq.LTC_FLOAT_1,i.rectAreaLTC2=Bq.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(i.rectAreaLTC1=Bq.LTC_HALF_1,i.rectAreaLTC2=Bq.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=a,i.ambient[1]=s,i.ambient[2]=l;const v=i.hash;v.directionalLength===c&&v.pointLength===h&&v.spotLength===u&&v.rectAreaLength===m&&v.hemiLength===d&&v.numDirectionalShadows===p&&v.numPointShadows===f&&v.numSpotShadows===g||(i.directional.length=c,i.spot.length=u,i.rectArea.length=m,i.point.length=h,i.hemi.length=d,i.directionalShadow.length=p,i.directionalShadowMap.length=p,i.pointShadow.length=f,i.pointShadowMap.length=f,i.spotShadow.length=g,i.spotShadowMap.length=g,i.directionalShadowMatrix.length=p,i.pointShadowMatrix.length=f,i.spotShadowMatrix.length=g,v.directionalLength=c,v.pointLength=h,v.spotLength=u,v.rectAreaLength=m,v.hemiLength=d,v.numDirectionalShadows=p,v.numPointShadows=f,v.numSpotShadows=g,i.version=Qi++)},setupView:function(t,e){let q=0,n=0,s=0,l=0,c=0;const h=e.matrixWorldInverse;for(let e=0,u=t.length;e<u;e++){const u=t[e];if(u.isDirectionalLight){const t=i.directional[q];t.direction.setFromMatrixPosition(u.matrixWorld),r.setFromMatrixPosition(u.target.matrixWorld),t.direction.sub(r),t.direction.transformDirection(h),q++}else if(u.isSpotLight){const t=i.spot[s];t.position.setFromMatrixPosition(u.matrixWorld),t.position.applyMatrix4(h),t.direction.setFromMatrixPosition(u.matrixWorld),r.setFromMatrixPosition(u.target.matrixWorld),t.direction.sub(r),t.direction.transformDirection(h),s++}else if(u.isRectAreaLight){const t=i.rectArea[l];t.position.setFromMatrixPosition(u.matrixWorld),t.position.applyMatrix4(h),a.identity(),o.copy(u.matrixWorld),o.premultiply(h),a.extractRotation(o),t.halfWidth.set(.5*u.width,0,0),t.halfHeight.set(0,.5*u.height,0),t.halfWidth.applyMatrix4(a),t.halfHeight.applyMatrix4(a),l++}else if(u.isPointLight){const t=i.point[n];t.position.setFromMatrixPosition(u.matrixWorld),t.position.applyMatrix4(h),n++}else if(u.isHemisphereLight){const t=i.hemi[c];t.direction.setFromMatrixPosition(u.matrixWorld),t.direction.transformDirection(h),t.direction.normalize(),c++}}},state:i}}function qr(t,e){const q=new er(t,e),n=[],i=[];return{init:function(){n.length=0,i.length=0},state:{lightsArray:n,shadowsArray:i,lights:q},setupLights:function(t){q.setup(n,t)},setupLightsView:function(t){q.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){i.push(t)}}}function nr(t,e){let q=new WeakMap;return{get:function(n,i=0){let r;return!1===q.has(n)?(r=new qr(t,e),q.set(n,[r])):i>=q.get(n).length?(r=new qr(t,e),q.get(n).push(r)):r=q.get(n)[i],r},dispose:function(){q=new WeakMap}}}class ir extends Me{constructor(t){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}ir.prototype.isMeshDepthMaterial=!0;class rr extends Me{constructor(t){super(),this.type="MeshDistanceMaterial",this.referencePosition=new ct,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function or(t,e,q){let n=new zq;const i=new J,r=new J,o=new ot,a=new ir({depthPacking:3201}),s=new rr,l={},u=q.maxTextureSize,m={0:1,1:0,2:2},d=new gq({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new J},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),p=d.clone();p.defines.HORIZONTAL_PASS=1;const f=new Ze;f.setAttribute("position",new ke(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const g=new hq(f,d),x=this;function v(q,n){const i=e.update(g);d.defines.VSM_SAMPLES!==q.blurSamples&&(d.defines.VSM_SAMPLES=q.blurSamples,p.defines.VSM_SAMPLES=q.blurSamples,d.needsUpdate=!0,p.needsUpdate=!0),d.uniforms.shadow_pass.value=q.map.texture,d.uniforms.resolution.value=q.mapSize,d.uniforms.radius.value=q.radius,t.setRenderTarget(q.mapPass),t.clear(),t.renderBufferDirect(n,null,i,d,g,null),p.uniforms.shadow_pass.value=q.mapPass.texture,p.uniforms.resolution.value=q.mapSize,p.uniforms.radius.value=q.radius,t.setRenderTarget(q.map),t.clear(),t.renderBufferDirect(n,null,i,p,g,null)}function _(e,q,n,i,r,o,c){let h=null;const u=!0===i.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(h=void 0!==u?u:!0===i.isPointLight?s:a,t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0){const t=h.uuid,e=n.uuid;let q=l[t];void 0===q&&(q={},l[t]=q);let i=q[e];void 0===i&&(i=h.clone(),q[e]=i),h=i}return h.visible=n.visible,h.wireframe=n.wireframe,h.side=3===c?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:m[n.side],h.alphaMap=n.alphaMap,h.alphaTest=n.alphaTest,h.clipShadows=n.clipShadows,h.clippingPlanes=n.clippingPlanes,h.clipIntersection=n.clipIntersection,h.displacementMap=n.displacementMap,h.displacementScale=n.displacementScale,h.displacementBias=n.displacementBias,h.wireframeLinewidth=n.wireframeLinewidth,h.linewidth=n.linewidth,!0===i.isPointLight&&!0===h.isMeshDistanceMaterial&&(h.referencePosition.setFromMatrixPosition(i.matrixWorld),h.nearDistance=r,h.farDistance=o),h}function b(q,i,r,o,a){if(!1===q.visible)return;if(q.layers.test(i.layers)&&(q.isMesh||q.isLine||q.isPoints)&&(q.castShadow||q.receiveShadow&&3===a)&&(!q.frustumCulled||n.intersectsObject(q))){q.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,q.matrixWorld);const n=e.update(q),i=q.material;if(Array.isArray(i)){const e=n.groups;for(let s=0,l=e.length;s<l;s++){const l=e[s],c=i[l.materialIndex];if(c&&c.visible){const e=_(q,0,c,o,r.near,r.far,a);t.renderBufferDirect(r,null,n,e,q,l)}}}else if(i.visible){const e=_(q,0,i,o,r.near,r.far,a);t.renderBufferDirect(r,null,n,e,q,null)}}const s=q.children;for(let t=0,e=s.length;t<e;t++)b(s[t],i,r,o,a)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,q,a){if(!1===x.enabled)return;if(!1===x.autoUpdate&&!1===x.needsUpdate)return;if(0===e.length)return;const s=t.getRenderTarget(),l=t.getActiveCubeFace(),m=t.getActiveMipmapLevel(),d=t.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let s=0,l=e.length;s<l;s++){const l=e[s],m=l.shadow;if(void 0===m){console.warn("THREE.WebGLShadowMap:",l,"has no shadow.");continue}if(!1===m.autoUpdate&&!1===m.needsUpdate)continue;i.copy(m.mapSize);const p=m.getFrameExtents();if(i.multiply(p),r.copy(m.mapSize),(i.x>u||i.y>u)&&(i.x>u&&(r.x=Math.floor(u/p.x),i.x=r.x*p.x,m.mapSize.x=r.x),i.y>u&&(r.y=Math.floor(u/p.y),i.y=r.y*p.y,m.mapSize.y=r.y)),null===m.map&&!m.isPointLightShadow&&3===this.type){const t={minFilter:h,magFilter:h,format:y};m.map=new at(i.x,i.y,t),m.map.texture.name=l.name+".shadowMap",m.mapPass=new at(i.x,i.y,t),m.camera.updateProjectionMatrix()}if(null===m.map){const t={minFilter:c,magFilter:c,format:y};m.map=new at(i.x,i.y,t),m.map.texture.name=l.name+".shadowMap",m.camera.updateProjectionMatrix()}t.setRenderTarget(m.map),t.clear();const f=m.getViewportCount();for(let t=0;t<f;t++){const e=m.getViewport(t);o.set(r.x*e.x,r.y*e.y,r.x*e.z,r.y*e.w),d.viewport(o),m.updateMatrices(l,t),n=m.getFrustum(),b(q,a,m.camera,l,this.type)}m.isPointLightShadow||3!==this.type||v(m,a),m.needsUpdate=!1}x.needsUpdate=!1,t.setRenderTarget(s,l,m)}}function ar(t,e,q){const i=q.isWebGL2,r=new function(){let e=!1;const q=new ot;let n=null;const i=new ot(0,0,0,0);return{setMask:function(q){n===q||e||(t.colorMask(q,q,q,q),n=q)},setLocked:function(t){e=t},setClear:function(e,n,r,o,a){!0===a&&(e*=o,n*=o,r*=o),q.set(e,n,r,o),!1===i.equals(q)&&(t.clearColor(e,n,r,o),i.copy(q))},reset:function(){e=!1,n=null,i.set(-1,0,0,0)}}},o=new function(){let e=!1,q=null,n=null,i=null;return{setTest:function(t){t?O(2929):N(2929)},setMask:function(n){q===n||e||(t.depthMask(n),q=n)},setFunc:function(e){if(n!==e){if(e)switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;default:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517)}else t.depthFunc(515);n=e}},setLocked:function(t){e=t},setClear:function(e){i!==e&&(t.clearDepth(e),i=e)},reset:function(){e=!1,q=null,n=null,i=null}}},a=new function(){let e=!1,q=null,n=null,i=null,r=null,o=null,a=null,s=null,l=null;return{setTest:function(t){e||(t?O(2960):N(2960))},setMask:function(n){q===n||e||(t.stencilMask(n),q=n)},setFunc:function(e,q,o){n===e&&i===q&&r===o||(t.stencilFunc(e,q,o),n=e,i=q,r=o)},setOp:function(e,q,n){o===e&&a===q&&s===n||(t.stencilOp(e,q,n),o=e,a=q,s=n)},setLocked:function(t){e=t},setClear:function(e){l!==e&&(t.clearStencil(e),l=e)},reset:function(){e=!1,q=null,n=null,i=null,r=null,o=null,a=null,s=null,l=null}}};let s={},l=null,c={},h=null,u=!1,m=null,d=null,p=null,f=null,g=null,x=null,v=null,y=!1,_=null,b=null,A=null,w=null,M=null;const S=t.getParameter(35661);let E=!1,C=0;const T=t.getParameter(7938);-1!==T.indexOf("WebGL")?(C=parseFloat(/^WebGL (\d)/.exec(T)[1]),E=C>=1):-1!==T.indexOf("OpenGL ES")&&(C=parseFloat(/^OpenGL ES (\d)/.exec(T)[1]),E=C>=2);let z=null,L={};const R=t.getParameter(3088),I=t.getParameter(2978),P=(new ot).fromArray(R),B=(new ot).fromArray(I);function k(e,q,n){const i=new Uint8Array(4),r=t.createTexture();t.bindTexture(e,r),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<n;e++)t.texImage2D(q+e,0,6408,1,1,0,6408,5121,i);return r}const D={};function O(e){!0!==s[e]&&(t.enable(e),s[e]=!0)}function N(e){!1!==s[e]&&(t.disable(e),s[e]=!1)}D[3553]=k(3553,3553,1),D[34067]=k(34067,34069,6),r.setClear(0,0,0,1),o.setClear(1),a.setClear(0),O(2929),o.setFunc(3),V(!1),G(1),O(2884),U(0);const F={[n]:32774,101:32778,102:32779};if(i)F[103]=32775,F[104]=32776;else{const t=e.get("EXT_blend_minmax");null!==t&&(F[103]=t.MIN_EXT,F[104]=t.MAX_EXT)}const H={200:0,201:1,202:768,204:770,210:776,208:774,206:772,203:769,205:771,209:775,207:773};function U(e,q,i,r,o,a,s,l){if(0!==e){if(!1===u&&(O(3042),u=!0),5===e)o=o||q,a=a||i,s=s||r,q===d&&o===g||(t.blendEquationSeparate(F[q],F[o]),d=q,g=o),i===p&&r===f&&a===x&&s===v||(t.blendFuncSeparate(H[i],H[r],H[a],H[s]),p=i,f=r,x=a,v=s),m=e,y=null;else if(e!==m||l!==y){if(d===n&&g===n||(t.blendEquation(32774),d=n,g=n),l)switch(e){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,0,769,771);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFunc(0,769);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}p=null,f=null,x=null,v=null,m=e,y=l}}else!0===u&&(N(3042),u=!1)}function V(e){_!==e&&(e?t.frontFace(2304):t.frontFace(2305),_=e)}function G(e){0!==e?(O(2884),e!==b&&(1===e?t.cullFace(1029):2===e?t.cullFace(1028):t.cullFace(1032))):N(2884),b=e}function W(e,q,n){e?(O(32823),w===q&&M===n||(t.polygonOffset(q,n),w=q,M=n)):N(32823)}function j(e){void 0===e&&(e=33984+S-1),z!==e&&(t.activeTexture(e),z=e)}return{buffers:{color:r,depth:o,stencil:a},enable:O,disable:N,bindFramebuffer:function(e,q){return null===q&&null!==l&&(q=l),c[e]!==q&&(t.bindFramebuffer(e,q),c[e]=q,i&&(36009===e&&(c[36160]=q),36160===e&&(c[36009]=q)),!0)},bindXRFramebuffer:function(e){e!==l&&(t.bindFramebuffer(36160,e),l=e)},useProgram:function(e){return h!==e&&(t.useProgram(e),h=e,!0)},setBlending:U,setMaterial:function(t,e){2===t.side?N(2884):O(2884);let q=1===t.side;e&&(q=!q),V(q),1===t.blending&&!1===t.transparent?U(0):U(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),o.setFunc(t.depthFunc),o.setTest(t.depthTest),o.setMask(t.depthWrite),r.setMask(t.colorWrite);const n=t.stencilWrite;a.setTest(n),n&&(a.setMask(t.stencilWriteMask),a.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),a.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),W(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?O(32926):N(32926)},setFlipSided:V,setCullFace:G,setLineWidth:function(e){e!==A&&(E&&t.lineWidth(e),A=e)},setPolygonOffset:W,setScissorTest:function(t){t?O(3089):N(3089)},activeTexture:j,bindTexture:function(e,q){null===z&&j();let n=L[z];void 0===n&&(n={type:void 0,texture:void 0},L[z]=n),n.type===e&&n.texture===q||(t.bindTexture(e,q||D[e]),n.type=e,n.texture=q)},unbindTexture:function(){const e=L[z];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===P.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),P.copy(e))},viewport:function(e){!1===B.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),B.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===i&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),s={},z=null,L={},l=null,c={},h=null,u=!1,m=null,d=null,p=null,f=null,g=null,x=null,v=null,y=!1,_=null,b=null,A=null,w=null,M=null,P.set(0,0,t.canvas.width,t.canvas.height),B.set(0,0,t.canvas.width,t.canvas.height),r.reset(),o.reset(),a.reset()}}}function sr(t,e,q,n,i,r,o){const m=i.isWebGL2,A=i.maxTextures,w=i.maxCubemapSize,M=i.maxTextureSize,S=i.maxSamples,E=new WeakMap;let C,T=!1;try{T="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function L(t,e){return T?new OffscreenCanvas(t,e):Q("canvas")}function R(t,e,q,n){let i=1;if((t.width>n||t.height>n)&&(i=n/Math.max(t.width,t.height)),i<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const n=e?X:Math.floor,r=n(i*t.width),o=n(i*t.height);void 0===C&&(C=L(r,o));const a=q?L(r,o):C;return a.width=r,a.height=o,a.getContext("2d").drawImage(t,0,0,r,o),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+r+"x"+o+")."),a}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function I(t){return Z(t.width)&&Z(t.height)}function P(t,e){return t.generateMipmaps&&e&&t.minFilter!==c&&t.minFilter!==h}function B(e,q,i,r,o=1){t.generateMipmap(e),n.get(q).__maxMipLevel=Math.log2(Math.max(i,r,o))}function k(q,n,i,r){if(!1===m)return n;if(null!==q){if(void 0!==t[q])return t[q];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+q+"'")}let o=n;return 6403===n&&(5126===i&&(o=33326),5131===i&&(o=33325),5121===i&&(o=33321)),6407===n&&(5126===i&&(o=34837),5131===i&&(o=34843),5121===i&&(o=32849)),6408===n&&(5126===i&&(o=34836),5131===i&&(o=34842),5121===i&&(o=r===z?35907:32856)),33325!==o&&33326!==o&&34842!==o&&34836!==o||e.get("EXT_color_buffer_float"),o}function D(t){return t===c||1004===t||1005===t?9728:9729}function O(e){const q=e.target;q.removeEventListener("dispose",O),function(e){const q=n.get(e);void 0!==q.__webglInit&&(t.deleteTexture(q.__webglTexture),n.remove(e))}(q),q.isVideoTexture&&E.delete(q),o.memory.textures--}function N(e){const q=e.target;q.removeEventListener("dispose",N),function(e){const q=e.texture,i=n.get(e),r=n.get(q);if(e){if(void 0!==r.__webglTexture&&(t.deleteTexture(r.__webglTexture),o.memory.textures--),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(i.__webglFramebuffer[e]),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer[e]);else t.deleteFramebuffer(i.__webglFramebuffer),i.__webglDepthbuffer&&t.deleteRenderbuffer(i.__webglDepthbuffer),i.__webglMultisampledFramebuffer&&t.deleteFramebuffer(i.__webglMultisampledFramebuffer),i.__webglColorRenderbuffer&&t.deleteRenderbuffer(i.__webglColorRenderbuffer),i.__webglDepthRenderbuffer&&t.deleteRenderbuffer(i.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,i=q.length;e<i;e++){const i=n.get(q[e]);i.__webglTexture&&(t.deleteTexture(i.__webglTexture),o.memory.textures--),n.remove(q[e])}n.remove(q),n.remove(e)}}(q)}let F=0;function H(t,e){const i=n.get(t);if(t.isVideoTexture&&function(t){const e=o.render.frame;E.get(t)!==e&&(E.set(t,e),t.update())}(t),t.version>0&&i.__version!==t.version){const q=t.image;if(void 0===q)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==q.complete)return void Y(i,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}q.activeTexture(33984+e),q.bindTexture(3553,i.__webglTexture)}function U(e,i){const o=n.get(e);e.version>0&&o.__version!==e.version?function(e,n,i){if(6!==n.image.length)return;j(e,n),q.activeTexture(33984+i),q.bindTexture(34067,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment),t.pixelStorei(37443,0);const o=n&&(n.isCompressedTexture||n.image[0].isCompressedTexture),a=n.image[0]&&n.image[0].isDataTexture,s=[];for(let t=0;t<6;t++)s[t]=o||a?a?n.image[t].image:n.image[t]:R(n.image[t],!1,!0,w);const l=s[0],c=I(l)||m,h=r.convert(n.format),u=r.convert(n.type),d=k(n.internalFormat,h,u,n.encoding);let p;if(W(34067,n,c),o){for(let t=0;t<6;t++){p=s[t].mipmaps;for(let e=0;e<p.length;e++){const i=p[e];n.format!==y&&n.format!==v?null!==h?q.compressedTexImage2D(34069+t,e,d,i.width,i.height,0,i.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):q.texImage2D(34069+t,e,d,i.width,i.height,0,h,u,i.data)}}e.__maxMipLevel=p.length-1}else{p=n.mipmaps;for(let t=0;t<6;t++)if(a){q.texImage2D(34069+t,0,d,s[t].width,s[t].height,0,h,u,s[t].data);for(let e=0;e<p.length;e++){const n=p[e].image[t].image;q.texImage2D(34069+t,e+1,d,n.width,n.height,0,h,u,n.data)}}else{q.texImage2D(34069+t,0,d,h,u,s[t]);for(let e=0;e<p.length;e++){const n=p[e];q.texImage2D(34069+t,e+1,d,h,u,n.image[t])}}e.__maxMipLevel=p.length}P(n,c)&&B(34067,n,l.width,l.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}(o,e,i):(q.activeTexture(33984+i),q.bindTexture(34067,o.__webglTexture))}const V={[a]:10497,[s]:33071,[l]:33648},G={[c]:9728,1004:9984,1005:9986,[h]:9729,1007:9985,[u]:9987};function W(q,r,o){if(o?(t.texParameteri(q,10242,V[r.wrapS]),t.texParameteri(q,10243,V[r.wrapT]),32879!==q&&35866!==q||t.texParameteri(q,32882,V[r.wrapR]),t.texParameteri(q,10240,G[r.magFilter]),t.texParameteri(q,10241,G[r.minFilter])):(t.texParameteri(q,10242,33071),t.texParameteri(q,10243,33071),32879!==q&&35866!==q||t.texParameteri(q,32882,33071),r.wrapS===s&&r.wrapT===s||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(q,10240,D(r.magFilter)),t.texParameteri(q,10241,D(r.minFilter)),r.minFilter!==c&&r.minFilter!==h&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const o=e.get("EXT_texture_filter_anisotropic");if(r.type===f&&!1===e.has("OES_texture_float_linear"))return;if(!1===m&&r.type===g&&!1===e.has("OES_texture_half_float_linear"))return;(r.anisotropy>1||n.get(r).__currentAnisotropy)&&(t.texParameterf(q,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(r.anisotropy,i.getMaxAnisotropy())),n.get(r).__currentAnisotropy=r.anisotropy)}}function j(e,q){void 0===e.__webglInit&&(e.__webglInit=!0,q.addEventListener("dispose",O),e.__webglTexture=t.createTexture(),o.memory.textures++)}function Y(e,n,i){let o=3553;n.isDataTexture2DArray&&(o=35866),n.isDataTexture3D&&(o=32879),j(e,n),q.activeTexture(33984+i),q.bindTexture(o,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment),t.pixelStorei(37443,0);const a=function(t){return!m&&(t.wrapS!==s||t.wrapT!==s||t.minFilter!==c&&t.minFilter!==h)}(n)&&!1===I(n.image),l=R(n.image,a,!1,M),u=I(l)||m,g=r.convert(n.format);let A,w=r.convert(n.type),S=k(n.internalFormat,g,w,n.encoding);W(o,n,u);const E=n.mipmaps;if(n.isDepthTexture)S=6402,m?S=n.type===f?36012:n.type===p?33190:n.type===x?35056:33189:n.type===f&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),n.format===_&&6402===S&&n.type!==d&&n.type!==p&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=d,w=r.convert(n.type)),n.format===b&&6402===S&&(S=34041,n.type!==x&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=x,w=r.convert(n.type))),q.texImage2D(3553,0,S,l.width,l.height,0,g,w,null);else if(n.isDataTexture)if(E.length>0&&u){for(let t=0,e=E.length;t<e;t++)A=E[t],q.texImage2D(3553,t,S,A.width,A.height,0,g,w,A.data);n.generateMipmaps=!1,e.__maxMipLevel=E.length-1}else q.texImage2D(3553,0,S,l.width,l.height,0,g,w,l.data),e.__maxMipLevel=0;else if(n.isCompressedTexture){for(let t=0,e=E.length;t<e;t++)A=E[t],n.format!==y&&n.format!==v?null!==g?q.compressedTexImage2D(3553,t,S,A.width,A.height,0,A.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):q.texImage2D(3553,t,S,A.width,A.height,0,g,w,A.data);e.__maxMipLevel=E.length-1}else if(n.isDataTexture2DArray)q.texImage3D(35866,0,S,l.width,l.height,l.depth,0,g,w,l.data),e.__maxMipLevel=0;else if(n.isDataTexture3D)q.texImage3D(32879,0,S,l.width,l.height,l.depth,0,g,w,l.data),e.__maxMipLevel=0;else if(E.length>0&&u){for(let t=0,e=E.length;t<e;t++)A=E[t],q.texImage2D(3553,t,S,g,w,A);n.generateMipmaps=!1,e.__maxMipLevel=E.length-1}else q.texImage2D(3553,0,S,g,w,l),e.__maxMipLevel=0;P(n,u)&&B(o,n,l.width,l.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}function J(e,i,o,a,s){const l=r.convert(o.format),c=r.convert(o.type),h=k(o.internalFormat,l,c,o.encoding);32879===s||35866===s?q.texImage3D(s,0,h,i.width,i.height,i.depth,0,l,c,null):q.texImage2D(s,0,h,i.width,i.height,0,l,c,null),q.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,a,s,n.get(o).__webglTexture,0),q.bindFramebuffer(36160,null)}function $(e,q,n){if(t.bindRenderbuffer(36161,e),q.depthBuffer&&!q.stencilBuffer){let i=33189;if(n){const e=q.depthTexture;e&&e.isDepthTexture&&(e.type===f?i=36012:e.type===p&&(i=33190));const n=K(q);t.renderbufferStorageMultisample(36161,n,i,q.width,q.height)}else t.renderbufferStorage(36161,i,q.width,q.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(q.depthBuffer&&q.stencilBuffer){if(n){const e=K(q);t.renderbufferStorageMultisample(36161,e,35056,q.width,q.height)}else t.renderbufferStorage(36161,34041,q.width,q.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===q.isWebGLMultipleRenderTargets?q.texture[0]:q.texture,i=r.convert(e.format),o=r.convert(e.type),a=k(e.internalFormat,i,o,e.encoding);if(n){const e=K(q);t.renderbufferStorageMultisample(36161,e,a,q.width,q.height)}else t.renderbufferStorage(36161,a,q.width,q.height)}t.bindRenderbuffer(36161,null)}function K(t){return m&&t.isWebGLMultisampleRenderTarget?Math.min(S,t.samples):0}let tt=!1,et=!1;this.allocateTextureUnit=function(){const t=F;return t>=A&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+A),F+=1,t},this.resetTextureUnits=function(){F=0},this.setTexture2D=H,this.setTexture2DArray=function(t,e){const i=n.get(t);t.version>0&&i.__version!==t.version?Y(i,t,e):(q.activeTexture(33984+e),q.bindTexture(35866,i.__webglTexture))},this.setTexture3D=function(t,e){const i=n.get(t);t.version>0&&i.__version!==t.version?Y(i,t,e):(q.activeTexture(33984+e),q.bindTexture(32879,i.__webglTexture))},this.setTextureCube=U,this.setupRenderTarget=function(e){const a=e.texture,s=n.get(e),l=n.get(a);e.addEventListener("dispose",N),!0!==e.isWebGLMultipleRenderTargets&&(l.__webglTexture=t.createTexture(),l.__version=a.version,o.memory.textures++);const c=!0===e.isWebGLCubeRenderTarget,h=!0===e.isWebGLMultipleRenderTargets,u=!0===e.isWebGLMultisampleRenderTarget,d=a.isDataTexture3D||a.isDataTexture2DArray,p=I(e)||m;if(!m||a.format!==v||a.type!==f&&a.type!==g||(a.format=y,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),c){s.__webglFramebuffer=[];for(let e=0;e<6;e++)s.__webglFramebuffer[e]=t.createFramebuffer()}else if(s.__webglFramebuffer=t.createFramebuffer(),h)if(i.drawBuffers){const q=e.texture;for(let e=0,i=q.length;e<i;e++){const i=n.get(q[e]);void 0===i.__webglTexture&&(i.__webglTexture=t.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(u)if(m){s.__webglMultisampledFramebuffer=t.createFramebuffer(),s.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,s.__webglColorRenderbuffer);const n=r.convert(a.format),i=r.convert(a.type),o=k(a.internalFormat,n,i,a.encoding),l=K(e);t.renderbufferStorageMultisample(36161,l,o,e.width,e.height),q.bindFramebuffer(36160,s.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,s.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(s.__webglDepthRenderbuffer=t.createRenderbuffer(),$(s.__webglDepthRenderbuffer,e,!0)),q.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(c){q.bindTexture(34067,l.__webglTexture),W(34067,a,p);for(let t=0;t<6;t++)J(s.__webglFramebuffer[t],e,a,36064,34069+t);P(a,p)&&B(34067,a,e.width,e.height),q.unbindTexture()}else if(h){const t=e.texture;for(let i=0,r=t.length;i<r;i++){const r=t[i],o=n.get(r);q.bindTexture(3553,o.__webglTexture),W(3553,r,p),J(s.__webglFramebuffer,e,r,36064+i,3553),P(r,p)&&B(3553,r,e.width,e.height)}q.unbindTexture()}else{let t=3553;d&&(m?t=a.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),q.bindTexture(t,l.__webglTexture),W(t,a,p),J(s.__webglFramebuffer,e,a,36064,t),P(a,p)&&B(t,a,e.width,e.height,e.depth),q.unbindTexture()}e.depthBuffer&&function(e){const i=n.get(e),r=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,i){if(i&&i.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(q.bindFramebuffer(36160,e),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),H(i.depthTexture,0);const r=n.get(i.depthTexture).__webglTexture;if(i.depthTexture.format===_)t.framebufferTexture2D(36160,36096,3553,r,0);else{if(i.depthTexture.format!==b)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,r,0)}}(i.__webglFramebuffer,e)}else if(r){i.__webglDepthbuffer=[];for(let n=0;n<6;n++)q.bindFramebuffer(36160,i.__webglFramebuffer[n]),i.__webglDepthbuffer[n]=t.createRenderbuffer(),$(i.__webglDepthbuffer[n],e,!1)}else q.bindFramebuffer(36160,i.__webglFramebuffer),i.__webglDepthbuffer=t.createRenderbuffer(),$(i.__webglDepthbuffer,e,!1);q.bindFramebuffer(36160,null)}(e)},this.updateRenderTargetMipmap=function(t){const e=I(t)||m,i=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let r=0,o=i.length;r<o;r++){const o=i[r];if(P(o,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,i=n.get(o).__webglTexture;q.bindTexture(e,i),B(e,o,t.width,t.height),q.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(m){const i=e.width,r=e.height;let o=16384;e.depthBuffer&&(o|=256),e.stencilBuffer&&(o|=1024);const a=n.get(e);q.bindFramebuffer(36008,a.__webglMultisampledFramebuffer),q.bindFramebuffer(36009,a.__webglFramebuffer),t.blitFramebuffer(0,0,i,r,0,0,i,r,o,9728),q.bindFramebuffer(36008,null),q.bindFramebuffer(36009,a.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===tt&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),tt=!0),t=t.texture),H(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===et&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),et=!0),t=t.texture),U(t,e)}}function lr(t,e,q){const n=q.isWebGL2;return{convert:function(t){let q;if(t===m)return 5121;if(1017===t)return 32819;if(1018===t)return 32820;if(1019===t)return 33635;if(1010===t)return 5120;if(1011===t)return 5122;if(t===d)return 5123;if(1013===t)return 5124;if(t===p)return 5125;if(t===f)return 5126;if(t===g)return n?5131:(q=e.get("OES_texture_half_float"),null!==q?q.HALF_FLOAT_OES:null);if(1021===t)return 6406;if(t===v)return 6407;if(t===y)return 6408;if(1024===t)return 6409;if(1025===t)return 6410;if(t===_)return 6402;if(t===b)return 34041;if(1028===t)return 6403;if(1029===t)return 36244;if(1030===t)return 33319;if(1031===t)return 33320;if(1032===t)return 36248;if(1033===t)return 36249;if(33776===t||33777===t||33778===t||33779===t){if(q=e.get("WEBGL_compressed_texture_s3tc"),null===q)return null;if(33776===t)return q.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===t)return q.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===t)return q.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===t)return q.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===t||35841===t||35842===t||35843===t){if(q=e.get("WEBGL_compressed_texture_pvrtc"),null===q)return null;if(35840===t)return q.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===t)return q.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===t)return q.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===t)return q.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===t)return q=e.get("WEBGL_compressed_texture_etc1"),null!==q?q.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===t||37496===t)&&(q=e.get("WEBGL_compressed_texture_etc"),null!==q)){if(37492===t)return q.COMPRESSED_RGB8_ETC2;if(37496===t)return q.COMPRESSED_RGBA8_ETC2_EAC}return 37808===t||37809===t||37810===t||37811===t||37812===t||37813===t||37814===t||37815===t||37816===t||37817===t||37818===t||37819===t||37820===t||37821===t||37840===t||37841===t||37842===t||37843===t||37844===t||37845===t||37846===t||37847===t||37848===t||37849===t||37850===t||37851===t||37852===t||37853===t?(q=e.get("WEBGL_compressed_texture_astc"),null!==q?t:null):36492===t?(q=e.get("EXT_texture_compression_bptc"),null!==q?t:null):t===x?n?34042:(q=e.get("WEBGL_depth_texture"),null!==q?q.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}rr.prototype.isMeshDistanceMaterial=!0;class cr extends vq{constructor(t=[]){super(),this.cameras=t}}cr.prototype.isArrayCamera=!0;class hr extends ue{constructor(){super(),this.type="Group"}}hr.prototype.isGroup=!0;const ur={type:"move"};class mr{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new hr,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new hr,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ct,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ct),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new hr,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ct,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ct),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,q){let n=null,i=null,r=null;const o=this._targetRay,a=this._grip,s=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState)if(null!==o&&(n=e.getPose(t.targetRaySpace,q),null!==n&&(o.matrix.fromArray(n.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),n.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(n.linearVelocity)):o.hasLinearVelocity=!1,n.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(n.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(ur))),s&&t.hand){r=!0;for(const n of t.hand.values()){const t=e.getJointPose(n,q);if(void 0===s.joints[n.jointName]){const t=new hr;t.matrixAutoUpdate=!1,t.visible=!1,s.joints[n.jointName]=t,s.add(t)}const i=s.joints[n.jointName];null!==t&&(i.matrix.fromArray(t.transform.matrix),i.matrix.decompose(i.position,i.rotation,i.scale),i.jointRadius=t.radius),i.visible=null!==t}const n=s.joints["index-finger-tip"],i=s.joints["thumb-tip"],o=n.position.distanceTo(i.position),a=.02,l=.005;s.inputState.pinching&&o>a+l?(s.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!s.inputState.pinching&&o<=a-l&&(s.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==a&&t.gripSpace&&(i=e.getPose(t.gripSpace,q),null!==i&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1));return null!==o&&(o.visible=null!==n),null!==a&&(a.visible=null!==i),null!==s&&(s.visible=null!==r),this}}class dr extends D{constructor(t,e){super();const q=this,n=t.state;let i=null,r=1,o=null,a="local-floor",s=null,l=null,c=null,h=null,u=null,m=!1,d=null,p=null,f=null,g=null,x=null,v=null;const y=[],_=new Map,b=new vq;b.layers.enable(1),b.viewport=new ot;const A=new vq;A.layers.enable(2),A.viewport=new ot;const w=[b,A],M=new cr;M.layers.enable(1),M.layers.enable(2);let S=null,E=null;function C(t){const e=_.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function T(){_.forEach((function(t,e){t.disconnect(e)})),_.clear(),S=null,E=null,n.bindXRFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),c&&e.deleteFramebuffer(c),d&&e.deleteFramebuffer(d),p&&e.deleteRenderbuffer(p),f&&e.deleteRenderbuffer(f),c=null,d=null,p=null,f=null,u=null,h=null,l=null,i=null,B.stop(),q.isPresenting=!1,q.dispatchEvent({type:"sessionend"})}function z(t){const e=i.inputSources;for(let t=0;t<y.length;t++)_.set(e[t],y[t]);for(let e=0;e<t.removed.length;e++){const q=t.removed[e],n=_.get(q);n&&(n.dispatchEvent({type:"disconnected",data:q}),_.delete(q))}for(let e=0;e<t.added.length;e++){const q=t.added[e],n=_.get(q);n&&n.dispatchEvent({type:"connected",data:q})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=y[t];return void 0===e&&(e=new mr,y[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=y[t];return void 0===e&&(e=new mr,y[t]=e),e.getGripSpace()},this.getHand=function(t){let e=y[t];return void 0===e&&(e=new mr,y[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===q.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){a=t,!0===q.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return o},this.getBaseLayer=function(){return null!==h?h:u},this.getBinding=function(){return l},this.getFrame=function(){return g},this.getSession=function(){return i},this.setSession=async function(t){if(i=t,null!==i){i.addEventListener("select",C),i.addEventListener("selectstart",C),i.addEventListener("selectend",C),i.addEventListener("squeeze",C),i.addEventListener("squeezestart",C),i.addEventListener("squeezeend",C),i.addEventListener("end",T),i.addEventListener("inputsourceschange",z);const t=e.getContextAttributes();if(!0!==t.xrCompatible&&await e.makeXRCompatible(),void 0===i.renderState.layers){const q={antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:r};u=new XRWebGLLayer(i,e,q),i.updateRenderState({baseLayer:u})}else if(e instanceof WebGLRenderingContext){const q={antialias:!0,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:r};u=new XRWebGLLayer(i,e,q),i.updateRenderState({layers:[u]})}else{m=t.antialias;let q=null;t.depth&&(v=256,t.stencil&&(v|=1024),x=t.stencil?33306:36096,q=t.stencil?35056:33190);const o={colorFormat:t.alpha?32856:32849,depthFormat:q,scaleFactor:r};l=new XRWebGLBinding(i,e),h=l.createProjectionLayer(o),c=e.createFramebuffer(),i.updateRenderState({layers:[h]}),m&&(d=e.createFramebuffer(),p=e.createRenderbuffer(),e.bindRenderbuffer(36161,p),e.renderbufferStorageMultisample(36161,4,32856,h.textureWidth,h.textureHeight),n.bindFramebuffer(36160,d),e.framebufferRenderbuffer(36160,36064,36161,p),e.bindRenderbuffer(36161,null),null!==q&&(f=e.createRenderbuffer(),e.bindRenderbuffer(36161,f),e.renderbufferStorageMultisample(36161,4,q,h.textureWidth,h.textureHeight),e.framebufferRenderbuffer(36160,x,36161,f),e.bindRenderbuffer(36161,null)),n.bindFramebuffer(36160,null))}o=await i.requestReferenceSpace(a),B.setContext(i),B.start(),q.isPresenting=!0,q.dispatchEvent({type:"sessionstart"})}};const L=new ct,R=new ct;function I(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;M.near=A.near=b.near=t.near,M.far=A.far=b.far=t.far,S===M.near&&E===M.far||(i.updateRenderState({depthNear:M.near,depthFar:M.far}),S=M.near,E=M.far);const e=t.parent,q=M.cameras;I(M,e);for(let t=0;t<q.length;t++)I(q[t],e);M.matrixWorld.decompose(M.position,M.quaternion,M.scale),t.position.copy(M.position),t.quaternion.copy(M.quaternion),t.scale.copy(M.scale),t.matrix.copy(M.matrix),t.matrixWorld.copy(M.matrixWorld);const n=t.children;for(let t=0,e=n.length;t<e;t++)n[t].updateMatrixWorld(!0);2===q.length?function(t,e,q){L.setFromMatrixPosition(e.matrixWorld),R.setFromMatrixPosition(q.matrixWorld);const n=L.distanceTo(R),i=e.projectionMatrix.elements,r=q.projectionMatrix.elements,o=i[14]/(i[10]-1),a=i[14]/(i[10]+1),s=(i[9]+1)/i[5],l=(i[9]-1)/i[5],c=(i[8]-1)/i[0],h=(r[8]+1)/r[0],u=o*c,m=o*h,d=n/(-c+h),p=d*-c;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(p),t.translateZ(d),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const f=o+d,g=a+d,x=u-p,v=m+(n-p),y=s*a/g*f,_=l*a/g*f;t.projectionMatrix.makePerspective(x,v,y,_,f,g)}(M,b,A):M.projectionMatrix.copy(b.projectionMatrix)},this.getCamera=function(){return M},this.getFoveation=function(){return null!==h?h.fixedFoveation:null!==u?u.fixedFoveation:void 0},this.setFoveation=function(t){null!==h&&(h.fixedFoveation=t),null!==u&&void 0!==u.fixedFoveation&&(u.fixedFoveation=t)};let P=null;const B=new Lq;B.setAnimationLoop((function(t,q){if(s=q.getViewerPose(o),g=q,null!==s){const t=s.views;null!==u&&n.bindXRFramebuffer(u.framebuffer);let q=!1;t.length!==M.cameras.length&&(M.cameras.length=0,q=!0);for(let i=0;i<t.length;i++){const r=t[i];let o=null;if(null!==u)o=u.getViewport(r);else{const t=l.getViewSubImage(h,r);n.bindXRFramebuffer(c),void 0!==t.depthStencilTexture&&e.framebufferTexture2D(36160,x,3553,t.depthStencilTexture,0),e.framebufferTexture2D(36160,36064,3553,t.colorTexture,0),o=t.viewport}const a=w[i];a.matrix.fromArray(r.transform.matrix),a.projectionMatrix.fromArray(r.projectionMatrix),a.viewport.set(o.x,o.y,o.width,o.height),0===i&&M.matrix.copy(a.matrix),!0===q&&M.cameras.push(a)}m&&(n.bindXRFramebuffer(d),null!==v&&e.clear(v))}const r=i.inputSources;for(let t=0;t<y.length;t++){const e=y[t],n=r[t];e.update(n,q,o)}if(P&&P(t,q),m){const t=h.textureWidth,q=h.textureHeight;n.bindFramebuffer(36008,d),n.bindFramebuffer(36009,c),e.invalidateFramebuffer(36008,[x]),e.invalidateFramebuffer(36009,[x]),e.blitFramebuffer(0,0,t,q,0,0,t,q,16384,9728),e.invalidateFramebuffer(36008,[36064]),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,null),n.bindFramebuffer(36160,d)}g=null})),this.setAnimationLoop=function(t){P=t},this.dispose=function(){}}}function pr(t){function e(e,q){e.opacity.value=q.opacity,q.color&&e.diffuse.value.copy(q.color),q.emissive&&e.emissive.value.copy(q.emissive).multiplyScalar(q.emissiveIntensity),q.map&&(e.map.value=q.map),q.alphaMap&&(e.alphaMap.value=q.alphaMap),q.specularMap&&(e.specularMap.value=q.specularMap),q.alphaTest>0&&(e.alphaTest.value=q.alphaTest);const n=t.get(q).envMap;if(n){e.envMap.value=n,e.flipEnvMap.value=n.isCubeTexture&&!1===n.isRenderTargetTexture?-1:1,e.reflectivity.value=q.reflectivity,e.ior.value=q.ior,e.refractionRatio.value=q.refractionRatio;const i=t.get(n).__maxMipLevel;void 0!==i&&(e.maxMipLevel.value=i)}let i,r;q.lightMap&&(e.lightMap.value=q.lightMap,e.lightMapIntensity.value=q.lightMapIntensity),q.aoMap&&(e.aoMap.value=q.aoMap,e.aoMapIntensity.value=q.aoMapIntensity),q.map?i=q.map:q.specularMap?i=q.specularMap:q.displacementMap?i=q.displacementMap:q.normalMap?i=q.normalMap:q.bumpMap?i=q.bumpMap:q.roughnessMap?i=q.roughnessMap:q.metalnessMap?i=q.metalnessMap:q.alphaMap?i=q.alphaMap:q.emissiveMap?i=q.emissiveMap:q.clearcoatMap?i=q.clearcoatMap:q.clearcoatNormalMap?i=q.clearcoatNormalMap:q.clearcoatRoughnessMap?i=q.clearcoatRoughnessMap:q.specularIntensityMap?i=q.specularIntensityMap:q.specularColorMap?i=q.specularColorMap:q.transmissionMap?i=q.transmissionMap:q.thicknessMap?i=q.thicknessMap:q.sheenColorMap?i=q.sheenColorMap:q.sheenRoughnessMap&&(i=q.sheenRoughnessMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),e.uvTransform.value.copy(i.matrix)),q.aoMap?r=q.aoMap:q.lightMap&&(r=q.lightMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uv2Transform.value.copy(r.matrix))}function q(e,q){e.roughness.value=q.roughness,e.metalness.value=q.metalness,q.roughnessMap&&(e.roughnessMap.value=q.roughnessMap),q.metalnessMap&&(e.metalnessMap.value=q.metalnessMap),q.emissiveMap&&(e.emissiveMap.value=q.emissiveMap),q.bumpMap&&(e.bumpMap.value=q.bumpMap,e.bumpScale.value=q.bumpScale,1===q.side&&(e.bumpScale.value*=-1)),q.normalMap&&(e.normalMap.value=q.normalMap,e.normalScale.value.copy(q.normalScale),1===q.side&&e.normalScale.value.negate()),q.displacementMap&&(e.displacementMap.value=q.displacementMap,e.displacementScale.value=q.displacementScale,e.displacementBias.value=q.displacementBias),t.get(q).envMap&&(e.envMapIntensity.value=q.envMapIntensity)}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,n,i,r,o){n.isMeshBasicMaterial?e(t,n):n.isMeshLambertMaterial?(e(t,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(t,n)):n.isMeshToonMaterial?(e(t,n),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshPhongMaterial?(e(t,n),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshStandardMaterial?(e(t,n),n.isMeshPhysicalMaterial?function(t,e,n){q(t,e),t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap)),e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate())),e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=n.texture,t.transmissionSamplerSize.value.set(n.width,n.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)),t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap)}(t,n,o):q(t,n)):n.isMeshMatcapMaterial?(e(t,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshDepthMaterial?(e(t,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshDistanceMaterial?(e(t,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,n)):n.isMeshNormalMaterial?(e(t,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,n)):n.isPointsMaterial?function(t,e,q,n){let i;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*q,t.scale.value=.5*n,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?i=e.map:e.alphaMap&&(i=e.alphaMap),void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}(t,n,i,r):n.isSpriteMaterial?function(t,e){let q;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?q=e.map:e.alphaMap&&(q=e.alphaMap),void 0!==q&&(!0===q.matrixAutoUpdate&&q.updateMatrix(),t.uvTransform.value.copy(q.matrix))}(t,n):n.isShadowMaterial?(t.color.value.copy(n.color),t.opacity.value=n.opacity):n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)}}}function fr(t={}){const e=void 0!==t.canvas?t.canvas:function(){const t=Q("canvas");return t.style.display="block",t}(),q=void 0!==t.context?t.context:null,n=void 0!==t.alpha&&t.alpha,i=void 0===t.depth||t.depth,r=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,a=void 0===t.premultipliedAlpha||t.premultipliedAlpha,l=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,h=void 0!==t.powerPreference?t.powerPreference:"default",d=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let p=null,x=null;const v=[],_=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=T,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const b=this;let A=!1,w=0,M=0,S=null,E=-1,C=null;const z=new ot,L=new ot;let R=null,I=e.width,P=e.height,B=1,k=null,D=null;const O=new ot(0,0,I,P),N=new ot(0,0,I,P);let F=!1;const H=[],U=new zq;let V=!1,G=!1,W=null;const j=new Ht,Z=new ct,X={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function Y(){return null===S?B:1}let J,$,K,tt,et,qt,nt,it,rt,lt,ht,ut,mt,dt,pt,ft,gt,xt,vt,yt,_t,bt,At,wt=q;function Mt(t,q){for(let n=0;n<t.length;n++){const i=t[n],r=e.getContext(i,q);if(null!==r)return r}return null}try{const t={alpha:n,depth:i,stencil:r,antialias:o,premultipliedAlpha:a,preserveDrawingBuffer:l,powerPreference:h,failIfMajorPerformanceCaveat:d};if(e.addEventListener("webglcontextlost",Ct,!1),e.addEventListener("webglcontextrestored",Tt,!1),null===wt){const e=["webgl2","webgl","experimental-webgl"];if(!0===b.isWebGL1Renderer&&e.shift(),wt=Mt(e,t),null===wt)throw Mt(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===wt.getShaderPrecisionFormat&&(wt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function St(){J=new mn(wt),$=new Fq(wt,J,t),J.init($),bt=new lr(wt,J,$),K=new ar(wt,J,$),H[0]=1029,tt=new fn(wt),et=new Zi,qt=new sr(wt,J,K,et,$,bt,tt),nt=new Uq(b),it=new un(b),rt=new Rq(wt,$),At=new Oq(wt,J,rt,$),lt=new dn(wt,rt,tt,At),ht=new bn(wt,lt,rt,tt),vt=new _n(wt,$,qt),ft=new Hq(et),ut=new ji(b,nt,it,J,$,At,ft),mt=new pr(et),dt=new $i(et),pt=new nr(J,$),xt=new Dq(b,nt,K,ht,a),gt=new or(b,ht,$),yt=new Nq(wt,J,tt,$),_t=new pn(wt,J,tt,$),tt.programs=ut.programs,b.capabilities=$,b.extensions=J,b.properties=et,b.renderLists=dt,b.shadowMap=gt,b.state=K,b.info=tt}St();const Et=new dr(b,wt);function Ct(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),A=!0}function Tt(){console.log("THREE.WebGLRenderer: Context Restored."),A=!1;const t=tt.autoReset,e=gt.enabled,q=gt.autoUpdate,n=gt.needsUpdate,i=gt.type;St(),tt.autoReset=t,gt.enabled=e,gt.autoUpdate=q,gt.needsUpdate=n,gt.type=i}function zt(t){const e=t.target;e.removeEventListener("dispose",zt),function(t){(function(t){const e=et.get(t).programs;void 0!==e&&e.forEach((function(t){ut.releaseProgram(t)}))})(t),et.remove(t)}(e)}this.xr=Et,this.getContext=function(){return wt},this.getContextAttributes=function(){return wt.getContextAttributes()},this.forceContextLoss=function(){const t=J.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=J.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return B},this.setPixelRatio=function(t){void 0!==t&&(B=t,this.setSize(I,P,!1))},this.getSize=function(t){return t.set(I,P)},this.setSize=function(t,q,n){Et.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(I=t,P=q,e.width=Math.floor(t*B),e.height=Math.floor(q*B),!1!==n&&(e.style.width=t+"px",e.style.height=q+"px"),this.setViewport(0,0,t,q))},this.getDrawingBufferSize=function(t){return t.set(I*B,P*B).floor()},this.setDrawingBufferSize=function(t,q,n){I=t,P=q,B=n,e.width=Math.floor(t*n),e.height=Math.floor(q*n),this.setViewport(0,0,t,q)},this.getCurrentViewport=function(t){return t.copy(z)},this.getViewport=function(t){return t.copy(O)},this.setViewport=function(t,e,q,n){t.isVector4?O.set(t.x,t.y,t.z,t.w):O.set(t,e,q,n),K.viewport(z.copy(O).multiplyScalar(B).floor())},this.getScissor=function(t){return t.copy(N)},this.setScissor=function(t,e,q,n){t.isVector4?N.set(t.x,t.y,t.z,t.w):N.set(t,e,q,n),K.scissor(L.copy(N).multiplyScalar(B).floor())},this.getScissorTest=function(){return F},this.setScissorTest=function(t){K.setScissorTest(F=t)},this.setOpaqueSort=function(t){k=t},this.setTransparentSort=function(t){D=t},this.getClearColor=function(t){return t.copy(xt.getClearColor())},this.setClearColor=function(){xt.setClearColor.apply(xt,arguments)},this.getClearAlpha=function(){return xt.getClearAlpha()},this.setClearAlpha=function(){xt.setClearAlpha.apply(xt,arguments)},this.clear=function(t,e,q){let n=0;(void 0===t||t)&&(n|=16384),(void 0===e||e)&&(n|=256),(void 0===q||q)&&(n|=1024),wt.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Ct,!1),e.removeEventListener("webglcontextrestored",Tt,!1),dt.dispose(),pt.dispose(),et.dispose(),nt.dispose(),it.dispose(),ht.dispose(),At.dispose(),Et.dispose(),Et.removeEventListener("sessionstart",Rt),Et.removeEventListener("sessionend",It),W&&(W.dispose(),W=null),Pt.stop()},this.renderBufferDirect=function(t,e,q,n,i,r){null===e&&(e=X);const o=i.isMesh&&i.matrixWorld.determinant()<0,a=function(t,e,q,n,i){!0!==e.isScene&&(e=X),qt.resetTextureUnits();const r=e.fog,o=n.isMeshStandardMaterial?e.environment:null,a=null===S?b.outputEncoding:S.texture.encoding,s=(n.isMeshStandardMaterial?it:nt).get(n.envMap||o),l=!0===n.vertexColors&&!!q.attributes.color&&4===q.attributes.color.itemSize,c=!!n.normalMap&&!!q.attributes.tangent,h=!!q.morphAttributes.position,u=!!q.morphAttributes.normal,m=q.morphAttributes.position?q.morphAttributes.position.length:0,d=et.get(n),p=x.state.lights;if(!0===V&&(!0===G||t!==C)){const e=t===C&&n.id===E;ft.setState(n,t,e)}let f=!1;n.version===d.__version?d.needsLights&&d.lightsStateVersion!==p.state.version||d.outputEncoding!==a||i.isInstancedMesh&&!1===d.instancing?f=!0:i.isInstancedMesh||!0!==d.instancing?i.isSkinnedMesh&&!1===d.skinning?f=!0:i.isSkinnedMesh||!0!==d.skinning?d.envMap!==s||n.fog&&d.fog!==r?f=!0:void 0===d.numClippingPlanes||d.numClippingPlanes===ft.numPlanes&&d.numIntersection===ft.numIntersection?(d.vertexAlphas!==l||d.vertexTangents!==c||d.morphTargets!==h||d.morphNormals!==u||!0===$.isWebGL2&&d.morphTargetsCount!==m)&&(f=!0):f=!0:f=!0:f=!0:(f=!0,d.__version=n.version);let g=d.currentProgram;!0===f&&(g=Nt(n,e,i));let v=!1,y=!1,_=!1;const A=g.getUniforms(),w=d.uniforms;if(K.useProgram(g.program)&&(v=!0,y=!0,_=!0),n.id!==E&&(E=n.id,y=!0),v||C!==t){if(A.setValue(wt,"projectionMatrix",t.projectionMatrix),$.logarithmicDepthBuffer&&A.setValue(wt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),C!==t&&(C=t,y=!0,_=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const e=A.map.cameraPosition;void 0!==e&&e.setValue(wt,Z.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&A.setValue(wt,"isOrthographic",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||i.isSkinnedMesh)&&A.setValue(wt,"viewMatrix",t.matrixWorldInverse)}if(i.isSkinnedMesh){A.setOptional(wt,i,"bindMatrix"),A.setOptional(wt,i,"bindMatrixInverse");const t=i.skeleton;t&&($.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),A.setValue(wt,"boneTexture",t.boneTexture,qt),A.setValue(wt,"boneTextureSize",t.boneTextureSize)):A.setOptional(wt,t,"boneMatrices"))}var M,T;return!q||void 0===q.morphAttributes.position&&void 0===q.morphAttributes.normal||vt.update(i,q,n,g),(y||d.receiveShadow!==i.receiveShadow)&&(d.receiveShadow=i.receiveShadow,A.setValue(wt,"receiveShadow",i.receiveShadow)),y&&(A.setValue(wt,"toneMappingExposure",b.toneMappingExposure),d.needsLights&&(T=_,(M=w).ambientLightColor.needsUpdate=T,M.lightProbe.needsUpdate=T,M.directionalLights.needsUpdate=T,M.directionalLightShadows.needsUpdate=T,M.pointLights.needsUpdate=T,M.pointLightShadows.needsUpdate=T,M.spotLights.needsUpdate=T,M.spotLightShadows.needsUpdate=T,M.rectAreaLights.needsUpdate=T,M.hemisphereLights.needsUpdate=T),r&&n.fog&&mt.refreshFogUniforms(w,r),mt.refreshMaterialUniforms(w,n,B,P,W),Mi.upload(wt,d.uniformsList,w,qt)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Mi.upload(wt,d.uniformsList,w,qt),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&A.setValue(wt,"center",i.center),A.setValue(wt,"modelViewMatrix",i.modelViewMatrix),A.setValue(wt,"normalMatrix",i.normalMatrix),A.setValue(wt,"modelMatrix",i.matrixWorld),g}(t,e,q,n,i);K.setMaterial(n,o);let s=q.index;const l=q.attributes.position;if(null===s){if(void 0===l||0===l.count)return}else if(0===s.count)return;let c,h=1;!0===n.wireframe&&(s=lt.getWireframeAttribute(q),h=2),At.setup(i,n,a,q,s);let u=yt;null!==s&&(c=rt.get(s),u=_t,u.setIndex(c));const m=null!==s?s.count:l.count,d=q.drawRange.start*h,p=q.drawRange.count*h,f=null!==r?r.start*h:0,g=null!==r?r.count*h:1/0,v=Math.max(d,f),y=Math.min(m,d+p,f+g)-1,_=Math.max(0,y-v+1);if(0!==_){if(i.isMesh)!0===n.wireframe?(K.setLineWidth(n.wireframeLinewidth*Y()),u.setMode(1)):u.setMode(4);else if(i.isLine){let t=n.linewidth;void 0===t&&(t=1),K.setLineWidth(t*Y()),i.isLineSegments?u.setMode(1):i.isLineLoop?u.setMode(2):u.setMode(3)}else i.isPoints?u.setMode(0):i.isSprite&&u.setMode(4);if(i.isInstancedMesh)u.renderInstances(v,_,i.count);else if(q.isInstancedBufferGeometry){const t=Math.min(q.instanceCount,q._maxInstanceCount);u.renderInstances(v,_,t)}else u.render(v,_)}},this.compile=function(t,e){x=pt.get(t),x.init(),_.push(x),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(x.pushLight(t),t.castShadow&&x.pushShadow(t))})),x.setupLights(b.physicallyCorrectLights),t.traverse((function(e){const q=e.material;if(q)if(Array.isArray(q))for(let n=0;n<q.length;n++)Nt(q[n],t,e);else Nt(q,t,e)})),_.pop(),x=null};let Lt=null;function Rt(){Pt.stop()}function It(){Pt.start()}const Pt=new Lq;function Bt(t,e,q,n){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)q=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)x.pushLight(t),t.castShadow&&x.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||U.intersectsSprite(t)){n&&Z.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j);const e=ht.update(t),i=t.material;i.visible&&p.push(t,e,i,q,Z.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==tt.render.frame&&(t.skeleton.update(),t.skeleton.frame=tt.render.frame),!t.frustumCulled||U.intersectsObject(t))){n&&Z.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j);const e=ht.update(t),i=t.material;if(Array.isArray(i)){const n=e.groups;for(let r=0,o=n.length;r<o;r++){const o=n[r],a=i[o.materialIndex];a&&a.visible&&p.push(t,e,a,q,Z.z,o)}}else i.visible&&p.push(t,e,i,q,Z.z,null)}const i=t.children;for(let t=0,r=i.length;t<r;t++)Bt(i[t],e,q,n)}function kt(t,e,q,n){const i=t.opaque,r=t.transmissive,a=t.transparent;x.setupLightsView(q),r.length>0&&function(t,e,q){if(null===W){const t=!0===o&&!0===$.isWebGL2;W=new(t?st:at)(1024,1024,{generateMipmaps:!0,type:null!==bt.convert(g)?g:m,minFilter:u,magFilter:c,wrapS:s,wrapT:s})}const n=b.getRenderTarget();b.setRenderTarget(W),b.clear();const i=b.toneMapping;b.toneMapping=0,Dt(t,e,q),b.toneMapping=i,qt.updateMultisampleRenderTarget(W),qt.updateRenderTargetMipmap(W),b.setRenderTarget(n)}(i,e,q),n&&K.viewport(z.copy(n)),i.length>0&&Dt(i,e,q),r.length>0&&Dt(r,e,q),a.length>0&&Dt(a,e,q)}function Dt(t,e,q){const n=!0===e.isScene?e.overrideMaterial:null;for(let i=0,r=t.length;i<r;i++){const r=t[i],o=r.object,a=r.geometry,s=null===n?r.material:n,l=r.group;o.layers.test(q.layers)&&Ot(o,e,q,a,s,l)}}function Ot(t,e,q,n,i,r){t.onBeforeRender(b,e,q,n,i,r),t.modelViewMatrix.multiplyMatrices(q.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),i.onBeforeRender(b,e,q,n,t,r),!0===i.transparent&&2===i.side?(i.side=1,i.needsUpdate=!0,b.renderBufferDirect(q,e,n,i,t,r),i.side=0,i.needsUpdate=!0,b.renderBufferDirect(q,e,n,i,t,r),i.side=2):b.renderBufferDirect(q,e,n,i,t,r),t.onAfterRender(b,e,q,n,i,r)}function Nt(t,e,q){!0!==e.isScene&&(e=X);const n=et.get(t),i=x.state.lights,r=x.state.shadowsArray,o=i.state.version,a=ut.getParameters(t,i.state,r,e,q),s=ut.getProgramCacheKey(a);let l=n.programs;n.environment=t.isMeshStandardMaterial?e.environment:null,n.fog=e.fog,n.envMap=(t.isMeshStandardMaterial?it:nt).get(t.envMap||n.environment),void 0===l&&(t.addEventListener("dispose",zt),l=new Map,n.programs=l);let c=l.get(s);if(void 0!==c){if(n.currentProgram===c&&n.lightsStateVersion===o)return Ft(t,a),c}else a.uniforms=ut.getUniforms(t),t.onBuild(q,a,b),t.onBeforeCompile(a,b),c=ut.acquireProgram(a,s),l.set(s,c),n.uniforms=a.uniforms;const h=n.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(h.clippingPlanes=ft.uniform),Ft(t,a),n.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),n.lightsStateVersion=o,n.needsLights&&(h.ambientLightColor.value=i.state.ambient,h.lightProbe.value=i.state.probe,h.directionalLights.value=i.state.directional,h.directionalLightShadows.value=i.state.directionalShadow,h.spotLights.value=i.state.spot,h.spotLightShadows.value=i.state.spotShadow,h.rectAreaLights.value=i.state.rectArea,h.ltc_1.value=i.state.rectAreaLTC1,h.ltc_2.value=i.state.rectAreaLTC2,h.pointLights.value=i.state.point,h.pointLightShadows.value=i.state.pointShadow,h.hemisphereLights.value=i.state.hemi,h.directionalShadowMap.value=i.state.directionalShadowMap,h.directionalShadowMatrix.value=i.state.directionalShadowMatrix,h.spotShadowMap.value=i.state.spotShadowMap,h.spotShadowMatrix.value=i.state.spotShadowMatrix,h.pointShadowMap.value=i.state.pointShadowMap,h.pointShadowMatrix.value=i.state.pointShadowMatrix);const u=c.getUniforms(),m=Mi.seqWithValue(u.seq,h);return n.currentProgram=c,n.uniformsList=m,c}function Ft(t,e){const q=et.get(t);q.outputEncoding=e.outputEncoding,q.instancing=e.instancing,q.skinning=e.skinning,q.morphTargets=e.morphTargets,q.morphNormals=e.morphNormals,q.morphTargetsCount=e.morphTargetsCount,q.numClippingPlanes=e.numClippingPlanes,q.numIntersection=e.numClipIntersection,q.vertexAlphas=e.vertexAlphas,q.vertexTangents=e.vertexTangents}Pt.setAnimationLoop((function(t){Lt&&Lt(t)})),"undefined"!=typeof window&&Pt.setContext(window),this.setAnimationLoop=function(t){Lt=t,Et.setAnimationLoop(t),null===t?Pt.stop():Pt.start()},Et.addEventListener("sessionstart",Rt),Et.addEventListener("sessionend",It),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===A)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===Et.enabled&&!0===Et.isPresenting&&(!0===Et.cameraAutoUpdate&&Et.updateCamera(e),e=Et.getCamera()),!0===t.isScene&&t.onBeforeRender(b,t,e,S),x=pt.get(t,_.length),x.init(),_.push(x),j.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),U.setFromProjectionMatrix(j),G=this.localClippingEnabled,V=ft.init(this.clippingPlanes,G,e),p=dt.get(t,v.length),p.init(),v.push(p),Bt(t,e,0,b.sortObjects),p.finish(),!0===b.sortObjects&&p.sort(k,D),!0===V&&ft.beginShadows();const q=x.state.shadowsArray;if(gt.render(q,t,e),!0===V&&ft.endShadows(),!0===this.info.autoReset&&this.info.reset(),xt.render(p,t),x.setupLights(b.physicallyCorrectLights),e.isArrayCamera){const q=e.cameras;for(let e=0,n=q.length;e<n;e++){const n=q[e];kt(p,t,n,n.viewport)}}else kt(p,t,e);null!==S&&(qt.updateMultisampleRenderTarget(S),qt.updateRenderTargetMipmap(S)),!0===t.isScene&&t.onAfterRender(b,t,e),K.buffers.depth.setTest(!0),K.buffers.depth.setMask(!0),K.buffers.color.setMask(!0),K.setPolygonOffset(!1),At.resetDefaultState(),E=-1,C=null,_.pop(),x=_.length>0?_[_.length-1]:null,v.pop(),p=v.length>0?v[v.length-1]:null},this.getActiveCubeFace=function(){return w},this.getActiveMipmapLevel=function(){return M},this.getRenderTarget=function(){return S},this.setRenderTarget=function(t,e=0,q=0){S=t,w=e,M=q,t&&void 0===et.get(t).__webglFramebuffer&&qt.setupRenderTarget(t);let n=null,i=!1,r=!1;if(t){const q=t.texture;(q.isDataTexture3D||q.isDataTexture2DArray)&&(r=!0);const o=et.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(n=o[e],i=!0):n=t.isWebGLMultisampleRenderTarget?et.get(t).__webglMultisampledFramebuffer:o,z.copy(t.viewport),L.copy(t.scissor),R=t.scissorTest}else z.copy(O).multiplyScalar(B).floor(),L.copy(N).multiplyScalar(B).floor(),R=F;if(K.bindFramebuffer(36160,n)&&$.drawBuffers){let e=!1;if(t)if(t.isWebGLMultipleRenderTargets){const q=t.texture;if(H.length!==q.length||36064!==H[0]){for(let t=0,e=q.length;t<e;t++)H[t]=36064+t;H.length=q.length,e=!0}}else 1===H.length&&36064===H[0]||(H[0]=36064,H.length=1,e=!0);else 1===H.length&&1029===H[0]||(H[0]=1029,H.length=1,e=!0);e&&($.isWebGL2?wt.drawBuffers(H):J.get("WEBGL_draw_buffers").drawBuffersWEBGL(H))}if(K.viewport(z),K.scissor(L),K.setScissorTest(R),i){const n=et.get(t.texture);wt.framebufferTexture2D(36160,36064,34069+e,n.__webglTexture,q)}else if(r){const n=et.get(t.texture),i=e||0;wt.framebufferTextureLayer(36160,36064,n.__webglTexture,q||0,i)}E=-1},this.readRenderTargetPixels=function(t,e,q,n,i,r,o){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let a=et.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==o&&(a=a[o]),a){K.bindFramebuffer(36160,a);try{const o=t.texture,a=o.format,s=o.type;if(a!==y&&bt.convert(a)!==wt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const l=s===g&&(J.has("EXT_color_buffer_half_float")||$.isWebGL2&&J.has("EXT_color_buffer_float"));if(!(s===m||bt.convert(s)===wt.getParameter(35738)||s===f&&($.isWebGL2||J.has("OES_texture_float")||J.has("WEBGL_color_buffer_float"))||l))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===wt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-n&&q>=0&&q<=t.height-i&&wt.readPixels(e,q,n,i,bt.convert(a),bt.convert(s),r):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const t=null!==S?et.get(S).__webglFramebuffer:null;K.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,q=0){const n=Math.pow(2,-q),i=Math.floor(e.image.width*n),r=Math.floor(e.image.height*n);let o=bt.convert(e.format);$.isWebGL2&&(6407===o&&(o=32849),6408===o&&(o=32856)),qt.setTexture2D(e,0),wt.copyTexImage2D(3553,q,o,t.x,t.y,i,r,0),K.unbindTexture()},this.copyTextureToTexture=function(t,e,q,n=0){const i=e.image.width,r=e.image.height,o=bt.convert(q.format),a=bt.convert(q.type);qt.setTexture2D(q,0),wt.pixelStorei(37440,q.flipY),wt.pixelStorei(37441,q.premultiplyAlpha),wt.pixelStorei(3317,q.unpackAlignment),e.isDataTexture?wt.texSubImage2D(3553,n,t.x,t.y,i,r,o,a,e.image.data):e.isCompressedTexture?wt.compressedTexSubImage2D(3553,n,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,o,e.mipmaps[0].data):wt.texSubImage2D(3553,n,t.x,t.y,o,a,e.image),0===n&&q.generateMipmaps&&wt.generateMipmap(3553),K.unbindTexture()},this.copyTextureToTexture3D=function(t,e,q,n,i=0){if(b.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const r=t.max.x-t.min.x+1,o=t.max.y-t.min.y+1,a=t.max.z-t.min.z+1,s=bt.convert(n.format),l=bt.convert(n.type);let c;if(n.isDataTexture3D)qt.setTexture3D(n,0),c=32879;else{if(!n.isDataTexture2DArray)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");qt.setTexture2DArray(n,0),c=35866}wt.pixelStorei(37440,n.flipY),wt.pixelStorei(37441,n.premultiplyAlpha),wt.pixelStorei(3317,n.unpackAlignment);const h=wt.getParameter(3314),u=wt.getParameter(32878),m=wt.getParameter(3316),d=wt.getParameter(3315),p=wt.getParameter(32877),f=q.isCompressedTexture?q.mipmaps[0]:q.image;wt.pixelStorei(3314,f.width),wt.pixelStorei(32878,f.height),wt.pixelStorei(3316,t.min.x),wt.pixelStorei(3315,t.min.y),wt.pixelStorei(32877,t.min.z),q.isDataTexture||q.isDataTexture3D?wt.texSubImage3D(c,i,e.x,e.y,e.z,r,o,a,s,l,f.data):q.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),wt.compressedTexSubImage3D(c,i,e.x,e.y,e.z,r,o,a,s,f.data)):wt.texSubImage3D(c,i,e.x,e.y,e.z,r,o,a,s,l,f),wt.pixelStorei(3314,h),wt.pixelStorei(32878,u),wt.pixelStorei(3316,m),wt.pixelStorei(3315,d),wt.pixelStorei(32877,p),0===i&&n.generateMipmaps&&wt.generateMipmap(c),K.unbindTexture()},this.initTexture=function(t){qt.setTexture2D(t,0),K.unbindTexture()},this.resetState=function(){w=0,M=0,S=null,K.reset(),At.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}fr.prototype.isWebGLRenderer=!0,class extends fr{}.prototype.isWebGL1Renderer=!0;class gr{constructor(t,e=25e-5){this.name="",this.color=new Re(t),this.density=e}clone(){return new gr(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}gr.prototype.isFogExp2=!0;class xr{constructor(t,e=1,q=1e3){this.name="",this.color=new Re(t),this.near=e,this.far=q}clone(){return new xr(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}xr.prototype.isFog=!0;class vr extends ue{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}vr.prototype.isScene=!0;class yr{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=P,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=V()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,q){t*=this.stride,q*=e.stride;for(let n=0,i=this.stride;n<i;n++)this.array[t+n]=e.array[q+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=V()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),q=new this.constructor(e,this.stride);return q.setUsage(this.usage),q}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=V()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}yr.prototype.isInterleavedBuffer=!0;const _r=new ct;class br{constructor(t,e,q,n=!1){this.name="",this.data=t,this.itemSize=e,this.offset=q,this.normalized=!0===n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,q=this.data.count;e<q;e++)_r.x=this.getX(e),_r.y=this.getY(e),_r.z=this.getZ(e),_r.applyMatrix4(t),this.setXYZ(e,_r.x,_r.y,_r.z);return this}applyNormalMatrix(t){for(let e=0,q=this.count;e<q;e++)_r.x=this.getX(e),_r.y=this.getY(e),_r.z=this.getZ(e),_r.applyNormalMatrix(t),this.setXYZ(e,_r.x,_r.y,_r.z);return this}transformDirection(t){for(let e=0,q=this.count;e<q;e++)_r.x=this.getX(e),_r.y=this.getY(e),_r.z=this.getZ(e),_r.transformDirection(t),this.setXYZ(e,_r.x,_r.y,_r.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,q){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=q,this}setXYZ(t,e,q,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=q,this.data.array[t+2]=n,this}setXYZW(t,e,q,n,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=q,this.data.array[t+2]=n,this.data.array[t+3]=i,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const q=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[q+e])}return new ke(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new br(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const q=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[q+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}br.prototype.isInterleavedBufferAttribute=!0;class Ar extends Me{constructor(t){super(),this.type="SpriteMaterial",this.color=new Re(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let wr;Ar.prototype.isSpriteMaterial=!0;const Mr=new ct,Sr=new ct,Er=new ct,Cr=new J,Tr=new J,zr=new Ht,Lr=new ct,Rr=new ct,Ir=new ct,Pr=new J,Br=new J,kr=new J;function Dr(t,e,q,n,i,r){Cr.subVectors(t,q).addScalar(.5).multiply(n),void 0!==i?(Tr.x=r*Cr.x-i*Cr.y,Tr.y=i*Cr.x+r*Cr.y):Tr.copy(Cr),t.copy(e),t.x+=Tr.x,t.y+=Tr.y,t.applyMatrix4(zr)}(class extends ue{constructor(t){if(super(),this.type="Sprite",void 0===wr){wr=new Ze;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new yr(t,5);wr.setIndex([0,1,2,0,2,3]),wr.setAttribute("position",new br(e,3,0,!1)),wr.setAttribute("uv",new br(e,2,3,!1))}this.geometry=wr,this.material=void 0!==t?t:new Ar,this.center=new J(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Sr.setFromMatrixScale(this.matrixWorld),zr.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Er.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Sr.multiplyScalar(-Er.z);const q=this.material.rotation;let n,i;0!==q&&(i=Math.cos(q),n=Math.sin(q));const r=this.center;Dr(Lr.set(-.5,-.5,0),Er,r,Sr,n,i),Dr(Rr.set(.5,-.5,0),Er,r,Sr,n,i),Dr(Ir.set(.5,.5,0),Er,r,Sr,n,i),Pr.set(0,0),Br.set(1,0),kr.set(1,1);let o=t.ray.intersectTriangle(Lr,Rr,Ir,!1,Mr);if(null===o&&(Dr(Rr.set(-.5,.5,0),Er,r,Sr,n,i),Br.set(0,1),o=t.ray.intersectTriangle(Lr,Ir,Rr,!1,Mr),null===o))return;const a=t.ray.origin.distanceTo(Mr);a<t.near||a>t.far||e.push({distance:a,point:Mr.clone(),uv:Ae.getUV(Mr,Lr,Rr,Ir,Pr,Br,kr,new J),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}).prototype.isSprite=!0;const Or=new ct,Nr=new ot,Fr=new ot,Hr=new ct,Ur=new Ht;class Vr extends hq{constructor(t,e){super(t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Ht,this.bindMatrixInverse=new Ht}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new ot,e=this.geometry.attributes.skinWeight;for(let q=0,n=e.count;q<n;q++){t.x=e.getX(q),t.y=e.getY(q),t.z=e.getZ(q),t.w=e.getW(q);const n=1/t.manhattanLength();n!==1/0?t.multiplyScalar(n):t.set(1,0,0,0),e.setXYZW(q,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const q=this.skeleton,n=this.geometry;Nr.fromBufferAttribute(n.attributes.skinIndex,t),Fr.fromBufferAttribute(n.attributes.skinWeight,t),Or.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const n=Fr.getComponent(t);if(0!==n){const i=Nr.getComponent(t);Ur.multiplyMatrices(q.bones[i].matrixWorld,q.boneInverses[i]),e.addScaledVector(Hr.copy(Or).applyMatrix4(Ur),n)}}return e.applyMatrix4(this.bindMatrixInverse)}}Vr.prototype.isSkinnedMesh=!0;(class extends ue{constructor(){super(),this.type="Bone"}}).prototype.isBone=!0;(class extends it{constructor(t=null,e=1,q=1,n,i,r,o,a,s=1003,l=1003,c,h){super(null,r,o,a,s,l,n,i,c,h),this.image={data:t,width:e,height:q},this.magFilter=s,this.minFilter=l,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}).prototype.isDataTexture=!0;class Gr extends ke{constructor(t,e,q,n=1){"number"==typeof q&&(n=q,q=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(t,e,q),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}Gr.prototype.isInstancedBufferAttribute=!0;const Wr=new Ht,jr=new Ht,Zr=[],Xr=new hq;(class extends hq{constructor(t,e,q){super(t,e),this.instanceMatrix=new Gr(new Float32Array(16*q),16),this.instanceColor=null,this.count=q,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const q=this.matrixWorld,n=this.count;if(Xr.geometry=this.geometry,Xr.material=this.material,void 0!==Xr.material)for(let i=0;i<n;i++){this.getMatrixAt(i,Wr),jr.multiplyMatrices(q,Wr),Xr.matrixWorld=jr,Xr.raycast(t,Zr);for(let t=0,q=Zr.length;t<q;t++){const q=Zr[t];q.instanceId=i,q.object=this,e.push(q)}Zr.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Gr(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}).prototype.isInstancedMesh=!0;class Yr extends Me{constructor(t){super(),this.type="LineBasicMaterial",this.color=new Re(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}Yr.prototype.isLineBasicMaterial=!0;const Jr=new ct,$r=new ct,Kr=new Ht,Qr=new Ft,to=new Rt;class eo extends ue{constructor(t=new Ze,e=new Yr){super(),this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,q=[0];for(let t=1,n=e.count;t<n;t++)Jr.fromBufferAttribute(e,t-1),$r.fromBufferAttribute(e,t),q[t]=q[t-1],q[t]+=Jr.distanceTo($r);t.setAttribute("lineDistance",new Ne(q,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(t,e){const q=this.geometry,n=this.matrixWorld,i=t.params.Line.threshold,r=q.drawRange;if(null===q.boundingSphere&&q.computeBoundingSphere(),to.copy(q.boundingSphere),to.applyMatrix4(n),to.radius+=i,!1===t.ray.intersectsSphere(to))return;Kr.copy(n).invert(),Qr.copy(t.ray).applyMatrix4(Kr);const o=i/((this.scale.x+this.scale.y+this.scale.z)/3),a=o*o,s=new ct,l=new ct,c=new ct,h=new ct,u=this.isLineSegments?2:1;if(q.isBufferGeometry){const n=q.index,i=q.attributes.position;if(null!==n)for(let q=Math.max(0,r.start),o=Math.min(n.count,r.start+r.count)-1;q<o;q+=u){const r=n.getX(q),o=n.getX(q+1);if(s.fromBufferAttribute(i,r),l.fromBufferAttribute(i,o),Qr.distanceSqToSegment(s,l,h,c)>a)continue;h.applyMatrix4(this.matrixWorld);const u=t.ray.origin.distanceTo(h);u<t.near||u>t.far||e.push({distance:u,point:c.clone().applyMatrix4(this.matrixWorld),index:q,face:null,faceIndex:null,object:this})}else for(let q=Math.max(0,r.start),n=Math.min(i.count,r.start+r.count)-1;q<n;q+=u){if(s.fromBufferAttribute(i,q),l.fromBufferAttribute(i,q+1),Qr.distanceSqToSegment(s,l,h,c)>a)continue;h.applyMatrix4(this.matrixWorld);const n=t.ray.origin.distanceTo(h);n<t.near||n>t.far||e.push({distance:n,point:c.clone().applyMatrix4(this.matrixWorld),index:q,face:null,faceIndex:null,object:this})}}else q.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,q=Object.keys(e);if(q.length>0){const t=e[q[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,q=t.length;e<q;e++){const q=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[q]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}eo.prototype.isLine=!0;const qo=new ct,no=new ct;class io extends eo{constructor(t,e){super(t,e),this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,q=[];for(let t=0,n=e.count;t<n;t+=2)qo.fromBufferAttribute(e,t),no.fromBufferAttribute(e,t+1),q[t]=0===t?0:q[t-1],q[t+1]=q[t]+qo.distanceTo(no);t.setAttribute("lineDistance",new Ne(q,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}io.prototype.isLineSegments=!0;(class extends eo{constructor(t,e){super(t,e),this.type="LineLoop"}}).prototype.isLineLoop=!0;class ro extends Me{constructor(t){super(),this.type="PointsMaterial",this.color=new Re(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}ro.prototype.isPointsMaterial=!0;const oo=new Ht,ao=new Ft,so=new Rt,lo=new ct;class co extends ue{constructor(t=new Ze,e=new ro){super(),this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const q=this.geometry,n=this.matrixWorld,i=t.params.Points.threshold,r=q.drawRange;if(null===q.boundingSphere&&q.computeBoundingSphere(),so.copy(q.boundingSphere),so.applyMatrix4(n),so.radius+=i,!1===t.ray.intersectsSphere(so))return;oo.copy(n).invert(),ao.copy(t.ray).applyMatrix4(oo);const o=i/((this.scale.x+this.scale.y+this.scale.z)/3),a=o*o;if(q.isBufferGeometry){const i=q.index,o=q.attributes.position;if(null!==i)for(let q=Math.max(0,r.start),s=Math.min(i.count,r.start+r.count);q<s;q++){const r=i.getX(q);lo.fromBufferAttribute(o,r),ho(lo,r,a,n,t,e,this)}else for(let q=Math.max(0,r.start),i=Math.min(o.count,r.start+r.count);q<i;q++)lo.fromBufferAttribute(o,q),ho(lo,q,a,n,t,e,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,q=Object.keys(e);if(q.length>0){const t=e[q[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,q=t.length;e<q;e++){const q=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[q]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function ho(t,e,q,n,i,r,o){const a=ao.distanceSqToPoint(t);if(a<q){const q=new ct;ao.closestPointToPoint(t,q),q.applyMatrix4(n);const s=i.ray.origin.distanceTo(q);if(s<i.near||s>i.far)return;r.push({distance:s,distanceToRay:Math.sqrt(a),point:q,index:e,face:null,object:o})}}co.prototype.isPoints=!0,class extends it{constructor(t,e,q,n,i,r,o,a,s){super(t,e,q,n,i,r,o,a,s),this.format=void 0!==o?o:v,this.minFilter=void 0!==r?r:h,this.magFilter=void 0!==i?i:h,this.generateMipmaps=!1;const l=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){l.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1=="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}.prototype.isVideoTexture=!0;(class extends it{constructor(t,e,q,n,i,r,o,a,s,l,c,h){super(null,r,o,a,s,l,n,i,c,h),this.image={width:e,height:q},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0,class extends it{constructor(t,e,q,n,i,r,o,a,s){super(t,e,q,n,i,r,o,a,s),this.needsUpdate=!0}}.prototype.isCanvasTexture=!0,class extends it{constructor(t,e,q,n,i,r,o,a,s,l){if((l=void 0!==l?l:_)!==_&&l!==b)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===q&&l===_&&(q=d),void 0===q&&l===b&&(q=x),super(null,n,i,r,o,a,l,q,s),this.image={width:t,height:e},this.magFilter=void 0!==o?o:c,this.minFilter=void 0!==a?a:c,this.flipY=!1,this.generateMipmaps=!1}}.prototype.isDepthTexture=!0;class uo extends Ze{constructor(t=1,e=1,q=1,n=8,i=1,r=!1,o=0,a=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:q,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:o,thetaLength:a};const s=this;n=Math.floor(n),i=Math.floor(i);const l=[],c=[],h=[],u=[];let m=0;const d=[],p=q/2;let f=0;function g(q){const i=m,r=new J,d=new ct;let g=0;const x=!0===q?t:e,v=!0===q?1:-1;for(let t=1;t<=n;t++)c.push(0,p*v,0),h.push(0,v,0),u.push(.5,.5),m++;const y=m;for(let t=0;t<=n;t++){const e=t/n*a+o,q=Math.cos(e),i=Math.sin(e);d.x=x*i,d.y=p*v,d.z=x*q,c.push(d.x,d.y,d.z),h.push(0,v,0),r.x=.5*q+.5,r.y=.5*i*v+.5,u.push(r.x,r.y),m++}for(let t=0;t<n;t++){const e=i+t,n=y+t;!0===q?l.push(n,n+1,e):l.push(n+1,n,e),g+=3}s.addGroup(f,g,!0===q?1:2),f+=g}!function(){const r=new ct,g=new ct;let x=0;const v=(e-t)/q;for(let s=0;s<=i;s++){const l=[],f=s/i,x=f*(e-t)+t;for(let t=0;t<=n;t++){const e=t/n,i=e*a+o,s=Math.sin(i),d=Math.cos(i);g.x=x*s,g.y=-f*q+p,g.z=x*d,c.push(g.x,g.y,g.z),r.set(s,v,d).normalize(),h.push(r.x,r.y,r.z),u.push(e,1-f),l.push(m++)}d.push(l)}for(let t=0;t<n;t++)for(let e=0;e<i;e++){const q=d[e][t],n=d[e+1][t],i=d[e+1][t+1],r=d[e][t+1];l.push(q,n,r),l.push(n,i,r),x+=6}s.addGroup(f,x,0),f+=x}(),!1===r&&(t>0&&g(!0),e>0&&g(!1)),this.setIndex(l),this.setAttribute("position",new Ne(c,3)),this.setAttribute("normal",new Ne(h,3)),this.setAttribute("uv",new Ne(u,2))}static fromJSON(t){return new uo(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class mo extends Ze{constructor(t=[],e=[],q=1,n=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:q,detail:n};const i=[],r=[];function o(t,e,q,n){const i=n+1,r=[];for(let n=0;n<=i;n++){r[n]=[];const o=t.clone().lerp(q,n/i),a=e.clone().lerp(q,n/i),s=i-n;for(let t=0;t<=s;t++)r[n][t]=0===t&&n===i?o:o.clone().lerp(a,t/s)}for(let t=0;t<i;t++)for(let e=0;e<2*(i-t)-1;e++){const q=Math.floor(e/2);e%2==0?(a(r[t][q+1]),a(r[t+1][q]),a(r[t][q])):(a(r[t][q+1]),a(r[t+1][q+1]),a(r[t+1][q]))}}function a(t){i.push(t.x,t.y,t.z)}function s(e,q){const n=3*e;q.x=t[n+0],q.y=t[n+1],q.z=t[n+2]}function l(t,e,q,n){n<0&&1===t.x&&(r[e]=t.x-1),0===q.x&&0===q.z&&(r[e]=n/2/Math.PI+.5)}function c(t){return Math.atan2(t.z,-t.x)}!function(t){const q=new ct,n=new ct,i=new ct;for(let r=0;r<e.length;r+=3)s(e[r+0],q),s(e[r+1],n),s(e[r+2],i),o(q,n,i,t)}(n),function(t){const e=new ct;for(let q=0;q<i.length;q+=3)e.x=i[q+0],e.y=i[q+1],e.z=i[q+2],e.normalize().multiplyScalar(t),i[q+0]=e.x,i[q+1]=e.y,i[q+2]=e.z}(q),function(){const t=new ct;for(let q=0;q<i.length;q+=3){t.x=i[q+0],t.y=i[q+1],t.z=i[q+2];const n=c(t)/2/Math.PI+.5,o=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);r.push(n,1-o)}var e;(function(){const t=new ct,e=new ct,q=new ct,n=new ct,o=new J,a=new J,s=new J;for(let h=0,u=0;h<i.length;h+=9,u+=6){t.set(i[h+0],i[h+1],i[h+2]),e.set(i[h+3],i[h+4],i[h+5]),q.set(i[h+6],i[h+7],i[h+8]),o.set(r[u+0],r[u+1]),a.set(r[u+2],r[u+3]),s.set(r[u+4],r[u+5]),n.copy(t).add(e).add(q).divideScalar(3);const m=c(n);l(o,u+0,t,m),l(a,u+2,e,m),l(s,u+4,q,m)}})(),function(){for(let t=0;t<r.length;t+=6){const e=r[t+0],q=r[t+2],n=r[t+4],i=Math.max(e,q,n),o=Math.min(e,q,n);i>.9&&o<.1&&(e<.2&&(r[t+0]+=1),q<.2&&(r[t+2]+=1),n<.2&&(r[t+4]+=1))}}()}(),this.setAttribute("position",new Ne(i,3)),this.setAttribute("normal",new Ne(i.slice(),3)),this.setAttribute("uv",new Ne(r,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(t){return new mo(t.vertices,t.indices,t.radius,t.details)}}class po extends mo{constructor(t=1,e=0){const q=(1+Math.sqrt(5))/2,n=1/q;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-q,0,-n,q,0,n,-q,0,n,q,-n,-q,0,-n,q,0,n,-q,0,n,q,0,-q,0,-n,q,0,-n,-q,0,n,q,0,n],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new po(t.radius,t.detail)}}new ct,new ct,new ct,new Ae;class fo{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const q=this.getUtoTmapping(t);return this.getPoint(q,e)}getPoints(t=5){const e=[];for(let q=0;q<=t;q++)e.push(this.getPoint(q/t));return e}getSpacedPoints(t=5){const e=[];for(let q=0;q<=t;q++)e.push(this.getPointAt(q/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let q,n=this.getPoint(0),i=0;e.push(0);for(let r=1;r<=t;r++)q=this.getPoint(r/t),i+=q.distanceTo(n),e.push(i),n=q;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const q=this.getLengths();let n=0;const i=q.length;let r;r=e||t*q[i-1];let o,a=0,s=i-1;for(;a<=s;)if(n=Math.floor(a+(s-a)/2),o=q[n]-r,o<0)a=n+1;else{if(!(o>0)){s=n;break}s=n-1}if(n=s,q[n]===r)return n/(i-1);const l=q[n];return(n+(r-l)/(q[n+1]-l))/(i-1)}getTangent(t,e){const q=1e-4;let n=t-q,i=t+q;n<0&&(n=0),i>1&&(i=1);const r=this.getPoint(n),o=this.getPoint(i),a=e||(r.isVector2?new J:new ct);return a.copy(o).sub(r).normalize(),a}getTangentAt(t,e){const q=this.getUtoTmapping(t);return this.getTangent(q,e)}computeFrenetFrames(t,e){const q=new ct,n=[],i=[],r=[],o=new ct,a=new Ht;for(let e=0;e<=t;e++){const q=e/t;n[e]=this.getTangentAt(q,new ct)}i[0]=new ct,r[0]=new ct;let s=Number.MAX_VALUE;const l=Math.abs(n[0].x),c=Math.abs(n[0].y),h=Math.abs(n[0].z);l<=s&&(s=l,q.set(1,0,0)),c<=s&&(s=c,q.set(0,1,0)),h<=s&&q.set(0,0,1),o.crossVectors(n[0],q).normalize(),i[0].crossVectors(n[0],o),r[0].crossVectors(n[0],i[0]);for(let e=1;e<=t;e++){if(i[e]=i[e-1].clone(),r[e]=r[e-1].clone(),o.crossVectors(n[e-1],n[e]),o.length()>Number.EPSILON){o.normalize();const t=Math.acos(G(n[e-1].dot(n[e]),-1,1));i[e].applyMatrix4(a.makeRotationAxis(o,t))}r[e].crossVectors(n[e],i[e])}if(!0===e){let e=Math.acos(G(i[0].dot(i[t]),-1,1));e/=t,n[0].dot(o.crossVectors(i[0],i[t]))>0&&(e=-e);for(let q=1;q<=t;q++)i[q].applyMatrix4(a.makeRotationAxis(n[q],e*q)),r[q].crossVectors(n[q],i[q])}return{tangents:n,normals:i,binormals:r}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class go extends fo{constructor(t=0,e=0,q=1,n=1,i=0,r=2*Math.PI,o=!1,a=0){super(),this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=q,this.yRadius=n,this.aStartAngle=i,this.aEndAngle=r,this.aClockwise=o,this.aRotation=a}getPoint(t,e){const q=e||new J,n=2*Math.PI;let i=this.aEndAngle-this.aStartAngle;const r=Math.abs(i)<Number.EPSILON;for(;i<0;)i+=n;for(;i>n;)i-=n;i<Number.EPSILON&&(i=r?0:n),!0!==this.aClockwise||r||(i===n?i=-n:i-=n);const o=this.aStartAngle+t*i;let a=this.aX+this.xRadius*Math.cos(o),s=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),q=a-this.aX,n=s-this.aY;a=q*t-n*e+this.aX,s=q*e+n*t+this.aY}return q.set(a,s)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}go.prototype.isEllipseCurve=!0;class xo extends go{constructor(t,e,q,n,i,r){super(t,e,q,q,n,i,r),this.type="ArcCurve"}}function vo(){let t=0,e=0,q=0,n=0;function i(i,r,o,a){t=i,e=o,q=-3*i+3*r-2*o-a,n=2*i-2*r+o+a}return{initCatmullRom:function(t,e,q,n,r){i(e,q,r*(q-t),r*(n-e))},initNonuniformCatmullRom:function(t,e,q,n,r,o,a){let s=(e-t)/r-(q-t)/(r+o)+(q-e)/o,l=(q-e)/o-(n-e)/(o+a)+(n-q)/a;s*=o,l*=o,i(e,q,s,l)},calc:function(i){const r=i*i;return t+e*i+q*r+n*(r*i)}}}xo.prototype.isArcCurve=!0;const yo=new ct,_o=new vo,bo=new vo,Ao=new vo;class wo extends fo{constructor(t=[],e=!1,q="centripetal",n=.5){super(),this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=q,this.tension=n}getPoint(t,e=new ct){const q=e,n=this.points,i=n.length,r=(i-(this.closed?0:1))*t;let o,a,s=Math.floor(r),l=r-s;this.closed?s+=s>0?0:(Math.floor(Math.abs(s)/i)+1)*i:0===l&&s===i-1&&(s=i-2,l=1),this.closed||s>0?o=n[(s-1)%i]:(yo.subVectors(n[0],n[1]).add(n[0]),o=yo);const c=n[s%i],h=n[(s+1)%i];if(this.closed||s+2<i?a=n[(s+2)%i]:(yo.subVectors(n[i-1],n[i-2]).add(n[i-1]),a=yo),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(o.distanceToSquared(c),t),q=Math.pow(c.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(a),t);q<1e-4&&(q=1),e<1e-4&&(e=q),n<1e-4&&(n=q),_o.initNonuniformCatmullRom(o.x,c.x,h.x,a.x,e,q,n),bo.initNonuniformCatmullRom(o.y,c.y,h.y,a.y,e,q,n),Ao.initNonuniformCatmullRom(o.z,c.z,h.z,a.z,e,q,n)}else"catmullrom"===this.curveType&&(_o.initCatmullRom(o.x,c.x,h.x,a.x,this.tension),bo.initCatmullRom(o.y,c.y,h.y,a.y,this.tension),Ao.initCatmullRom(o.z,c.z,h.z,a.z,this.tension));return q.set(_o.calc(l),bo.calc(l),Ao.calc(l)),q}copy(t){super.copy(t),this.points=[];for(let e=0,q=t.points.length;e<q;e++){const q=t.points[e];this.points.push(q.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,q=this.points.length;e<q;e++){const q=this.points[e];t.points.push(q.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,q=t.points.length;e<q;e++){const q=t.points[e];this.points.push((new ct).fromArray(q))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Mo(t,e,q,n,i){const r=.5*(n-e),o=.5*(i-q),a=t*t;return(2*q-2*n+r+o)*(t*a)+(-3*q+3*n-2*r-o)*a+r*t+q}function So(t,e,q,n){return function(t,e){const q=1-t;return q*q*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,q)+function(t,e){return t*t*e}(t,n)}function Eo(t,e,q,n,i){return function(t,e){const q=1-t;return q*q*q*e}(t,e)+function(t,e){const q=1-t;return 3*q*q*t*e}(t,q)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,i)}wo.prototype.isCatmullRomCurve3=!0;class Co extends fo{constructor(t=new J,e=new J,q=new J,n=new J){super(),this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=q,this.v3=n}getPoint(t,e=new J){const q=e,n=this.v0,i=this.v1,r=this.v2,o=this.v3;return q.set(Eo(t,n.x,i.x,r.x,o.x),Eo(t,n.y,i.y,r.y,o.y)),q}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Co.prototype.isCubicBezierCurve=!0;class To extends fo{constructor(t=new ct,e=new ct,q=new ct,n=new ct){super(),this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=q,this.v3=n}getPoint(t,e=new ct){const q=e,n=this.v0,i=this.v1,r=this.v2,o=this.v3;return q.set(Eo(t,n.x,i.x,r.x,o.x),Eo(t,n.y,i.y,r.y,o.y),Eo(t,n.z,i.z,r.z,o.z)),q}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}To.prototype.isCubicBezierCurve3=!0;class zo extends fo{constructor(t=new J,e=new J){super(),this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new J){const q=e;return 1===t?q.copy(this.v2):(q.copy(this.v2).sub(this.v1),q.multiplyScalar(t).add(this.v1)),q}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const q=e||new J;return q.copy(this.v2).sub(this.v1).normalize(),q}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}zo.prototype.isLineCurve=!0;class Lo extends fo{constructor(t=new J,e=new J,q=new J){super(),this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=q}getPoint(t,e=new J){const q=e,n=this.v0,i=this.v1,r=this.v2;return q.set(So(t,n.x,i.x,r.x),So(t,n.y,i.y,r.y)),q}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Lo.prototype.isQuadraticBezierCurve=!0;class Ro extends fo{constructor(t=new ct,e=new ct,q=new ct){super(),this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=q}getPoint(t,e=new ct){const q=e,n=this.v0,i=this.v1,r=this.v2;return q.set(So(t,n.x,i.x,r.x),So(t,n.y,i.y,r.y),So(t,n.z,i.z,r.z)),q}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Ro.prototype.isQuadraticBezierCurve3=!0;class Io extends fo{constructor(t=[]){super(),this.type="SplineCurve",this.points=t}getPoint(t,e=new J){const q=e,n=this.points,i=(n.length-1)*t,r=Math.floor(i),o=i-r,a=n[0===r?r:r-1],s=n[r],l=n[r>n.length-2?n.length-1:r+1],c=n[r>n.length-3?n.length-1:r+2];return q.set(Mo(o,a.x,s.x,l.x,c.x),Mo(o,a.y,s.y,l.y,c.y)),q}copy(t){super.copy(t),this.points=[];for(let e=0,q=t.points.length;e<q;e++){const q=t.points[e];this.points.push(q.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,q=this.points.length;e<q;e++){const q=this.points[e];t.points.push(q.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,q=t.points.length;e<q;e++){const q=t.points[e];this.points.push((new J).fromArray(q))}return this}}Io.prototype.isSplineCurve=!0;var Po=Object.freeze({__proto__:null,ArcCurve:xo,CatmullRomCurve3:wo,CubicBezierCurve:Co,CubicBezierCurve3:To,EllipseCurve:go,LineCurve:zo,LineCurve3:class extends fo{constructor(t=new ct,e=new ct){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new ct){const q=e;return 1===t?q.copy(this.v2):(q.copy(this.v2).sub(this.v1),q.multiplyScalar(t).add(this.v1)),q}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}},QuadraticBezierCurve:Lo,QuadraticBezierCurve3:Ro,SplineCurve:Io});class Bo extends fo{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new zo(e,t))}getPoint(t,e){const q=t*this.getLength(),n=this.getCurveLengths();let i=0;for(;i<n.length;){if(n[i]>=q){const t=n[i]-q,r=this.curves[i],o=r.getLength(),a=0===o?0:1-t/o;return r.getPointAt(a,e)}i++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let q=0,n=this.curves.length;q<n;q++)e+=this.curves[q].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let q=0;q<=t;q++)e.push(this.getPoint(q/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let q;for(let n=0,i=this.curves;n<i.length;n++){const r=i[n],o=r&&r.isEllipseCurve?2*t:r&&(r.isLineCurve||r.isLineCurve3)?1:r&&r.isSplineCurve?t*r.points.length:t,a=r.getPoints(o);for(let t=0;t<a.length;t++){const n=a[t];q&&q.equals(n)||(e.push(n),q=n)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,q=t.curves.length;e<q;e++){const q=t.curves[e];this.curves.push(q.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,q=this.curves.length;e<q;e++){const q=this.curves[e];t.curves.push(q.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,q=t.curves.length;e<q;e++){const q=t.curves[e];this.curves.push((new Po[q.type]).fromJSON(q))}return this}}class ko extends Bo{constructor(t){super(),this.type="Path",this.currentPoint=new J,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,q=t.length;e<q;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const q=new zo(this.currentPoint.clone(),new J(t,e));return this.curves.push(q),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,q,n){const i=new Lo(this.currentPoint.clone(),new J(t,e),new J(q,n));return this.curves.push(i),this.currentPoint.set(q,n),this}bezierCurveTo(t,e,q,n,i,r){const o=new Co(this.currentPoint.clone(),new J(t,e),new J(q,n),new J(i,r));return this.curves.push(o),this.currentPoint.set(i,r),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),q=new Io(e);return this.curves.push(q),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,q,n,i,r){const o=this.currentPoint.x,a=this.currentPoint.y;return this.absarc(t+o,e+a,q,n,i,r),this}absarc(t,e,q,n,i,r){return this.absellipse(t,e,q,q,n,i,r),this}ellipse(t,e,q,n,i,r,o,a){const s=this.currentPoint.x,l=this.currentPoint.y;return this.absellipse(t+s,e+l,q,n,i,r,o,a),this}absellipse(t,e,q,n,i,r,o,a){const s=new go(t,e,q,n,i,r,o,a);if(this.curves.length>0){const t=s.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(s);const l=s.getPoint(1);return this.currentPoint.copy(l),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Do extends ko{constructor(t){super(t),this.uuid=V(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let q=0,n=this.holes.length;q<n;q++)e[q]=this.holes[q].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,q=t.holes.length;e<q;e++){const q=t.holes[e];this.holes.push(q.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,q=this.holes.length;e<q;e++){const q=this.holes[e];t.holes.push(q.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,q=t.holes.length;e<q;e++){const q=t.holes[e];this.holes.push((new ko).fromJSON(q))}return this}}function Oo(t,e,q,n,i){let r,o;if(i===function(t,e,q,n){let i=0;for(let r=e,o=q-n;r<q;r+=n)i+=(t[o]-t[r])*(t[r+1]+t[o+1]),o=r;return i}(t,e,q,n)>0)for(r=e;r<q;r+=n)o=ra(r,t[r],t[r+1],o);else for(r=q-n;r>=e;r-=n)o=ra(r,t[r],t[r+1],o);return o&&Qo(o,o.next)&&(oa(o),o=o.next),o}function No(t,e){if(!t)return t;e||(e=t);let q,n=t;do{if(q=!1,n.steiner||!Qo(n,n.next)&&0!==Ko(n.prev,n,n.next))n=n.next;else{if(oa(n),n=e=n.prev,n===n.next)break;q=!0}}while(q||n!==e);return e}function Fo(t,e,q,n,i,r,o){if(!t)return;!o&&r&&function(t,e,q,n){let i=t;do{null===i.z&&(i.z=Xo(i.x,i.y,e,q,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){let e,q,n,i,r,o,a,s,l=1;do{for(q=t,t=null,r=null,o=0;q;){for(o++,n=q,a=0,e=0;e<l&&(a++,n=n.nextZ,n);e++);for(s=l;a>0||s>0&&n;)0!==a&&(0===s||!n||q.z<=n.z)?(i=q,q=q.nextZ,a--):(i=n,n=n.nextZ,s--),r?r.nextZ=i:t=i,i.prevZ=r,r=i;q=n}r.nextZ=null,l*=2}while(o>1)}(i)}(t,n,i,r);let a,s,l=t;for(;t.prev!==t.next;)if(a=t.prev,s=t.next,r?Uo(t,n,i,r):Ho(t))e.push(a.i/q),e.push(t.i/q),e.push(s.i/q),oa(t),t=s.next,l=s.next;else if((t=s)===l){o?1===o?Fo(t=Vo(No(t),e,q),e,q,n,i,r,2):2===o&&Go(t,e,q,n,i,r):Fo(No(t),e,q,n,i,r,1);break}}function Ho(t){const e=t.prev,q=t,n=t.next;if(Ko(e,q,n)>=0)return!1;let i=t.next.next;for(;i!==t.prev;){if(Jo(e.x,e.y,q.x,q.y,n.x,n.y,i.x,i.y)&&Ko(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Uo(t,e,q,n){const i=t.prev,r=t,o=t.next;if(Ko(i,r,o)>=0)return!1;const a=i.x<r.x?i.x<o.x?i.x:o.x:r.x<o.x?r.x:o.x,s=i.y<r.y?i.y<o.y?i.y:o.y:r.y<o.y?r.y:o.y,l=i.x>r.x?i.x>o.x?i.x:o.x:r.x>o.x?r.x:o.x,c=i.y>r.y?i.y>o.y?i.y:o.y:r.y>o.y?r.y:o.y,h=Xo(a,s,e,q,n),u=Xo(l,c,e,q,n);let m=t.prevZ,d=t.nextZ;for(;m&&m.z>=h&&d&&d.z<=u;){if(m!==t.prev&&m!==t.next&&Jo(i.x,i.y,r.x,r.y,o.x,o.y,m.x,m.y)&&Ko(m.prev,m,m.next)>=0)return!1;if(m=m.prevZ,d!==t.prev&&d!==t.next&&Jo(i.x,i.y,r.x,r.y,o.x,o.y,d.x,d.y)&&Ko(d.prev,d,d.next)>=0)return!1;d=d.nextZ}for(;m&&m.z>=h;){if(m!==t.prev&&m!==t.next&&Jo(i.x,i.y,r.x,r.y,o.x,o.y,m.x,m.y)&&Ko(m.prev,m,m.next)>=0)return!1;m=m.prevZ}for(;d&&d.z<=u;){if(d!==t.prev&&d!==t.next&&Jo(i.x,i.y,r.x,r.y,o.x,o.y,d.x,d.y)&&Ko(d.prev,d,d.next)>=0)return!1;d=d.nextZ}return!0}function Vo(t,e,q){let n=t;do{const i=n.prev,r=n.next.next;!Qo(i,r)&&ta(i,n,n.next,r)&&na(i,r)&&na(r,i)&&(e.push(i.i/q),e.push(n.i/q),e.push(r.i/q),oa(n),oa(n.next),n=t=r),n=n.next}while(n!==t);return No(n)}function Go(t,e,q,n,i,r){let o=t;do{let t=o.next.next;for(;t!==o.prev;){if(o.i!==t.i&&$o(o,t)){let a=ia(o,t);return o=No(o,o.next),a=No(a,a.next),Fo(o,e,q,n,i,r),void Fo(a,e,q,n,i,r)}t=t.next}o=o.next}while(o!==t)}function Wo(t,e){return t.x-e.x}function jo(t,e){if(e=function(t,e){let q=e;const n=t.x,i=t.y;let r,o=-1/0;do{if(i<=q.y&&i>=q.next.y&&q.next.y!==q.y){const t=q.x+(i-q.y)*(q.next.x-q.x)/(q.next.y-q.y);if(t<=n&&t>o){if(o=t,t===n){if(i===q.y)return q;if(i===q.next.y)return q.next}r=q.x<q.next.x?q:q.next}}q=q.next}while(q!==e);if(!r)return null;if(n===o)return r;const a=r,s=r.x,l=r.y;let c,h=1/0;q=r;do{n>=q.x&&q.x>=s&&n!==q.x&&Jo(i<l?n:o,i,s,l,i<l?o:n,i,q.x,q.y)&&(c=Math.abs(i-q.y)/(n-q.x),na(q,t)&&(c<h||c===h&&(q.x>r.x||q.x===r.x&&Zo(r,q)))&&(r=q,h=c)),q=q.next}while(q!==a);return r}(t,e),e){const q=ia(e,t);No(e,e.next),No(q,q.next)}}function Zo(t,e){return Ko(t.prev,t,e.prev)<0&&Ko(e.next,t,t.next)<0}function Xo(t,e,q,n,i){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-q)*i)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*i)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function Yo(t){let e=t,q=t;do{(e.x<q.x||e.x===q.x&&e.y<q.y)&&(q=e),e=e.next}while(e!==t);return q}function Jo(t,e,q,n,i,r,o,a){return(i-o)*(e-a)-(t-o)*(r-a)>=0&&(t-o)*(n-a)-(q-o)*(e-a)>=0&&(q-o)*(r-a)-(i-o)*(n-a)>=0}function $o(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let q=t;do{if(q.i!==t.i&&q.next.i!==t.i&&q.i!==e.i&&q.next.i!==e.i&&ta(q,q.next,t,e))return!0;q=q.next}while(q!==t);return!1}(t,e)&&(na(t,e)&&na(e,t)&&function(t,e){let q=t,n=!1;const i=(t.x+e.x)/2,r=(t.y+e.y)/2;do{q.y>r!=q.next.y>r&&q.next.y!==q.y&&i<(q.next.x-q.x)*(r-q.y)/(q.next.y-q.y)+q.x&&(n=!n),q=q.next}while(q!==t);return n}(t,e)&&(Ko(t.prev,t,e.prev)||Ko(t,e.prev,e))||Qo(t,e)&&Ko(t.prev,t,t.next)>0&&Ko(e.prev,e,e.next)>0)}function Ko(t,e,q){return(e.y-t.y)*(q.x-e.x)-(e.x-t.x)*(q.y-e.y)}function Qo(t,e){return t.x===e.x&&t.y===e.y}function ta(t,e,q,n){const i=qa(Ko(t,e,q)),r=qa(Ko(t,e,n)),o=qa(Ko(q,n,t)),a=qa(Ko(q,n,e));return i!==r&&o!==a||!(0!==i||!ea(t,q,e))||!(0!==r||!ea(t,n,e))||!(0!==o||!ea(q,t,n))||!(0!==a||!ea(q,e,n))}function ea(t,e,q){return e.x<=Math.max(t.x,q.x)&&e.x>=Math.min(t.x,q.x)&&e.y<=Math.max(t.y,q.y)&&e.y>=Math.min(t.y,q.y)}function qa(t){return t>0?1:t<0?-1:0}function na(t,e){return Ko(t.prev,t,t.next)<0?Ko(t,e,t.next)>=0&&Ko(t,t.prev,e)>=0:Ko(t,e,t.prev)<0||Ko(t,t.next,e)<0}function ia(t,e){const q=new aa(t.i,t.x,t.y),n=new aa(e.i,e.x,e.y),i=t.next,r=e.prev;return t.next=e,e.prev=t,q.next=i,i.prev=q,n.next=q,q.prev=n,r.next=n,n.prev=r,n}function ra(t,e,q,n){const i=new aa(t,e,q);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function oa(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function aa(t,e,q){this.i=t,this.x=e,this.y=q,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class sa{static area(t){const e=t.length;let q=0;for(let n=e-1,i=0;i<e;n=i++)q+=t[n].x*t[i].y-t[i].x*t[n].y;return.5*q}static isClockWise(t){return sa.area(t)<0}static triangulateShape(t,e){const q=[],n=[],i=[];la(t),ca(q,t);let r=t.length;e.forEach(la);for(let t=0;t<e.length;t++)n.push(r),r+=e[t].length,ca(q,e[t]);const o=function(t,e,q=2){const n=e&&e.length,i=n?e[0]*q:t.length;let r=Oo(t,0,i,q,!0);const o=[];if(!r||r.next===r.prev)return o;let a,s,l,c,h,u,m;if(n&&(r=function(t,e,q,n){const i=[];let r,o,a,s,l;for(r=0,o=e.length;r<o;r++)a=e[r]*n,s=r<o-1?e[r+1]*n:t.length,l=Oo(t,a,s,n,!1),l===l.next&&(l.steiner=!0),i.push(Yo(l));for(i.sort(Wo),r=0;r<i.length;r++)jo(i[r],q),q=No(q,q.next);return q}(t,e,r,q)),t.length>80*q){a=l=t[0],s=c=t[1];for(let e=q;e<i;e+=q)h=t[e],u=t[e+1],h<a&&(a=h),u<s&&(s=u),h>l&&(l=h),u>c&&(c=u);m=Math.max(l-a,c-s),m=0!==m?1/m:0}return Fo(r,o,q,a,s,m),o}(q,n);for(let t=0;t<o.length;t+=3)i.push(o.slice(t,t+3));return i}}function la(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function ca(t,e){for(let q=0;q<e.length;q++)t.push(e[q].x),t.push(e[q].y)}class ha extends Ze{constructor(t=new Do([new J(.5,.5),new J(-.5,.5),new J(-.5,-.5),new J(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const q=this,n=[],i=[];for(let e=0,q=t.length;e<q;e++)r(t[e]);function r(t){const r=[],o=void 0!==e.curveSegments?e.curveSegments:12,a=void 0!==e.steps?e.steps:1;let s=void 0!==e.depth?e.depth:1,l=void 0===e.bevelEnabled||e.bevelEnabled,c=void 0!==e.bevelThickness?e.bevelThickness:.2,h=void 0!==e.bevelSize?e.bevelSize:c-.1,u=void 0!==e.bevelOffset?e.bevelOffset:0,m=void 0!==e.bevelSegments?e.bevelSegments:3;const d=e.extrudePath,p=void 0!==e.UVGenerator?e.UVGenerator:ua;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),s=e.amount);let f,g,x,v,y,_=!1;d&&(f=d.getSpacedPoints(a),_=!0,l=!1,g=d.computeFrenetFrames(a,!1),x=new ct,v=new ct,y=new ct),l||(m=0,c=0,h=0,u=0);const b=t.extractPoints(o);let A=b.shape;const w=b.holes;if(!sa.isClockWise(A)){A=A.reverse();for(let t=0,e=w.length;t<e;t++){const e=w[t];sa.isClockWise(e)&&(w[t]=e.reverse())}}const M=sa.triangulateShape(A,w),S=A;for(let t=0,e=w.length;t<e;t++){const e=w[t];A=A.concat(e)}function E(t,e,q){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(q).add(t)}const C=A.length,T=M.length;function z(t,e,q){let n,i,r;const o=t.x-e.x,a=t.y-e.y,s=q.x-t.x,l=q.y-t.y,c=o*o+a*a,h=o*l-a*s;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(c),u=Math.sqrt(s*s+l*l),m=e.x-a/h,d=e.y+o/h,p=((q.x-l/u-m)*l-(q.y+s/u-d)*s)/(o*l-a*s);n=m+o*p-t.x,i=d+a*p-t.y;const f=n*n+i*i;if(f<=2)return new J(n,i);r=Math.sqrt(f/2)}else{let t=!1;o>Number.EPSILON?s>Number.EPSILON&&(t=!0):o<-Number.EPSILON?s<-Number.EPSILON&&(t=!0):Math.sign(a)===Math.sign(l)&&(t=!0),t?(n=-a,i=o,r=Math.sqrt(c)):(n=o,i=a,r=Math.sqrt(c/2))}return new J(n/r,i/r)}const L=[];for(let t=0,e=S.length,q=e-1,n=t+1;t<e;t++,q++,n++)q===e&&(q=0),n===e&&(n=0),L[t]=z(S[t],S[q],S[n]);const R=[];let I,P=L.concat();for(let t=0,e=w.length;t<e;t++){const e=w[t];I=[];for(let t=0,q=e.length,n=q-1,i=t+1;t<q;t++,n++,i++)n===q&&(n=0),i===q&&(i=0),I[t]=z(e[t],e[n],e[i]);R.push(I),P=P.concat(I)}for(let t=0;t<m;t++){const e=t/m,q=c*Math.cos(e*Math.PI/2),n=h*Math.sin(e*Math.PI/2)+u;for(let t=0,e=S.length;t<e;t++){const e=E(S[t],L[t],n);D(e.x,e.y,-q)}for(let t=0,e=w.length;t<e;t++){const e=w[t];I=R[t];for(let t=0,i=e.length;t<i;t++){const i=E(e[t],I[t],n);D(i.x,i.y,-q)}}}const B=h+u;for(let t=0;t<C;t++){const e=l?E(A[t],P[t],B):A[t];_?(v.copy(g.normals[0]).multiplyScalar(e.x),x.copy(g.binormals[0]).multiplyScalar(e.y),y.copy(f[0]).add(v).add(x),D(y.x,y.y,y.z)):D(e.x,e.y,0)}for(let t=1;t<=a;t++)for(let e=0;e<C;e++){const q=l?E(A[e],P[e],B):A[e];_?(v.copy(g.normals[t]).multiplyScalar(q.x),x.copy(g.binormals[t]).multiplyScalar(q.y),y.copy(f[t]).add(v).add(x),D(y.x,y.y,y.z)):D(q.x,q.y,s/a*t)}for(let t=m-1;t>=0;t--){const e=t/m,q=c*Math.cos(e*Math.PI/2),n=h*Math.sin(e*Math.PI/2)+u;for(let t=0,e=S.length;t<e;t++){const e=E(S[t],L[t],n);D(e.x,e.y,s+q)}for(let t=0,e=w.length;t<e;t++){const e=w[t];I=R[t];for(let t=0,i=e.length;t<i;t++){const i=E(e[t],I[t],n);_?D(i.x,i.y+f[a-1].y,f[a-1].x+q):D(i.x,i.y,s+q)}}}function k(t,e){let q=t.length;for(;--q>=0;){const n=q;let i=q-1;i<0&&(i=t.length-1);for(let t=0,q=a+2*m;t<q;t++){const q=C*t,r=C*(t+1);N(e+n+q,e+i+q,e+i+r,e+n+r)}}}function D(t,e,q){r.push(t),r.push(e),r.push(q)}function O(t,e,i){F(t),F(e),F(i);const r=n.length/3,o=p.generateTopUV(q,n,r-3,r-2,r-1);H(o[0]),H(o[1]),H(o[2])}function N(t,e,i,r){F(t),F(e),F(r),F(e),F(i),F(r);const o=n.length/3,a=p.generateSideWallUV(q,n,o-6,o-3,o-2,o-1);H(a[0]),H(a[1]),H(a[3]),H(a[1]),H(a[2]),H(a[3])}function F(t){n.push(r[3*t+0]),n.push(r[3*t+1]),n.push(r[3*t+2])}function H(t){i.push(t.x),i.push(t.y)}!function(){const t=n.length/3;if(l){let t=0,e=C*t;for(let t=0;t<T;t++){const q=M[t];O(q[2]+e,q[1]+e,q[0]+e)}t=a+2*m,e=C*t;for(let t=0;t<T;t++){const q=M[t];O(q[0]+e,q[1]+e,q[2]+e)}}else{for(let t=0;t<T;t++){const e=M[t];O(e[2],e[1],e[0])}for(let t=0;t<T;t++){const e=M[t];O(e[0]+C*a,e[1]+C*a,e[2]+C*a)}}q.addGroup(t,n.length/3-t,0)}(),function(){const t=n.length/3;let e=0;k(S,e),e+=S.length;for(let t=0,q=w.length;t<q;t++){const q=w[t];k(q,e),e+=q.length}q.addGroup(t,n.length/3-t,1)}()}this.setAttribute("position",new Ne(n,3)),this.setAttribute("uv",new Ne(i,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,q){if(q.shapes=[],Array.isArray(t))for(let e=0,n=t.length;e<n;e++){const n=t[e];q.shapes.push(n.uuid)}else q.shapes.push(t.uuid);return void 0!==e.extrudePath&&(q.options.extrudePath=e.extrudePath.toJSON()),q}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const q=[];for(let n=0,i=t.shapes.length;n<i;n++){const i=e[t.shapes[n]];q.push(i)}const n=t.options.extrudePath;return void 0!==n&&(t.options.extrudePath=(new Po[n.type]).fromJSON(n)),new ha(q,t.options)}}const ua={generateTopUV:function(t,e,q,n,i){const r=e[3*q],o=e[3*q+1],a=e[3*n],s=e[3*n+1],l=e[3*i],c=e[3*i+1];return[new J(r,o),new J(a,s),new J(l,c)]},generateSideWallUV:function(t,e,q,n,i,r){const o=e[3*q],a=e[3*q+1],s=e[3*q+2],l=e[3*n],c=e[3*n+1],h=e[3*n+2],u=e[3*i],m=e[3*i+1],d=e[3*i+2],p=e[3*r],f=e[3*r+1],g=e[3*r+2];return Math.abs(a-c)<Math.abs(o-l)?[new J(o,1-s),new J(l,1-h),new J(u,1-d),new J(p,1-g)]:[new J(a,1-s),new J(c,1-h),new J(m,1-d),new J(f,1-g)]}};class ma extends Ze{constructor(t=.5,e=1,q=8,n=1,i=0,r=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:q,phiSegments:n,thetaStart:i,thetaLength:r},q=Math.max(3,q);const o=[],a=[],s=[],l=[];let c=t;const h=(e-t)/(n=Math.max(1,n)),u=new ct,m=new J;for(let t=0;t<=n;t++){for(let t=0;t<=q;t++){const n=i+t/q*r;u.x=c*Math.cos(n),u.y=c*Math.sin(n),a.push(u.x,u.y,u.z),s.push(0,0,1),m.x=(u.x/e+1)/2,m.y=(u.y/e+1)/2,l.push(m.x,m.y)}c+=h}for(let t=0;t<n;t++){const e=t*(q+1);for(let t=0;t<q;t++){const n=t+e,i=n,r=n+q+1,a=n+q+2,s=n+1;o.push(i,r,s),o.push(r,a,s)}}this.setIndex(o),this.setAttribute("position",new Ne(a,3)),this.setAttribute("normal",new Ne(s,3)),this.setAttribute("uv",new Ne(l,2))}static fromJSON(t){return new ma(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class da extends Ze{constructor(t=new Do([new J(0,.5),new J(-.5,-.5),new J(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const q=[],n=[],i=[],r=[];let o=0,a=0;if(!1===Array.isArray(t))s(t);else for(let e=0;e<t.length;e++)s(t[e]),this.addGroup(o,a,e),o+=a,a=0;function s(t){const o=n.length/3,s=t.extractPoints(e);let l=s.shape;const c=s.holes;!1===sa.isClockWise(l)&&(l=l.reverse());for(let t=0,e=c.length;t<e;t++){const e=c[t];!0===sa.isClockWise(e)&&(c[t]=e.reverse())}const h=sa.triangulateShape(l,c);for(let t=0,e=c.length;t<e;t++){const e=c[t];l=l.concat(e)}for(let t=0,e=l.length;t<e;t++){const e=l[t];n.push(e.x,e.y,0),i.push(0,0,1),r.push(e.x,e.y)}for(let t=0,e=h.length;t<e;t++){const e=h[t],n=e[0]+o,i=e[1]+o,r=e[2]+o;q.push(n,i,r),a+=3}}this.setIndex(q),this.setAttribute("position",new Ne(n,3)),this.setAttribute("normal",new Ne(i,3)),this.setAttribute("uv",new Ne(r,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let q=0,n=t.length;q<n;q++){const n=t[q];e.shapes.push(n.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const q=[];for(let n=0,i=t.shapes.length;n<i;n++){const i=e[t.shapes[n]];q.push(i)}return new da(q,t.curveSegments)}}class pa extends Ze{constructor(t=1,e=32,q=16,n=0,i=2*Math.PI,r=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:q,phiStart:n,phiLength:i,thetaStart:r,thetaLength:o},e=Math.max(3,Math.floor(e)),q=Math.max(2,Math.floor(q));const a=Math.min(r+o,Math.PI);let s=0;const l=[],c=new ct,h=new ct,u=[],m=[],d=[],p=[];for(let u=0;u<=q;u++){const f=[],g=u/q;let x=0;0==u&&0==r?x=.5/e:u==q&&a==Math.PI&&(x=-.5/e);for(let q=0;q<=e;q++){const a=q/e;c.x=-t*Math.cos(n+a*i)*Math.sin(r+g*o),c.y=t*Math.cos(r+g*o),c.z=t*Math.sin(n+a*i)*Math.sin(r+g*o),m.push(c.x,c.y,c.z),h.copy(c).normalize(),d.push(h.x,h.y,h.z),p.push(a+x,1-g),f.push(s++)}l.push(f)}for(let t=0;t<q;t++)for(let n=0;n<e;n++){const e=l[t][n+1],i=l[t][n],o=l[t+1][n],s=l[t+1][n+1];(0!==t||r>0)&&u.push(e,i,s),(t!==q-1||a<Math.PI)&&u.push(i,o,s)}this.setIndex(u),this.setAttribute("position",new Ne(m,3)),this.setAttribute("normal",new Ne(d,3)),this.setAttribute("uv",new Ne(p,2))}static fromJSON(t){return new pa(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}(class extends Me{constructor(t){super(),this.type="ShadowMaterial",this.color=new Re(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}).prototype.isShadowMaterial=!0;class fa extends Me{constructor(t){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Re(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Re(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}fa.prototype.isMeshStandardMaterial=!0;(class extends fa{constructor(t){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new J(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return G(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.sheenColor=new Re(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Re(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Re(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(t)}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}).prototype.isMeshPhysicalMaterial=!0;(class extends Me{constructor(t){super(),this.type="MeshPhongMaterial",this.color=new Re(16777215),this.specular=new Re(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Re(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}).prototype.isMeshPhongMaterial=!0;(class extends Me{constructor(t){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Re(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Re(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}).prototype.isMeshToonMaterial=!0;(class extends Me{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}).prototype.isMeshNormalMaterial=!0;(class extends Me{constructor(t){super(),this.type="MeshLambertMaterial",this.color=new Re(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Re(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}).prototype.isMeshLambertMaterial=!0;(class extends Me{constructor(t){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Re(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new J(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}).prototype.isMeshMatcapMaterial=!0;(class extends Yr{constructor(t){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}).prototype.isLineDashedMaterial=!0;const ga={arraySlice:function(t,e,q){return ga.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==q?q:t.length)):t.slice(e,q)},convertArray:function(t,e,q){return!t||!q&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,q=new Array(e);for(let t=0;t!==e;++t)q[t]=t;return q.sort((function(e,q){return t[e]-t[q]})),q},sortedArray:function(t,e,q){const n=t.length,i=new t.constructor(n);for(let r=0,o=0;o!==n;++r){const n=q[r]*e;for(let q=0;q!==e;++q)i[o++]=t[n+q]}return i},flattenJSON:function(t,e,q,n){let i=1,r=t[0];for(;void 0!==r&&void 0===r[n];)r=t[i++];if(void 0===r)return;let o=r[n];if(void 0!==o)if(Array.isArray(o))do{o=r[n],void 0!==o&&(e.push(r.time),q.push.apply(q,o)),r=t[i++]}while(void 0!==r);else if(void 0!==o.toArray)do{o=r[n],void 0!==o&&(e.push(r.time),o.toArray(q,q.length)),r=t[i++]}while(void 0!==r);else do{o=r[n],void 0!==o&&(e.push(r.time),q.push(o)),r=t[i++]}while(void 0!==r)},subclip:function(t,e,q,n,i=30){const r=t.clone();r.name=e;const o=[];for(let t=0;t<r.tracks.length;++t){const e=r.tracks[t],a=e.getValueSize(),s=[],l=[];for(let t=0;t<e.times.length;++t){const r=e.times[t]*i;if(!(r<q||r>=n)){s.push(e.times[t]);for(let q=0;q<a;++q)l.push(e.values[t*a+q])}}0!==s.length&&(e.times=ga.convertArray(s,e.times.constructor),e.values=ga.convertArray(l,e.values.constructor),o.push(e))}r.tracks=o;let a=1/0;for(let t=0;t<r.tracks.length;++t)a>r.tracks[t].times[0]&&(a=r.tracks[t].times[0]);for(let t=0;t<r.tracks.length;++t)r.tracks[t].shift(-1*a);return r.resetDuration(),r},makeClipAdditive:function(t,e=0,q=t,n=30){n<=0&&(n=30);const i=q.tracks.length,r=e/n;for(let e=0;e<i;++e){const n=q.tracks[e],i=n.ValueTypeName;if("bool"===i||"string"===i)continue;const o=t.tracks.find((function(t){return t.name===n.name&&t.ValueTypeName===i}));if(void 0===o)continue;let a=0;const s=n.getValueSize();n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(a=s/3);let l=0;const c=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(l=c/3);const h=n.times.length-1;let u;if(r<=n.times[0]){const t=a,e=s-a;u=ga.arraySlice(n.values,t,e)}else if(r>=n.times[h]){const t=h*s+a,e=t+s-a;u=ga.arraySlice(n.values,t,e)}else{const t=n.createInterpolant(),e=a,q=s-a;t.evaluate(r),u=ga.arraySlice(t.resultBuffer,e,q)}"quaternion"===i&&(new lt).fromArray(u).normalize().conjugate().toArray(u);const m=o.times.length;for(let t=0;t<m;++t){const e=t*c+l;if("quaternion"===i)lt.multiplyQuaternionsFlat(o.values,e,u,0,o.values,e);else{const t=c-2*l;for(let q=0;q<t;++q)o.values[e+q]-=u[q]}}}return t.blendMode=2501,t}};class xa{constructor(t,e,q,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(q),this.sampleValues=e,this.valueSize=q,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let q=this._cachedIndex,n=e[q],i=e[q-1];t:{e:{let r;q:{n:if(!(t<n)){for(let r=q+2;;){if(void 0===n){if(t<i)break n;return q=e.length,this._cachedIndex=q,this.afterEnd_(q-1,t,i)}if(q===r)break;if(i=n,n=e[++q],t<n)break e}r=e.length;break q}if(t>=i)break t;{const o=e[1];t<o&&(q=2,i=o);for(let r=q-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(q===r)break;if(n=i,i=e[--q-1],t>=i)break e}r=q,q=0}}for(;q<r;){const n=q+r>>>1;t<e[n]?r=n:q=n+1}if(n=e[q],i=e[q-1],void 0===i)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(void 0===n)return q=e.length,this._cachedIndex=q,this.afterEnd_(q-1,i,t)}this._cachedIndex=q,this.intervalChanged_(q,i,n)}return this.interpolate_(q,i,t,n)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,q=this.sampleValues,n=this.valueSize,i=t*n;for(let t=0;t!==n;++t)e[t]=q[i+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}xa.prototype.beforeStart_=xa.prototype.copySampleValue_,xa.prototype.afterEnd_=xa.prototype.copySampleValue_;class va extends xa{constructor(t,e,q,n){super(t,e,q,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:S,endingEnd:S}}intervalChanged_(t,e,q){const n=this.parameterPositions;let i=t-2,r=t+1,o=n[i],a=n[r];if(void 0===o)switch(this.getSettings_().endingStart){case E:i=t,o=2*e-q;break;case C:i=n.length-2,o=e+n[i]-n[i+1];break;default:i=t,o=q}if(void 0===a)switch(this.getSettings_().endingEnd){case E:r=t,a=2*q-e;break;case C:r=1,a=q+n[1]-n[0];break;default:r=t-1,a=e}const s=.5*(q-e),l=this.valueSize;this._weightPrev=s/(e-o),this._weightNext=s/(a-q),this._offsetPrev=i*l,this._offsetNext=r*l}interpolate_(t,e,q,n){const i=this.resultBuffer,r=this.sampleValues,o=this.valueSize,a=t*o,s=a-o,l=this._offsetPrev,c=this._offsetNext,h=this._weightPrev,u=this._weightNext,m=(q-e)/(n-e),d=m*m,p=d*m,f=-h*p+2*h*d-h*m,g=(1+h)*p+(-1.5-2*h)*d+(-.5+h)*m+1,x=(-1-u)*p+(1.5+u)*d+.5*m,v=u*p-u*d;for(let t=0;t!==o;++t)i[t]=f*r[l+t]+g*r[s+t]+x*r[a+t]+v*r[c+t];return i}}class ya extends xa{constructor(t,e,q,n){super(t,e,q,n)}interpolate_(t,e,q,n){const i=this.resultBuffer,r=this.sampleValues,o=this.valueSize,a=t*o,s=a-o,l=(q-e)/(n-e),c=1-l;for(let t=0;t!==o;++t)i[t]=r[s+t]*c+r[a+t]*l;return i}}class _a extends xa{constructor(t,e,q,n){super(t,e,q,n)}interpolate_(t){return this.copySampleValue_(t-1)}}class ba{constructor(t,e,q,n){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=ga.convertArray(e,this.TimeBufferType),this.values=ga.convertArray(q,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let q;if(e.toJSON!==this.toJSON)q=e.toJSON(t);else{q={name:t.name,times:ga.convertArray(t.times,Array),values:ga.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(q.interpolation=e)}return q.type=t.ValueTypeName,q}InterpolantFactoryMethodDiscrete(t){return new _a(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new ya(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new va(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case A:e=this.InterpolantFactoryMethodDiscrete;break;case w:e=this.InterpolantFactoryMethodLinear;break;case M:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return A;case this.InterpolantFactoryMethodLinear:return w;case this.InterpolantFactoryMethodSmooth:return M}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let q=0,n=e.length;q!==n;++q)e[q]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let q=0,n=e.length;q!==n;++q)e[q]*=t}return this}trim(t,e){const q=this.times,n=q.length;let i=0,r=n-1;for(;i!==n&&q[i]<t;)++i;for(;-1!==r&&q[r]>e;)--r;if(++r,0!==i||r!==n){i>=r&&(r=Math.max(r,1),i=r-1);const t=this.getValueSize();this.times=ga.arraySlice(q,i,r),this.values=ga.arraySlice(this.values,i*t,r*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const q=this.times,n=this.values,i=q.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let r=null;for(let e=0;e!==i;e++){const n=q[e];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,n),t=!1;break}if(null!==r&&r>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,n,r),t=!1;break}r=n}if(void 0!==n&&ga.isTypedArray(n))for(let e=0,q=n.length;e!==q;++e){const q=n[e];if(isNaN(q)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,q),t=!1;break}}return t}optimize(){const t=ga.arraySlice(this.times),e=ga.arraySlice(this.values),q=this.getValueSize(),n=this.getInterpolation()===M,i=t.length-1;let r=1;for(let o=1;o<i;++o){let i=!1;const a=t[o];if(a!==t[o+1]&&(1!==o||a!==t[0]))if(n)i=!0;else{const t=o*q,n=t-q,r=t+q;for(let o=0;o!==q;++o){const q=e[t+o];if(q!==e[n+o]||q!==e[r+o]){i=!0;break}}}if(i){if(o!==r){t[r]=t[o];const n=o*q,i=r*q;for(let t=0;t!==q;++t)e[i+t]=e[n+t]}++r}}if(i>0){t[r]=t[i];for(let t=i*q,n=r*q,o=0;o!==q;++o)e[n+o]=e[t+o];++r}return r!==t.length?(this.times=ga.arraySlice(t,0,r),this.values=ga.arraySlice(e,0,r*q)):(this.times=t,this.values=e),this}clone(){const t=ga.arraySlice(this.times,0),e=ga.arraySlice(this.values,0),q=new(0,this.constructor)(this.name,t,e);return q.createInterpolant=this.createInterpolant,q}}ba.prototype.TimeBufferType=Float32Array,ba.prototype.ValueBufferType=Float32Array,ba.prototype.DefaultInterpolation=w;class Aa extends ba{}Aa.prototype.ValueTypeName="bool",Aa.prototype.ValueBufferType=Array,Aa.prototype.DefaultInterpolation=A,Aa.prototype.InterpolantFactoryMethodLinear=void 0,Aa.prototype.InterpolantFactoryMethodSmooth=void 0;class wa extends ba{}wa.prototype.ValueTypeName="color";class Ma extends ba{}Ma.prototype.ValueTypeName="number";class Sa extends xa{constructor(t,e,q,n){super(t,e,q,n)}interpolate_(t,e,q,n){const i=this.resultBuffer,r=this.sampleValues,o=this.valueSize,a=(q-e)/(n-e);let s=t*o;for(let t=s+o;s!==t;s+=4)lt.slerpFlat(i,0,r,s-o,r,s,a);return i}}class Ea extends ba{InterpolantFactoryMethodLinear(t){return new Sa(this.times,this.values,this.getValueSize(),t)}}Ea.prototype.ValueTypeName="quaternion",Ea.prototype.DefaultInterpolation=w,Ea.prototype.InterpolantFactoryMethodSmooth=void 0;class Ca extends ba{}Ca.prototype.ValueTypeName="string",Ca.prototype.ValueBufferType=Array,Ca.prototype.DefaultInterpolation=A,Ca.prototype.InterpolantFactoryMethodLinear=void 0,Ca.prototype.InterpolantFactoryMethodSmooth=void 0;class Ta extends ba{}Ta.prototype.ValueTypeName="vector";class za{constructor(t,e=-1,q,n=2500){this.name=t,this.tracks=q,this.duration=e,this.blendMode=n,this.uuid=V(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],q=t.tracks,n=1/(t.fps||1);for(let t=0,i=q.length;t!==i;++t)e.push(La(q[t]).scale(n));const i=new this(t.name,t.duration,e,t.blendMode);return i.uuid=t.uuid,i}static toJSON(t){const e=[],q=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,n=q.length;t!==n;++t)e.push(ba.toJSON(q[t]));return n}static CreateFromMorphTargetSequence(t,e,q,n){const i=e.length,r=[];for(let t=0;t<i;t++){let o=[],a=[];o.push((t+i-1)%i,t,(t+1)%i),a.push(0,1,0);const s=ga.getKeyframeOrder(o);o=ga.sortedArray(o,1,s),a=ga.sortedArray(a,1,s),n||0!==o[0]||(o.push(i),a.push(a[0])),r.push(new Ma(".morphTargetInfluences["+e[t].name+"]",o,a).scale(1/q))}return new this(t,-1,r)}static findByName(t,e){let q=t;if(!Array.isArray(t)){const e=t;q=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<q.length;t++)if(q[t].name===e)return q[t];return null}static CreateClipsFromMorphTargetSequences(t,e,q){const n={},i=/^([\w-]*?)([\d]+)$/;for(let e=0,q=t.length;e<q;e++){const q=t[e],r=q.name.match(i);if(r&&r.length>1){const t=r[1];let e=n[t];e||(n[t]=e=[]),e.push(q)}}const r=[];for(const t in n)r.push(this.CreateFromMorphTargetSequence(t,n[t],e,q));return r}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const q=function(t,e,q,n,i){if(0!==q.length){const r=[],o=[];ga.flattenJSON(q,r,o,n),0!==r.length&&i.push(new t(e,r,o))}},n=[],i=t.name||"default",r=t.fps||30,o=t.blendMode;let a=t.length||-1;const s=t.hierarchy||[];for(let t=0;t<s.length;t++){const i=s[t].keys;if(i&&0!==i.length)if(i[0].morphTargets){const t={};let e;for(e=0;e<i.length;e++)if(i[e].morphTargets)for(let q=0;q<i[e].morphTargets.length;q++)t[i[e].morphTargets[q]]=-1;for(const q in t){const t=[],r=[];for(let n=0;n!==i[e].morphTargets.length;++n){const n=i[e];t.push(n.time),r.push(n.morphTarget===q?1:0)}n.push(new Ma(".morphTargetInfluence["+q+"]",t,r))}a=t.length*(r||1)}else{const r=".bones["+e[t].name+"]";q(Ta,r+".position",i,"pos",n),q(Ea,r+".quaternion",i,"rot",n),q(Ta,r+".scale",i,"scl",n)}}return 0===n.length?null:new this(i,a,n,o)}resetDuration(){let t=0;for(let e=0,q=this.tracks.length;e!==q;++e){const q=this.tracks[e];t=Math.max(t,q.times[q.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function La(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Ma;case"vector":case"vector2":case"vector3":case"vector4":return Ta;case"color":return wa;case"quaternion":return Ea;case"bool":case"boolean":return Aa;case"string":return Ca}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],q=[];ga.flattenJSON(t.keys,e,q,"value"),t.times=e,t.values=q}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const Ra={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class Ia{constructor(t,e,q){const n=this;let i,r=!1,o=0,a=0;const s=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=q,this.itemStart=function(t){a++,!1===r&&void 0!==n.onStart&&n.onStart(t,o,a),r=!0},this.itemEnd=function(t){o++,void 0!==n.onProgress&&n.onProgress(t,o,a),o===a&&(r=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return i?i(t):t},this.setURLModifier=function(t){return i=t,this},this.addHandler=function(t,e){return s.push(t,e),this},this.removeHandler=function(t){const e=s.indexOf(t);return-1!==e&&s.splice(e,2),this},this.getHandler=function(t){for(let e=0,q=s.length;e<q;e+=2){const q=s[e],n=s[e+1];if(q.global&&(q.lastIndex=0),q.test(t))return n}return null}}}const Pa=new Ia;class Ba{constructor(t){this.manager=void 0!==t?t:Pa,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const q=this;return new Promise((function(n,i){q.load(t,n,e,i)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const ka={};class Da extends Ba{constructor(t){super(t)}load(t,e,q,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const i=Ra.get(t);if(void 0!==i)return this.manager.itemStart(t),setTimeout((()=>{e&&e(i),this.manager.itemEnd(t)}),0),i;if(void 0!==ka[t])return void ka[t].push({onLoad:e,onProgress:q,onError:n});ka[t]=[],ka[t].push({onLoad:e,onProgress:q,onError:n});const r=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"});fetch(r).then((e=>{if(200===e.status||0===e.status){0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");const q=ka[t],n=e.body.getReader(),i=e.headers.get("Content-Length"),r=i?parseInt(i):0,o=0!==r;let a=0;return new ReadableStream({start(t){!function e(){n.read().then((({done:n,value:i})=>{if(n)t.close();else{a+=i.byteLength;const n=new ProgressEvent("progress",{lengthComputable:o,loaded:a,total:r});for(let t=0,e=q.length;t<e;t++){const e=q[t];e.onProgress&&e.onProgress(n)}t.enqueue(i),e()}}))}()}})}throw Error(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`)})).then((t=>{const e=new Response(t);switch(this.responseType){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"document":return e.text().then((t=>(new DOMParser).parseFromString(t,this.mimeType)));case"json":return e.json();default:return e.text()}})).then((e=>{Ra.add(t,e);const q=ka[t];delete ka[t];for(let t=0,n=q.length;t<n;t++){const n=q[t];n.onLoad&&n.onLoad(e)}this.manager.itemEnd(t)})).catch((e=>{const q=ka[t];delete ka[t];for(let t=0,n=q.length;t<n;t++){const n=q[t];n.onError&&n.onError(e)}this.manager.itemError(t),this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class Oa extends Ba{constructor(t){super(t)}load(t,e,q,n){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const i=this,r=Ra.get(t);if(void 0!==r)return i.manager.itemStart(t),setTimeout((function(){e&&e(r),i.manager.itemEnd(t)}),0),r;const o=Q("img");function a(){l(),Ra.add(t,this),e&&e(this),i.manager.itemEnd(t)}function s(e){l(),n&&n(e),i.manager.itemError(t),i.manager.itemEnd(t)}function l(){o.removeEventListener("load",a,!1),o.removeEventListener("error",s,!1)}return o.addEventListener("load",a,!1),o.addEventListener("error",s,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),i.manager.itemStart(t),o.src=t,o}}class Na extends Ba{constructor(t){super(t)}load(t,e,q,n){const i=new bq,r=new Oa(this.manager);r.setCrossOrigin(this.crossOrigin),r.setPath(this.path);let o=0;function a(q){r.load(t[q],(function(t){i.images[q]=t,o++,6===o&&(i.needsUpdate=!0,e&&e(i))}),void 0,n)}for(let e=0;e<t.length;++e)a(e);return i}}class Fa extends Ba{constructor(t){super(t)}load(t,e,q,n){const i=new it,r=new Oa(this.manager);return r.setCrossOrigin(this.crossOrigin),r.setPath(this.path),r.load(t,(function(t){i.image=t,i.needsUpdate=!0,void 0!==e&&e(i)}),q,n),i}}class Ha extends ue{constructor(t,e=1){super(),this.type="Light",this.color=new Re(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}Ha.prototype.isLight=!0;(class extends Ha{constructor(t,e,q){super(t,q),this.type="HemisphereLight",this.position.copy(ue.DefaultUp),this.updateMatrix(),this.groundColor=new Re(e)}copy(t){return Ha.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}).prototype.isHemisphereLight=!0;const Ua=new Ht,Va=new ct,Ga=new ct;class Wa{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new J(512,512),this.map=null,this.mapPass=null,this.matrix=new Ht,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new zq,this._frameExtents=new J(1,1),this._viewportCount=1,this._viewports=[new ot(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,q=this.matrix;Va.setFromMatrixPosition(t.matrixWorld),e.position.copy(Va),Ga.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(Ga),e.updateMatrixWorld(),Ua.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ua),q.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),q.multiply(e.projectionMatrix),q.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class ja extends Wa{constructor(){super(new vq(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,q=2*F*t.angle*this.focus,n=this.mapSize.width/this.mapSize.height,i=t.distance||e.far;q===e.fov&&n===e.aspect&&i===e.far||(e.fov=q,e.aspect=n,e.far=i,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}ja.prototype.isSpotLightShadow=!0;(class extends Ha{constructor(t,e,q=0,n=Math.PI/3,i=0,r=1){super(t,e),this.type="SpotLight",this.position.copy(ue.DefaultUp),this.updateMatrix(),this.target=new ue,this.distance=q,this.angle=n,this.penumbra=i,this.decay=r,this.shadow=new ja}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isSpotLight=!0;const Za=new Ht,Xa=new ct,Ya=new ct;class Ja extends Wa{constructor(){super(new vq(90,1,.5,500)),this._frameExtents=new J(4,2),this._viewportCount=6,this._viewports=[new ot(2,1,1,1),new ot(0,1,1,1),new ot(3,1,1,1),new ot(1,1,1,1),new ot(3,0,1,1),new ot(1,0,1,1)],this._cubeDirections=[new ct(1,0,0),new ct(-1,0,0),new ct(0,0,1),new ct(0,0,-1),new ct(0,1,0),new ct(0,-1,0)],this._cubeUps=[new ct(0,1,0),new ct(0,1,0),new ct(0,1,0),new ct(0,1,0),new ct(0,0,1),new ct(0,0,-1)]}updateMatrices(t,e=0){const q=this.camera,n=this.matrix,i=t.distance||q.far;i!==q.far&&(q.far=i,q.updateProjectionMatrix()),Xa.setFromMatrixPosition(t.matrixWorld),q.position.copy(Xa),Ya.copy(q.position),Ya.add(this._cubeDirections[e]),q.up.copy(this._cubeUps[e]),q.lookAt(Ya),q.updateMatrixWorld(),n.makeTranslation(-Xa.x,-Xa.y,-Xa.z),Za.multiplyMatrices(q.projectionMatrix,q.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Za)}}Ja.prototype.isPointLightShadow=!0;class $a extends Ha{constructor(t,e,q=0,n=1){super(t,e),this.type="PointLight",this.distance=q,this.decay=n,this.shadow=new Ja}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}$a.prototype.isPointLight=!0;class Ka extends Wa{constructor(){super(new Vq(-5,5,5,-5,.5,500))}}Ka.prototype.isDirectionalLightShadow=!0;(class extends Ha{constructor(t,e){super(t,e),this.type="DirectionalLight",this.position.copy(ue.DefaultUp),this.updateMatrix(),this.target=new ue,this.shadow=new Ka}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isDirectionalLight=!0;class Qa extends Ha{constructor(t,e){super(t,e),this.type="AmbientLight"}}Qa.prototype.isAmbientLight=!0;(class extends Ha{constructor(t,e,q=10,n=10){super(t,e),this.type="RectAreaLight",this.width=q,this.height=n}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}).prototype.isRectAreaLight=!0;class ts{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new ct)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const q=t.x,n=t.y,i=t.z,r=this.coefficients;return e.copy(r[0]).multiplyScalar(.282095),e.addScaledVector(r[1],.488603*n),e.addScaledVector(r[2],.488603*i),e.addScaledVector(r[3],.488603*q),e.addScaledVector(r[4],q*n*1.092548),e.addScaledVector(r[5],n*i*1.092548),e.addScaledVector(r[6],.315392*(3*i*i-1)),e.addScaledVector(r[7],q*i*1.092548),e.addScaledVector(r[8],.546274*(q*q-n*n)),e}getIrradianceAt(t,e){const q=t.x,n=t.y,i=t.z,r=this.coefficients;return e.copy(r[0]).multiplyScalar(.886227),e.addScaledVector(r[1],1.023328*n),e.addScaledVector(r[2],1.023328*i),e.addScaledVector(r[3],1.023328*q),e.addScaledVector(r[4],.858086*q*n),e.addScaledVector(r[5],.858086*n*i),e.addScaledVector(r[6],.743125*i*i-.247708),e.addScaledVector(r[7],.858086*q*i),e.addScaledVector(r[8],.429043*(q*q-n*n)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let q=0;q<9;q++)this.coefficients[q].addScaledVector(t.coefficients[q],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let q=0;q<9;q++)this.coefficients[q].lerp(t.coefficients[q],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const q=this.coefficients;for(let n=0;n<9;n++)q[n].fromArray(t,e+3*n);return this}toArray(t=[],e=0){const q=this.coefficients;for(let n=0;n<9;n++)q[n].toArray(t,e+3*n);return t}static getBasisAt(t,e){const q=t.x,n=t.y,i=t.z;e[0]=.282095,e[1]=.488603*n,e[2]=.488603*i,e[3]=.488603*q,e[4]=1.092548*q*n,e[5]=1.092548*n*i,e[6]=.315392*(3*i*i-1),e[7]=1.092548*q*i,e[8]=.546274*(q*q-n*n)}}ts.prototype.isSphericalHarmonics3=!0;class es extends Ha{constructor(t=new ts,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}es.prototype.isLightProbe=!0;let qs;(class extends Ze{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}).prototype.isInstancedBufferGeometry=!0,class extends Ba{constructor(t){super(t),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,q,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const i=this,r=Ra.get(t);if(void 0!==r)return i.manager.itemStart(t),setTimeout((function(){e&&e(r),i.manager.itemEnd(t)}),0),r;const o={};o.credentials="anonymous"===this.crossOrigin?"same-origin":"include",o.headers=this.requestHeader,fetch(t,o).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(i.options,{colorSpaceConversion:"none"}))})).then((function(q){Ra.add(t,q),e&&e(q),i.manager.itemEnd(t)})).catch((function(e){n&&n(e),i.manager.itemError(t),i.manager.itemEnd(t)})),i.manager.itemStart(t)}}.prototype.isImageBitmapLoader=!0;class ns extends Ba{constructor(t){super(t)}load(t,e,q,n){const i=this,r=new Da(this.manager);r.setResponseType("arraybuffer"),r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials),r.load(t,(function(q){try{const t=q.slice(0);(void 0===qs&&(qs=new(window.AudioContext||window.webkitAudioContext)),qs).decodeAudioData(t,(function(t){e(t)}))}catch(e){n?n(e):console.error(e),i.manager.itemError(t)}}),q,n)}}(class extends es{constructor(t,e,q=1){super(void 0,q);const n=(new Re).set(t),i=(new Re).set(e),r=new ct(n.r,n.g,n.b),o=new ct(i.r,i.g,i.b),a=Math.sqrt(Math.PI),s=a*Math.sqrt(.75);this.sh.coefficients[0].copy(r).add(o).multiplyScalar(a),this.sh.coefficients[1].copy(r).sub(o).multiplyScalar(s)}}).prototype.isHemisphereLightProbe=!0,class extends es{constructor(t,e=1){super(void 0,e);const q=(new Re).set(t);this.sh.coefficients[0].set(q.r,q.g,q.b).multiplyScalar(2*Math.sqrt(Math.PI))}}.prototype.isAmbientLightProbe=!0;class is{constructor(t,e,q){let n,i,r;switch(this.binding=t,this.valueSize=q,e){case"quaternion":n=this._slerp,i=this._slerpAdditive,r=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*q),this._workIndex=5;break;case"string":case"bool":n=this._select,i=this._select,r=this._setAdditiveIdentityOther,this.buffer=new Array(5*q);break;default:n=this._lerp,i=this._lerpAdditive,r=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*q)}this._mixBufferRegion=n,this._mixBufferRegionAdditive=i,this._setIdentity=r,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const q=this.buffer,n=this.valueSize,i=t*n+n;let r=this.cumulativeWeight;if(0===r){for(let t=0;t!==n;++t)q[i+t]=q[t];r=e}else{r+=e;const t=e/r;this._mixBufferRegion(q,i,0,t,n)}this.cumulativeWeight=r}accumulateAdditive(t){const e=this.buffer,q=this.valueSize,n=q*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,n,0,t,q),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,q=this.buffer,n=t*e+e,i=this.cumulativeWeight,r=this.cumulativeWeightAdditive,o=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,i<1){const t=e*this._origIndex;this._mixBufferRegion(q,n,t,1-i,e)}r>0&&this._mixBufferRegionAdditive(q,n,this._addIndex*e,1,e);for(let t=e,i=e+e;t!==i;++t)if(q[t]!==q[t+e]){o.setValue(q,n);break}}saveOriginalState(){const t=this.binding,e=this.buffer,q=this.valueSize,n=q*this._origIndex;t.getValue(e,n);for(let t=q,i=n;t!==i;++t)e[t]=e[n+t%q];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let q=t;q<e;q++)this.buffer[q]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let q=0;q<this.valueSize;q++)this.buffer[e+q]=this.buffer[t+q]}_select(t,e,q,n,i){if(n>=.5)for(let n=0;n!==i;++n)t[e+n]=t[q+n]}_slerp(t,e,q,n){lt.slerpFlat(t,e,t,e,t,q,n)}_slerpAdditive(t,e,q,n,i){const r=this._workIndex*i;lt.multiplyQuaternionsFlat(t,r,t,e,t,q),lt.slerpFlat(t,e,t,e,t,r,n)}_lerp(t,e,q,n,i){const r=1-n;for(let o=0;o!==i;++o){const i=e+o;t[i]=t[i]*r+t[q+o]*n}}_lerpAdditive(t,e,q,n,i){for(let r=0;r!==i;++r){const i=e+r;t[i]=t[i]+t[q+r]*n}}}const rs=new RegExp("[\\[\\]\\.:\\/]","g"),os="[^\\[\\]\\.:\\/]",as="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",ss=/((?:WC+[\/:])*)/.source.replace("WC",os),ls=/(WCOD+)?/.source.replace("WCOD",as),cs=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",os),hs=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",os),us=new RegExp("^"+ss+ls+cs+hs+"$"),ms=["material","materials","bones"];class ds{constructor(t,e,q){this.path=e,this.parsedPath=q||ds.parseTrackName(e),this.node=ds.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,q){return t&&t.isAnimationObjectGroup?new ds.Composite(t,e,q):new ds(t,e,q)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(rs,"")}static parseTrackName(t){const e=us.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const q={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=q.nodeName&&q.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){const t=q.nodeName.substring(n+1);-1!==ms.indexOf(t)&&(q.nodeName=q.nodeName.substring(0,n),q.objectName=t)}if(null===q.propertyName||0===q.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return q}static findNode(t,e){if(!e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const q=t.skeleton.getBoneByName(e);if(void 0!==q)return q}if(t.children){const q=function(t){for(let n=0;n<t.length;n++){const i=t[n];if(i.name===e||i.uuid===e)return i;const r=q(i.children);if(r)return r}return null},n=q(t.children);if(n)return n}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const q=this.resolvedProperty;for(let n=0,i=q.length;n!==i;++n)t[e++]=q[n]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const q=this.resolvedProperty;for(let n=0,i=q.length;n!==i;++n)q[n]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const q=this.resolvedProperty;for(let n=0,i=q.length;n!==i;++n)q[n]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const q=this.resolvedProperty;for(let n=0,i=q.length;n!==i;++n)q[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,q=e.objectName,n=e.propertyName;let i=e.propertyIndex;if(t||(t=ds.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(q){let n=e.objectIndex;switch(q){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===n){n=e;break}break;default:if(void 0===t[q])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[q]}if(void 0!==n){if(void 0===t[n])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[n]}}const r=t[n];if(void 0===r){const q=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+q+"."+n+" but it wasn't found.",t)}let o=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?o=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(o=this.Versioning.MatrixWorldNeedsUpdate);let a=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[i]&&(i=t.morphTargetDictionary[i])}a=this.BindingType.ArrayElement,this.resolvedProperty=r,this.propertyIndex=i}else void 0!==r.fromArray&&void 0!==r.toArray?(a=this.BindingType.HasFromToArray,this.resolvedProperty=r):Array.isArray(r)?(a=this.BindingType.EntireArray,this.resolvedProperty=r):this.propertyName=n;this.getValue=this.GetterByBindingType[a],this.setValue=this.SetterByBindingTypeAndVersioning[a][o]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}ds.Composite=class{constructor(t,e,q){const n=q||ds.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}getValue(t,e){this.bind();const q=this._targetGroup.nCachedObjects_,n=this._bindings[q];void 0!==n&&n.getValue(t,e)}setValue(t,e){const q=this._bindings;for(let n=this._targetGroup.nCachedObjects_,i=q.length;n!==i;++n)q[n].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,q=t.length;e!==q;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,q=t.length;e!==q;++e)t[e].unbind()}},ds.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},ds.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},ds.prototype.GetterByBindingType=[ds.prototype._getValue_direct,ds.prototype._getValue_array,ds.prototype._getValue_arrayElement,ds.prototype._getValue_toArray],ds.prototype.SetterByBindingTypeAndVersioning=[[ds.prototype._setValue_direct,ds.prototype._setValue_direct_setNeedsUpdate,ds.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[ds.prototype._setValue_array,ds.prototype._setValue_array_setNeedsUpdate,ds.prototype._setValue_array_setMatrixWorldNeedsUpdate],[ds.prototype._setValue_arrayElement,ds.prototype._setValue_arrayElement_setNeedsUpdate,ds.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[ds.prototype._setValue_fromArray,ds.prototype._setValue_fromArray_setNeedsUpdate,ds.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class ps{constructor(t,e,q=null,n=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=q,this.blendMode=n;const i=e.tracks,r=i.length,o=new Array(r),a={endingStart:S,endingEnd:S};for(let t=0;t!==r;++t){const e=i[t].createInterpolant(null);o[t]=e,e.settings=a}this._interpolantSettings=a,this._interpolants=o,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,q){if(t.fadeOut(e),this.fadeIn(e),q){const q=this._clip.duration,n=t._clip.duration,i=n/q,r=q/n;t.warp(1,i,e),this.warp(r,1,e)}return this}crossFadeTo(t,e,q){return t.crossFadeFrom(this,e,q)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,q){const n=this._mixer,i=n.time,r=this.timeScale;let o=this._timeScaleInterpolant;null===o&&(o=n._lendControlInterpolant(),this._timeScaleInterpolant=o);const a=o.parameterPositions,s=o.sampleValues;return a[0]=i,a[1]=i+q,s[0]=t/r,s[1]=e/r,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,q,n){if(!this.enabled)return void this._updateWeight(t);const i=this._startTime;if(null!==i){const n=(t-i)*q;if(n<0||0===q)return;this._startTime=null,e=q*n}e*=this._updateTimeScale(t);const r=this._updateTime(e),o=this._updateWeight(t);if(o>0){const t=this._interpolants,e=this._propertyBindings;if(2501===this.blendMode)for(let q=0,n=t.length;q!==n;++q)t[q].evaluate(r),e[q].accumulateAdditive(o);else for(let q=0,i=t.length;q!==i;++q)t[q].evaluate(r),e[q].accumulate(n,o)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const q=this._weightInterpolant;if(null!==q){const n=q.evaluate(t)[0];e*=n,t>q.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const q=this._timeScaleInterpolant;null!==q&&(e*=q.evaluate(t)[0],t>q.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,q=this.loop;let n=this.time+t,i=this._loopCount;const r=2202===q;if(0===t)return-1===i?n:r&&1==(1&i)?e-n:n;if(2200===q){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(n>=e)n=e;else{if(!(n<0)){this.time=n;break t}n=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===i&&(t>=0?(i=0,this._setEndings(!0,0===this.repetitions,r)):this._setEndings(0===this.repetitions,!0,r)),n>=e||n<0){const q=Math.floor(n/e);n-=e*q,i+=Math.abs(q);const o=this.repetitions-i;if(o<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,n=t>0?e:0,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===o){const e=t<0;this._setEndings(e,!e,r)}else this._setEndings(!1,!1,r);this._loopCount=i,this.time=n,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:q})}}else this.time=n;if(r&&1==(1&i))return e-n}return n}_setEndings(t,e,q){const n=this._interpolantSettings;q?(n.endingStart=E,n.endingEnd=E):(n.endingStart=t?this.zeroSlopeAtStart?E:S:C,n.endingEnd=e?this.zeroSlopeAtEnd?E:S:C)}_scheduleFading(t,e,q){const n=this._mixer,i=n.time;let r=this._weightInterpolant;null===r&&(r=n._lendControlInterpolant(),this._weightInterpolant=r);const o=r.parameterPositions,a=r.sampleValues;return o[0]=i,a[0]=e,o[1]=i+t,a[1]=q,this}}(class extends D{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const q=t._localRoot||this._root,n=t._clip.tracks,i=n.length,r=t._propertyBindings,o=t._interpolants,a=q.uuid,s=this._bindingsByRootAndName;let l=s[a];void 0===l&&(l={},s[a]=l);for(let t=0;t!==i;++t){const i=n[t],s=i.name;let c=l[s];if(void 0!==c)r[t]=c;else{if(c=r[t],void 0!==c){null===c._cacheIndex&&(++c.referenceCount,this._addInactiveBinding(c,a,s));continue}const n=e&&e._propertyBindings[t].binding.parsedPath;c=new is(ds.create(q,s,n),i.ValueTypeName,i.getValueSize()),++c.referenceCount,this._addInactiveBinding(c,a,s),r[t]=c}o[t].resultBuffer=c.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,q=t._clip.uuid,n=this._actionsByClip[q];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,q,e)}const e=t._propertyBindings;for(let t=0,q=e.length;t!==q;++t){const q=e[t];0==q.useCount++&&(this._lendBinding(q),q.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,q=e.length;t!==q;++t){const q=e[t];0==--q.useCount&&(q.restoreOriginalState(),this._takeBackBinding(q))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,q){const n=this._actions,i=this._actionsByClip;let r=i[e];if(void 0===r)r={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,i[e]=r;else{const e=r.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=n.length,n.push(t),r.actionByRoot[q]=t}_removeInactiveAction(t){const e=this._actions,q=e[e.length-1],n=t._cacheIndex;q._cacheIndex=n,e[n]=q,e.pop(),t._cacheIndex=null;const i=t._clip.uuid,r=this._actionsByClip,o=r[i],a=o.knownActions,s=a[a.length-1],l=t._byClipCacheIndex;s._byClipCacheIndex=l,a[l]=s,a.pop(),t._byClipCacheIndex=null,delete o.actionByRoot[(t._localRoot||this._root).uuid],0===a.length&&delete r[i],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,q=e.length;t!==q;++t){const q=e[t];0==--q.referenceCount&&this._removeInactiveBinding(q)}}_lendAction(t){const e=this._actions,q=t._cacheIndex,n=this._nActiveActions++,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=q,e[q]=i}_takeBackAction(t){const e=this._actions,q=t._cacheIndex,n=--this._nActiveActions,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=q,e[q]=i}_addInactiveBinding(t,e,q){const n=this._bindingsByRootAndName,i=this._bindings;let r=n[e];void 0===r&&(r={},n[e]=r),r[q]=t,t._cacheIndex=i.length,i.push(t)}_removeInactiveBinding(t){const e=this._bindings,q=t.binding,n=q.rootNode.uuid,i=q.path,r=this._bindingsByRootAndName,o=r[n],a=e[e.length-1],s=t._cacheIndex;a._cacheIndex=s,e[s]=a,e.pop(),delete o[i],0===Object.keys(o).length&&delete r[n]}_lendBinding(t){const e=this._bindings,q=t._cacheIndex,n=this._nActiveBindings++,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=q,e[q]=i}_takeBackBinding(t){const e=this._bindings,q=t._cacheIndex,n=--this._nActiveBindings,i=e[n];t._cacheIndex=n,e[n]=t,i._cacheIndex=q,e[q]=i}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let q=t[e];return void 0===q&&(q=new ya(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),q.__cacheIndex=e,t[e]=q),q}_takeBackControlInterpolant(t){const e=this._controlInterpolants,q=t.__cacheIndex,n=--this._nActiveControlInterpolants,i=e[n];t.__cacheIndex=n,e[n]=t,i.__cacheIndex=q,e[q]=i}clipAction(t,e,q){const n=e||this._root,i=n.uuid;let r="string"==typeof t?za.findByName(n,t):t;const o=null!==r?r.uuid:t,a=this._actionsByClip[o];let s=null;if(void 0===q&&(q=null!==r?r.blendMode:2500),void 0!==a){const t=a.actionByRoot[i];if(void 0!==t&&t.blendMode===q)return t;s=a.knownActions[0],null===r&&(r=s._clip)}if(null===r)return null;const l=new ps(this,r,e,q);return this._bindAction(l,s),this._addInactiveAction(l,o,i),l}existingAction(t,e){const q=e||this._root,n=q.uuid,i="string"==typeof t?za.findByName(q,t):t,r=i?i.uuid:t,o=this._actionsByClip[r];return void 0!==o&&o.actionByRoot[n]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,q=this._nActiveActions,n=this.time+=t,i=Math.sign(t),r=this._accuIndex^=1;for(let o=0;o!==q;++o)e[o]._update(n,t,i,r);const o=this._bindings,a=this._nActiveBindings;for(let t=0;t!==a;++t)o[t].apply(r);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,q=t.uuid,n=this._actionsByClip,i=n[q];if(void 0!==i){const t=i.knownActions;for(let q=0,n=t.length;q!==n;++q){const n=t[q];this._deactivateAction(n);const i=n._cacheIndex,r=e[e.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,r._cacheIndex=i,e[i]=r,e.pop(),this._removeInactiveBindingsForAction(n)}delete n[q]}}uncacheRoot(t){const e=t.uuid,q=this._actionsByClip;for(const t in q){const n=q[t].actionByRoot[e];void 0!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}const n=this._bindingsByRootAndName[e];if(void 0!==n)for(const t in n){const e=n[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const q=this.existingAction(t,e);null!==q&&(this._deactivateAction(q),this._removeInactiveAction(q))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);class fs{constructor(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new fs(void 0===this.value.clone?this.value:this.value.clone())}}(class extends yr{constructor(t,e,q=1){super(t,e),this.meshPerAttribute=q}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}).prototype.isInstancedInterleavedBuffer=!0;class gs{constructor(t=1,e=0,q=0){return this.radius=t,this.phi=e,this.theta=q,this}set(t,e,q){return this.radius=t,this.phi=e,this.theta=q,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,q){return this.radius=Math.sqrt(t*t+e*e+q*q),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,q),this.phi=Math.acos(G(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}const xs=new J;class vs{constructor(t=new J(1/0,1/0),e=new J(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,q=t.length;e<q;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const q=xs.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(q),this.max.copy(t).add(q),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return xs.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}vs.prototype.isBox2=!0;const ys=new ct,_s=new Ht,bs=new Ht;function As(t){const e=[];t&&t.isBone&&e.push(t);for(let q=0;q<t.children.length;q++)e.push.apply(e,As(t.children[q]));return e}class ws extends io{constructor(t=10,e=10,q=4473924,n=8947848){q=new Re(q),n=new Re(n);const i=e/2,r=t/e,o=t/2,a=[],s=[];for(let t=0,l=0,c=-o;t<=e;t++,c+=r){a.push(-o,0,c,o,0,c),a.push(c,0,-o,c,0,o);const e=t===i?q:n;e.toArray(s,l),l+=3,e.toArray(s,l),l+=3,e.toArray(s,l),l+=3,e.toArray(s,l),l+=3}const l=new Ze;l.setAttribute("position",new Ne(a,3)),l.setAttribute("color",new Ne(s,3)),super(l,new Yr({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}const Ms=new ct;let Ss,Es;class Cs extends ue{constructor(t=new ct(0,0,1),e=new ct(0,0,0),q=1,n=16776960,i=.2*q,r=.2*i){super(),this.type="ArrowHelper",void 0===Ss&&(Ss=new Ze,Ss.setAttribute("position",new Ne([0,0,0,0,1,0],3)),Es=new uo(0,.5,1,5,1),Es.translate(0,-.5,0)),this.position.copy(e),this.line=new eo(Ss,new Yr({color:n,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new hq(Es,new Ie({color:n,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(q,i,r)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Ms.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Ms,e)}}setLength(t,e=.2*t,q=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(q,e,q),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}}class Ts extends io{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],q=new Ze;q.setAttribute("position",new Ne(e,3)),q.setAttribute("color",new Ne([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(q,new Yr({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,q){const n=new Re,i=this.geometry.attributes.color.array;return n.set(t),n.toArray(i,0),n.toArray(i,3),n.set(e),n.toArray(i,6),n.toArray(i,9),n.set(q),n.toArray(i,12),n.toArray(i,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class zs{constructor(){this.type="ShapePath",this.color=new Re,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new ko,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,q,n){return this.currentPath.quadraticCurveTo(t,e,q,n),this}bezierCurveTo(t,e,q,n,i,r){return this.currentPath.bezierCurveTo(t,e,q,n,i,r),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t,e){function q(t){const e=[];for(let q=0,n=t.length;q<n;q++){const n=t[q],i=new Do;i.curves=n.curves,e.push(i)}return e}function n(t,e){const q=e.length;let n=!1;for(let i=q-1,r=0;r<q;i=r++){let q=e[i],o=e[r],a=o.x-q.x,s=o.y-q.y;if(Math.abs(s)>Number.EPSILON){if(s<0&&(q=e[r],a=-a,o=e[i],s=-s),t.y<q.y||t.y>o.y)continue;if(t.y===q.y){if(t.x===q.x)return!0}else{const e=s*(t.x-q.x)-a*(t.y-q.y);if(0===e)return!0;if(e<0)continue;n=!n}}else{if(t.y!==q.y)continue;if(o.x<=t.x&&t.x<=q.x||q.x<=t.x&&t.x<=o.x)return!0}}return n}const i=sa.isClockWise,r=this.subPaths;if(0===r.length)return[];if(!0===e)return q(r);let o,a,s;const l=[];if(1===r.length)return a=r[0],s=new Do,s.curves=a.curves,l.push(s),l;let c=!i(r[0].getPoints());c=t?!c:c;const h=[],u=[];let m,d,p=[],f=0;u[f]=void 0,p[f]=[];for(let e=0,q=r.length;e<q;e++)a=r[e],m=a.getPoints(),o=i(m),o=t?!o:o,o?(!c&&u[f]&&f++,u[f]={s:new Do,p:m},u[f].s.curves=a.curves,c&&f++,p[f]=[]):p[f].push({h:a,p:m[0]});if(!u[0])return q(r);if(u.length>1){let t=!1;const e=[];for(let t=0,e=u.length;t<e;t++)h[t]=[];for(let q=0,i=u.length;q<i;q++){const i=p[q];for(let r=0;r<i.length;r++){const o=i[r];let a=!0;for(let i=0;i<u.length;i++)n(o.p,u[i].p)&&(q!==i&&e.push({froms:q,tos:i,hole:r}),a?(a=!1,h[i].push(o)):t=!0);a&&h[q].push(o)}}e.length>0&&(t||(p=h))}for(let t=0,e=u.length;t<e;t++){s=u[t].s,l.push(s),d=p[t];for(let t=0,e=d.length;t<e;t++)s.holes.push(d[t].h)}return l}}const Ls=new Float32Array(1);new Int32Array(Ls.buffer),fo.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(fo.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},ko.prototype.fromPoints=function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)},ws.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},class extends io{constructor(t){const e=As(t),q=new Ze,n=[],i=[],r=new Re(0,0,1),o=new Re(0,1,0);for(let t=0;t<e.length;t++){const q=e[t];q.parent&&q.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),i.push(r.r,r.g,r.b),i.push(o.r,o.g,o.b))}q.setAttribute("position",new Ne(n,3)),q.setAttribute("color",new Ne(i,3)),super(q,new Yr({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,q=this.geometry,n=q.getAttribute("position");bs.copy(this.root.matrixWorld).invert();for(let t=0,q=0;t<e.length;t++){const i=e[t];i.parent&&i.parent.isBone&&(_s.multiplyMatrices(bs,i.matrixWorld),ys.setFromMatrixPosition(_s),n.setXYZ(q,ys.x,ys.y,ys.z),_s.multiplyMatrices(bs,i.parent.matrixWorld),ys.setFromMatrixPosition(_s),n.setXYZ(q+1,ys.x,ys.y,ys.z),q+=2)}q.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Ba.prototype.extractUrlBase=function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),class{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let q=0,n=t.length;q<n;q++)e+=String.fromCharCode(t[q]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}.extractUrlBase(t)},Ba.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},vs.prototype.center=function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},vs.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},vs.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},vs.prototype.size=function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)},mt.prototype.center=function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},mt.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},mt.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},mt.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},mt.prototype.size=function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)},Rt.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},zq.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},$.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},$.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},$.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},$.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},$.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},$.prototype.getInverse=function(t){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Ht.prototype.extractPosition=function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},Ht.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Ht.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new ct).setFromMatrixColumn(this,3)},Ht.prototype.setRotationFromQuaternion=function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},Ht.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Ht.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Ht.prototype.multiplyVector4=function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Ht.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Ht.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},Ht.prototype.crossVector=function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Ht.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Ht.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Ht.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Ht.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Ht.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Ht.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Ht.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Ht.prototype.makeFrustum=function(t,e,q,n,i,r){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,n,q,i,r)},Ht.prototype.getInverse=function(t){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Eq.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},lt.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},lt.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Ft.prototype.isIntersectionBox=function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},Ft.prototype.isIntersectionPlane=function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},Ft.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},Ae.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},Ae.prototype.barycoordFromPoint=function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},Ae.prototype.midpoint=function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},Ae.prototypenormal=function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},Ae.prototype.plane=function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)},Ae.barycoordFromPoint=function(t,e,q,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Ae.getBarycoord(t,e,q,n,i)},Ae.normal=function(t,e,q,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Ae.getNormal(t,e,q,n)},Do.prototype.extractAllPoints=function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},Do.prototype.extrude=function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new ha(this,t)},Do.prototype.makeGeometry=function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new da(this,t)},J.prototype.fromAttribute=function(t,e,q){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,q)},J.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},J.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},ct.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},ct.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},ct.prototype.getPositionFromMatrix=function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},ct.prototype.getScaleFromMatrix=function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},ct.prototype.getColumnFromMatrix=function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},ct.prototype.applyProjection=function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},ct.prototype.fromAttribute=function(t,e,q){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,q)},ct.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},ct.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},ot.prototype.fromAttribute=function(t,e,q){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,q)},ot.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},ue.prototype.getChildByName=function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},ue.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},ue.prototype.translate=function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},ue.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},ue.prototype.applyMatrix=function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(ue.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),hq.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(hq.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Vr.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},vq.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(Ha.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(ke.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===B},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(B)}}}),ke.prototype.setDynamic=function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?B:P),this},ke.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},ke.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},Ze.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},Ze.prototype.addAttribute=function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new ke(arguments[1],arguments[2])))},Ze.prototype.addDrawCall=function(t,e,q){void 0!==q&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},Ze.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},Ze.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},Ze.prototype.removeAttribute=function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},Ze.prototype.applyMatrix=function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(Ze.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),yr.prototype.setDynamic=function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?B:P),this},yr.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},ha.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},ha.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},ha.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},vr.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},fs.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(Me.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Re}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===t}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(gq.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),fr.prototype.clearTarget=function(t,e,q,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,q,n)},fr.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},fr.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},fr.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},fr.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},fr.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},fr.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},fr.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},fr.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},fr.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},fr.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},fr.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},fr.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},fr.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},fr.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},fr.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},fr.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},fr.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},fr.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},fr.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},fr.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},fr.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},fr.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},fr.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},fr.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(fr.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?z:T}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(or.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(at.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),class extends ue{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return(new ns).load(t,(function(t){e.setBuffer(t)})),this},_q.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)},_q.prototype.clear=function(t,e,q,n){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(t,e,q,n)},qt.crossOrigin=void 0,qt.loadTexture=function(t,e,q,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new Fa;i.setCrossOrigin(this.crossOrigin);const r=i.load(t,q,void 0,n);return e&&(r.mapping=e),r},qt.loadTextureCube=function(t,e,q,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new Na;i.setCrossOrigin(this.crossOrigin);const r=i.load(t,q,void 0,n);return e&&(r.mapping=e),r},qt.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},qt.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"134"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="134");class Rs{constructor(){this.callbacks={},this.callbacks.base={}}on(t,e){return void 0===t||""===t?(console.warn("wrong names"),!1):void 0===e?(console.warn("wrong callback"),!1):(this.resolveNames(t).forEach((t=>{const q=this.resolveName(t);this.callbacks[q.namespace]instanceof Object||(this.callbacks[q.namespace]={}),this.callbacks[q.namespace][q.value]instanceof Array||(this.callbacks[q.namespace][q.value]=[]),this.callbacks[q.namespace][q.value].push(e)})),this)}off(t){return void 0===t||""===t?(console.warn("wrong name"),!1):(this.resolveNames(t).forEach((t=>{const e=this.resolveName(t);if("base"!==e.namespace&&""===e.value)delete this.callbacks[e.namespace];else if("base"===e.namespace)for(const t in this.callbacks)this.callbacks[t]instanceof Object&&this.callbacks[t][e.value]instanceof Array&&(delete this.callbacks[t][e.value],0===Object.keys(this.callbacks[t]).length&&delete this.callbacks[t]);else this.callbacks[e.namespace]instanceof Object&&this.callbacks[e.namespace][e.value]instanceof Array&&(delete this.callbacks[e.namespace][e.value],0===Object.keys(this.callbacks[e.namespace]).length&&delete this.callbacks[e.namespace])})),this)}trigger(t,e){if(void 0===t||""===t)return console.warn("wrong name"),!1;let q=null,n=null;const i=e instanceof Array?e:[];let r=this.resolveNames(t);if(r=this.resolveName(r[0]),"base"===r.namespace)for(const t in this.callbacks)this.callbacks[t]instanceof Object&&this.callbacks[t][r.value]instanceof Array&&this.callbacks[t][r.value].forEach((function(t){n=t.apply(this,i),void 0===q&&(q=n)}));else if(this.callbacks[r.namespace]instanceof Object){if(""===r.value)return console.warn("wrong name"),this;this.callbacks[r.namespace][r.value].forEach((function(t){n=t.apply(this,i),void 0===q&&(q=n)}))}return q}resolveNames(t){let e=t;return e=e.replace(/[^a-zA-Z0-9 ,/.]/g,""),e=e.replace(/[,/]+/g," "),e=e.split(" "),e}resolveName(t){const e={},q=t.split(".");return e.original=t,e.value=q[0],e.namespace="base",q.length>1&&""!==q[1]&&(e.namespace=q[1]),e}}class Is extends Rs{constructor(){super(),this.width=window.innerWidth,this.height=window.innerHeight,this.pixelRatio=Math.min(window.devicePixelRatio,2),window.addEventListener("resize",(()=>{this.width=window.innerWidth,this.height=window.innerHeight,this.pixelRatio=Math.min(window.devicePixelRatio,2),this.trigger("resize")}))}}class Ps extends Rs{constructor(){super(),this.start=Date.now(),this.current=this.start,this.elapsed=0,this.delta=16,window.requestAnimationFrame((()=>{this.tick()}))}tick(){const t=Date.now();this.delta=t-this.current,this.current=t,this.elapsed=this.current-this.start,this.trigger("tick"),window.requestAnimationFrame((()=>{this.tick()}))}}class Bs{constructor(){this.experience=new kl,this.canvas=this.experience.canvas,this.sizes=this.experience.sizes,this.scene=this.experience.scene,this.camera=this.experience.camera,this.setInstance()}setInstance(){this.instance=new fr({canvas:this.canvas,antialias:!0}),this.instance.shadowMap.enabled=!0,this.instance.setSize(this.sizes.width,this.sizes.height),this.instance.setPixelRatio(Math.min(this.sizes.pixelRatio,2))}resize(){this.instance.setSize(this.sizes.width,this.sizes.height),this.instance.setPixelRatio(Math.min(this.sizes.pixelRatio,2))}update(){this.instance.render(this.scene,this.camera.instance)}}const ks={type:"change"},Ds={type:"start"},Os={type:"end"};class Ns extends D{constructor(t,e){super(),void 0===e&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),e===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=t,this.domElement=e,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new ct,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:0,MIDDLE:1,RIGHT:2},this.touches={ONE:0,TWO:2},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return o.phi},this.getAzimuthalAngle=function(){return o.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(t){t.addEventListener("keydown",V),this._domElementKeyEvents=t},this.saveState=function(){q.target0.copy(q.target),q.position0.copy(q.object.position),q.zoom0=q.object.zoom},this.reset=function(){q.target.copy(q.target0),q.object.position.copy(q.position0),q.object.zoom=q.zoom0,q.object.updateProjectionMatrix(),q.dispatchEvent(ks),q.update(),i=n.NONE},this.update=function(){const e=new ct,h=(new lt).setFromUnitVectors(t.up,new ct(0,1,0)),u=h.clone().invert(),m=new ct,d=new lt,p=2*Math.PI;return function(){const t=q.object.position;e.copy(t).sub(q.target),e.applyQuaternion(h),o.setFromVector3(e),q.autoRotate&&i===n.NONE&&A(2*Math.PI/60/60*q.autoRotateSpeed),q.enableDamping?(o.theta+=a.theta*q.dampingFactor,o.phi+=a.phi*q.dampingFactor):(o.theta+=a.theta,o.phi+=a.phi);let f=q.minAzimuthAngle,g=q.maxAzimuthAngle;return isFinite(f)&&isFinite(g)&&(f<-Math.PI?f+=p:f>Math.PI&&(f-=p),g<-Math.PI?g+=p:g>Math.PI&&(g-=p),o.theta=f<=g?Math.max(f,Math.min(g,o.theta)):o.theta>(f+g)/2?Math.max(f,o.theta):Math.min(g,o.theta)),o.phi=Math.max(q.minPolarAngle,Math.min(q.maxPolarAngle,o.phi)),o.makeSafe(),o.radius*=s,o.radius=Math.max(q.minDistance,Math.min(q.maxDistance,o.radius)),!0===q.enableDamping?q.target.addScaledVector(l,q.dampingFactor):q.target.add(l),e.setFromSpherical(o),e.applyQuaternion(u),t.copy(q.target).add(e),q.object.lookAt(q.target),!0===q.enableDamping?(a.theta*=1-q.dampingFactor,a.phi*=1-q.dampingFactor,l.multiplyScalar(1-q.dampingFactor)):(a.set(0,0,0),l.set(0,0,0)),s=1,!!(c||m.distanceToSquared(q.object.position)>r||8*(1-d.dot(q.object.quaternion))>r)&&(q.dispatchEvent(ks),m.copy(q.object.position),d.copy(q.object.quaternion),c=!1,!0)}}(),this.dispose=function(){q.domElement.removeEventListener("contextmenu",G),q.domElement.removeEventListener("pointerdown",O),q.domElement.removeEventListener("pointercancel",H),q.domElement.removeEventListener("wheel",U),q.domElement.removeEventListener("pointermove",N),q.domElement.removeEventListener("pointerup",F),null!==q._domElementKeyEvents&&q._domElementKeyEvents.removeEventListener("keydown",V)};const q=this,n={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let i=n.NONE;const r=1e-6,o=new gs,a=new gs;let s=1;const l=new ct;let c=!1;const h=new J,u=new J,m=new J,d=new J,p=new J,f=new J,g=new J,x=new J,v=new J,y=[],_={};function b(){return Math.pow(.95,q.zoomSpeed)}function A(t){a.theta-=t}function w(t){a.phi-=t}const M=function(){const t=new ct;return function(e,q){t.setFromMatrixColumn(q,0),t.multiplyScalar(-e),l.add(t)}}(),S=function(){const t=new ct;return function(e,n){!0===q.screenSpacePanning?t.setFromMatrixColumn(n,1):(t.setFromMatrixColumn(n,0),t.crossVectors(q.object.up,t)),t.multiplyScalar(e),l.add(t)}}(),E=function(){const t=new ct;return function(e,n){const i=q.domElement;if(q.object.isPerspectiveCamera){const r=q.object.position;t.copy(r).sub(q.target);let o=t.length();o*=Math.tan(q.object.fov/2*Math.PI/180),M(2*e*o/i.clientHeight,q.object.matrix),S(2*n*o/i.clientHeight,q.object.matrix)}else q.object.isOrthographicCamera?(M(e*(q.object.right-q.object.left)/q.object.zoom/i.clientWidth,q.object.matrix),S(n*(q.object.top-q.object.bottom)/q.object.zoom/i.clientHeight,q.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),q.enablePan=!1)}}();function C(t){q.object.isPerspectiveCamera?s/=t:q.object.isOrthographicCamera?(q.object.zoom=Math.max(q.minZoom,Math.min(q.maxZoom,q.object.zoom*t)),q.object.updateProjectionMatrix(),c=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),q.enableZoom=!1)}function T(t){q.object.isPerspectiveCamera?s*=t:q.object.isOrthographicCamera?(q.object.zoom=Math.max(q.minZoom,Math.min(q.maxZoom,q.object.zoom/t)),q.object.updateProjectionMatrix(),c=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),q.enableZoom=!1)}function z(t){h.set(t.clientX,t.clientY)}function L(t){d.set(t.clientX,t.clientY)}function R(){if(1===y.length)h.set(y[0].pageX,y[0].pageY);else{const t=.5*(y[0].pageX+y[1].pageX),e=.5*(y[0].pageY+y[1].pageY);h.set(t,e)}}function I(){if(1===y.length)d.set(y[0].pageX,y[0].pageY);else{const t=.5*(y[0].pageX+y[1].pageX),e=.5*(y[0].pageY+y[1].pageY);d.set(t,e)}}function P(){const t=y[0].pageX-y[1].pageX,e=y[0].pageY-y[1].pageY,q=Math.sqrt(t*t+e*e);g.set(0,q)}function B(t){if(1==y.length)u.set(t.pageX,t.pageY);else{const e=Z(t),q=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);u.set(q,n)}m.subVectors(u,h).multiplyScalar(q.rotateSpeed);const e=q.domElement;A(2*Math.PI*m.x/e.clientHeight),w(2*Math.PI*m.y/e.clientHeight),h.copy(u)}function k(t){if(1===y.length)p.set(t.pageX,t.pageY);else{const e=Z(t),q=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);p.set(q,n)}f.subVectors(p,d).multiplyScalar(q.panSpeed),E(f.x,f.y),d.copy(p)}function D(t){const e=Z(t),n=t.pageX-e.x,i=t.pageY-e.y,r=Math.sqrt(n*n+i*i);x.set(0,r),v.set(0,Math.pow(x.y/g.y,q.zoomSpeed)),C(v.y),g.copy(x)}function O(t){!1!==q.enabled&&(0===y.length&&(q.domElement.setPointerCapture(t.pointerId),q.domElement.addEventListener("pointermove",N),q.domElement.addEventListener("pointerup",F)),function(t){y.push(t)}(t),"touch"===t.pointerType?function(t){switch(j(t),y.length){case 1:switch(q.touches.ONE){case 0:if(!1===q.enableRotate)return;R(),i=n.TOUCH_ROTATE;break;case 1:if(!1===q.enablePan)return;I(),i=n.TOUCH_PAN;break;default:i=n.NONE}break;case 2:switch(q.touches.TWO){case 2:if(!1===q.enableZoom&&!1===q.enablePan)return;q.enableZoom&&P(),q.enablePan&&I(),i=n.TOUCH_DOLLY_PAN;break;case 3:if(!1===q.enableZoom&&!1===q.enableRotate)return;q.enableZoom&&P(),q.enableRotate&&R(),i=n.TOUCH_DOLLY_ROTATE;break;default:i=n.NONE}break;default:i=n.NONE}i!==n.NONE&&q.dispatchEvent(Ds)}(t):function(t){let e;switch(t.button){case 0:e=q.mouseButtons.LEFT;break;case 1:e=q.mouseButtons.MIDDLE;break;case 2:e=q.mouseButtons.RIGHT;break;default:e=-1}switch(e){case 1:if(!1===q.enableZoom)return;!function(t){g.set(t.clientX,t.clientY)}(t),i=n.DOLLY;break;case 0:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===q.enablePan)return;L(t),i=n.PAN}else{if(!1===q.enableRotate)return;z(t),i=n.ROTATE}break;case 2:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===q.enableRotate)return;z(t),i=n.ROTATE}else{if(!1===q.enablePan)return;L(t),i=n.PAN}break;default:i=n.NONE}i!==n.NONE&&q.dispatchEvent(Ds)}(t))}function N(t){!1!==q.enabled&&("touch"===t.pointerType?function(t){switch(j(t),i){case n.TOUCH_ROTATE:if(!1===q.enableRotate)return;B(t),q.update();break;case n.TOUCH_PAN:if(!1===q.enablePan)return;k(t),q.update();break;case n.TOUCH_DOLLY_PAN:if(!1===q.enableZoom&&!1===q.enablePan)return;!function(t){q.enableZoom&&D(t),q.enablePan&&k(t)}(t),q.update();break;case n.TOUCH_DOLLY_ROTATE:if(!1===q.enableZoom&&!1===q.enableRotate)return;!function(t){q.enableZoom&&D(t),q.enableRotate&&B(t)}(t),q.update();break;default:i=n.NONE}}(t):function(t){if(!1!==q.enabled)switch(i){case n.ROTATE:if(!1===q.enableRotate)return;!function(t){u.set(t.clientX,t.clientY),m.subVectors(u,h).multiplyScalar(q.rotateSpeed);const e=q.domElement;A(2*Math.PI*m.x/e.clientHeight),w(2*Math.PI*m.y/e.clientHeight),h.copy(u),q.update()}(t);break;case n.DOLLY:if(!1===q.enableZoom)return;!function(t){x.set(t.clientX,t.clientY),v.subVectors(x,g),v.y>0?C(b()):v.y<0&&T(b()),g.copy(x),q.update()}(t);break;case n.PAN:if(!1===q.enablePan)return;!function(t){p.set(t.clientX,t.clientY),f.subVectors(p,d).multiplyScalar(q.panSpeed),E(f.x,f.y),d.copy(p),q.update()}(t)}}(t))}function F(t){!1!==q.enabled&&(t.pointerType,q.dispatchEvent(Os),i=n.NONE,W(t),0===y.length&&(q.domElement.releasePointerCapture(t.pointerId),q.domElement.removeEventListener("pointermove",N),q.domElement.removeEventListener("pointerup",F)))}function H(t){W(t)}function U(t){!1!==q.enabled&&!1!==q.enableZoom&&i===n.NONE&&(t.preventDefault(),q.dispatchEvent(Ds),function(t){t.deltaY<0?T(b()):t.deltaY>0&&C(b()),q.update()}(t),q.dispatchEvent(Os))}function V(t){!1!==q.enabled&&!1!==q.enablePan&&function(t){let e=!1;switch(t.code){case q.keys.UP:E(0,q.keyPanSpeed),e=!0;break;case q.keys.BOTTOM:E(0,-q.keyPanSpeed),e=!0;break;case q.keys.LEFT:E(q.keyPanSpeed,0),e=!0;break;case q.keys.RIGHT:E(-q.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),q.update())}(t)}function G(t){!1!==q.enabled&&t.preventDefault()}function W(t){delete _[t.pointerId];for(let e=0;e<y.length;e++)if(y[e].pointerId==t.pointerId)return void y.splice(e,1)}function j(t){let e=_[t.pointerId];void 0===e&&(e=new J,_[t.pointerId]=e),e.set(t.pageX,t.pageY)}function Z(t){const e=t.pointerId===y[0].pointerId?y[1]:y[0];return _[e.pointerId]}q.domElement.addEventListener("contextmenu",G),q.domElement.addEventListener("pointerdown",O),q.domElement.addEventListener("pointercancel",H),q.domElement.addEventListener("wheel",U,{passive:!1}),this.update()}}const Fs={type:"change"};class Hs extends D{constructor(t,e){super(),void 0===e&&(console.warn('THREE.FlyControls: The second parameter "domElement" is now mandatory.'),e=document),this.object=t,this.domElement=e,this.movementSpeed=1,this.rollSpeed=.005,this.dragToLook=!1,this.autoForward=!1;const q=this,n=1e-6,i=new lt,r=new ct;this.tmpQuaternion=new lt,this.mouseStatus=0,this.moveState={up:0,down:0,left:0,right:0,forward:0,back:0,pitchUp:0,pitchDown:0,yawLeft:0,yawRight:0,rollLeft:0,rollRight:0},this.moveVector=new ct(0,0,0),this.rotationVector=new ct(0,0,0),this.keydown=function(t){if(!t.altKey){switch(t.code){case"ShiftLeft":case"ShiftRight":this.movementSpeedMultiplier=.1;break;case"KeyW":this.moveState.forward=1;break;case"KeyS":this.moveState.back=1;break;case"KeyA":this.moveState.left=1;break;case"KeyD":this.moveState.right=1;break;case"KeyR":this.moveState.up=1;break;case"KeyF":this.moveState.down=1;break;case"ArrowUp":this.moveState.pitchUp=1;break;case"ArrowDown":this.moveState.pitchDown=1;break;case"ArrowLeft":this.moveState.yawLeft=1;break;case"ArrowRight":this.moveState.yawRight=1;break;case"KeyQ":this.moveState.rollLeft=1;break;case"KeyE":this.moveState.rollRight=1}this.updateMovementVector(),this.updateRotationVector()}},this.keyup=function(t){switch(t.code){case"ShiftLeft":case"ShiftRight":this.movementSpeedMultiplier=1;break;case"KeyW":this.moveState.forward=0;break;case"KeyS":this.moveState.back=0;break;case"KeyA":this.moveState.left=0;break;case"KeyD":this.moveState.right=0;break;case"KeyR":this.moveState.up=0;break;case"KeyF":this.moveState.down=0;break;case"ArrowUp":this.moveState.pitchUp=0;break;case"ArrowDown":this.moveState.pitchDown=0;break;case"ArrowLeft":this.moveState.yawLeft=0;break;case"ArrowRight":this.moveState.yawRight=0;break;case"KeyQ":this.moveState.rollLeft=0;break;case"KeyE":this.moveState.rollRight=0}this.updateMovementVector(),this.updateRotationVector()},this.mousedown=function(t){if(this.dragToLook)this.mouseStatus++;else{switch(t.button){case 0:this.moveState.forward=1;break;case 2:this.moveState.back=1}this.updateMovementVector()}},this.mousemove=function(t){if(!this.dragToLook||this.mouseStatus>0){const e=this.getContainerDimensions(),q=e.size[0]/2,n=e.size[1]/2;this.moveState.yawLeft=-(t.pageX-e.offset[0]-q)/q,this.moveState.pitchDown=(t.pageY-e.offset[1]-n)/n,this.updateRotationVector()}},this.mouseup=function(t){if(this.dragToLook)this.mouseStatus--,this.moveState.yawLeft=this.moveState.pitchDown=0;else{switch(t.button){case 0:this.moveState.forward=0;break;case 2:this.moveState.back=0}this.updateMovementVector()}this.updateRotationVector()},this.update=function(t){const e=t*q.movementSpeed,o=t*q.rollSpeed;q.object.translateX(q.moveVector.x*e),q.object.translateY(q.moveVector.y*e),q.object.translateZ(q.moveVector.z*e),q.tmpQuaternion.set(q.rotationVector.x*o,q.rotationVector.y*o,q.rotationVector.z*o,1).normalize(),q.object.quaternion.multiply(q.tmpQuaternion),(r.distanceToSquared(q.object.position)>n||8*(1-i.dot(q.object.quaternion))>n)&&(q.dispatchEvent(Fs),i.copy(q.object.quaternion),r.copy(q.object.position))},this.updateMovementVector=function(){const t=this.moveState.forward||this.autoForward&&!this.moveState.back?1:0;this.moveVector.x=-this.moveState.left+this.moveState.right,this.moveVector.y=-this.moveState.down+this.moveState.up,this.moveVector.z=-t+this.moveState.back},this.updateRotationVector=function(){this.rotationVector.x=-this.moveState.pitchDown+this.moveState.pitchUp,this.rotationVector.y=-this.moveState.yawRight+this.moveState.yawLeft,this.rotationVector.z=-this.moveState.rollRight+this.moveState.rollLeft},this.getContainerDimensions=function(){return this.domElement!=document?{size:[this.domElement.offsetWidth,this.domElement.offsetHeight],offset:[this.domElement.offsetLeft,this.domElement.offsetTop]}:{size:[window.innerWidth,window.innerHeight],offset:[0,0]}},this.dispose=function(){this.domElement.removeEventListener("contextmenu",Us),this.domElement.removeEventListener("mousedown",a),this.domElement.removeEventListener("mousemove",o),this.domElement.removeEventListener("mouseup",s),window.removeEventListener("keydown",l),window.removeEventListener("keyup",c)};const o=this.mousemove.bind(this),a=this.mousedown.bind(this),s=this.mouseup.bind(this),l=this.keydown.bind(this),c=this.keyup.bind(this);this.domElement.addEventListener("contextmenu",Us),this.domElement.addEventListener("mousemove",o),this.domElement.addEventListener("mousedown",a),this.domElement.addEventListener("mouseup",s),window.addEventListener("keydown",l),window.addEventListener("keyup",c),this.updateMovementVector(),this.updateRotationVector()}}function Us(t){t.preventDefault()}const Vs=new ct,Gs=new gs,Ws=new ct;class js{constructor(t,e){void 0===e&&(console.warn('THREE.FirstPersonControls: The second parameter "domElement" is now mandatory.'),e=document),this.object=t,this.domElement=e,this.enabled=!0,this.movementSpeed=1,this.lookSpeed=.005,this.lookVertical=!0,this.autoForward=!1,this.activeLook=!0,this.heightSpeed=!1,this.heightCoef=1,this.heightMin=0,this.heightMax=1,this.constrainVertical=!1,this.verticalMin=0,this.verticalMax=Math.PI,this.mouseDragOn=!1,this.autoSpeedFactor=0,this.mouseX=0,this.mouseY=0,this.moveForward=!1,this.moveBackward=!1,this.moveLeft=!1,this.moveRight=!1,this.viewHalfX=0,this.viewHalfY=0;let q=0,n=0;this.handleResize=function(){this.domElement===document?(this.viewHalfX=window.innerWidth/2,this.viewHalfY=window.innerHeight/2):(this.viewHalfX=this.domElement.offsetWidth/2,this.viewHalfY=this.domElement.offsetHeight/2)},this.onMouseDown=function(t){if(this.domElement!==document&&this.domElement.focus(),this.activeLook)switch(t.button){case 0:this.moveForward=!0;break;case 2:this.moveBackward=!0}this.mouseDragOn=!0},this.onMouseUp=function(t){if(this.activeLook)switch(t.button){case 0:this.moveForward=!1;break;case 2:this.moveBackward=!1}this.mouseDragOn=!1},this.onMouseMove=function(t){this.domElement===document?(this.mouseX=t.pageX-this.viewHalfX,this.mouseY=t.pageY-this.viewHalfY):(this.mouseX=t.pageX-this.domElement.offsetLeft-this.viewHalfX,this.mouseY=t.pageY-this.domElement.offsetTop-this.viewHalfY)},this.onKeyDown=function(t){switch(t.code){case"ArrowUp":case"KeyW":this.moveForward=!0;break;case"ArrowLeft":case"KeyA":this.moveLeft=!0;break;case"ArrowDown":case"KeyS":this.moveBackward=!0;break;case"ArrowRight":case"KeyD":this.moveRight=!0;break;case"KeyR":this.moveUp=!0;break;case"KeyF":this.moveDown=!0}},this.onKeyUp=function(t){switch(t.code){case"ArrowUp":case"KeyW":this.moveForward=!1;break;case"ArrowLeft":case"KeyA":this.moveLeft=!1;break;case"ArrowDown":case"KeyS":this.moveBackward=!1;break;case"ArrowRight":case"KeyD":this.moveRight=!1;break;case"KeyR":this.moveUp=!1;break;case"KeyF":this.moveDown=!1}},this.lookAt=function(t,e,q){return t.isVector3?Ws.copy(t):Ws.set(t,e,q),this.object.lookAt(Ws),l(this),this},this.update=function(){const t=new ct;return function(e){if(!1===this.enabled)return;if(this.heightSpeed){const t=Y.clamp(this.object.position.y,this.heightMin,this.heightMax)-this.heightMin;this.autoSpeedFactor=e*(t*this.heightCoef)}else this.autoSpeedFactor=0;const i=e*this.movementSpeed;(this.moveForward||this.autoForward&&!this.moveBackward)&&this.object.translateZ(-(i+this.autoSpeedFactor)),this.moveBackward&&this.object.translateZ(i),this.moveLeft&&this.object.translateX(-i),this.moveRight&&this.object.translateX(i),this.moveUp&&this.object.translateY(i),this.moveDown&&this.object.translateY(-i);let r=e*this.lookSpeed;this.activeLook||(r=0);let o=1;this.constrainVertical&&(o=Math.PI/(this.verticalMax-this.verticalMin)),n-=this.mouseX*r,this.lookVertical&&(q-=this.mouseY*r*o),q=Math.max(-85,Math.min(85,q));let a=Y.degToRad(90-q);const s=Y.degToRad(n);this.constrainVertical&&(a=Y.mapLinear(a,0,Math.PI,this.verticalMin,this.verticalMax));const l=this.object.position;t.setFromSphericalCoords(1,a,s).add(l),this.object.lookAt(t)}}(),this.dispose=function(){this.domElement.removeEventListener("contextmenu",Zs),this.domElement.removeEventListener("mousedown",r),this.domElement.removeEventListener("mousemove",i),this.domElement.removeEventListener("mouseup",o),window.removeEventListener("keydown",a),window.removeEventListener("keyup",s)};const i=this.onMouseMove.bind(this),r=this.onMouseDown.bind(this),o=this.onMouseUp.bind(this),a=this.onKeyDown.bind(this),s=this.onKeyUp.bind(this);function l(t){const e=t.object.quaternion;Vs.set(0,0,-1).applyQuaternion(e),Gs.setFromVector3(Vs),q=90-Y.radToDeg(Gs.phi),n=Y.radToDeg(Gs.theta)}this.domElement.addEventListener("contextmenu",Zs),this.domElement.addEventListener("mousemove",i),this.domElement.addEventListener("mousedown",r),this.domElement.addEventListener("mouseup",o),window.addEventListener("keydown",a),window.addEventListener("keyup",s),this.handleResize(),l(this)}}function Zs(t){t.preventDefault()}class Xs{constructor(){this.experience=new kl,this.sizes=this.experience.sizes,this.scene=this.experience.scene,this.canvas=this.experience.canvas,this.currentControls="Orbit Controls",this.setInstance(),this.setControls(this.currentControls)}setInstance(){this.instance=new vq(75,this.sizes.width/this.sizes.height,.1,8e3),this.instance.position.set(0,200,200),this.instance.lookAt(new ct(0,0,0)),this.scene.add(this.instance)}setControls(t){this.currentControls=t,"Orbit Controls"===t?(void 0!==this.controls&&this.controls.dispose(),this.controls=new Ns(this.instance,this.canvas),this.controls.enableDamping=!0):"Fly Controls"===t?(void 0!==this.controls&&this.controls.dispose(),this.controls=new Hs(this.instance,this.canvas),this.controls.movementSpeed=5,this.controls.rollSpeed=.04,this.controls.autoForward=!1,this.controls.dragToLook=!1,this.controls.dragToLook=!0):"First Person Controls"===t&&(void 0!==this.controls&&this.controls.dispose(),this.controls=new js(this.instance,this.canvas),this.controls.movementSpeed=11,this.controls.lookSpeed=.007,this.controls.heightSpeed=.007,this.controls.mouseDragOn=!0)}resize(){this.instance.aspect=this.sizes.width/this.sizes.height,this.instance.updateProjectionMatrix()}update(){this.controls.update(.5)}}class Ys{constructor(t,e,q){const n=new Float32Array(3e4);n[0]=t,n[1]=e,n[2]=q,n[3]=t,n[4]=e,n[5]=q;const i=(new Ze).setAttribute("position",new ke(n,3)),r=new Yr({color:"#777777",linewidth:.3});i.setDrawRange(0,2),this.pointCount=2,this.line=new eo(i,r)}}const Js=JSON.parse('{"glyphs":{"0":{"ha":833,"x_min":90,"x_max":743,"o":"m 421 1000 q 590 942 517 1000 q 703 774 663 883 q 743 508 743 664 l 743 444 q 700 190 743 296 q 582 28 657 83 q 413 -28 507 -28 q 283 3 342 -28 q 181 94 224 35 q 114 240 138 154 q 90 435 90 325 l 90 499 q 133 770 90 658 q 252 941 176 882 q 421 1000 328 1000 m 438 874 q 316 822 365 874 q 242 682 267 771 q 217 481 217 593 l 217 419 q 225 300 217 361 q 258 188 233 239 q 328 104 282 136 q 359 100 342 101 q 396 99 376 99 q 517 147 468 99 q 592 276 567 194 q 617 463 617 358 l 617 524 q 607 656 617 590 q 572 778 597 722 q 500 868 547 833 q 472 873 488 872 q 438 874 456 874 m 622 792 l 632 642 l 571 642 l 608 683 q 583 612 597 643 q 549 553 568 581 q 500 492 529 525 q 415 400 461 447 q 314 308 368 353 q 199 219 260 263 l 189 328 l 261 328 l 218 289 q 242 338 229 317 q 274 380 254 358 q 326 432 294 401 q 453 568 378 481 q 622 792 529 656 z "},"1":{"ha":833,"x_min":108,"x_max":774,"o":"m 378 978 q 388 980 382 979 q 399 982 393 981 q 413 985 406 983 q 426 986 419 986 q 442 986 433 986 q 490 981 471 986 q 519 966 510 976 q 529 938 529 956 q 529 859 529 911 q 529 738 529 807 q 529 591 529 668 q 529 436 529 514 q 529 290 529 358 q 529 169 529 221 q 529 90 529 117 l 435 90 l 435 135 q 417 160 424 144 q 406 195 410 175 q 401 239 401 215 q 401 291 401 254 q 401 378 401 328 q 401 485 401 428 q 401 602 401 543 q 401 714 401 661 q 401 808 401 767 q 401 872 401 850 l 435 828 l 364 828 l 410 871 q 379 802 397 835 q 338 741 361 769 q 286 685 315 713 q 241 647 261 661 q 203 627 221 633 q 171 621 186 621 q 145 631 156 621 q 128 663 135 640 q 122 721 122 685 l 122 739 q 206 788 167 760 q 282 853 244 815 q 320 896 303 874 q 352 939 338 918 q 378 978 367 960 m 110 126 q 131 126 114 126 q 176 126 149 126 q 236 126 203 126 q 307 126 269 126 q 381 126 344 126 q 449 126 417 126 q 507 126 482 126 q 703 99 632 126 q 774 32 774 72 q 774 22 774 26 q 773 15 774 18 q 772 8 772 11 q 771 0 772 4 q 738 0 767 0 q 661 0 708 0 q 558 0 614 0 q 444 0 503 0 q 335 0 386 0 q 247 0 283 0 q 196 0 210 0 q 156 3 171 0 q 131 17 140 7 q 113 49 118 29 q 108 92 108 68 q 108 100 108 96 q 108 108 108 104 q 108 115 108 111 q 109 121 108 118 q 110 126 110 124 z "},"2":{"ha":833,"x_min":90,"x_max":744,"o":"m 422 1000 q 544 981 489 1000 q 640 926 600 963 q 701 840 679 890 q 722 728 722 790 l 722 719 q 705 610 722 663 q 653 513 688 558 q 569 425 619 467 q 451 346 518 383 q 329 269 376 303 q 253 206 282 236 q 213 145 225 176 q 197 74 200 114 l 186 129 l 231 94 l 167 92 q 228 113 197 106 q 294 124 258 121 q 378 126 331 126 l 675 126 q 730 109 715 126 q 744 50 744 92 q 744 40 744 44 q 744 29 744 35 q 742 19 743 24 q 741 9 742 14 q 739 0 740 4 q 703 0 735 0 q 620 0 671 0 q 509 0 569 0 q 388 0 449 0 q 276 0 328 0 q 191 0 225 0 q 150 0 157 0 q 121 16 135 0 q 99 55 107 32 q 90 96 90 78 l 90 103 q 126 224 90 167 q 229 335 163 281 q 389 442 296 389 q 486 510 447 476 q 549 578 525 543 q 583 650 572 613 q 594 728 594 688 l 594 733 q 586 788 594 761 q 564 836 578 815 q 506 864 538 854 q 425 874 474 874 q 278 820 329 874 q 221 665 226 767 l 213 665 q 178 674 193 668 q 151 687 163 679 q 133 705 140 694 q 121 728 125 715 q 117 754 117 740 q 135 839 117 799 q 188 914 153 879 q 285 976 226 951 q 422 1000 343 1000 z "},"3":{"ha":833,"x_min":93,"x_max":743,"o":"m 417 999 q 583 967 513 999 q 692 881 654 936 q 729 756 731 826 l 728 736 q 697 624 728 679 q 601 524 667 568 q 431 451 536 479 l 472 494 l 472 422 l 429 464 q 610 411 542 444 q 711 332 679 378 q 743 229 743 286 l 743 215 q 703 90 743 146 q 590 3 664 35 q 417 -28 517 -28 q 296 -17 351 -28 q 198 14 240 -6 q 129 58 156 33 q 100 104 107 81 q 93 163 93 128 q 93 177 93 169 q 94 192 93 185 q 95 205 94 199 q 97 218 96 211 q 100 231 99 225 l 108 231 q 188 156 146 185 q 284 113 231 126 q 404 99 338 99 q 514 113 468 99 q 590 154 560 128 q 633 215 619 181 l 633 221 q 598 294 626 263 q 522 347 569 325 q 415 379 475 368 q 285 392 354 390 q 249 408 260 393 q 238 460 238 424 q 238 475 238 468 q 238 488 238 482 q 240 498 239 493 q 242 510 240 503 q 382 523 318 510 q 495 565 446 536 q 576 634 544 593 q 617 728 607 675 l 617 735 q 580 807 606 776 q 510 855 554 838 q 404 872 467 872 q 246 840 310 872 q 131 742 182 808 l 122 742 q 118 754 119 747 q 115 767 117 761 q 113 781 114 774 q 113 794 113 788 q 113 810 113 801 q 122 868 113 846 q 154 915 131 890 q 257 974 188 949 q 417 999 326 999 z "},"4":{"ha":833,"x_min":65,"x_max":788,"o":"m 557 992 q 588 990 574 992 q 615 985 603 988 q 639 977 628 982 q 659 967 650 972 q 675 954 668 963 l 675 946 q 557 853 617 908 q 440 731 497 797 q 331 589 382 664 q 236 437 279 514 q 164 283 193 360 l 179 351 l 179 293 l 158 306 q 239 324 201 318 q 316 333 276 331 q 403 335 356 335 l 731 335 q 765 324 753 335 q 783 296 778 314 q 788 254 788 278 q 788 243 788 249 q 787 233 788 238 q 786 225 786 229 q 785 217 786 221 q 783 208 783 213 l 133 208 q 97 222 111 208 q 74 258 82 235 q 65 311 65 281 l 65 324 q 75 383 65 349 q 103 457 85 417 q 147 542 121 497 q 202 634 172 588 q 267 728 232 681 q 340 820 301 775 q 415 906 378 865 q 476 962 453 944 q 517 985 499 979 q 557 992 536 992 m 572 546 q 574 546 574 546 q 577 546 575 546 q 580 546 579 546 q 582 546 581 546 q 629 538 610 546 q 659 517 649 531 q 669 488 669 504 l 669 136 q 670 93 669 113 q 672 56 671 74 q 676 24 674 39 q 682 -6 679 10 q 674 -8 678 -7 q 665 -10 669 -8 q 655 -12 660 -11 q 645 -12 650 -12 q 635 -12 640 -12 q 560 10 582 -12 q 538 76 538 32 q 538 112 538 90 q 538 156 538 133 q 538 202 538 179 q 538 245 538 225 q 538 276 538 265 q 540 335 538 297 q 548 415 543 372 q 559 493 553 457 q 572 546 565 529 z "},"5":{"ha":833,"x_min":92,"x_max":743,"o":"m 150 972 q 178 972 153 972 q 244 972 204 972 q 331 972 283 972 q 426 972 378 972 q 518 972 475 972 q 592 972 561 972 q 636 972 624 972 q 697 953 679 972 q 714 901 714 933 q 713 889 714 894 q 712 877 713 883 q 711 865 711 871 q 710 854 711 860 q 707 846 708 849 q 669 846 704 846 q 580 846 633 846 q 467 846 526 846 q 351 846 407 846 q 257 846 296 846 q 208 846 218 846 q 170 851 185 846 q 149 872 156 857 q 143 915 143 888 q 145 949 143 933 q 150 972 147 964 m 224 896 l 303 896 l 299 838 q 312 801 310 821 q 310 754 314 782 q 290 652 300 706 q 270 549 279 599 q 254 460 261 499 l 224 497 l 306 497 l 232 483 q 329 511 286 504 q 421 518 372 518 q 549 501 490 518 q 652 451 608 483 q 719 370 696 418 q 743 261 743 322 l 743 247 q 722 135 743 185 q 658 48 700 85 q 556 -8 617 11 q 417 -28 494 -28 q 285 -15 342 -28 q 192 16 229 -3 q 136 53 154 35 q 101 107 111 79 q 92 168 92 135 q 92 181 92 175 q 92 192 92 186 q 94 202 93 197 q 95 212 94 207 q 97 221 96 217 l 106 221 q 233 130 163 161 q 404 99 303 99 q 581 148 518 99 q 644 268 644 197 l 644 276 q 592 351 629 321 q 499 398 556 382 q 365 414 443 414 q 306 414 332 414 q 257 414 279 414 l 207 414 q 146 422 163 414 q 133 453 129 431 q 153 568 144 515 q 172 667 163 621 q 189 751 181 713 q 206 826 197 790 q 224 896 215 863 z "},"6":{"ha":833,"x_min":90,"x_max":746,"o":"m 486 1000 q 611 984 567 1000 q 672 953 656 968 q 699 920 690 939 q 707 868 707 901 q 706 853 707 860 q 705 842 706 847 q 703 831 704 836 q 701 821 701 825 q 697 813 700 817 l 689 813 q 600 858 649 843 q 486 874 551 874 q 390 861 436 874 q 310 828 344 849 q 245 681 271 775 q 219 444 219 588 l 219 433 q 228 302 219 360 q 251 202 236 244 q 288 133 267 160 q 350 105 318 113 q 422 97 382 97 q 567 147 515 97 q 619 275 619 196 l 619 283 q 615 331 619 310 q 603 372 611 351 q 534 415 576 400 q 438 429 492 429 q 302 410 368 429 q 179 351 236 390 l 175 451 l 263 451 l 203 421 q 317 513 250 483 q 461 542 385 542 q 609 508 544 542 q 710 415 674 475 q 746 274 746 356 l 746 261 q 706 110 746 176 q 595 8 667 44 q 431 -28 524 -28 q 245 22 321 -28 q 130 176 169 72 q 90 438 90 279 l 90 449 q 108 652 90 563 q 160 807 126 742 q 243 915 194 872 q 353 979 292 958 q 486 1000 414 1000 z "},"7":{"ha":833,"x_min":96,"x_max":740,"o":"m 132 1000 q 169 998 151 1000 q 201 992 186 996 q 227 981 215 988 q 244 967 239 975 q 250 950 250 960 q 247 919 250 943 q 240 863 244 896 q 232 792 236 831 q 225 718 228 754 q 222 651 222 682 q 215 649 219 650 q 206 648 210 649 q 196 647 201 647 q 185 646 190 646 q 174 646 179 646 q 117 657 139 646 q 96 706 96 668 q 98 762 96 732 q 103 823 100 792 q 110 885 106 854 q 120 946 115 917 q 132 1000 125 975 m 454 -7 q 447 -9 451 -8 q 438 -10 443 -10 q 427 -12 433 -11 q 415 -14 421 -14 q 403 -14 408 -14 q 342 3 364 -14 q 319 57 319 19 q 330 163 319 108 q 363 281 340 218 q 420 419 385 344 q 507 582 456 493 q 558 678 538 635 q 592 759 578 721 q 615 833 606 797 q 628 908 624 869 l 633 828 l 601 892 l 660 876 q 587 860 622 865 q 510 852 551 854 q 417 850 469 850 l 201 850 q 180 860 190 850 q 162 885 169 869 q 149 918 154 901 q 141 950 143 935 q 139 972 139 965 l 675 972 q 712 959 697 972 q 733 923 726 946 q 740 871 740 900 l 740 860 q 735 810 740 838 q 717 749 729 782 q 690 677 706 715 q 654 597 675 639 q 610 508 633 554 q 532 347 563 418 q 484 217 501 276 q 460 105 467 158 q 454 -7 454 51 z "},"8":{"ha":833,"x_min":89,"x_max":751,"o":"m 428 1001 q 588 966 517 1001 q 699 868 658 931 q 740 726 740 806 l 740 719 q 713 605 740 658 q 631 515 686 551 q 492 461 575 478 l 529 499 l 529 433 l 392 475 q 564 578 510 518 q 618 721 618 638 l 618 726 q 610 788 618 760 q 588 836 603 815 q 519 868 560 857 q 426 879 478 879 q 326 859 374 879 q 248 800 278 839 q 218 704 218 761 q 235 627 218 663 q 294 561 253 592 q 403 507 335 531 l 526 461 q 633 410 590 439 q 702 351 676 382 q 740 290 728 321 q 751 229 751 260 l 751 222 q 710 93 751 150 q 591 4 668 36 q 410 -28 514 -28 q 240 2 313 -28 q 128 85 168 32 q 89 208 89 139 l 89 217 q 117 318 89 271 q 202 397 144 365 q 351 436 260 429 l 311 403 l 311 460 l 443 421 q 306 358 358 392 q 231 288 254 325 q 207 208 207 251 q 240 145 211 171 q 315 106 269 119 q 414 93 360 93 q 560 124 501 93 q 642 214 618 156 q 622 276 638 249 q 574 328 606 304 q 489 371 542 351 l 365 417 q 203 503 261 456 q 123 603 146 550 q 100 708 100 656 l 100 714 q 141 860 100 796 q 256 963 182 925 q 428 1001 329 1001 z "},"9":{"ha":833,"x_min":88,"x_max":744,"o":"m 404 1000 q 548 972 485 1000 q 655 887 611 944 q 722 740 699 829 q 744 526 744 650 l 744 515 q 717 263 744 367 q 637 95 689 160 q 513 1 585 31 q 349 -28 440 -28 q 259 -21 297 -28 q 197 -3 221 -14 q 161 19 172 8 q 137 56 146 35 q 128 111 128 76 q 128 124 128 118 q 128 134 128 129 q 130 144 129 139 q 131 153 131 149 q 133 163 132 158 l 142 163 q 233 114 185 129 q 349 99 282 99 q 447 110 401 99 q 531 143 493 121 q 593 303 571 208 q 615 528 615 397 l 615 539 q 597 729 615 651 q 544 847 579 807 q 485 873 515 865 q 418 881 456 881 q 268 817 321 881 q 215 650 215 754 l 215 642 q 221 569 215 600 q 242 510 226 538 q 309 471 269 485 q 394 457 349 457 q 531 477 465 457 q 656 536 597 497 l 656 431 l 571 431 l 631 465 q 515 369 588 399 q 368 340 443 340 q 222 374 285 340 q 123 473 158 407 q 88 636 88 539 l 88 642 q 128 833 88 753 q 239 956 168 913 q 404 1000 310 1000 z "}," ":{"ha":833,"x_min":0,"x_max":0,"o":""}," ":{"ha":833,"x_min":0,"x_max":0,"o":"z "}," ":{"ha":833,"x_min":0,"x_max":0,"o":""}," ":{"ha":833,"x_min":0,"x_max":0,"o":""}," ":{"ha":833,"x_min":0,"x_max":0,"o":""}," ":{"ha":833,"x_min":0,"x_max":0,"o":""},"A":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 z "},"À":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 319 1297 q 355 1224 332 1258 q 412 1158 378 1189 q 489 1096 446 1128 q 464 1086 476 1090 q 440 1080 451 1082 q 414 1078 428 1078 q 376 1081 393 1078 q 340 1096 358 1085 q 296 1124 317 1108 q 258 1157 275 1139 q 227 1195 240 1175 q 206 1235 214 1215 q 201 1264 199 1251 q 219 1283 204 1276 q 249 1292 233 1289 q 281 1297 264 1296 q 319 1297 299 1299 z "},"Á":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 514 1289 q 552 1288 535 1289 q 583 1283 569 1286 q 611 1276 597 1281 q 631 1257 628 1269 q 629 1229 635 1244 q 608 1188 621 1207 q 578 1150 596 1168 q 541 1117 561 1132 q 497 1089 521 1101 q 460 1074 479 1078 q 419 1069 442 1069 q 394 1072 407 1069 q 369 1078 382 1074 q 344 1089 357 1082 q 422 1151 388 1119 q 479 1216 456 1182 q 514 1289 503 1250 z "},"Â":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 375 1301 q 390 1301 382 1301 q 405 1301 397 1301 q 419 1301 413 1301 q 467 1296 444 1301 q 529 1265 490 1290 q 576 1233 551 1251 q 625 1192 601 1214 q 670 1143 649 1169 q 711 1086 692 1117 q 676 1075 693 1079 q 636 1071 660 1071 q 599 1078 613 1071 q 569 1104 586 1086 q 496 1169 536 1140 q 383 1231 456 1199 l 463 1214 q 417 1214 440 1214 q 371 1214 394 1214 l 449 1232 q 317 1150 368 1192 q 238 1069 265 1108 l 229 1069 q 178 1073 197 1069 q 150 1084 158 1076 q 142 1100 142 1092 q 150 1125 142 1108 q 179 1165 158 1142 q 220 1206 199 1186 q 267 1243 242 1225 q 319 1276 292 1261 q 375 1301 346 1290 z "},"Ã":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 554 1194 q 619 1210 590 1194 q 675 1258 647 1226 l 683 1258 q 690 1235 688 1250 q 692 1208 692 1221 q 688 1172 692 1186 q 679 1147 685 1158 q 637 1104 665 1119 q 565 1089 608 1089 q 492 1104 528 1089 q 421 1140 456 1119 q 350 1175 386 1160 q 276 1190 314 1190 q 213 1175 240 1190 q 156 1126 185 1160 l 147 1126 q 141 1151 143 1138 q 139 1176 139 1164 q 142 1212 139 1199 q 151 1236 146 1225 q 194 1280 165 1264 q 265 1296 222 1296 q 339 1281 303 1296 q 410 1245 375 1265 q 481 1210 446 1225 q 554 1194 517 1194 z "},"Ä":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 194 1260 q 225 1263 208 1263 q 256 1264 242 1264 q 303 1259 282 1264 q 337 1242 324 1254 q 350 1207 350 1229 l 350 1108 q 319 1106 336 1107 q 288 1104 303 1104 q 242 1110 264 1104 q 208 1128 221 1115 q 194 1163 194 1140 l 194 1260 m 483 1260 q 514 1263 497 1263 q 544 1264 531 1264 q 592 1259 571 1264 q 626 1242 613 1254 q 639 1207 639 1229 l 639 1108 q 608 1106 625 1107 q 576 1104 592 1104 q 531 1110 553 1104 q 497 1128 510 1115 q 483 1163 483 1140 l 483 1260 z "},"Å":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 419 1243 q 527 1222 481 1243 q 601 1164 574 1201 q 628 1075 628 1126 l 628 1067 q 600 981 628 1018 q 524 922 572 943 q 411 900 475 900 q 303 920 350 900 q 230 976 257 940 q 203 1061 203 1013 l 203 1069 q 231 1160 203 1121 q 307 1221 258 1199 q 419 1243 356 1243 m 422 1156 q 336 1133 367 1156 q 306 1071 306 1111 l 306 1063 q 316 1024 306 1042 q 344 994 326 1007 q 375 989 360 990 q 408 988 390 988 q 495 1008 465 988 q 525 1067 525 1029 l 525 1075 q 515 1117 525 1099 q 483 1149 504 1136 q 455 1154 469 1153 q 422 1156 440 1156 z "},"Ā":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 143 1225 l 628 1225 q 676 1208 664 1225 q 689 1154 689 1190 q 688 1134 689 1144 q 685 1115 686 1124 l 246 1115 q 182 1125 204 1115 q 151 1155 160 1135 q 143 1206 143 1175 q 143 1216 143 1211 q 143 1225 143 1221 z "},"Ă":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 581 1304 q 622 1299 604 1304 q 653 1286 639 1294 q 663 1270 661 1279 q 660 1249 665 1261 q 613 1169 644 1203 q 533 1118 581 1136 q 422 1100 486 1100 l 411 1100 q 301 1118 349 1100 q 221 1169 253 1136 q 174 1249 189 1203 q 170 1270 168 1261 q 181 1286 172 1279 q 212 1299 194 1294 q 253 1304 229 1304 q 311 1228 274 1254 q 417 1197 349 1203 q 522 1228 485 1203 q 581 1304 560 1254 z "},"Ą":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 675 40 q 697 33 683 42 q 736 -6 710 25 q 718 -15 729 -11 q 693 -24 707 -19 q 592 -77 628 -42 q 557 -158 557 -112 q 576 -208 557 -192 q 629 -224 594 -224 q 678 -216 656 -224 q 722 -192 700 -208 l 731 -192 q 739 -210 736 -201 q 742 -228 742 -219 q 743 -249 743 -236 q 706 -322 743 -297 q 608 -347 669 -347 q 485 -307 529 -347 q 440 -192 440 -267 q 469 -83 440 -131 q 550 -5 497 -36 q 675 40 603 26 z "},"Ǻ":{"ha":833,"x_min":56,"x_max":747,"o":"m 419 1243 q 527 1222 481 1243 q 601 1164 574 1201 q 628 1076 628 1126 l 628 1068 q 600 981 628 1018 q 524 922 572 943 q 411 900 475 900 q 303 920 350 900 q 229 977 256 940 q 203 1061 203 1014 l 203 1069 q 231 1160 203 1121 q 307 1221 258 1199 q 419 1243 356 1243 m 422 1156 q 336 1133 367 1156 q 306 1071 306 1111 l 306 1063 q 316 1024 306 1042 q 344 994 326 1007 q 375 990 360 992 q 407 988 390 988 q 494 1008 465 988 q 524 1067 524 1029 l 524 1075 q 514 1117 524 1099 q 483 1149 504 1136 q 454 1154 468 1153 q 422 1156 440 1156 m 521 1425 q 558 1424 542 1425 q 590 1419 575 1422 q 618 1411 604 1417 q 637 1392 633 1406 q 635 1364 640 1379 q 614 1323 626 1343 q 585 1285 601 1303 q 548 1252 568 1268 q 504 1224 528 1236 q 467 1210 485 1214 q 426 1206 449 1206 q 401 1207 414 1206 q 376 1213 389 1208 q 350 1224 364 1217 q 428 1285 394 1254 q 485 1351 461 1317 q 521 1425 508 1386 m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 z "},"Ȁ":{"ha":833,"x_min":56,"x_max":747,"o":"m 206 1299 q 240 1224 218 1258 q 297 1159 263 1190 q 375 1097 331 1128 q 349 1086 361 1090 q 325 1081 338 1082 q 299 1079 313 1079 q 262 1083 279 1079 q 225 1096 244 1086 q 181 1124 201 1108 q 143 1158 161 1140 q 112 1195 125 1175 q 90 1236 99 1215 q 88 1264 85 1251 q 106 1283 90 1276 q 134 1293 119 1290 q 167 1297 149 1296 q 206 1299 185 1299 m 469 1299 q 506 1224 483 1258 q 562 1159 528 1190 q 639 1097 596 1128 q 615 1086 626 1090 q 590 1081 603 1082 q 564 1079 578 1079 q 527 1083 544 1079 q 490 1096 510 1086 q 446 1124 467 1108 q 408 1158 425 1140 q 377 1195 390 1175 q 356 1236 364 1215 q 351 1264 349 1251 q 371 1283 354 1276 q 399 1293 383 1290 q 431 1297 414 1296 q 469 1299 449 1299 m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 z "},"Ȃ":{"ha":833,"x_min":56,"x_max":747,"o":"m 253 1092 q 212 1098 229 1093 q 181 1111 194 1103 q 170 1126 172 1117 q 174 1147 168 1135 q 221 1227 189 1194 q 301 1278 253 1260 q 411 1296 349 1296 l 422 1296 q 533 1278 486 1296 q 613 1227 581 1260 q 660 1147 644 1194 q 663 1126 665 1135 q 653 1111 661 1117 q 622 1098 639 1103 q 581 1092 604 1093 q 522 1169 560 1143 q 417 1199 485 1194 q 311 1169 349 1194 q 253 1092 274 1143 m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 z "},"Ạ":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 324 -125 q 340 -122 331 -124 q 357 -120 349 -121 q 374 -119 365 -119 q 393 -119 383 -119 q 467 -133 439 -119 q 496 -183 496 -146 l 496 -274 q 480 -276 489 -275 q 463 -278 471 -278 q 445 -279 454 -279 q 426 -279 436 -279 q 353 -265 382 -279 q 324 -215 324 -251 l 324 -125 z "},"Ả":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 346 1078 q 362 1114 346 1097 q 419 1146 378 1131 q 473 1169 458 1160 q 488 1193 488 1179 q 488 1201 488 1197 q 486 1208 488 1204 q 459 1215 474 1214 q 426 1217 444 1217 q 345 1205 379 1217 q 283 1167 311 1193 l 275 1167 q 267 1188 269 1178 q 264 1214 264 1199 q 270 1249 264 1233 q 290 1276 276 1264 q 311 1291 300 1285 q 338 1302 322 1297 q 372 1309 353 1307 q 415 1311 392 1311 q 504 1297 469 1311 q 556 1257 539 1282 q 574 1200 574 1232 l 574 1197 q 558 1150 574 1168 q 508 1113 543 1132 q 460 1079 471 1092 q 447 1049 450 1067 q 433 1045 442 1047 q 417 1042 425 1043 q 400 1042 408 1042 q 359 1052 372 1042 q 346 1078 346 1063 z "},"Ấ":{"ha":833,"x_min":56,"x_max":824,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 375 1301 q 390 1301 382 1301 q 405 1301 397 1301 q 419 1301 413 1301 q 467 1296 444 1301 q 529 1265 490 1290 q 576 1233 551 1251 q 625 1192 601 1214 q 670 1143 649 1169 q 711 1086 692 1117 q 676 1075 693 1079 q 636 1071 660 1071 q 599 1078 613 1071 q 569 1104 586 1086 q 496 1169 536 1140 q 383 1231 456 1199 l 463 1214 q 417 1214 440 1214 q 371 1214 394 1214 l 449 1232 q 317 1150 368 1192 q 238 1069 265 1108 l 229 1069 q 178 1073 197 1069 q 150 1084 158 1076 q 142 1100 142 1092 q 150 1125 142 1108 q 179 1165 158 1142 q 220 1206 199 1186 q 267 1243 242 1225 q 319 1276 292 1261 q 375 1301 346 1290 m 721 1492 q 749 1490 736 1492 q 775 1487 763 1489 q 799 1482 788 1485 q 820 1461 817 1476 q 815 1422 824 1446 q 792 1376 806 1399 q 762 1335 779 1354 q 724 1299 744 1317 q 690 1279 706 1286 q 654 1272 674 1272 q 631 1274 642 1272 q 608 1281 619 1276 q 585 1290 597 1285 q 644 1348 618 1317 q 690 1415 671 1379 q 721 1492 710 1451 z "},"Ầ":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 375 1301 q 390 1301 382 1301 q 405 1301 397 1301 q 419 1301 413 1301 q 467 1296 444 1301 q 529 1265 490 1290 q 576 1233 551 1251 q 625 1192 601 1214 q 670 1143 649 1169 q 711 1086 692 1117 q 676 1075 693 1079 q 636 1071 660 1071 q 599 1078 613 1071 q 569 1104 586 1086 q 496 1169 536 1140 q 383 1231 456 1199 l 463 1214 q 417 1214 440 1214 q 371 1214 394 1214 l 449 1232 q 317 1150 368 1192 q 238 1069 265 1108 l 229 1069 q 178 1073 197 1069 q 150 1084 158 1076 q 142 1100 142 1092 q 150 1125 142 1108 q 179 1165 158 1142 q 220 1206 199 1186 q 267 1243 242 1225 q 319 1276 292 1261 q 375 1301 346 1290 m 579 1490 q 610 1415 590 1451 q 656 1348 629 1379 q 715 1290 682 1317 q 692 1281 703 1285 q 670 1274 681 1276 q 647 1272 660 1272 q 610 1279 628 1272 q 575 1299 593 1286 q 538 1335 556 1317 q 506 1376 519 1354 q 485 1422 493 1399 q 481 1461 475 1446 q 506 1482 486 1476 q 526 1487 515 1485 q 551 1490 538 1489 q 579 1490 564 1490 z "},"Ẩ":{"ha":833,"x_min":56,"x_max":808,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 375 1301 q 390 1301 382 1301 q 405 1301 397 1301 q 419 1301 413 1301 q 467 1296 444 1301 q 529 1265 490 1290 q 576 1233 551 1251 q 625 1192 601 1214 q 670 1143 649 1169 q 711 1086 692 1117 q 676 1075 693 1079 q 636 1071 660 1071 q 599 1078 613 1071 q 569 1104 586 1086 q 496 1169 536 1140 q 383 1231 456 1199 l 463 1214 q 417 1214 440 1214 q 371 1214 394 1214 l 449 1232 q 317 1150 368 1192 q 238 1069 265 1108 l 229 1069 q 178 1073 197 1069 q 150 1084 158 1076 q 142 1100 142 1092 q 150 1125 142 1108 q 179 1165 158 1142 q 220 1206 199 1186 q 267 1243 242 1225 q 319 1276 292 1261 q 375 1301 346 1290 m 581 1297 q 597 1333 581 1317 q 654 1365 613 1350 q 708 1389 693 1379 q 722 1413 722 1399 q 722 1420 722 1417 q 721 1428 722 1424 q 694 1435 708 1433 q 661 1436 679 1436 q 580 1424 614 1436 q 518 1386 546 1413 l 510 1386 q 501 1408 504 1397 q 499 1433 499 1418 q 505 1468 499 1453 q 525 1496 511 1483 q 546 1510 535 1504 q 572 1522 557 1517 q 607 1528 588 1526 q 650 1531 626 1531 q 739 1516 704 1531 q 791 1476 774 1501 q 808 1419 808 1451 l 808 1417 q 793 1369 808 1388 q 743 1332 778 1351 q 695 1299 706 1311 q 682 1268 685 1286 q 668 1265 676 1267 q 651 1262 660 1263 q 635 1261 643 1261 q 594 1272 607 1261 q 581 1297 581 1282 z "},"Ẫ":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 375 1301 q 390 1301 382 1301 q 405 1301 397 1301 q 419 1301 413 1301 q 467 1296 444 1301 q 529 1265 490 1290 q 576 1233 551 1251 q 625 1192 601 1214 q 670 1143 649 1169 q 711 1086 692 1117 q 676 1075 693 1079 q 636 1071 660 1071 q 599 1078 613 1071 q 569 1104 586 1086 q 496 1169 536 1140 q 383 1231 456 1199 l 463 1214 q 417 1214 440 1214 q 371 1214 394 1214 l 449 1232 q 317 1150 368 1192 q 238 1069 265 1108 l 229 1069 q 178 1073 197 1069 q 150 1084 158 1076 q 142 1100 142 1092 q 150 1125 142 1108 q 179 1165 158 1142 q 220 1206 199 1186 q 267 1243 242 1225 q 319 1276 292 1261 q 375 1301 346 1290 m 528 1438 q 573 1451 556 1438 q 606 1503 590 1464 l 614 1503 q 624 1477 621 1492 q 628 1446 628 1463 q 624 1410 628 1426 q 615 1381 621 1393 q 585 1345 606 1358 q 536 1332 565 1332 q 467 1347 497 1332 q 410 1380 436 1361 q 358 1413 385 1399 q 301 1428 332 1428 q 255 1412 271 1428 q 221 1364 239 1396 l 213 1364 q 203 1387 207 1374 q 200 1417 200 1400 q 203 1453 200 1438 q 214 1485 207 1469 q 246 1522 224 1508 q 301 1535 268 1535 q 363 1519 335 1535 q 416 1485 390 1504 q 469 1452 442 1467 q 528 1438 496 1438 z "},"Ậ":{"ha":833,"x_min":56,"x_max":747,"o":"m 322 -125 q 339 -122 331 -124 q 356 -120 347 -121 q 374 -119 365 -119 q 392 -119 383 -119 q 467 -133 438 -119 q 496 -183 496 -146 l 496 -274 q 480 -276 489 -275 q 462 -278 471 -278 q 444 -279 453 -279 q 426 -279 436 -279 q 352 -265 382 -279 q 322 -215 322 -251 l 322 -125 m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 375 1301 q 390 1301 382 1301 q 405 1301 397 1301 q 419 1301 413 1301 q 467 1296 444 1301 q 529 1265 490 1290 q 576 1233 551 1251 q 625 1192 601 1214 q 670 1143 649 1169 q 711 1086 692 1117 q 676 1075 693 1079 q 636 1071 660 1071 q 599 1078 613 1071 q 569 1104 586 1086 q 496 1169 536 1140 q 383 1231 456 1199 l 463 1214 q 417 1214 440 1214 q 371 1214 394 1214 l 449 1232 q 317 1150 368 1192 q 238 1069 265 1108 l 229 1069 q 178 1073 197 1069 q 150 1084 158 1076 q 142 1100 142 1092 q 150 1125 142 1108 q 179 1165 158 1142 q 220 1206 199 1186 q 267 1243 242 1225 q 319 1276 292 1261 q 375 1301 346 1290 z "},"Ắ":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 581 1304 q 622 1299 604 1304 q 653 1286 639 1294 q 663 1270 661 1279 q 660 1249 665 1261 q 613 1169 644 1203 q 533 1118 581 1136 q 422 1100 486 1100 l 411 1100 q 301 1118 349 1100 q 221 1169 253 1136 q 174 1249 189 1203 q 170 1270 168 1261 q 181 1286 172 1279 q 212 1299 194 1294 q 253 1304 229 1304 q 311 1228 274 1254 q 417 1197 349 1203 q 522 1228 485 1203 q 581 1304 560 1254 m 488 1532 q 516 1531 503 1532 q 542 1527 529 1529 q 565 1522 554 1525 q 587 1501 583 1517 q 582 1463 590 1486 q 559 1417 572 1439 q 528 1376 546 1394 q 490 1339 511 1357 q 456 1319 472 1326 q 421 1313 440 1313 q 397 1315 408 1313 q 375 1321 386 1317 q 351 1331 364 1325 q 411 1388 385 1357 q 457 1456 438 1419 q 488 1532 476 1492 z "},"Ằ":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 581 1304 q 622 1299 604 1304 q 653 1286 639 1294 q 663 1270 661 1279 q 660 1249 665 1261 q 613 1169 644 1203 q 533 1118 581 1136 q 422 1100 486 1100 l 411 1100 q 301 1118 349 1100 q 221 1169 253 1136 q 174 1249 189 1203 q 170 1270 168 1261 q 181 1286 172 1279 q 212 1299 194 1294 q 253 1304 229 1304 q 311 1228 274 1254 q 417 1197 349 1203 q 522 1228 485 1203 q 581 1304 560 1254 m 346 1531 q 376 1456 357 1492 q 422 1388 396 1419 q 482 1331 449 1357 q 458 1321 469 1325 q 437 1315 447 1317 q 414 1313 426 1313 q 377 1319 394 1313 q 342 1339 360 1326 q 304 1376 322 1357 q 273 1417 286 1394 q 251 1463 260 1439 q 247 1501 242 1486 q 272 1522 253 1517 q 293 1527 282 1525 q 317 1530 304 1529 q 346 1531 331 1531 z "},"Ẳ":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 581 1304 q 622 1299 604 1304 q 653 1286 639 1294 q 663 1270 661 1279 q 660 1249 665 1261 q 613 1169 644 1203 q 533 1118 581 1136 q 422 1100 486 1100 l 411 1100 q 301 1118 349 1100 q 221 1169 253 1136 q 174 1249 189 1203 q 170 1270 168 1261 q 181 1286 172 1279 q 212 1299 194 1294 q 253 1304 229 1304 q 311 1228 274 1254 q 417 1197 349 1203 q 522 1228 485 1203 q 581 1304 560 1254 m 347 1333 q 363 1369 347 1353 q 421 1401 379 1386 q 474 1425 460 1415 q 489 1449 489 1435 q 489 1456 489 1453 q 488 1464 489 1460 q 460 1471 475 1469 q 428 1472 446 1472 q 347 1460 381 1472 q 285 1422 313 1449 l 276 1422 q 268 1444 271 1433 q 265 1469 265 1454 q 272 1504 265 1489 q 292 1532 278 1519 q 313 1547 301 1540 q 339 1558 324 1553 q 374 1565 354 1563 q 417 1567 393 1567 q 506 1552 471 1567 q 558 1513 540 1538 q 575 1456 575 1488 l 575 1453 q 560 1406 575 1424 q 510 1368 544 1388 q 462 1335 472 1347 q 449 1304 451 1322 q 435 1301 443 1303 q 418 1298 426 1299 q 401 1297 410 1297 q 360 1308 374 1297 q 347 1333 347 1318 z "},"Ẵ":{"ha":833,"x_min":56,"x_max":747,"o":"m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 581 1304 q 622 1299 604 1304 q 653 1286 639 1294 q 663 1270 661 1279 q 660 1249 665 1261 q 613 1169 644 1203 q 533 1118 581 1136 q 422 1100 486 1100 l 411 1100 q 301 1118 349 1100 q 221 1169 253 1136 q 174 1249 189 1203 q 170 1270 168 1261 q 181 1286 172 1279 q 212 1299 194 1294 q 253 1304 229 1304 q 311 1228 274 1254 q 417 1197 349 1203 q 522 1228 485 1203 q 581 1304 560 1254 m 528 1444 q 573 1458 556 1444 q 606 1510 590 1471 l 614 1510 q 624 1484 621 1499 q 628 1453 628 1469 q 624 1417 628 1433 q 615 1388 621 1400 q 585 1352 606 1365 q 536 1339 565 1339 q 467 1353 497 1339 q 410 1387 436 1368 q 358 1420 385 1406 q 301 1435 332 1435 q 255 1419 271 1435 q 221 1371 239 1403 l 213 1371 q 203 1394 207 1381 q 200 1424 200 1407 q 203 1460 200 1444 q 214 1492 207 1476 q 246 1528 224 1515 q 301 1542 268 1542 q 363 1526 335 1542 q 416 1492 390 1511 q 469 1459 442 1474 q 528 1444 496 1444 z "},"Ặ":{"ha":833,"x_min":56,"x_max":747,"o":"m 322 -125 q 339 -122 331 -124 q 356 -120 347 -121 q 374 -119 365 -119 q 392 -119 383 -119 q 467 -133 438 -119 q 496 -183 496 -146 l 496 -274 q 480 -276 489 -275 q 462 -278 471 -278 q 444 -279 453 -279 q 426 -279 436 -279 q 352 -265 382 -279 q 322 -215 322 -251 l 322 -125 m 56 386 l 472 386 q 531 380 504 386 q 578 358 557 374 l 615 376 l 615 324 l 615 265 l 111 265 q 77 277 89 265 q 60 311 65 289 q 56 364 56 333 l 56 386 m 222 0 q 196 -6 210 -3 q 165 -8 182 -8 q 126 -3 144 -8 q 98 15 108 3 q 88 49 88 28 q 92 212 86 132 q 108 365 97 292 q 135 509 119 439 q 172 642 151 579 q 219 765 193 706 q 274 877 244 824 q 338 978 304 931 q 370 984 354 982 q 404 986 386 986 q 480 973 450 986 q 531 929 510 960 q 576 846 553 899 q 636 703 607 785 q 689 525 665 621 q 727 325 713 429 q 743 111 742 221 q 746 56 744 83 q 747 0 747 28 q 724 -6 736 -4 q 697 -8 711 -8 q 651 -1 671 -8 q 622 23 632 6 q 611 69 613 40 q 601 244 610 156 q 576 421 592 333 q 537 593 560 508 q 483 756 514 678 q 413 904 453 835 l 451 876 l 390 876 l 431 904 q 356 761 389 835 q 299 606 324 688 q 256 431 274 524 q 231 231 239 338 q 222 0 224 124 m 581 1304 q 622 1299 604 1304 q 653 1286 639 1294 q 663 1270 661 1279 q 660 1249 665 1261 q 613 1169 644 1203 q 533 1118 581 1136 q 422 1100 486 1100 l 411 1100 q 301 1118 349 1100 q 221 1169 253 1136 q 174 1249 189 1203 q 170 1270 168 1261 q 181 1286 172 1279 q 212 1299 194 1294 q 253 1304 229 1304 q 311 1228 274 1254 q 417 1197 349 1203 q 522 1228 485 1203 q 581 1304 560 1254 z "},"B":{"ha":833,"x_min":49,"x_max":738,"o":"m 382 -14 q 297 -8 335 -14 q 231 8 258 -3 q 183 30 203 18 q 153 53 164 42 q 132 84 139 68 q 125 121 125 100 q 125 314 125 218 q 125 506 125 410 q 125 699 125 601 q 125 897 125 797 l 242 897 l 225 854 q 250 810 243 836 q 257 747 257 783 q 257 595 257 671 q 257 442 257 519 q 257 287 257 365 q 257 128 257 208 q 288 117 271 122 q 326 110 304 113 q 379 108 347 108 q 493 124 442 108 q 574 176 544 140 q 604 271 604 213 l 604 286 q 582 354 604 324 q 515 406 560 385 q 399 439 469 428 l 272 439 l 272 469 l 586 467 l 586 444 q 692 380 654 425 q 731 275 731 335 l 731 254 q 684 106 731 167 q 559 16 638 46 q 382 -14 481 -14 m 53 972 q 243 994 154 989 q 411 1000 332 1000 q 554 978 493 1000 q 657 919 615 957 q 718 832 699 881 q 738 728 738 783 l 738 707 q 706 574 738 632 q 619 475 675 515 q 492 414 564 435 q 339 393 421 393 q 297 399 315 393 q 265 417 278 404 l 235 411 l 235 514 q 272 500 254 504 q 319 496 289 496 q 476 521 411 496 q 576 594 540 546 q 611 710 611 642 l 611 724 q 603 790 611 761 q 579 840 596 818 q 496 866 540 858 q 393 874 451 874 q 257 867 319 874 q 153 853 194 860 q 97 846 111 846 q 60 867 71 846 q 49 931 49 888 q 50 953 49 943 q 53 972 51 963 z "},"C":{"ha":833,"x_min":101,"x_max":747,"o":"m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 743 220 742 228 q 745 205 744 213 q 747 190 746 197 q 747 175 747 182 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 z "},"Ç":{"ha":833,"x_min":101,"x_max":747,"o":"m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 743 220 742 228 q 745 205 744 213 q 747 190 746 197 q 747 175 747 182 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 m 603 -182 q 553 -292 603 -251 q 415 -332 503 -332 q 342 -321 369 -332 q 303 -291 315 -310 q 290 -250 290 -272 q 292 -231 290 -240 q 295 -212 293 -222 q 301 -193 297 -203 l 310 -193 q 351 -222 329 -212 q 410 -231 372 -231 q 471 -215 449 -231 q 493 -168 493 -199 q 475 -131 493 -144 q 421 -118 457 -118 q 401 -112 408 -118 q 393 -96 393 -106 q 394 -69 393 -83 q 399 -40 396 -54 q 406 -12 401 -25 q 417 11 411 1 q 429 22 421 18 q 453 28 438 26 q 494 29 468 31 q 489 9 492 21 q 485 -15 486 -3 q 481 -37 483 -26 q 478 -57 479 -49 l 478 -65 q 568 -99 533 -69 q 603 -182 603 -129 z "},"Ć":{"ha":833,"x_min":101,"x_max":747,"o":"m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 743 220 742 228 q 745 205 744 213 q 747 190 746 197 q 747 175 747 182 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 m 561 1290 q 599 1289 582 1290 q 631 1285 617 1288 q 658 1278 644 1282 q 678 1258 675 1271 q 676 1231 682 1246 q 656 1189 668 1208 q 626 1151 643 1169 q 588 1118 608 1133 q 544 1090 568 1103 q 508 1075 526 1079 q 467 1071 489 1071 q 442 1073 454 1071 q 417 1079 429 1075 q 392 1090 404 1083 q 469 1152 435 1121 q 526 1217 503 1183 q 561 1290 550 1251 z "},"Ĉ":{"ha":833,"x_min":101,"x_max":758,"o":"m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 743 220 742 228 q 745 205 744 213 q 747 190 746 197 q 747 175 747 182 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 m 422 1303 q 437 1303 429 1303 q 452 1303 444 1303 q 467 1303 460 1303 q 515 1297 492 1303 q 576 1267 538 1292 q 624 1234 599 1253 q 672 1193 649 1215 q 717 1144 696 1171 q 758 1088 739 1118 q 724 1076 740 1081 q 683 1072 707 1072 q 647 1080 660 1072 q 617 1106 633 1088 q 543 1171 583 1142 q 431 1232 503 1200 l 510 1215 q 465 1215 488 1215 q 418 1215 442 1215 l 496 1233 q 364 1151 415 1193 q 285 1071 313 1110 l 276 1071 q 225 1074 244 1071 q 197 1085 206 1078 q 189 1101 189 1093 q 197 1126 189 1110 q 226 1167 206 1143 q 267 1207 246 1188 q 314 1244 289 1226 q 366 1277 339 1263 q 422 1303 393 1292 z "},"Ċ":{"ha":833,"x_min":101,"x_max":747,"o":"m 371 1251 q 389 1257 379 1254 q 409 1261 399 1260 q 431 1263 419 1263 q 453 1264 443 1264 q 528 1248 500 1264 q 557 1194 557 1232 l 557 1110 q 540 1105 549 1107 q 522 1101 531 1103 q 502 1099 513 1099 q 481 1099 492 1099 q 401 1120 432 1099 q 371 1178 371 1142 l 371 1251 m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 743 220 742 228 q 745 205 744 213 q 747 190 746 197 q 747 175 747 182 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 z "},"Č":{"ha":833,"x_min":101,"x_max":747,"o":"m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 743 220 742 228 q 745 205 744 213 q 747 190 746 197 q 747 175 747 182 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 m 507 1089 q 494 1089 501 1089 q 478 1089 486 1089 q 463 1089 471 1089 q 415 1095 438 1089 q 353 1125 392 1101 q 306 1159 331 1140 q 257 1199 281 1178 q 212 1248 233 1221 q 171 1306 190 1275 q 206 1317 189 1314 q 246 1319 222 1319 q 283 1312 269 1319 q 313 1286 297 1304 q 386 1222 346 1251 q 499 1160 426 1192 l 419 1178 q 466 1178 443 1178 q 511 1178 489 1178 l 433 1158 q 565 1240 514 1199 q 644 1322 617 1282 l 653 1322 q 705 1318 686 1322 q 732 1307 724 1314 q 740 1292 740 1300 q 733 1266 740 1283 q 703 1226 725 1249 q 662 1185 683 1204 q 615 1148 640 1165 q 563 1116 590 1131 q 507 1089 536 1101 z "},"Ḉ":{"ha":833,"x_min":101,"x_max":747,"o":"m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 743 220 742 228 q 745 205 744 213 q 747 190 746 197 q 747 175 747 182 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 m 603 -182 q 553 -292 603 -251 q 415 -332 503 -332 q 342 -321 369 -332 q 303 -291 315 -310 q 290 -250 290 -272 q 292 -231 290 -240 q 295 -212 293 -222 q 301 -193 297 -203 l 310 -193 q 351 -222 329 -212 q 410 -231 372 -231 q 471 -215 449 -231 q 493 -168 493 -199 q 475 -131 493 -144 q 421 -118 457 -118 q 401 -112 408 -118 q 393 -96 393 -106 q 394 -69 393 -83 q 399 -40 396 -54 q 406 -12 401 -25 q 417 11 411 1 q 429 22 421 18 q 453 28 438 26 q 494 29 468 31 q 489 9 492 21 q 485 -15 486 -3 q 481 -37 483 -26 q 478 -57 479 -49 l 478 -65 q 568 -99 533 -69 q 603 -182 603 -129 m 561 1290 q 599 1289 582 1290 q 631 1285 617 1288 q 658 1278 644 1282 q 678 1258 675 1271 q 676 1231 682 1246 q 656 1189 668 1208 q 626 1151 643 1169 q 588 1118 608 1133 q 544 1090 568 1103 q 508 1075 526 1079 q 467 1071 489 1071 q 442 1073 454 1071 q 417 1079 429 1075 q 392 1090 404 1083 q 469 1152 435 1121 q 526 1217 503 1183 q 561 1290 550 1251 z "},"D":{"ha":833,"x_min":53,"x_max":749,"o":"m 749 533 q 720 310 749 411 q 638 137 692 210 q 508 25 583 64 q 336 -14 432 -14 q 287 -11 310 -14 q 244 -3 264 -8 q 208 9 225 1 q 176 26 190 17 q 153 44 163 35 q 132 76 139 58 q 125 114 125 93 q 125 305 125 208 q 125 500 125 401 q 125 697 125 599 q 125 896 125 796 l 240 896 l 224 854 q 249 814 242 838 q 257 758 257 790 q 257 604 257 683 q 257 446 257 525 q 257 286 257 367 q 257 126 257 206 q 276 120 265 122 q 299 117 286 118 q 325 117 311 117 q 483 167 418 117 q 582 312 547 218 q 617 531 617 406 l 617 550 q 613 665 617 614 q 599 753 608 715 q 574 821 590 792 q 522 851 549 839 q 462 868 494 863 q 389 874 429 874 q 285 869 333 874 q 199 860 238 865 q 135 850 161 854 q 100 846 110 846 q 72 856 83 846 q 57 884 61 865 q 53 931 53 903 q 53 953 53 943 q 56 972 54 963 q 149 986 104 981 q 237 994 194 992 q 319 999 279 997 q 399 1000 360 1000 q 552 974 486 1000 q 661 894 618 947 q 726 760 704 840 q 749 569 749 679 l 749 533 z "},"Ď":{"ha":833,"x_min":53,"x_max":749,"o":"m 443 1089 q 428 1089 436 1089 q 414 1089 421 1089 q 399 1089 407 1089 q 350 1094 374 1089 q 289 1125 326 1100 q 242 1158 267 1139 q 193 1199 217 1176 q 148 1247 169 1221 q 107 1304 126 1274 q 141 1316 124 1313 q 182 1319 158 1319 q 218 1312 204 1319 q 249 1286 232 1304 q 322 1221 282 1250 q 435 1158 363 1192 l 354 1176 q 401 1176 378 1176 q 447 1176 425 1176 l 368 1157 q 501 1240 450 1199 q 581 1321 553 1282 l 589 1321 q 641 1317 622 1321 q 668 1307 660 1314 q 676 1290 676 1300 q 669 1265 676 1282 q 639 1225 661 1249 q 597 1185 619 1204 q 551 1147 575 1165 q 499 1115 526 1129 q 443 1089 472 1100 m 749 533 q 720 310 749 411 q 638 137 692 210 q 508 25 583 64 q 336 -14 432 -14 q 287 -11 310 -14 q 244 -3 264 -8 q 208 9 225 1 q 176 26 190 17 q 153 44 163 35 q 132 76 139 58 q 125 114 125 93 q 125 305 125 208 q 125 500 125 401 q 125 697 125 599 q 125 896 125 796 l 240 896 l 224 854 q 249 815 242 838 q 257 758 257 792 q 257 604 257 683 q 257 446 257 525 q 257 286 257 367 q 257 126 257 206 q 276 120 265 122 q 299 117 286 118 q 325 117 311 117 q 483 167 418 117 q 582 312 547 218 q 617 531 617 406 l 617 550 q 613 665 617 614 q 599 753 608 715 q 574 821 590 792 q 522 851 549 839 q 462 868 494 863 q 389 874 429 874 q 286 869 335 874 q 199 860 238 865 q 135 850 161 854 q 100 846 110 846 q 72 856 83 846 q 57 884 61 865 q 53 931 53 903 q 53 953 53 943 q 56 972 54 963 q 149 986 104 981 q 237 994 194 992 q 319 999 279 997 q 399 1000 360 1000 q 552 974 486 1000 q 661 894 618 947 q 726 760 704 840 q 749 569 749 679 l 749 533 z "},"Ḍ":{"ha":833,"x_min":53,"x_max":749,"o":"m 310 -125 q 326 -122 317 -124 q 343 -120 335 -121 q 361 -119 351 -119 q 379 -119 371 -119 q 453 -133 425 -119 q 482 -183 482 -146 l 482 -274 q 466 -276 475 -275 q 449 -278 457 -278 q 431 -279 440 -279 q 414 -279 422 -279 q 339 -265 368 -279 q 310 -215 310 -251 l 310 -125 m 749 533 q 720 310 749 411 q 638 137 692 210 q 508 25 583 64 q 336 -14 432 -14 q 287 -11 310 -14 q 244 -3 264 -8 q 208 9 225 1 q 176 26 190 17 q 153 44 163 35 q 132 76 139 58 q 125 114 125 93 q 125 305 125 208 q 125 500 125 401 q 125 697 125 599 q 125 896 125 796 l 240 896 l 224 854 q 249 814 242 838 q 257 758 257 790 q 257 604 257 683 q 257 446 257 525 q 257 286 257 367 q 257 126 257 206 q 276 120 265 122 q 299 117 286 118 q 325 117 311 117 q 483 167 418 117 q 582 312 547 218 q 617 531 617 406 l 617 550 q 613 665 617 614 q 599 753 608 715 q 574 821 590 792 q 522 851 549 839 q 462 868 494 863 q 389 874 429 874 q 285 869 333 874 q 199 860 238 865 q 135 850 161 854 q 100 846 110 846 q 72 856 83 846 q 57 884 61 865 q 53 931 53 903 q 53 953 53 943 q 56 972 54 963 q 149 986 104 981 q 237 994 194 992 q 319 999 279 997 q 399 1000 360 1000 q 552 974 486 1000 q 661 894 618 947 q 726 760 704 840 q 749 569 749 679 l 749 533 z "},"Ḏ":{"ha":833,"x_min":53,"x_max":749,"o":"m 124 -156 l 608 -156 q 656 -174 643 -156 q 668 -226 668 -192 q 667 -240 668 -233 q 666 -253 667 -247 q 664 -265 665 -260 l 226 -265 q 161 -256 183 -265 q 131 -226 139 -246 q 124 -175 124 -206 q 124 -168 124 -171 q 124 -162 124 -165 q 124 -156 124 -158 m 749 533 q 720 310 749 411 q 638 137 692 210 q 508 25 583 64 q 336 -14 432 -14 q 287 -11 310 -14 q 244 -3 264 -8 q 208 9 225 1 q 176 26 190 17 q 153 44 163 35 q 132 76 139 58 q 125 114 125 93 q 125 305 125 208 q 125 500 125 401 q 125 697 125 599 q 125 896 125 796 l 240 896 l 224 854 q 249 814 242 838 q 257 758 257 790 q 257 604 257 683 q 257 446 257 525 q 257 286 257 367 q 257 126 257 206 q 276 120 265 122 q 299 117 286 118 q 325 117 311 117 q 483 167 418 117 q 582 312 547 218 q 617 531 617 406 l 617 550 q 613 665 617 614 q 599 753 608 715 q 574 821 590 792 q 522 851 549 839 q 462 868 494 863 q 389 874 429 874 q 285 869 333 874 q 199 860 238 865 q 135 850 161 854 q 100 846 110 846 q 72 856 83 846 q 57 884 61 865 q 53 931 53 903 q 53 953 53 943 q 56 972 54 963 q 149 986 104 981 q 237 994 194 992 q 319 999 279 997 q 399 1000 360 1000 q 552 974 486 1000 q 661 894 618 947 q 726 760 704 840 q 749 569 749 679 l 749 533 z "},"E":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 z "},"È":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 319 1299 q 355 1225 332 1260 q 412 1160 378 1190 q 489 1097 446 1129 q 464 1088 476 1092 q 440 1081 451 1083 q 414 1079 428 1079 q 376 1083 393 1079 q 340 1097 358 1086 q 296 1125 317 1110 q 258 1158 275 1140 q 227 1197 240 1176 q 206 1236 214 1217 q 201 1265 199 1253 q 219 1285 204 1278 q 249 1294 233 1290 q 281 1299 264 1297 q 319 1299 299 1300 z "},"É":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Ê":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 z "},"Ë":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 194 1261 q 225 1265 208 1264 q 256 1265 242 1265 q 303 1260 282 1265 q 337 1243 324 1256 q 350 1208 350 1231 l 350 1110 q 319 1107 336 1108 q 288 1106 303 1106 q 242 1111 264 1106 q 208 1129 221 1117 q 194 1164 194 1142 l 194 1261 m 483 1261 q 514 1265 497 1264 q 544 1265 531 1265 q 592 1260 571 1265 q 626 1243 613 1256 q 639 1208 639 1231 l 639 1110 q 608 1107 625 1108 q 576 1106 592 1106 q 531 1111 553 1106 q 497 1129 510 1117 q 483 1164 483 1142 l 483 1261 z "},"Ē":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 z "},"Ĕ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 581 1306 q 622 1301 604 1306 q 653 1288 639 1296 q 663 1272 661 1281 q 660 1250 665 1263 q 613 1171 644 1204 q 533 1119 581 1138 q 422 1101 486 1101 l 411 1101 q 301 1119 349 1101 q 221 1171 253 1138 q 174 1250 189 1204 q 170 1272 168 1263 q 181 1288 172 1281 q 212 1301 194 1296 q 253 1306 229 1306 q 311 1230 274 1256 q 417 1199 349 1204 q 522 1230 485 1204 q 581 1306 560 1256 z "},"Ė":{"ha":833,"x_min":58,"x_max":743,"o":"m 324 1253 q 342 1258 332 1256 q 362 1262 351 1260 q 384 1264 372 1264 q 406 1264 396 1264 q 481 1248 453 1264 q 510 1194 510 1232 l 510 1111 q 492 1106 501 1108 q 474 1101 483 1103 q 455 1099 465 1100 q 433 1099 444 1099 q 354 1120 385 1099 q 324 1178 324 1142 l 324 1253 m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 z "},"Ę":{"ha":833,"x_min":58,"x_max":746,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 678 46 q 699 39 686 47 q 739 0 713 31 q 721 -10 732 -6 q 696 -18 710 -14 q 595 -72 631 -36 q 560 -153 560 -107 q 578 -202 560 -186 q 632 -218 597 -218 q 681 -210 658 -218 q 725 -186 703 -203 l 733 -186 q 742 -205 739 -196 q 745 -222 744 -214 q 746 -243 746 -231 q 709 -317 746 -292 q 611 -342 672 -342 q 488 -301 532 -342 q 443 -186 443 -261 q 472 -78 443 -125 q 553 1 500 -31 q 678 46 606 32 z "},"Ě":{"ha":833,"x_min":58,"x_max":743,"o":"m 460 1089 q 447 1089 454 1089 q 431 1089 439 1089 q 415 1089 424 1089 q 367 1095 390 1089 q 306 1125 344 1101 q 258 1159 283 1140 q 210 1199 233 1178 q 165 1248 186 1221 q 124 1306 143 1275 q 158 1317 142 1314 q 199 1319 175 1319 q 236 1312 222 1319 q 265 1286 250 1304 q 339 1222 299 1251 q 451 1160 379 1192 l 372 1178 q 419 1178 396 1178 q 464 1178 442 1178 l 386 1158 q 518 1240 467 1199 q 597 1322 569 1282 l 606 1322 q 658 1318 639 1322 q 685 1307 676 1314 q 693 1292 693 1300 q 685 1266 693 1283 q 656 1226 678 1249 q 615 1185 636 1204 q 568 1148 593 1165 q 516 1116 543 1131 q 460 1089 489 1101 m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 799 247 822 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 z "},"Ȅ":{"ha":833,"x_min":58,"x_max":743,"o":"m 206 1300 q 240 1226 218 1260 q 297 1160 263 1192 q 375 1099 331 1129 q 349 1088 361 1092 q 325 1082 338 1083 q 299 1081 313 1081 q 262 1084 279 1081 q 225 1097 244 1088 q 181 1126 201 1110 q 143 1159 161 1142 q 112 1197 125 1176 q 90 1238 99 1217 q 88 1265 85 1253 q 106 1285 90 1278 q 134 1294 119 1292 q 167 1299 149 1297 q 206 1300 185 1300 m 469 1300 q 506 1226 483 1260 q 562 1160 528 1192 q 639 1099 596 1129 q 615 1088 626 1092 q 590 1082 603 1083 q 564 1081 578 1081 q 527 1084 544 1081 q 490 1097 510 1088 q 446 1126 467 1110 q 408 1159 425 1142 q 377 1197 390 1176 q 356 1238 364 1217 q 351 1265 349 1253 q 371 1285 354 1278 q 399 1294 383 1292 q 431 1299 414 1297 q 469 1300 449 1300 m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 799 247 822 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 z "},"Ȇ":{"ha":833,"x_min":58,"x_max":743,"o":"m 253 1093 q 212 1099 229 1094 q 181 1113 194 1104 q 170 1127 172 1118 q 174 1149 168 1136 q 221 1228 189 1196 q 301 1279 253 1261 q 411 1297 349 1297 l 422 1297 q 533 1279 486 1297 q 613 1228 581 1261 q 660 1149 644 1196 q 663 1127 665 1136 q 653 1113 661 1118 q 622 1099 639 1104 q 581 1093 604 1094 q 522 1170 560 1144 q 417 1200 485 1196 q 311 1170 349 1196 q 253 1093 274 1144 m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 799 247 822 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 z "},"Ḕ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 m 319 1508 q 355 1435 332 1469 q 412 1369 378 1400 q 489 1307 446 1339 q 464 1297 476 1301 q 440 1291 451 1293 q 414 1289 428 1289 q 376 1292 393 1289 q 340 1307 358 1296 q 296 1335 317 1319 q 258 1368 275 1350 q 227 1406 240 1386 q 206 1446 214 1426 q 201 1475 199 1463 q 219 1494 204 1488 q 249 1503 233 1500 q 281 1508 264 1507 q 319 1508 299 1510 z "},"Ḗ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 m 514 1500 q 552 1499 535 1500 q 583 1494 569 1497 q 611 1488 597 1492 q 631 1468 628 1481 q 629 1440 635 1456 q 608 1399 621 1418 q 578 1361 596 1379 q 541 1328 561 1343 q 497 1300 521 1313 q 460 1285 479 1289 q 419 1281 442 1281 q 394 1283 407 1281 q 369 1289 382 1285 q 344 1300 357 1293 q 422 1362 388 1331 q 479 1427 456 1393 q 514 1500 503 1461 z "},"Ḝ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 599 -175 q 549 -285 599 -244 q 411 -325 499 -325 q 338 -314 365 -325 q 299 -284 311 -303 q 286 -243 286 -265 q 288 -224 286 -233 q 291 -206 289 -215 q 297 -186 293 -196 l 306 -186 q 347 -215 325 -206 q 406 -224 368 -224 q 467 -208 444 -224 q 489 -161 489 -192 q 471 -124 489 -137 q 417 -111 453 -111 q 397 -105 404 -111 q 389 -89 389 -99 q 390 -62 389 -76 q 394 -33 392 -47 q 402 -5 397 -18 q 413 18 407 8 q 425 29 417 25 q 449 35 433 33 q 490 36 464 38 q 485 16 488 28 q 481 -8 482 4 q 477 -31 479 -19 q 474 -50 475 -42 l 474 -58 q 564 -92 529 -62 q 599 -175 599 -122 m 581 1306 q 622 1301 604 1306 q 653 1288 639 1296 q 663 1272 661 1281 q 660 1250 665 1263 q 613 1171 644 1204 q 533 1119 581 1138 q 422 1101 486 1101 l 411 1101 q 301 1119 349 1101 q 221 1171 253 1138 q 174 1250 189 1204 q 170 1272 168 1263 q 181 1288 172 1281 q 212 1301 194 1296 q 253 1306 229 1306 q 311 1230 274 1256 q 417 1199 349 1204 q 522 1230 485 1204 q 581 1306 560 1256 z "},"Ẹ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 367 -125 q 383 -122 374 -124 q 400 -120 392 -121 q 417 -119 408 -119 q 436 -119 426 -119 q 510 -133 482 -119 q 539 -183 539 -146 l 539 -274 q 523 -276 532 -275 q 506 -278 514 -278 q 488 -279 497 -279 q 469 -279 479 -279 q 396 -265 425 -279 q 367 -215 367 -251 l 367 -125 z "},"Ẻ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 346 1078 q 362 1114 346 1097 q 419 1146 378 1131 q 473 1169 458 1160 q 488 1193 488 1179 q 488 1201 488 1197 q 486 1208 488 1204 q 459 1215 474 1214 q 426 1217 444 1217 q 345 1205 379 1217 q 283 1167 311 1193 l 275 1167 q 267 1188 269 1178 q 264 1214 264 1199 q 270 1249 264 1233 q 290 1276 276 1264 q 311 1291 300 1285 q 338 1302 322 1297 q 372 1309 353 1307 q 415 1311 392 1311 q 504 1297 469 1311 q 556 1257 539 1282 q 574 1200 574 1232 l 574 1197 q 558 1150 574 1168 q 508 1113 543 1132 q 460 1079 471 1092 q 447 1049 450 1067 q 433 1045 442 1047 q 417 1042 425 1043 q 400 1042 408 1042 q 359 1052 372 1042 q 346 1078 346 1063 z "},"Ẽ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 z "},"Ế":{"ha":833,"x_min":58,"x_max":824,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 721 1493 q 749 1492 736 1493 q 775 1488 763 1490 q 799 1483 788 1486 q 820 1463 817 1478 q 815 1424 824 1447 q 792 1378 806 1400 q 762 1337 779 1356 q 724 1300 744 1318 q 690 1281 706 1288 q 654 1274 674 1274 q 631 1276 642 1274 q 608 1282 619 1278 q 585 1292 597 1286 q 644 1349 618 1318 q 690 1417 671 1381 q 721 1493 710 1453 z "},"Ề":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 579 1492 q 610 1417 590 1453 q 656 1349 629 1381 q 715 1292 682 1318 q 692 1282 703 1286 q 670 1276 681 1278 q 647 1274 660 1274 q 610 1281 628 1274 q 575 1300 593 1288 q 538 1337 556 1318 q 506 1378 519 1356 q 485 1424 493 1400 q 481 1463 475 1447 q 506 1483 486 1478 q 526 1488 515 1486 q 551 1491 538 1490 q 579 1492 564 1492 z "},"Ể":{"ha":833,"x_min":58,"x_max":808,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 581 1299 q 597 1335 581 1318 q 654 1367 613 1351 q 708 1390 693 1381 q 722 1414 722 1400 q 722 1422 722 1418 q 721 1429 722 1425 q 694 1436 708 1435 q 661 1438 679 1438 q 580 1426 614 1438 q 518 1388 546 1414 l 510 1388 q 501 1409 504 1399 q 499 1435 499 1419 q 505 1469 499 1454 q 525 1497 511 1485 q 546 1512 535 1506 q 572 1523 557 1518 q 607 1530 588 1528 q 650 1532 626 1532 q 739 1517 704 1532 q 791 1478 774 1503 q 808 1421 808 1453 l 808 1418 q 793 1371 808 1389 q 743 1333 778 1353 q 695 1300 706 1313 q 682 1269 685 1288 q 668 1266 676 1268 q 651 1263 660 1264 q 635 1263 643 1263 q 594 1273 607 1263 q 581 1299 581 1283 z "},"Ễ":{"ha":833,"x_min":58,"x_max":743,"o":"m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 528 1439 q 573 1452 556 1439 q 606 1504 590 1465 l 614 1504 q 624 1478 621 1493 q 628 1447 628 1464 q 624 1411 628 1428 q 615 1382 621 1394 q 585 1347 606 1360 q 536 1333 565 1333 q 467 1348 497 1333 q 410 1381 436 1363 q 358 1415 385 1400 q 301 1429 332 1429 q 255 1413 271 1429 q 221 1365 239 1397 l 213 1365 q 203 1388 207 1375 q 200 1418 200 1401 q 203 1455 200 1439 q 214 1486 207 1471 q 246 1523 224 1510 q 301 1536 268 1536 q 363 1521 335 1536 q 416 1487 390 1506 q 469 1453 442 1468 q 528 1439 496 1439 z "},"Ệ":{"ha":833,"x_min":58,"x_max":743,"o":"m 367 -125 q 383 -122 374 -124 q 400 -120 392 -121 q 418 -119 408 -119 q 436 -119 428 -119 q 511 -133 482 -119 q 540 -183 540 -146 l 540 -274 q 523 -276 532 -275 q 506 -278 514 -278 q 488 -279 497 -279 q 471 -279 479 -279 q 396 -265 425 -279 q 367 -215 367 -251 l 367 -125 m 61 972 l 679 972 q 718 958 704 972 q 737 926 732 944 q 742 892 742 907 q 740 865 742 876 q 735 846 739 854 l 103 846 q 77 858 88 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 207 515 l 583 515 q 620 503 606 515 q 642 470 635 490 q 649 428 649 450 q 648 417 649 422 q 647 408 647 413 q 646 400 647 404 l 207 400 l 207 515 m 254 0 q 206 10 229 0 q 166 38 183 21 q 140 76 149 56 q 131 119 131 97 q 131 272 131 193 q 131 429 131 350 q 131 585 131 508 q 131 737 131 663 q 131 879 131 811 l 247 879 l 229 839 q 255 800 247 824 q 263 742 263 776 q 263 590 263 668 q 263 435 263 513 q 263 279 263 357 q 263 126 263 201 l 651 126 q 718 108 693 126 q 743 46 743 90 q 742 21 743 33 q 738 0 740 8 l 254 0 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 393 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1092 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 z "},"F":{"ha":833,"x_min":58,"x_max":742,"o":"m 290 -3 q 267 -8 278 -6 q 242 -10 256 -10 q 188 1 210 -10 q 153 35 165 13 q 142 92 142 58 q 142 289 142 190 q 142 485 142 388 q 142 682 142 583 q 142 879 142 781 l 258 879 l 242 839 q 267 800 260 824 q 275 740 275 776 q 275 538 275 642 q 275 330 275 435 q 275 121 275 225 q 278 52 275 78 q 290 -3 281 26 m 61 972 l 682 972 q 719 958 707 972 q 737 924 732 943 q 742 890 742 906 q 741 874 742 882 q 739 858 740 865 q 735 846 738 851 l 108 846 q 78 858 90 846 q 63 891 67 871 q 58 932 58 911 q 59 952 58 942 q 61 972 60 963 m 213 446 l 604 446 q 662 419 643 446 q 681 354 681 392 q 681 344 681 350 q 680 334 681 339 q 678 324 679 329 l 213 324 l 213 446 z "},"G":{"ha":833,"x_min":88,"x_max":788,"o":"m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 550 996 528 1000 q 592 984 572 992 q 628 965 611 976 q 660 938 644 953 q 703 873 690 908 q 717 786 717 838 q 717 742 717 764 q 717 697 717 719 q 717 654 717 675 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 391 844 444 881 q 297 743 338 808 q 235 590 257 678 q 214 397 214 501 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 292 0 357 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 117 642 88 532 q 202 833 147 753 q 333 956 257 913 q 501 1000 408 1000 z "},"Ĝ":{"ha":833,"x_min":88,"x_max":788,"o":"m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 550 996 528 1000 q 592 984 572 992 q 628 965 611 976 q 660 938 644 953 q 703 873 690 908 q 717 786 717 838 q 717 742 717 764 q 717 697 717 719 q 717 654 717 675 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 391 844 444 881 q 297 743 338 808 q 235 590 257 678 q 214 397 214 501 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 292 0 357 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 117 642 88 532 q 202 833 147 753 q 333 956 257 913 q 501 1000 408 1000 m 396 1303 q 410 1303 403 1303 q 426 1303 418 1303 q 440 1303 433 1303 q 488 1297 465 1303 q 550 1267 511 1292 q 597 1234 572 1253 q 646 1193 622 1215 q 691 1144 669 1171 q 732 1088 713 1118 q 697 1076 714 1081 q 657 1072 681 1072 q 620 1080 633 1072 q 590 1106 607 1088 q 517 1171 557 1142 q 404 1232 476 1200 l 483 1215 q 438 1215 461 1215 q 392 1215 415 1215 l 469 1233 q 338 1151 389 1193 q 258 1071 286 1110 l 250 1071 q 199 1074 218 1071 q 171 1085 179 1078 q 163 1101 163 1093 q 171 1126 163 1110 q 200 1167 179 1143 q 241 1207 219 1188 q 288 1244 263 1226 q 340 1277 313 1263 q 396 1303 367 1292 z "},"Ğ":{"ha":833,"x_min":88,"x_max":788,"o":"m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 550 996 528 1000 q 592 984 572 992 q 628 965 611 976 q 660 938 644 953 q 703 873 690 908 q 717 786 717 838 q 717 742 717 764 q 717 697 717 719 q 717 654 717 675 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 391 844 444 881 q 297 743 338 808 q 235 590 257 678 q 214 397 214 501 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 292 0 357 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 117 642 88 532 q 202 833 147 753 q 333 956 257 913 q 501 1000 408 1000 m 601 1306 q 642 1301 625 1306 q 674 1288 660 1296 q 684 1272 682 1281 q 681 1250 686 1263 q 633 1171 665 1204 q 554 1119 601 1138 q 443 1101 507 1101 l 432 1101 q 322 1119 369 1101 q 242 1171 274 1138 q 194 1250 210 1204 q 191 1272 189 1263 q 201 1288 193 1281 q 233 1301 215 1296 q 274 1306 250 1306 q 332 1230 294 1256 q 438 1199 369 1204 q 543 1230 506 1204 q 601 1306 581 1256 z "},"Ġ":{"ha":833,"x_min":88,"x_max":788,"o":"m 344 1251 q 363 1257 353 1254 q 383 1261 372 1260 q 405 1263 393 1263 q 426 1264 417 1264 q 501 1248 474 1264 q 529 1194 529 1232 l 529 1110 q 513 1105 522 1107 q 495 1101 504 1103 q 476 1099 486 1099 q 454 1099 465 1099 q 375 1120 406 1099 q 344 1178 344 1142 l 344 1251 m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 550 996 528 1000 q 592 984 572 992 q 628 965 611 976 q 660 938 644 953 q 703 873 690 908 q 717 786 717 838 q 717 742 717 764 q 717 697 717 719 q 717 654 717 675 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 391 844 444 881 q 297 743 338 808 q 235 590 257 678 q 214 397 214 501 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 293 0 358 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 117 642 88 532 q 202 833 147 753 q 333 956 257 913 q 501 1000 410 1000 z "},"Ģ":{"ha":833,"x_min":88,"x_max":788,"o":"m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 550 996 528 1000 q 592 984 572 992 q 628 965 611 976 q 660 938 644 953 q 703 873 690 908 q 717 786 717 838 q 717 742 717 764 q 717 697 717 719 q 717 654 717 675 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 391 844 444 881 q 297 743 338 808 q 235 590 257 678 q 214 397 214 501 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 292 0 357 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 117 642 88 532 q 202 833 147 753 q 333 956 257 913 q 501 1000 408 1000 m 396 -97 q 413 -92 406 -93 q 430 -90 421 -90 q 449 -89 439 -89 q 501 -101 483 -89 q 518 -140 518 -112 q 510 -213 518 -176 q 490 -281 503 -250 q 463 -337 478 -312 q 440 -363 451 -357 q 413 -369 428 -369 q 376 -366 393 -369 q 343 -354 358 -362 q 375 -278 364 -317 q 391 -195 386 -239 q 396 -97 396 -151 z "},"Ǧ":{"ha":833,"x_min":88,"x_max":788,"o":"m 481 1089 q 467 1089 474 1089 q 452 1089 460 1089 q 436 1089 444 1089 q 388 1094 411 1089 q 326 1125 365 1100 q 279 1158 304 1139 q 231 1199 254 1176 q 185 1247 207 1221 q 144 1304 164 1274 q 179 1316 163 1313 q 219 1319 196 1319 q 257 1312 243 1319 q 286 1286 271 1304 q 360 1221 319 1250 q 472 1158 400 1192 l 393 1176 q 440 1176 417 1176 q 485 1176 463 1176 l 407 1157 q 539 1240 488 1199 q 618 1321 590 1282 l 626 1321 q 678 1317 660 1321 q 706 1307 697 1314 q 714 1290 714 1300 q 706 1265 714 1282 q 676 1225 699 1249 q 635 1185 657 1204 q 588 1147 613 1165 q 537 1115 564 1129 q 481 1089 510 1100 m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 550 996 528 1000 q 592 984 572 992 q 628 965 611 976 q 660 938 644 953 q 703 874 690 908 q 717 786 717 839 q 717 742 717 764 q 717 698 717 719 q 717 654 717 676 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 391 844 444 881 q 297 743 338 808 q 235 590 257 678 q 214 397 214 501 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 293 0 358 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 117 642 88 532 q 202 833 147 753 q 333 956 257 913 q 501 1000 410 1000 z "},"Ḡ":{"ha":833,"x_min":88,"x_max":788,"o":"m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 550 996 528 1000 q 592 984 572 992 q 628 965 611 976 q 660 938 644 953 q 703 873 690 908 q 717 786 717 838 q 717 742 717 764 q 717 697 717 719 q 717 654 717 675 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 391 844 444 881 q 297 743 338 808 q 235 590 257 678 q 214 397 214 501 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 292 0 357 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 117 642 88 532 q 202 833 147 753 q 333 956 257 913 q 501 1000 408 1000 m 165 1257 l 649 1257 q 697 1240 685 1257 q 710 1186 710 1222 q 709 1173 710 1179 q 708 1160 708 1167 q 706 1147 707 1153 l 268 1147 q 203 1157 225 1147 q 173 1187 181 1167 q 165 1239 165 1207 q 165 1245 165 1242 q 165 1251 165 1249 q 165 1257 165 1254 z "},"H":{"ha":833,"x_min":56,"x_max":744,"o":"m 103 974 q 129 979 117 978 q 156 981 142 981 q 226 952 206 981 q 247 874 247 924 q 247 654 247 764 q 247 435 247 544 q 247 216 247 325 q 247 -4 247 107 q 226 -8 236 -7 q 204 -8 215 -8 q 157 -1 176 -8 q 127 27 138 7 q 117 83 117 47 q 117 331 117 208 q 117 577 117 454 q 117 824 117 700 q 114 901 117 864 q 103 974 111 939 m 56 474 l 489 474 q 549 467 522 474 q 594 446 575 461 l 638 467 l 638 353 l 108 353 q 82 360 92 353 q 66 379 72 367 q 58 410 60 392 q 56 451 56 429 l 56 474 m 744 -1 q 719 -6 732 -4 q 692 -8 707 -8 q 643 4 664 -8 q 612 43 622 17 q 601 108 601 69 q 601 326 601 218 q 601 541 601 433 q 601 757 601 649 q 601 976 601 865 q 622 980 611 979 q 644 981 633 981 q 681 977 664 981 q 708 965 697 974 q 726 941 719 956 q 732 901 732 926 q 732 721 732 813 q 732 535 732 629 q 732 344 732 440 q 732 150 732 247 q 735 72 732 110 q 744 -1 738 35 z "},"Ĥ":{"ha":833,"x_min":56,"x_max":744,"o":"m 103 974 q 129 979 117 978 q 156 981 142 981 q 226 952 206 981 q 247 874 247 924 q 247 654 247 764 q 247 435 247 544 q 247 216 247 325 q 247 -4 247 107 q 226 -8 236 -7 q 204 -8 215 -8 q 157 -1 176 -8 q 127 27 138 7 q 117 83 117 47 q 117 331 117 208 q 117 577 117 454 q 117 824 117 700 q 114 901 117 864 q 103 974 111 939 m 56 474 l 489 474 q 549 467 522 474 q 594 446 575 461 l 638 467 l 638 353 l 108 353 q 82 360 92 353 q 66 379 72 367 q 58 410 60 392 q 56 451 56 429 l 56 474 m 744 -1 q 719 -6 732 -4 q 692 -8 707 -8 q 643 4 664 -8 q 612 43 622 17 q 601 108 601 69 q 601 326 601 218 q 601 541 601 433 q 601 757 601 649 q 601 976 601 865 q 622 980 611 979 q 644 981 633 981 q 681 977 664 981 q 708 965 697 974 q 726 941 719 956 q 732 901 732 926 q 732 721 732 813 q 732 535 732 629 q 732 344 732 440 q 732 150 732 247 q 735 72 732 110 q 744 -1 738 35 m 357 1303 q 372 1303 364 1303 q 387 1303 379 1303 q 401 1303 394 1303 q 449 1297 426 1303 q 511 1267 472 1292 q 558 1234 533 1253 q 607 1193 583 1215 q 652 1144 631 1171 q 693 1088 674 1118 q 658 1076 675 1081 q 618 1072 642 1072 q 581 1080 594 1072 q 551 1106 568 1088 q 478 1171 518 1142 q 365 1232 438 1200 l 444 1215 q 399 1215 422 1215 q 353 1215 376 1215 l 431 1233 q 299 1151 350 1193 q 219 1071 247 1110 l 211 1071 q 160 1074 179 1071 q 132 1085 140 1078 q 124 1101 124 1093 q 132 1126 124 1110 q 161 1167 140 1143 q 202 1207 181 1188 q 249 1244 224 1226 q 301 1277 274 1263 q 357 1303 328 1292 z "},"Ḥ":{"ha":833,"x_min":56,"x_max":744,"o":"m 335 -125 q 352 -122 343 -124 q 369 -120 361 -121 q 387 -119 378 -119 q 404 -119 396 -119 q 479 -133 450 -119 q 508 -183 508 -146 l 508 -274 q 492 -276 501 -275 q 475 -278 483 -278 q 458 -279 467 -279 q 439 -279 449 -279 q 365 -265 394 -279 q 335 -215 335 -251 l 335 -125 m 103 974 q 129 979 117 978 q 156 981 142 981 q 226 952 206 981 q 247 874 247 924 q 247 654 247 764 q 247 435 247 544 q 247 216 247 325 q 247 -4 247 107 q 226 -8 236 -7 q 204 -8 215 -8 q 157 -1 176 -8 q 127 27 138 7 q 117 83 117 47 q 117 331 117 208 q 117 577 117 454 q 117 824 117 700 q 114 901 117 864 q 103 974 111 939 m 56 474 l 489 474 q 549 467 522 474 q 594 446 575 461 l 638 467 l 638 353 l 108 353 q 82 360 92 353 q 66 379 72 367 q 58 410 60 392 q 56 451 56 429 l 56 474 m 744 -1 q 719 -6 732 -4 q 692 -8 707 -8 q 643 4 664 -8 q 612 43 622 17 q 601 108 601 69 q 601 326 601 218 q 601 541 601 433 q 601 757 601 649 q 601 976 601 865 q 622 980 611 979 q 644 981 633 981 q 681 977 664 981 q 708 965 697 974 q 726 941 719 956 q 732 901 732 926 q 732 721 732 813 q 732 535 732 629 q 732 344 732 440 q 732 150 732 247 q 735 72 732 110 q 744 -1 738 35 z "},"Ḫ":{"ha":833,"x_min":56,"x_max":744,"o":"m 422 -192 q 530 -158 492 -187 q 588 -68 568 -129 q 624 -75 607 -69 q 654 -90 640 -81 q 663 -106 661 -96 q 658 -132 664 -117 q 608 -217 640 -182 q 531 -271 576 -253 q 428 -289 486 -289 l 417 -289 q 313 -271 358 -289 q 236 -217 268 -253 q 185 -132 204 -182 q 181 -106 179 -117 q 190 -90 183 -96 q 221 -75 204 -81 q 257 -68 238 -69 q 314 -158 275 -129 q 422 -192 353 -187 m 103 974 q 129 979 117 978 q 156 981 142 981 q 226 952 206 981 q 247 874 247 924 q 247 654 247 764 q 247 435 247 544 q 247 216 247 325 q 247 -4 247 107 q 226 -8 236 -7 q 204 -8 215 -8 q 157 -1 176 -8 q 127 27 138 7 q 117 83 117 47 q 117 331 117 208 q 117 577 117 454 q 117 824 117 700 q 114 901 117 864 q 103 974 111 939 m 56 474 l 489 474 q 549 467 522 474 q 594 446 575 461 l 638 467 l 638 353 l 108 353 q 82 360 92 353 q 66 379 72 367 q 58 410 60 392 q 56 451 56 429 l 56 474 m 744 -1 q 719 -6 732 -4 q 692 -8 707 -8 q 643 4 664 -8 q 612 43 622 17 q 601 108 601 69 q 601 326 601 218 q 601 541 601 433 q 601 757 601 649 q 601 976 601 865 q 622 980 611 979 q 644 981 633 981 q 681 977 664 981 q 708 965 697 974 q 726 941 719 956 q 732 901 732 926 q 732 721 732 813 q 732 535 732 629 q 732 344 732 440 q 732 150 732 247 q 735 72 732 110 q 744 -1 738 35 z "},"I":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 z "},"Ì":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 319 1299 q 355 1225 332 1260 q 412 1160 378 1190 q 489 1097 446 1129 q 464 1088 476 1092 q 440 1081 451 1083 q 414 1079 428 1079 q 376 1083 393 1079 q 340 1097 358 1086 q 296 1125 317 1110 q 258 1158 275 1140 q 227 1197 240 1176 q 206 1236 214 1217 q 201 1265 199 1253 q 219 1285 204 1278 q 249 1294 233 1290 q 281 1299 264 1297 q 319 1299 299 1300 z "},"Í":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Î":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 z "},"Ï":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 194 1261 q 225 1265 208 1264 q 256 1265 242 1265 q 303 1260 282 1265 q 337 1243 324 1256 q 350 1208 350 1231 l 350 1110 q 319 1107 336 1108 q 288 1106 303 1106 q 242 1111 264 1106 q 208 1129 221 1117 q 194 1164 194 1142 l 194 1261 m 483 1261 q 514 1265 497 1264 q 544 1265 531 1265 q 592 1260 571 1265 q 626 1243 613 1256 q 639 1208 639 1231 l 639 1110 q 608 1107 625 1108 q 576 1106 592 1106 q 531 1111 553 1106 q 497 1129 510 1117 q 483 1164 483 1142 l 483 1261 z "},"Ĩ":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 z "},"Ī":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 z "},"Ĭ":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 581 1306 q 622 1301 604 1306 q 653 1288 639 1296 q 663 1272 661 1281 q 660 1250 665 1263 q 613 1171 644 1204 q 533 1119 581 1138 q 422 1101 486 1101 l 411 1101 q 301 1119 349 1101 q 221 1171 253 1138 q 174 1250 189 1204 q 170 1272 168 1263 q 181 1288 172 1281 q 212 1301 194 1296 q 253 1306 229 1306 q 311 1230 274 1256 q 417 1199 349 1204 q 522 1230 485 1204 q 581 1306 560 1256 z "},"Į":{"ha":833,"x_min":83,"x_max":754,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 686 40 q 708 33 694 42 q 747 -6 721 25 q 729 -15 740 -11 q 704 -24 718 -19 q 603 -77 639 -42 q 568 -158 568 -112 q 587 -208 568 -192 q 640 -224 606 -224 q 689 -216 667 -224 q 733 -192 711 -208 l 742 -192 q 750 -210 747 -201 q 753 -228 753 -219 q 754 -249 754 -236 q 717 -322 754 -297 q 619 -347 681 -347 q 496 -307 540 -347 q 451 -192 451 -267 q 480 -83 451 -131 q 561 -5 508 -36 q 686 40 614 26 z "},"İ":{"ha":833,"x_min":83,"x_max":750,"o":"m 324 1253 q 342 1258 332 1256 q 362 1262 351 1260 q 384 1264 372 1264 q 406 1264 396 1264 q 481 1248 453 1264 q 510 1194 510 1232 l 510 1111 q 492 1106 501 1108 q 474 1101 483 1103 q 455 1099 465 1100 q 433 1099 444 1099 q 354 1120 385 1099 q 324 1178 324 1142 l 324 1253 m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 z "},"Ȉ":{"ha":833,"x_min":83,"x_max":750,"o":"m 206 1300 q 240 1226 218 1260 q 297 1160 263 1192 q 375 1099 331 1129 q 349 1088 361 1092 q 325 1082 338 1083 q 299 1081 313 1081 q 262 1084 279 1081 q 225 1097 244 1088 q 181 1126 201 1110 q 143 1159 161 1142 q 112 1197 125 1176 q 90 1238 99 1217 q 88 1265 85 1253 q 106 1285 90 1278 q 134 1294 119 1292 q 167 1299 149 1297 q 206 1300 185 1300 m 469 1300 q 506 1226 483 1260 q 562 1160 528 1192 q 639 1099 596 1129 q 615 1088 626 1092 q 590 1082 603 1083 q 564 1081 578 1081 q 527 1084 544 1081 q 490 1097 510 1088 q 446 1126 467 1110 q 408 1159 425 1142 q 377 1197 390 1176 q 356 1238 364 1217 q 351 1265 349 1253 q 371 1285 354 1278 q 399 1294 383 1292 q 431 1299 414 1297 q 469 1300 449 1300 m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 718 350 636 q 350 882 350 800 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 644 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 z "},"Ȋ":{"ha":833,"x_min":83,"x_max":750,"o":"m 253 1093 q 212 1099 229 1094 q 181 1113 194 1104 q 170 1127 172 1118 q 174 1149 168 1136 q 221 1228 189 1196 q 301 1279 253 1261 q 411 1297 349 1297 l 422 1297 q 533 1279 486 1297 q 613 1228 581 1261 q 660 1149 644 1196 q 663 1127 665 1136 q 653 1113 661 1118 q 622 1099 639 1104 q 581 1093 604 1094 q 522 1170 560 1144 q 417 1200 485 1196 q 311 1170 349 1196 q 253 1093 274 1144 m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 718 350 636 q 350 882 350 800 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 644 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 z "},"Ḯ":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 194 1261 q 225 1265 208 1264 q 256 1265 242 1265 q 303 1260 282 1265 q 337 1243 324 1256 q 350 1208 350 1231 l 350 1110 q 319 1107 336 1108 q 288 1106 303 1106 q 242 1111 264 1106 q 208 1129 221 1117 q 194 1164 194 1142 l 194 1261 m 483 1261 q 514 1265 497 1264 q 544 1265 531 1265 q 592 1260 571 1265 q 626 1243 613 1256 q 639 1208 639 1231 l 639 1110 q 608 1107 625 1108 q 576 1106 592 1106 q 531 1111 553 1106 q 497 1129 510 1117 q 483 1164 483 1142 l 483 1261 m 514 1538 q 552 1536 535 1538 q 583 1532 569 1535 q 611 1525 597 1529 q 631 1506 628 1518 q 629 1478 635 1493 q 608 1436 621 1456 q 578 1399 596 1417 q 541 1365 561 1381 q 497 1338 521 1350 q 460 1322 479 1326 q 419 1318 442 1318 q 394 1320 407 1318 q 369 1326 382 1322 q 344 1338 357 1331 q 422 1399 388 1368 q 479 1465 456 1431 q 514 1538 503 1499 z "},"Ỉ":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 346 1078 q 362 1114 346 1097 q 419 1146 378 1131 q 473 1169 458 1160 q 488 1193 488 1179 q 488 1201 488 1197 q 486 1208 488 1204 q 459 1215 474 1214 q 426 1217 444 1217 q 345 1205 379 1217 q 283 1167 311 1193 l 275 1167 q 267 1188 269 1178 q 264 1214 264 1199 q 270 1249 264 1233 q 290 1276 276 1264 q 311 1291 300 1285 q 338 1302 322 1297 q 372 1309 353 1307 q 415 1311 392 1311 q 504 1297 469 1311 q 556 1257 539 1282 q 574 1200 574 1232 l 574 1197 q 558 1150 574 1168 q 508 1113 543 1132 q 460 1079 471 1092 q 447 1049 450 1067 q 433 1045 442 1047 q 417 1042 425 1043 q 400 1042 408 1042 q 359 1052 372 1042 q 346 1078 346 1063 z "},"Ị":{"ha":833,"x_min":83,"x_max":750,"o":"m 483 90 l 365 90 l 383 133 q 359 175 368 149 q 350 236 350 201 q 350 394 350 314 q 350 555 350 474 q 350 717 350 636 q 350 882 350 799 l 468 882 l 450 839 q 475 797 467 824 q 483 736 483 771 q 483 578 483 658 q 483 417 483 499 q 483 254 483 336 q 483 90 483 172 m 746 0 l 139 0 q 113 6 124 0 q 96 22 103 11 q 86 47 89 32 q 83 78 83 61 q 84 97 83 88 q 86 113 85 106 q 89 126 88 121 l 643 126 q 708 115 685 126 q 741 83 732 104 q 750 35 750 63 q 750 23 750 29 q 749 11 750 17 q 746 0 747 6 m 88 972 l 696 972 q 740 949 729 972 q 750 890 750 926 q 750 879 750 885 q 749 868 750 874 q 747 857 749 863 q 744 846 746 851 l 192 846 q 110 868 136 846 q 83 935 83 890 q 83 946 83 940 q 84 956 83 951 q 85 965 85 961 q 88 972 86 969 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"J":{"ha":833,"x_min":118,"x_max":685,"o":"m 374 99 q 453 109 417 99 q 522 142 490 119 q 541 189 535 164 q 550 246 547 214 q 553 319 553 278 q 553 459 553 389 q 553 601 553 529 q 553 747 553 672 q 553 900 553 822 l 579 842 l 526 878 l 590 867 q 497 855 543 860 q 409 847 451 850 q 326 841 367 843 q 249 839 286 839 q 208 849 224 839 q 184 878 192 858 q 176 922 176 897 q 178 951 176 939 q 182 972 179 964 q 278 974 231 974 q 375 976 326 975 q 472 978 424 978 q 568 978 521 978 q 635 970 610 978 q 672 946 660 963 q 685 904 685 929 q 685 761 685 835 q 685 612 685 688 q 685 459 685 536 q 685 304 685 382 q 663 174 683 235 q 603 68 643 113 q 502 -2 563 24 q 360 -28 442 -28 q 276 -21 317 -28 q 201 -1 235 -14 q 149 33 168 13 q 132 54 139 43 q 122 81 125 65 q 118 115 118 97 q 120 150 118 135 q 126 176 122 165 l 135 176 q 208 131 172 147 q 283 106 243 114 q 374 99 322 99 z "},"Ĵ":{"ha":833,"x_min":118,"x_max":710,"o":"m 374 99 q 453 109 417 99 q 522 142 490 119 q 541 189 535 164 q 550 246 547 214 q 553 319 553 278 q 553 459 553 389 q 553 601 553 529 q 553 747 553 672 q 553 900 553 822 l 579 842 l 526 878 l 590 867 q 497 855 543 860 q 409 847 451 850 q 326 841 367 843 q 249 839 286 839 q 208 849 224 839 q 184 878 192 858 q 176 922 176 897 q 178 951 176 939 q 182 972 179 964 q 278 974 231 974 q 375 976 326 975 q 472 978 424 978 q 568 978 521 978 q 635 970 610 978 q 672 946 660 963 q 685 904 685 929 q 685 761 685 835 q 685 612 685 688 q 685 459 685 536 q 685 304 685 382 q 663 174 683 235 q 603 68 643 113 q 502 -2 563 24 q 360 -28 442 -28 q 276 -21 317 -28 q 201 -1 235 -14 q 149 33 168 13 q 132 54 139 43 q 122 81 125 65 q 118 115 118 97 q 120 150 118 135 q 126 176 122 165 l 135 176 q 208 131 172 147 q 283 106 243 114 q 374 99 322 99 m 374 1303 q 388 1303 381 1303 q 403 1303 396 1303 q 418 1303 411 1303 q 466 1297 443 1303 q 528 1267 489 1292 q 575 1234 550 1253 q 624 1193 600 1215 q 669 1144 647 1171 q 710 1088 690 1118 q 675 1076 692 1081 q 635 1072 658 1072 q 598 1080 611 1072 q 568 1106 585 1088 q 494 1171 535 1142 q 382 1232 454 1200 l 461 1215 q 416 1215 439 1215 q 369 1215 393 1215 l 447 1233 q 315 1151 367 1193 q 236 1071 264 1110 l 228 1071 q 176 1074 196 1071 q 149 1085 157 1078 q 140 1101 140 1093 q 149 1126 140 1110 q 178 1167 157 1143 q 219 1207 197 1188 q 265 1244 240 1226 q 317 1277 290 1263 q 374 1303 344 1292 z "},"K":{"ha":833,"x_min":103,"x_max":796,"o":"m 422 508 q 529 343 475 426 q 636 176 583 260 q 680 125 658 140 q 724 110 701 110 q 758 115 743 110 q 782 132 772 121 l 789 132 q 792 117 792 125 q 794 101 793 108 q 795 83 794 93 q 796 64 796 74 q 790 24 796 42 q 774 -6 785 6 q 756 -18 765 -12 q 733 -26 746 -24 q 706 -28 721 -28 q 649 -17 675 -28 q 599 17 624 -7 q 549 79 575 42 q 496 159 522 118 q 445 242 469 200 q 401 322 421 283 q 367 396 381 361 l 331 396 l 422 508 m 650 986 q 710 977 688 986 q 744 956 733 968 q 756 929 756 943 q 751 892 756 913 q 736 841 747 872 q 700 761 725 810 q 647 667 678 713 q 580 579 617 621 q 500 500 543 538 q 410 430 457 463 q 315 371 364 397 q 215 325 267 344 l 215 447 l 256 447 q 304 482 281 464 q 351 522 328 500 q 397 567 374 543 q 440 617 419 590 q 515 715 481 661 q 578 837 549 769 q 631 986 608 904 l 650 986 m 103 978 q 129 983 117 982 q 156 985 142 985 q 228 954 210 985 q 247 878 247 924 q 247 657 247 768 q 247 435 247 546 q 247 214 247 325 q 247 -8 247 103 q 226 -12 236 -11 q 204 -12 215 -12 q 140 7 163 -12 q 117 79 117 26 q 117 330 117 206 q 117 578 117 454 q 117 828 117 703 q 114 906 117 868 q 103 978 111 943 z "},"Ķ":{"ha":833,"x_min":103,"x_max":796,"o":"m 422 508 q 529 343 475 426 q 636 176 583 260 q 680 125 658 140 q 724 110 701 110 q 758 115 743 110 q 782 132 772 121 l 789 132 q 792 117 792 125 q 794 101 793 108 q 795 83 794 93 q 796 64 796 74 q 790 24 796 42 q 774 -6 785 6 q 756 -18 765 -12 q 733 -26 746 -24 q 706 -28 721 -28 q 649 -17 675 -28 q 599 17 624 -7 q 549 79 575 42 q 496 159 522 118 q 445 242 469 200 q 401 322 421 283 q 367 396 381 361 l 331 396 l 422 508 m 650 986 q 710 977 688 986 q 744 956 733 968 q 756 929 756 943 q 751 892 756 913 q 736 841 747 872 q 700 761 725 810 q 647 667 678 713 q 580 579 617 621 q 500 500 543 538 q 410 430 457 463 q 315 371 364 397 q 215 325 267 344 l 215 447 l 256 447 q 304 482 281 464 q 351 522 328 500 q 397 567 374 543 q 440 617 419 590 q 515 715 481 661 q 578 837 549 769 q 631 986 608 904 l 650 986 m 103 978 q 129 983 117 982 q 156 985 142 985 q 228 954 210 985 q 247 878 247 924 q 247 657 247 768 q 247 435 247 546 q 247 214 247 325 q 247 -8 247 103 q 226 -12 236 -11 q 204 -12 215 -12 q 140 7 163 -12 q 117 79 117 26 q 117 330 117 206 q 117 578 117 454 q 117 828 117 703 q 114 906 117 868 q 103 978 111 943 m 410 -97 q 427 -92 419 -93 q 444 -90 435 -90 q 463 -89 453 -89 q 515 -101 497 -89 q 532 -140 532 -112 q 524 -213 532 -176 q 504 -281 517 -250 q 476 -337 492 -312 q 453 -363 465 -357 q 426 -369 442 -369 q 390 -366 407 -369 q 357 -354 372 -362 q 389 -278 378 -317 q 405 -195 400 -239 q 410 -97 410 -151 z "},"L":{"ha":833,"x_min":106,"x_max":756,"o":"m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 256 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 z "},"Ĺ":{"ha":833,"x_min":106,"x_max":756,"o":"m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 256 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 m 283 1290 q 322 1289 304 1290 q 353 1285 339 1288 q 381 1278 367 1282 q 401 1258 397 1271 q 399 1231 404 1246 q 378 1189 390 1208 q 348 1151 365 1169 q 310 1118 331 1133 q 267 1090 290 1103 q 230 1075 249 1079 q 189 1071 211 1071 q 164 1073 176 1071 q 139 1079 151 1075 q 114 1090 126 1083 q 191 1152 157 1121 q 249 1217 225 1183 q 283 1290 272 1251 z "},"Ļ":{"ha":833,"x_min":106,"x_max":756,"o":"m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 256 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 m 379 -97 q 397 -92 389 -93 q 413 -90 404 -90 q 432 -89 422 -89 q 484 -101 467 -89 q 501 -140 501 -112 q 494 -213 501 -176 q 474 -281 486 -250 q 446 -337 461 -312 q 423 -363 435 -357 q 396 -369 411 -369 q 359 -366 376 -369 q 326 -354 342 -362 q 358 -278 347 -317 q 374 -195 369 -239 q 379 -97 379 -151 z "},"Ľ":{"ha":833,"x_min":106,"x_max":756,"o":"m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 256 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 m 603 979 q 652 967 635 979 q 669 929 669 954 q 663 856 669 893 q 642 788 656 819 q 610 736 628 757 q 590 722 600 725 q 565 718 581 718 q 539 721 550 718 q 515 729 528 724 q 538 809 531 776 q 548 878 544 842 q 551 969 551 915 q 577 976 565 974 q 603 979 589 979 z "},"Ḷ":{"ha":833,"x_min":106,"x_max":756,"o":"m 333 -125 q 351 -122 342 -124 q 368 -120 360 -121 q 385 -119 376 -119 q 403 -119 394 -119 q 478 -133 449 -119 q 507 -183 507 -146 l 507 -274 q 491 -276 500 -275 q 474 -278 482 -278 q 456 -279 465 -279 q 438 -279 447 -279 q 363 -265 393 -279 q 333 -215 333 -251 l 333 -125 m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 254 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 z "},"Ḻ":{"ha":833,"x_min":106,"x_max":756,"o":"m 147 -157 l 632 -157 q 681 -175 668 -157 q 693 -228 693 -193 q 692 -242 693 -235 q 691 -255 692 -249 q 689 -267 690 -261 l 251 -267 q 186 -257 208 -267 q 156 -227 164 -247 q 147 -176 147 -207 q 147 -169 147 -172 q 147 -163 147 -167 q 147 -157 147 -160 m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 254 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 z "},"M":{"ha":833,"x_min":85,"x_max":750,"o":"m 218 -8 q 201 -12 211 -11 q 181 -12 192 -12 q 139 -6 158 -12 q 108 15 119 0 q 97 56 97 31 q 97 248 97 151 q 97 442 97 344 q 97 635 97 539 q 97 829 97 732 q 94 903 97 867 q 85 972 90 939 q 111 977 99 975 q 136 980 124 979 q 160 981 149 981 q 215 972 192 981 q 252 944 238 964 q 274 889 267 925 q 292 793 282 843 q 316 692 303 743 q 347 592 329 642 q 387 496 365 543 q 438 406 408 449 l 386 446 l 449 446 l 399 407 q 448 497 425 450 q 490 597 471 544 q 526 708 510 650 q 553 833 542 767 q 574 972 565 899 q 593 977 583 975 q 613 980 603 979 q 633 981 622 981 q 694 972 672 981 q 726 940 717 963 q 736 878 736 917 q 736 767 736 824 q 736 649 736 710 q 736 526 736 589 q 736 398 736 463 q 736 269 736 333 q 736 140 736 204 q 738 90 736 115 q 742 42 739 65 q 750 -6 746 18 q 730 -10 740 -8 q 704 -12 719 -12 q 659 -5 679 -12 q 627 22 639 3 q 615 71 615 40 q 615 127 615 99 q 615 183 615 156 q 615 239 615 211 q 615 317 615 278 q 616 397 615 356 q 618 485 617 439 q 622 581 619 531 q 627 690 624 632 q 635 811 631 747 l 658 765 l 603 765 l 633 818 q 603 679 621 744 q 565 556 586 614 q 522 451 544 499 q 476 364 500 403 q 428 299 453 325 q 422 299 425 299 q 415 299 418 299 q 403 300 408 299 q 393 307 399 301 q 354 358 374 326 q 315 433 335 389 q 277 532 296 476 q 240 656 258 588 q 201 804 221 724 l 236 765 l 176 765 l 200 804 q 207 685 204 740 q 212 581 210 629 q 215 488 214 532 q 217 403 217 444 q 218 324 218 363 q 218 247 218 286 q 218 119 218 183 q 218 -8 218 56 z "},"Ṃ":{"ha":833,"x_min":85,"x_max":750,"o":"m 335 -125 q 351 -122 342 -124 q 369 -120 360 -121 q 387 -119 378 -119 q 404 -119 396 -119 q 479 -133 450 -119 q 508 -183 508 -146 l 508 -274 q 492 -276 500 -275 q 474 -278 483 -278 q 457 -279 465 -279 q 439 -279 449 -279 q 364 -265 393 -279 q 335 -215 335 -251 l 335 -125 m 218 -8 q 201 -12 211 -11 q 181 -12 192 -12 q 139 -6 158 -12 q 108 15 119 0 q 97 56 97 31 q 97 248 97 151 q 97 442 97 344 q 97 635 97 539 q 97 829 97 732 q 94 903 97 867 q 85 972 90 939 q 111 977 99 975 q 136 980 124 979 q 160 981 149 981 q 215 972 192 981 q 252 944 238 964 q 274 889 267 925 q 292 793 282 843 q 316 692 303 743 q 347 592 329 642 q 387 496 365 543 q 438 406 408 449 l 386 446 l 449 446 l 399 407 q 448 497 425 450 q 490 597 471 544 q 526 708 510 650 q 553 833 542 767 q 574 972 565 899 q 593 977 583 975 q 613 980 603 979 q 633 981 622 981 q 694 972 672 981 q 726 940 717 963 q 736 878 736 917 q 736 767 736 824 q 736 649 736 710 q 736 526 736 589 q 736 398 736 463 q 736 269 736 333 q 736 140 736 204 q 738 90 736 115 q 742 42 739 65 q 750 -6 746 18 q 730 -10 740 -8 q 704 -12 719 -12 q 659 -5 679 -12 q 627 22 639 3 q 615 71 615 40 q 615 127 615 99 q 615 183 615 156 q 615 239 615 211 q 615 317 615 278 q 616 397 615 356 q 618 485 617 439 q 622 581 619 531 q 627 690 624 632 q 635 811 631 747 l 658 765 l 603 765 l 633 818 q 603 679 621 744 q 565 556 586 614 q 522 451 544 499 q 476 364 500 403 q 428 299 453 325 q 422 299 425 299 q 415 299 418 299 q 403 300 408 299 q 393 307 399 301 q 354 358 374 326 q 315 433 335 389 q 277 532 296 476 q 240 656 258 588 q 201 804 221 724 l 236 765 l 176 765 l 200 804 q 207 685 204 740 q 212 581 210 629 q 215 488 214 532 q 217 403 217 444 q 218 324 218 363 q 218 247 218 286 q 218 119 218 183 q 218 -8 218 56 z "},"N":{"ha":833,"x_min":94,"x_max":738,"o":"m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 z "},"Ñ":{"ha":833,"x_min":94,"x_max":738,"o":"m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 z "},"Ń":{"ha":833,"x_min":94,"x_max":738,"o":"m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Ņ":{"ha":833,"x_min":94,"x_max":738,"o":"m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 m 371 -97 q 388 -92 381 -93 q 405 -90 396 -90 q 424 -89 414 -89 q 476 -101 458 -89 q 493 -140 493 -112 q 485 -213 493 -176 q 465 -281 478 -250 q 438 -337 453 -312 q 415 -363 426 -357 q 388 -369 403 -369 q 351 -366 368 -369 q 318 -354 333 -362 q 350 -278 339 -317 q 366 -195 361 -239 q 371 -97 371 -151 z "},"Ň":{"ha":833,"x_min":94,"x_max":738,"o":"m 460 1089 q 447 1089 454 1089 q 431 1089 439 1089 q 415 1089 424 1089 q 367 1095 390 1089 q 306 1125 344 1101 q 258 1159 283 1140 q 210 1199 233 1178 q 165 1248 186 1221 q 124 1306 143 1275 q 158 1317 142 1314 q 199 1319 175 1319 q 236 1312 222 1319 q 265 1286 250 1304 q 339 1222 299 1251 q 451 1160 379 1192 l 372 1178 q 419 1178 396 1178 q 464 1178 442 1178 l 386 1158 q 518 1240 467 1199 q 597 1322 569 1282 l 606 1322 q 658 1318 639 1322 q 685 1307 676 1314 q 693 1292 693 1300 q 685 1266 693 1283 q 656 1226 678 1249 q 615 1185 636 1204 q 568 1148 593 1165 q 516 1116 543 1131 q 460 1089 489 1101 m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 z "},"Ṅ":{"ha":833,"x_min":94,"x_max":738,"o":"m 324 1253 q 342 1258 332 1256 q 362 1262 351 1260 q 384 1264 372 1264 q 406 1264 396 1264 q 481 1248 453 1264 q 510 1194 510 1232 l 510 1111 q 492 1106 501 1108 q 474 1101 483 1103 q 455 1099 465 1100 q 433 1099 444 1099 q 354 1120 385 1099 q 324 1178 324 1142 l 324 1253 m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 z "},"Ṇ":{"ha":833,"x_min":94,"x_max":738,"o":"m 325 -125 q 342 -122 333 -124 q 360 -120 351 -121 q 377 -119 368 -119 q 394 -119 386 -119 q 469 -133 440 -119 q 499 -183 499 -146 l 499 -274 q 483 -276 492 -275 q 465 -278 474 -278 q 448 -279 457 -279 q 429 -279 439 -279 q 355 -265 385 -279 q 325 -215 325 -251 l 325 -125 m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 z "},"Ṉ":{"ha":833,"x_min":94,"x_max":738,"o":"m 140 -157 l 624 -157 q 672 -175 660 -157 q 685 -228 685 -193 q 684 -242 685 -235 q 683 -255 683 -249 q 681 -267 682 -261 l 243 -267 q 178 -257 200 -267 q 148 -227 156 -247 q 140 -176 140 -207 q 140 -169 140 -172 q 140 -163 140 -167 q 140 -157 140 -160 m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 z "},"O":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 z "},"Ò":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 319 1299 q 355 1225 332 1260 q 412 1160 378 1190 q 489 1097 446 1129 q 464 1088 476 1092 q 440 1081 451 1083 q 414 1079 428 1079 q 376 1083 393 1079 q 340 1097 358 1086 q 296 1125 317 1110 q 258 1158 275 1140 q 227 1197 240 1176 q 206 1236 214 1217 q 201 1265 199 1253 q 219 1285 204 1278 q 249 1294 233 1290 q 281 1299 264 1297 q 319 1299 299 1300 z "},"Ó":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Ô":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 z "},"Õ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 z "},"Ö":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 194 1261 q 225 1265 208 1264 q 256 1265 242 1265 q 303 1260 282 1265 q 337 1243 324 1256 q 350 1208 350 1231 l 350 1110 q 319 1107 336 1108 q 288 1106 303 1106 q 242 1111 264 1106 q 208 1129 221 1117 q 194 1164 194 1142 l 194 1261 m 483 1261 q 514 1265 497 1264 q 544 1265 531 1265 q 592 1260 571 1265 q 626 1243 613 1256 q 639 1208 639 1231 l 639 1110 q 608 1107 625 1108 q 576 1106 592 1106 q 531 1111 553 1106 q 497 1129 510 1117 q 483 1164 483 1142 l 483 1261 z "},"Ō":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 z "},"Ŏ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 581 1306 q 622 1301 604 1306 q 653 1288 639 1296 q 663 1272 661 1281 q 660 1250 665 1263 q 613 1171 644 1204 q 533 1119 581 1138 q 422 1101 486 1101 l 411 1101 q 301 1119 349 1101 q 221 1171 253 1138 q 174 1250 189 1204 q 170 1272 168 1263 q 181 1288 172 1281 q 212 1301 194 1296 q 253 1306 229 1306 q 311 1230 274 1256 q 417 1199 349 1204 q 522 1230 485 1204 q 581 1306 560 1256 z "},"Ő":{"ha":833,"x_min":82,"x_max":761,"o":"m 343 1290 q 381 1289 364 1290 q 412 1285 397 1288 q 440 1278 426 1282 q 460 1258 457 1271 q 458 1231 464 1246 q 438 1189 450 1208 q 408 1151 425 1169 q 370 1118 390 1133 q 326 1090 350 1103 q 290 1075 308 1079 q 249 1071 271 1071 q 224 1073 236 1071 q 199 1079 211 1075 q 174 1090 186 1083 q 251 1152 217 1121 q 308 1217 285 1183 q 343 1290 332 1251 m 642 1290 q 679 1289 663 1290 q 710 1285 696 1288 q 739 1278 725 1282 q 758 1258 756 1271 q 757 1231 761 1246 q 735 1189 749 1208 q 706 1151 722 1169 q 669 1118 689 1133 q 625 1090 649 1103 q 588 1075 606 1079 q 547 1071 569 1071 q 522 1073 535 1071 q 497 1079 510 1075 q 472 1090 485 1083 q 549 1152 515 1121 q 607 1217 583 1183 q 642 1290 631 1251 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 z "},"Ơ":{"ha":833,"x_min":82,"x_max":792,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 658 1133 q 684 1144 669 1140 q 718 1147 699 1147 q 773 1128 754 1147 q 792 1067 792 1108 q 774 978 792 1014 q 726 921 756 943 q 689 900 707 908 q 653 888 671 892 q 618 885 636 885 q 606 885 613 885 q 593 885 600 885 q 593 898 593 892 q 593 910 593 904 q 593 923 593 915 q 593 940 593 931 q 619 943 606 940 q 646 956 633 946 q 669 985 661 965 q 678 1039 678 1006 q 673 1087 678 1064 q 658 1133 668 1110 z "},"Ǫ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 614 100 q 640 117 625 108 q 675 132 656 125 q 667 113 672 125 q 650 83 661 100 q 605 10 626 49 q 571 -67 583 -29 q 558 -144 558 -106 q 577 -206 558 -187 q 629 -224 596 -224 q 678 -216 656 -224 q 724 -192 700 -208 l 732 -192 q 739 -210 736 -201 q 743 -228 742 -219 q 744 -249 744 -236 q 707 -322 744 -297 q 606 -347 669 -347 q 490 -307 531 -347 q 449 -187 449 -267 q 464 -96 449 -139 q 503 -14 479 -53 q 557 53 528 25 q 614 100 586 82 z "},"Ȍ":{"ha":833,"x_min":82,"x_max":751,"o":"m 206 1300 q 240 1226 218 1260 q 297 1160 263 1192 q 375 1099 331 1129 q 349 1088 361 1092 q 325 1082 338 1083 q 299 1081 313 1081 q 262 1084 279 1081 q 225 1097 244 1088 q 181 1126 201 1110 q 143 1159 161 1142 q 112 1197 125 1176 q 90 1238 99 1217 q 88 1265 85 1253 q 106 1285 90 1278 q 134 1294 119 1292 q 167 1299 149 1297 q 206 1300 185 1300 m 469 1300 q 506 1226 483 1260 q 562 1160 528 1192 q 639 1099 596 1129 q 615 1088 626 1092 q 590 1082 603 1083 q 564 1081 578 1081 q 527 1084 544 1081 q 490 1097 510 1088 q 446 1126 467 1110 q 408 1159 425 1142 q 377 1197 390 1176 q 356 1238 364 1217 q 351 1265 349 1253 q 371 1285 354 1278 q 399 1294 383 1292 q 431 1299 414 1297 q 469 1300 449 1300 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 z "},"Ȏ":{"ha":833,"x_min":82,"x_max":751,"o":"m 253 1093 q 212 1099 229 1094 q 181 1113 194 1104 q 170 1127 172 1118 q 174 1149 168 1136 q 221 1228 189 1196 q 301 1279 253 1261 q 411 1297 349 1297 l 422 1297 q 533 1279 486 1297 q 613 1228 581 1261 q 660 1149 644 1196 q 663 1127 665 1136 q 653 1113 661 1118 q 622 1099 639 1104 q 581 1093 604 1094 q 522 1170 560 1144 q 417 1200 485 1196 q 311 1170 349 1196 q 253 1093 274 1144 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 z "},"Ȫ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 194 1261 q 225 1265 208 1264 q 256 1265 242 1265 q 303 1260 282 1265 q 337 1243 324 1256 q 350 1208 350 1231 l 350 1110 q 319 1107 336 1108 q 288 1106 303 1106 q 242 1111 264 1106 q 208 1129 221 1117 q 194 1164 194 1142 l 194 1261 m 483 1261 q 514 1265 497 1264 q 544 1265 531 1265 q 592 1260 571 1265 q 626 1243 613 1256 q 639 1208 639 1231 l 639 1110 q 608 1107 625 1108 q 576 1106 592 1106 q 531 1111 553 1106 q 497 1129 510 1117 q 483 1164 483 1142 l 483 1261 m 143 1474 l 628 1474 q 676 1456 664 1474 q 689 1403 689 1439 q 688 1383 689 1393 q 685 1364 686 1372 l 246 1364 q 182 1374 204 1364 q 151 1403 160 1383 q 143 1454 143 1424 q 143 1465 143 1460 q 143 1474 143 1469 z "},"Ȭ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 m 143 1481 l 628 1481 q 676 1463 664 1481 q 689 1410 689 1446 q 688 1390 689 1400 q 685 1371 686 1379 l 246 1371 q 182 1381 204 1371 q 151 1410 160 1390 q 143 1461 143 1431 q 143 1472 143 1467 q 143 1481 143 1476 z "},"Ȱ":{"ha":833,"x_min":82,"x_max":751,"o":"m 324 1253 q 342 1258 332 1256 q 362 1262 351 1260 q 384 1264 372 1264 q 406 1264 396 1264 q 481 1248 453 1264 q 510 1194 510 1232 l 510 1111 q 492 1106 501 1108 q 474 1101 483 1103 q 455 1099 465 1100 q 433 1099 444 1099 q 354 1120 385 1099 q 324 1178 324 1142 l 324 1253 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 143 1444 l 628 1444 q 676 1427 664 1444 q 689 1374 689 1410 q 688 1353 689 1364 q 685 1335 686 1343 l 246 1335 q 182 1344 204 1335 q 151 1374 160 1354 q 143 1425 143 1394 q 143 1435 143 1431 q 143 1444 143 1440 z "},"Ṍ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 m 514 1544 q 552 1543 535 1544 q 583 1539 569 1542 q 611 1532 597 1536 q 631 1513 628 1525 q 629 1485 635 1500 q 608 1443 621 1463 q 578 1406 596 1424 q 541 1372 561 1388 q 497 1344 521 1357 q 460 1329 479 1333 q 419 1325 442 1325 q 394 1327 407 1325 q 369 1333 382 1329 q 344 1344 357 1338 q 422 1406 388 1375 q 479 1472 456 1438 q 514 1544 503 1506 z "},"Ṏ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 m 194 1515 q 225 1519 208 1518 q 256 1519 242 1519 q 303 1515 282 1519 q 337 1497 324 1510 q 350 1463 350 1485 l 350 1364 q 319 1361 336 1363 q 288 1360 303 1360 q 242 1365 264 1360 q 208 1383 221 1371 q 194 1418 194 1396 l 194 1515 m 483 1515 q 514 1519 497 1518 q 544 1519 531 1519 q 592 1515 571 1519 q 626 1497 613 1510 q 639 1463 639 1485 l 639 1364 q 608 1361 625 1363 q 576 1360 592 1360 q 531 1365 553 1360 q 497 1383 510 1371 q 483 1418 483 1396 l 483 1515 z "},"Ṑ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 m 319 1508 q 355 1435 332 1469 q 412 1369 378 1400 q 489 1307 446 1339 q 464 1297 476 1301 q 440 1291 451 1293 q 414 1289 428 1289 q 376 1292 393 1289 q 340 1307 358 1296 q 296 1335 317 1319 q 258 1368 275 1350 q 227 1406 240 1386 q 206 1446 214 1426 q 201 1475 199 1463 q 219 1494 204 1488 q 249 1503 233 1500 q 281 1508 264 1507 q 319 1508 299 1510 z "},"Ṓ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 m 514 1500 q 552 1499 535 1500 q 583 1494 569 1497 q 611 1488 597 1492 q 631 1468 628 1481 q 629 1440 635 1456 q 608 1399 621 1418 q 578 1361 596 1379 q 541 1328 561 1343 q 497 1300 521 1313 q 460 1285 479 1289 q 419 1281 442 1281 q 394 1283 407 1281 q 369 1289 382 1285 q 344 1300 357 1293 q 422 1362 388 1331 q 479 1427 456 1393 q 514 1500 503 1461 z "},"Ọ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"Ỏ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 349 1078 q 365 1114 349 1097 q 422 1146 381 1131 q 476 1169 461 1160 q 490 1193 490 1179 q 490 1201 490 1197 q 489 1208 490 1204 q 462 1215 476 1214 q 429 1217 447 1217 q 348 1205 382 1217 q 286 1167 314 1193 l 278 1167 q 269 1188 272 1178 q 267 1214 267 1199 q 273 1249 267 1233 q 293 1276 279 1264 q 314 1291 303 1285 q 340 1302 325 1297 q 375 1309 356 1307 q 418 1311 394 1311 q 507 1297 472 1311 q 559 1257 542 1282 q 576 1200 576 1232 l 576 1197 q 561 1150 576 1168 q 511 1113 546 1132 q 463 1079 474 1092 q 450 1049 453 1067 q 436 1045 444 1047 q 419 1042 428 1043 q 403 1042 411 1042 q 362 1052 375 1042 q 349 1078 349 1063 z "},"Ố":{"ha":833,"x_min":82,"x_max":824,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 721 1493 q 749 1492 736 1493 q 775 1488 763 1490 q 799 1483 788 1486 q 820 1463 817 1478 q 815 1424 824 1447 q 792 1378 806 1400 q 762 1337 779 1356 q 724 1300 744 1318 q 690 1281 706 1288 q 654 1274 674 1274 q 631 1276 642 1274 q 608 1282 619 1278 q 585 1292 597 1286 q 644 1349 618 1318 q 690 1417 671 1381 q 721 1493 710 1453 z "},"Ồ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 579 1492 q 610 1417 590 1453 q 656 1349 629 1381 q 715 1292 682 1318 q 692 1282 703 1286 q 670 1276 681 1278 q 647 1274 660 1274 q 610 1281 628 1274 q 575 1300 593 1288 q 538 1337 556 1318 q 506 1378 519 1356 q 485 1424 493 1400 q 481 1463 475 1447 q 506 1483 486 1478 q 526 1488 515 1486 q 551 1491 538 1490 q 579 1492 564 1492 z "},"Ổ":{"ha":833,"x_min":82,"x_max":808,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 581 1299 q 597 1335 581 1318 q 654 1367 613 1351 q 708 1390 693 1381 q 722 1414 722 1400 q 722 1422 722 1418 q 721 1429 722 1425 q 694 1436 708 1435 q 661 1438 679 1438 q 580 1426 614 1438 q 518 1388 546 1414 l 510 1388 q 501 1409 504 1399 q 499 1435 499 1419 q 505 1469 499 1454 q 525 1497 511 1485 q 546 1512 535 1506 q 572 1523 557 1518 q 607 1530 588 1528 q 650 1532 626 1532 q 739 1517 704 1532 q 791 1478 774 1503 q 808 1421 808 1453 l 808 1418 q 793 1371 808 1389 q 743 1333 778 1353 q 695 1300 706 1313 q 682 1269 685 1288 q 668 1266 676 1268 q 651 1263 660 1264 q 635 1263 643 1263 q 594 1273 607 1263 q 581 1299 581 1283 z "},"Ỗ":{"ha":833,"x_min":82,"x_max":751,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 m 528 1439 q 573 1452 556 1439 q 606 1504 590 1465 l 614 1504 q 624 1478 621 1493 q 628 1447 628 1464 q 624 1411 628 1428 q 615 1382 621 1394 q 585 1347 606 1360 q 536 1333 565 1333 q 467 1348 497 1333 q 410 1381 436 1363 q 358 1415 385 1400 q 301 1429 332 1429 q 255 1413 271 1429 q 221 1365 239 1397 l 213 1365 q 203 1388 207 1375 q 200 1418 200 1401 q 203 1455 200 1439 q 214 1486 207 1471 q 246 1523 224 1510 q 301 1536 268 1536 q 363 1521 335 1536 q 416 1487 390 1506 q 469 1453 442 1468 q 528 1439 496 1439 z "},"Ộ":{"ha":833,"x_min":82,"x_max":751,"o":"m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 z "},"Ớ":{"ha":833,"x_min":82,"x_max":792,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 658 1133 q 684 1144 669 1140 q 718 1147 699 1147 q 773 1128 754 1147 q 792 1067 792 1108 q 774 978 792 1014 q 726 921 756 943 q 689 900 707 908 q 653 888 671 892 q 618 885 636 885 q 606 885 613 885 q 593 885 600 885 q 593 898 593 892 q 593 910 593 904 q 593 923 593 915 q 593 940 593 931 q 619 943 606 940 q 646 956 633 946 q 669 985 661 965 q 678 1039 678 1006 q 673 1087 678 1064 q 658 1133 668 1110 m 488 1297 q 516 1296 503 1297 q 542 1292 529 1294 q 565 1288 554 1290 q 587 1267 583 1282 q 582 1228 590 1251 q 559 1182 572 1204 q 528 1141 546 1160 q 490 1104 511 1122 q 456 1085 472 1092 q 421 1078 440 1078 q 397 1080 408 1078 q 375 1086 386 1082 q 351 1096 364 1090 q 411 1153 385 1122 q 457 1221 438 1185 q 488 1297 476 1257 z "},"Ờ":{"ha":833,"x_min":82,"x_max":792,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 658 1133 q 684 1144 669 1140 q 718 1147 699 1147 q 773 1128 754 1147 q 792 1067 792 1108 q 774 978 792 1014 q 726 921 756 943 q 689 900 707 908 q 653 888 671 892 q 618 885 636 885 q 606 885 613 885 q 593 885 600 885 q 593 898 593 892 q 593 910 593 904 q 593 923 593 915 q 593 940 593 931 q 619 943 606 940 q 646 956 633 946 q 669 985 661 965 q 678 1039 678 1006 q 673 1087 678 1064 q 658 1133 668 1110 m 346 1296 q 376 1221 357 1257 q 422 1153 396 1185 q 482 1096 449 1122 q 458 1086 469 1090 q 437 1080 447 1082 q 414 1078 426 1078 q 377 1085 394 1078 q 342 1104 360 1092 q 304 1141 322 1122 q 273 1182 286 1160 q 251 1228 260 1204 q 247 1267 242 1251 q 272 1288 253 1282 q 293 1292 282 1290 q 317 1295 304 1294 q 346 1296 331 1296 z "},"Ở":{"ha":833,"x_min":82,"x_max":792,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 658 1133 q 684 1144 669 1140 q 718 1147 699 1147 q 773 1128 754 1147 q 792 1067 792 1108 q 774 978 792 1014 q 726 921 756 943 q 689 900 707 908 q 653 888 671 892 q 618 885 636 885 q 606 885 613 885 q 593 885 600 885 q 593 898 593 892 q 593 910 593 904 q 593 923 593 915 q 593 940 593 931 q 619 943 606 940 q 646 956 633 946 q 669 985 661 965 q 678 1039 678 1006 q 673 1087 678 1064 q 658 1133 668 1110 m 349 1078 q 365 1114 349 1097 q 422 1146 381 1131 q 476 1169 461 1160 q 490 1193 490 1179 q 490 1201 490 1197 q 489 1208 490 1204 q 462 1215 476 1214 q 429 1217 447 1217 q 348 1205 382 1217 q 286 1167 314 1193 l 278 1167 q 269 1188 272 1178 q 267 1214 267 1199 q 273 1249 267 1233 q 293 1276 279 1264 q 314 1291 303 1285 q 340 1302 325 1297 q 375 1309 356 1307 q 418 1311 394 1311 q 507 1297 472 1311 q 559 1257 542 1282 q 576 1200 576 1232 l 576 1197 q 561 1150 576 1168 q 511 1113 546 1132 q 463 1079 474 1092 q 450 1049 453 1067 q 436 1045 444 1047 q 419 1042 428 1043 q 403 1042 411 1042 q 362 1052 375 1042 q 349 1078 349 1063 z "},"Ỡ":{"ha":833,"x_min":82,"x_max":792,"o":"m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 658 1133 q 684 1144 669 1140 q 718 1147 699 1147 q 773 1128 754 1147 q 792 1067 792 1108 q 774 978 792 1014 q 726 921 756 943 q 689 900 707 908 q 653 888 671 892 q 618 885 636 885 q 606 885 613 885 q 593 885 600 885 q 593 898 593 892 q 593 910 593 904 q 593 923 593 915 q 593 940 593 931 q 619 943 606 940 q 646 956 633 946 q 669 985 661 965 q 678 1039 678 1006 q 673 1087 678 1064 q 658 1133 668 1110 m 496 1210 q 541 1223 524 1210 q 574 1275 558 1236 l 582 1275 q 592 1249 589 1264 q 596 1218 596 1235 q 592 1182 596 1199 q 583 1153 589 1165 q 553 1117 574 1131 q 504 1104 533 1104 q 435 1119 465 1104 q 378 1152 404 1133 q 326 1185 353 1171 q 269 1200 300 1200 q 223 1184 239 1200 q 189 1136 207 1168 l 181 1136 q 172 1159 175 1146 q 168 1189 168 1172 q 172 1226 168 1210 q 182 1257 175 1242 q 214 1294 192 1281 q 269 1307 236 1307 q 331 1292 303 1307 q 384 1258 358 1276 q 437 1224 410 1239 q 496 1210 464 1210 z "},"Ợ":{"ha":833,"x_min":82,"x_max":792,"o":"m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 m 418 1000 q 604 942 531 1000 q 715 773 678 883 q 751 504 751 663 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 658 1135 q 685 1145 671 1142 q 719 1149 700 1149 q 774 1128 756 1149 q 792 1067 792 1108 q 774 978 792 1014 q 726 921 756 943 q 690 900 708 908 q 653 889 671 892 q 618 886 636 886 q 606 886 613 886 q 593 886 600 886 q 593 898 593 892 q 593 910 593 904 q 593 924 593 917 q 593 940 593 932 q 621 944 607 940 q 646 956 635 947 q 669 986 661 965 q 678 1039 678 1007 q 673 1087 678 1064 q 658 1135 668 1110 z "},"P":{"ha":833,"x_min":49,"x_max":743,"o":"m 269 -1 q 249 -6 258 -4 q 225 -7 239 -7 q 149 19 172 -7 q 125 104 125 46 q 125 302 125 203 q 125 500 125 401 q 125 698 125 599 q 125 896 125 797 l 242 896 l 224 854 q 250 815 243 839 q 257 757 257 790 q 257 556 257 657 q 257 350 257 454 q 257 140 257 246 q 260 69 257 104 q 269 -1 263 33 m 53 972 q 234 994 149 989 q 393 1000 319 1000 q 520 985 464 1000 q 618 945 576 971 q 688 883 660 919 q 729 799 715 846 q 743 700 743 753 l 743 676 q 711 496 743 576 q 624 358 679 415 q 500 272 569 301 q 357 242 431 242 q 304 254 326 242 q 265 288 282 267 l 233 282 l 233 378 q 277 367 256 371 q 328 364 299 364 q 436 385 385 364 q 527 447 488 407 q 590 546 567 488 q 613 676 613 604 l 613 697 q 606 765 613 733 q 588 822 600 797 q 503 862 549 850 q 389 874 458 874 q 257 867 318 874 q 153 853 196 860 q 97 846 111 846 q 60 867 71 846 q 49 931 49 888 q 50 953 49 943 q 53 972 51 963 z "},"Q":{"ha":833,"x_min":82,"x_max":807,"o":"m 569 104 q 603 42 586 72 q 640 -18 621 13 q 688 -68 664 -54 q 739 -82 713 -82 q 770 -77 757 -82 q 793 -62 783 -72 l 800 -62 q 806 -92 804 -78 q 807 -122 807 -106 q 799 -173 807 -153 q 779 -206 792 -193 q 751 -222 767 -217 q 714 -228 735 -228 q 657 -217 683 -228 q 606 -182 631 -206 q 556 -119 581 -158 q 513 -40 532 -79 q 479 40 493 0 l 569 104 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 418 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 z "},"R":{"ha":833,"x_min":49,"x_max":781,"o":"m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 z "},"Ŕ":{"ha":833,"x_min":49,"x_max":781,"o":"m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 m 513 1290 q 551 1289 533 1290 q 582 1285 568 1288 q 610 1278 596 1282 q 630 1258 626 1271 q 628 1231 633 1246 q 607 1189 619 1208 q 577 1151 594 1169 q 540 1118 560 1133 q 496 1090 519 1103 q 459 1075 478 1079 q 418 1071 440 1071 q 393 1073 406 1071 q 368 1079 381 1075 q 343 1090 356 1083 q 420 1152 386 1121 q 478 1217 454 1183 q 513 1290 501 1251 z "},"Ŗ":{"ha":833,"x_min":49,"x_max":781,"o":"m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 m 374 -97 q 391 -92 383 -93 q 408 -90 399 -90 q 426 -89 417 -89 q 478 -101 461 -89 q 496 -140 496 -112 q 488 -213 496 -176 q 468 -281 481 -250 q 440 -337 456 -312 q 417 -363 429 -357 q 390 -369 406 -369 q 353 -366 371 -369 q 321 -354 336 -362 q 353 -278 342 -317 q 369 -195 364 -239 q 374 -97 374 -151 z "},"Ř":{"ha":833,"x_min":49,"x_max":781,"o":"m 460 1089 q 445 1089 453 1089 q 430 1089 438 1089 q 415 1089 422 1089 q 366 1094 389 1089 q 306 1125 343 1100 q 258 1158 282 1139 q 209 1199 233 1176 q 163 1247 185 1221 q 124 1304 142 1274 q 158 1316 140 1313 q 197 1319 175 1319 q 235 1312 221 1319 q 265 1286 249 1304 q 338 1221 297 1250 q 450 1158 378 1192 l 371 1176 q 417 1176 394 1176 q 464 1176 440 1176 l 385 1157 q 517 1240 465 1199 q 596 1321 568 1282 l 604 1321 q 656 1317 638 1321 q 684 1307 675 1314 q 693 1290 693 1300 q 685 1265 693 1282 q 654 1225 676 1249 q 614 1185 636 1204 q 567 1147 592 1165 q 515 1115 542 1129 q 460 1089 488 1100 m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 z "},"Ȑ":{"ha":833,"x_min":49,"x_max":781,"o":"m 204 1299 q 240 1225 217 1260 q 296 1160 263 1190 q 374 1097 329 1129 q 349 1088 361 1092 q 324 1081 336 1083 q 299 1079 313 1079 q 260 1083 278 1079 q 225 1097 243 1086 q 181 1125 201 1110 q 142 1158 160 1140 q 112 1197 125 1176 q 90 1236 99 1217 q 86 1265 83 1253 q 104 1285 89 1278 q 133 1294 118 1290 q 165 1299 147 1297 q 204 1299 183 1300 m 469 1299 q 504 1225 482 1260 q 560 1160 526 1190 q 639 1097 594 1129 q 613 1088 625 1092 q 589 1081 601 1083 q 563 1079 576 1079 q 526 1083 543 1079 q 490 1097 508 1086 q 445 1125 465 1110 q 407 1158 425 1140 q 376 1197 389 1176 q 354 1236 363 1217 q 351 1265 349 1253 q 369 1285 354 1278 q 398 1294 383 1290 q 431 1299 413 1297 q 469 1299 449 1300 m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 z "},"Ȓ":{"ha":833,"x_min":49,"x_max":781,"o":"m 251 1093 q 210 1099 228 1094 q 179 1111 193 1103 q 169 1127 171 1118 q 172 1149 168 1136 q 220 1228 189 1194 q 299 1279 251 1261 q 410 1297 347 1297 l 421 1297 q 533 1279 485 1297 q 613 1228 581 1261 q 660 1149 644 1194 q 663 1127 664 1136 q 651 1111 661 1118 q 622 1099 639 1103 q 581 1093 604 1094 q 522 1169 560 1143 q 415 1200 483 1194 q 310 1169 347 1194 q 251 1093 272 1143 m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 z "},"Ṛ":{"ha":833,"x_min":49,"x_max":781,"o":"m 329 -125 q 345 -122 336 -124 q 363 -120 354 -121 q 381 -119 372 -119 q 399 -119 390 -119 q 474 -133 444 -119 q 503 -183 503 -146 l 503 -274 q 485 -276 494 -275 q 468 -278 476 -278 q 451 -279 460 -279 q 433 -279 442 -279 q 358 -265 388 -279 q 329 -215 329 -251 l 329 -125 m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 z "},"Ṟ":{"ha":833,"x_min":49,"x_max":781,"o":"m 143 -157 l 628 -157 q 676 -175 663 -157 q 689 -228 689 -193 q 688 -242 689 -235 q 686 -255 688 -249 q 685 -267 685 -261 l 246 -267 q 182 -257 204 -267 q 151 -227 160 -247 q 143 -176 143 -207 q 143 -169 143 -172 q 143 -163 143 -167 q 143 -157 143 -160 m 486 368 q 547 272 517 318 q 614 176 578 225 q 661 126 638 142 q 713 111 685 111 q 742 117 729 111 q 764 133 754 122 l 772 133 q 778 104 776 118 q 781 74 781 90 q 774 26 781 46 q 757 -6 768 6 q 731 -22 746 -17 q 692 -28 715 -28 q 634 -17 661 -28 q 581 16 607 -7 q 531 76 556 39 q 456 194 490 136 q 389 311 421 251 l 486 368 m 53 972 q 230 994 147 988 q 388 1000 313 1000 q 542 978 476 1000 q 651 916 608 956 q 716 824 694 876 q 738 710 738 772 l 738 685 q 705 516 738 592 q 617 385 672 440 q 492 301 561 331 q 349 272 422 272 q 299 278 318 272 q 265 299 281 285 l 229 292 l 229 396 q 264 387 246 389 q 315 385 282 385 q 465 420 400 385 q 568 523 531 456 q 606 683 606 590 l 606 703 q 599 775 606 744 q 576 829 592 806 q 494 864 538 854 q 389 874 451 874 q 256 867 315 874 q 155 853 196 860 q 94 846 114 846 q 60 867 72 846 q 49 931 49 889 q 50 953 49 943 q 53 972 51 963 m 272 -3 q 249 -8 260 -6 q 224 -10 239 -10 q 150 15 175 -10 q 125 92 125 40 q 125 292 125 192 q 125 494 125 393 q 125 695 125 594 q 125 896 125 796 l 242 896 l 224 854 q 249 817 242 840 q 257 757 257 793 q 257 549 257 656 q 257 335 257 443 q 257 121 257 228 q 260 52 257 78 q 272 -3 263 26 z "},"S":{"ha":833,"x_min":94,"x_max":746,"o":"m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 z "},"Ś":{"ha":833,"x_min":94,"x_max":746,"o":"m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 m 563 1290 q 601 1289 583 1290 q 632 1285 618 1288 q 660 1278 646 1282 q 680 1258 676 1271 q 678 1231 683 1246 q 657 1189 669 1208 q 627 1151 644 1169 q 590 1118 610 1133 q 546 1090 569 1103 q 509 1075 528 1079 q 468 1071 490 1071 q 443 1073 456 1071 q 418 1079 431 1075 q 393 1090 406 1083 q 470 1152 436 1121 q 528 1217 504 1183 q 563 1290 551 1251 z "},"Ŝ":{"ha":833,"x_min":94,"x_max":760,"o":"m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 m 424 1303 q 438 1303 431 1303 q 453 1303 446 1303 q 468 1303 461 1303 q 516 1297 493 1303 q 578 1267 539 1292 q 625 1234 600 1253 q 674 1193 650 1215 q 719 1144 697 1171 q 760 1088 740 1118 q 725 1076 742 1081 q 685 1072 708 1072 q 648 1080 661 1072 q 618 1106 635 1088 q 544 1171 585 1142 q 432 1232 504 1200 l 511 1215 q 466 1215 489 1215 q 419 1215 443 1215 l 497 1233 q 365 1151 417 1193 q 286 1071 314 1110 l 278 1071 q 226 1074 246 1071 q 199 1085 207 1078 q 190 1101 190 1093 q 199 1126 190 1110 q 228 1167 207 1143 q 269 1207 247 1188 q 315 1244 290 1226 q 367 1277 340 1263 q 424 1303 394 1292 z "},"Ş":{"ha":833,"x_min":94,"x_max":746,"o":"m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 m 565 -175 q 515 -285 565 -244 q 378 -325 465 -325 q 305 -314 332 -325 q 265 -284 278 -303 q 253 -243 253 -265 q 254 -224 253 -233 q 258 -206 256 -215 q 264 -186 260 -196 l 272 -186 q 313 -215 292 -206 q 372 -224 335 -224 q 433 -208 411 -224 q 456 -161 456 -192 q 438 -124 456 -137 q 383 -111 419 -111 q 363 -105 371 -111 q 356 -89 356 -99 q 357 -62 356 -76 q 361 -33 358 -47 q 369 -5 364 -18 q 379 18 374 8 q 392 29 383 25 q 415 35 400 33 q 457 36 431 38 q 451 16 454 28 q 447 -8 449 4 q 444 -31 446 -19 q 440 -50 442 -42 l 440 -58 q 531 -92 496 -62 q 565 -175 565 -122 z "},"Š":{"ha":833,"x_min":94,"x_max":746,"o":"m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 m 508 1089 q 495 1089 503 1089 q 480 1089 488 1089 q 464 1089 472 1089 q 416 1095 439 1089 q 354 1125 393 1101 q 307 1159 332 1140 q 258 1199 282 1178 q 213 1248 235 1221 q 172 1306 192 1275 q 207 1317 190 1314 q 247 1319 224 1319 q 285 1312 271 1319 q 314 1286 299 1304 q 388 1222 347 1251 q 500 1160 428 1192 l 421 1178 q 467 1178 444 1178 q 513 1178 490 1178 l 435 1158 q 567 1240 515 1199 q 646 1322 618 1282 l 654 1322 q 706 1318 688 1322 q 733 1307 725 1314 q 742 1292 742 1300 q 734 1266 742 1283 q 704 1226 726 1249 q 663 1185 685 1204 q 617 1148 642 1165 q 565 1116 592 1131 q 508 1089 538 1101 z "},"Ș":{"ha":833,"x_min":94,"x_max":746,"o":"m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 m 378 -97 q 395 -92 388 -93 q 412 -90 403 -90 q 431 -89 421 -89 q 483 -101 465 -89 q 500 -140 500 -112 q 492 -213 500 -176 q 472 -281 485 -250 q 444 -337 460 -312 q 422 -363 433 -357 q 394 -369 410 -369 q 358 -366 375 -369 q 325 -354 340 -362 q 357 -278 346 -317 q 373 -195 368 -239 q 378 -97 378 -151 z "},"Ṡ":{"ha":833,"x_min":94,"x_max":746,"o":"m 374 1251 q 390 1257 381 1254 q 410 1261 400 1260 q 433 1263 421 1263 q 456 1264 444 1264 q 531 1248 503 1264 q 558 1194 558 1232 l 558 1110 q 542 1105 551 1107 q 524 1101 533 1103 q 504 1099 514 1099 q 483 1099 494 1099 q 404 1120 435 1099 q 374 1178 374 1142 l 374 1251 m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 z "},"Ṣ":{"ha":833,"x_min":94,"x_max":746,"o":"m 333 -125 q 349 -122 340 -124 q 367 -120 358 -121 q 385 -119 375 -119 q 403 -119 394 -119 q 477 -133 449 -119 q 506 -183 506 -146 l 506 -274 q 490 -276 499 -275 q 472 -278 481 -278 q 455 -279 464 -279 q 438 -279 446 -279 q 363 -265 392 -279 q 333 -215 333 -251 l 333 -125 m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 z "},"Ṥ":{"ha":833,"x_min":94,"x_max":746,"o":"m 236 1260 q 253 1265 243 1263 q 273 1269 263 1267 q 295 1272 283 1271 q 318 1272 307 1272 q 392 1256 364 1272 q 421 1201 421 1239 l 421 1118 q 403 1113 413 1115 q 385 1109 394 1111 q 366 1106 376 1107 q 346 1106 356 1106 q 267 1127 297 1106 q 236 1185 236 1149 l 236 1260 m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 m 625 1294 q 663 1293 646 1294 q 694 1289 681 1292 q 722 1281 708 1286 q 742 1261 739 1274 q 740 1233 746 1249 q 719 1192 732 1211 q 690 1155 707 1172 q 652 1122 672 1138 q 608 1093 632 1106 q 572 1079 590 1083 q 531 1075 554 1075 q 506 1076 518 1075 q 481 1082 493 1078 q 456 1093 468 1086 q 533 1155 500 1124 q 590 1221 567 1186 q 625 1294 614 1256 z "},"Ṧ":{"ha":833,"x_min":94,"x_max":746,"o":"m 510 1089 q 495 1089 503 1089 q 481 1089 488 1089 q 465 1089 474 1089 q 416 1094 439 1089 q 356 1125 393 1100 q 308 1158 332 1139 q 260 1199 283 1176 q 214 1247 236 1221 q 174 1304 192 1274 q 208 1316 190 1313 q 249 1319 225 1319 q 285 1312 271 1319 q 315 1286 299 1304 q 388 1221 347 1250 q 500 1158 428 1192 l 421 1176 q 467 1176 444 1176 q 514 1176 490 1176 l 435 1157 q 567 1240 515 1199 q 646 1321 618 1282 l 654 1321 q 706 1317 688 1321 q 734 1307 725 1314 q 743 1290 743 1300 q 735 1265 743 1282 q 704 1225 726 1249 q 664 1185 686 1204 q 617 1147 642 1165 q 565 1115 592 1129 q 510 1089 538 1100 m 374 1464 q 390 1469 381 1467 q 410 1474 400 1472 q 433 1476 421 1475 q 456 1476 444 1476 q 531 1460 503 1476 q 558 1407 558 1444 l 558 1322 q 542 1317 551 1319 q 524 1313 533 1315 q 504 1311 514 1311 q 483 1311 494 1311 q 404 1333 435 1311 q 374 1390 374 1354 l 374 1464 m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 z "},"Ṩ":{"ha":833,"x_min":94,"x_max":746,"o":"m 333 -125 q 349 -122 340 -124 q 367 -120 358 -121 q 385 -119 375 -119 q 403 -119 394 -119 q 477 -133 449 -119 q 506 -183 506 -146 l 506 -274 q 490 -276 499 -275 q 472 -278 481 -278 q 455 -279 464 -279 q 438 -279 446 -279 q 363 -265 392 -279 q 333 -215 333 -251 l 333 -125 m 374 1251 q 390 1257 381 1254 q 410 1261 400 1260 q 433 1263 421 1263 q 456 1264 444 1264 q 531 1248 503 1264 q 558 1194 558 1232 l 558 1110 q 542 1105 551 1107 q 524 1101 533 1103 q 504 1099 514 1099 q 483 1099 494 1099 q 404 1120 435 1099 q 374 1178 374 1142 l 374 1251 m 519 1000 q 603 984 569 1000 q 664 942 638 968 q 702 876 693 914 q 711 796 711 838 q 711 738 711 767 q 711 679 711 708 q 711 621 711 650 q 694 615 704 618 q 669 613 683 613 q 606 631 628 613 q 585 690 585 650 q 585 769 585 739 q 586 822 586 800 q 585 860 586 843 q 579 900 585 878 l 610 847 q 569 869 592 864 q 524 874 547 874 q 427 849 476 874 q 336 787 378 825 q 269 703 294 749 q 243 611 243 657 l 243 604 q 256 560 244 581 q 303 519 268 539 q 406 474 338 499 l 528 429 q 631 383 589 407 q 697 332 672 358 q 734 277 722 306 q 746 219 746 249 l 746 207 q 708 86 746 138 q 597 7 669 35 q 419 -21 524 -21 q 299 -10 356 -21 q 199 19 242 0 q 129 64 156 39 q 103 106 113 81 q 94 165 94 131 q 95 191 94 179 q 98 213 96 203 q 103 232 100 224 l 111 232 q 238 138 163 169 q 419 106 313 106 q 554 129 500 106 q 632 197 608 153 l 632 203 q 613 251 629 229 q 566 292 596 274 q 492 326 536 311 l 368 372 q 245 426 294 400 q 168 480 196 453 q 128 536 140 507 q 117 597 117 565 l 117 614 q 151 749 117 681 q 242 874 185 817 q 372 965 300 931 q 519 1000 443 1000 z "},"T":{"ha":833,"x_min":49,"x_max":781,"o":"m 53 972 l 721 972 q 767 949 754 972 q 781 890 781 926 q 779 865 781 876 q 775 846 778 854 l 165 846 q 97 856 122 846 q 60 887 71 867 q 49 935 49 907 q 50 955 49 946 q 53 972 51 964 m 494 -1 q 474 -6 485 -4 q 449 -7 464 -7 q 372 22 393 -7 q 350 104 350 51 q 350 298 350 201 q 350 491 350 394 q 350 684 350 588 q 350 879 350 781 l 467 879 l 450 839 q 469 814 463 828 q 480 782 476 800 q 483 740 483 764 q 483 547 483 646 q 483 346 483 447 q 483 140 483 244 q 485 69 483 104 q 494 -1 488 33 z "},"Ţ":{"ha":833,"x_min":49,"x_max":781,"o":"m 53 972 l 721 972 q 767 949 754 972 q 781 890 781 926 q 779 865 781 876 q 775 846 778 854 l 165 846 q 97 856 122 846 q 60 887 71 867 q 49 935 49 907 q 50 955 49 946 q 53 972 51 964 m 494 -1 q 474 -6 485 -4 q 449 -7 464 -7 q 372 22 393 -7 q 350 104 350 51 q 350 298 350 201 q 350 491 350 394 q 350 684 350 588 q 350 879 350 781 l 467 879 l 450 839 q 469 814 463 828 q 480 782 476 800 q 483 740 483 764 q 483 547 483 646 q 483 346 483 447 q 483 140 483 244 q 485 69 483 104 q 494 -1 488 33 m 565 -167 q 515 -276 565 -236 q 378 -317 465 -317 q 305 -306 332 -317 q 265 -276 278 -294 q 253 -235 253 -257 q 254 -216 253 -225 q 258 -197 256 -207 q 264 -178 260 -187 l 272 -178 q 313 -206 292 -197 q 372 -215 335 -215 q 433 -199 411 -215 q 456 -153 456 -183 q 438 -116 456 -129 q 383 -103 419 -103 q 363 -97 371 -103 q 356 -81 356 -90 q 357 -53 356 -68 q 361 -24 358 -39 q 369 3 364 -10 q 379 26 374 17 q 392 38 383 33 q 415 44 400 42 q 457 44 431 46 q 451 24 454 36 q 447 1 449 13 q 444 -22 446 -11 q 440 -42 442 -33 l 440 -50 q 531 -84 496 -54 q 565 -167 565 -114 z "},"Ť":{"ha":833,"x_min":49,"x_max":781,"o":"m 458 1089 q 444 1089 451 1089 q 428 1089 436 1089 q 414 1089 421 1089 q 365 1094 388 1089 q 304 1125 342 1100 q 256 1158 281 1139 q 208 1199 232 1176 q 162 1247 183 1221 q 122 1304 140 1274 q 156 1316 139 1313 q 196 1319 174 1319 q 233 1312 219 1319 q 264 1286 247 1304 q 336 1221 296 1250 q 449 1158 376 1192 l 369 1176 q 416 1176 393 1176 q 463 1176 439 1176 l 383 1157 q 515 1240 464 1199 q 594 1321 567 1282 l 603 1321 q 655 1317 636 1321 q 683 1307 674 1314 q 692 1290 692 1300 q 683 1265 692 1282 q 653 1225 675 1249 q 613 1185 635 1204 q 565 1147 590 1165 q 513 1115 540 1129 q 458 1089 486 1100 m 53 972 l 721 972 q 767 949 754 972 q 781 890 781 926 q 779 865 781 876 q 775 846 778 854 l 165 846 q 97 856 122 846 q 60 887 71 867 q 49 935 49 907 q 50 955 49 946 q 53 972 51 964 m 494 -1 q 474 -6 485 -4 q 449 -7 464 -7 q 372 22 393 -7 q 350 104 350 51 q 350 298 350 201 q 350 491 350 394 q 350 684 350 588 q 350 879 350 781 l 467 879 l 450 839 q 469 814 463 828 q 480 782 476 800 q 483 740 483 764 q 483 547 483 646 q 483 346 483 447 q 483 140 483 244 q 485 69 483 104 q 494 -1 488 33 z "},"Ț":{"ha":833,"x_min":49,"x_max":781,"o":"m 53 972 l 721 972 q 767 949 754 972 q 781 890 781 926 q 779 865 781 876 q 775 846 778 854 l 165 846 q 97 856 122 846 q 60 887 71 867 q 49 935 49 907 q 50 955 49 946 q 53 972 51 964 m 494 -1 q 474 -6 485 -4 q 449 -7 464 -7 q 372 22 393 -7 q 350 104 350 51 q 350 298 350 201 q 350 491 350 394 q 350 684 350 588 q 350 879 350 781 l 467 879 l 450 839 q 469 814 463 828 q 480 782 476 800 q 483 740 483 764 q 483 547 483 646 q 483 346 483 447 q 483 140 483 244 q 485 69 483 104 q 494 -1 488 33 m 378 -89 q 403 -83 390 -85 q 431 -81 415 -81 q 481 -94 465 -81 q 497 -136 497 -107 q 490 -207 497 -169 q 472 -277 483 -244 q 447 -331 460 -310 q 427 -354 438 -347 q 401 -361 417 -361 q 366 -358 382 -361 q 335 -347 350 -354 q 359 -272 350 -312 q 373 -186 368 -232 q 378 -89 378 -140 z "},"Ṭ":{"ha":833,"x_min":49,"x_max":781,"o":"m 333 -111 q 349 -108 340 -110 q 367 -106 358 -107 q 385 -106 375 -106 q 403 -106 394 -106 q 478 -119 449 -106 q 507 -169 507 -132 l 507 -260 q 490 -262 499 -261 q 472 -265 481 -264 q 455 -265 464 -265 q 438 -265 446 -265 q 363 -251 392 -265 q 333 -201 333 -237 l 333 -111 m 53 972 l 721 972 q 767 949 754 972 q 781 890 781 926 q 779 865 781 876 q 775 846 778 854 l 165 846 q 97 856 122 846 q 60 887 71 867 q 49 935 49 907 q 50 955 49 946 q 53 972 51 964 m 494 -1 q 474 -6 485 -4 q 449 -7 464 -7 q 372 22 393 -7 q 350 104 350 51 q 350 298 350 201 q 350 491 350 394 q 350 684 350 588 q 350 879 350 781 l 467 879 l 450 839 q 469 814 463 828 q 480 782 476 800 q 483 740 483 764 q 483 547 483 646 q 483 346 483 447 q 483 140 483 244 q 485 69 483 104 q 494 -1 488 33 z "},"Ṯ":{"ha":833,"x_min":49,"x_max":781,"o":"m 147 -149 l 632 -149 q 680 -167 667 -149 q 693 -221 693 -185 q 692 -233 693 -226 q 690 -247 692 -240 q 689 -260 689 -254 l 250 -260 q 185 -250 208 -260 q 155 -219 163 -240 q 147 -168 147 -199 q 147 -161 147 -164 q 147 -155 147 -158 q 147 -149 147 -151 m 53 972 l 721 972 q 767 949 754 972 q 781 890 781 926 q 779 865 781 876 q 775 846 778 854 l 165 846 q 97 856 122 846 q 60 887 71 867 q 49 935 49 907 q 50 955 49 946 q 53 972 51 964 m 494 -1 q 474 -6 485 -4 q 449 -7 464 -7 q 372 22 393 -7 q 350 104 350 51 q 350 298 350 201 q 350 491 350 394 q 350 684 350 588 q 350 879 350 781 l 467 879 l 450 839 q 469 814 463 828 q 480 782 476 800 q 483 740 483 764 q 483 547 483 646 q 483 346 483 447 q 483 140 483 244 q 485 69 483 104 q 494 -1 488 33 z "},"U":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 z "},"Ù":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 319 1299 q 355 1225 332 1260 q 412 1160 378 1190 q 489 1097 446 1129 q 464 1088 476 1092 q 440 1081 451 1083 q 414 1079 428 1079 q 376 1083 393 1079 q 340 1097 358 1086 q 296 1125 317 1110 q 258 1158 275 1140 q 227 1197 240 1176 q 206 1236 214 1217 q 201 1265 199 1253 q 219 1285 204 1278 q 249 1294 233 1290 q 281 1299 264 1297 q 319 1299 299 1300 z "},"Ú":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Û":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 z "},"Ü":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 194 1261 q 225 1265 208 1264 q 256 1265 242 1265 q 303 1260 282 1265 q 337 1243 324 1256 q 350 1208 350 1231 l 350 1110 q 319 1107 336 1108 q 288 1106 303 1106 q 242 1111 264 1106 q 208 1129 221 1117 q 194 1164 194 1142 l 194 1261 m 483 1261 q 514 1265 497 1264 q 544 1265 531 1265 q 592 1260 571 1265 q 626 1243 613 1256 q 639 1208 639 1231 l 639 1110 q 608 1107 625 1108 q 576 1106 592 1106 q 531 1111 553 1106 q 497 1129 510 1117 q 483 1164 483 1142 l 483 1261 z "},"Ũ":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 z "},"Ū":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 z "},"Ŭ":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 581 1306 q 622 1301 604 1306 q 653 1288 639 1296 q 663 1272 661 1281 q 660 1250 665 1263 q 613 1171 644 1204 q 533 1119 581 1138 q 422 1101 486 1101 l 411 1101 q 301 1119 349 1101 q 221 1171 253 1138 q 174 1250 189 1204 q 170 1272 168 1263 q 181 1288 172 1281 q 212 1301 194 1296 q 253 1306 229 1306 q 311 1230 274 1256 q 417 1199 349 1204 q 522 1230 485 1204 q 581 1306 560 1256 z "},"Ů":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 421 1404 q 507 1384 469 1404 q 565 1328 544 1364 q 585 1246 585 1293 l 585 1236 q 537 1117 585 1164 q 413 1071 489 1071 q 295 1115 342 1071 q 249 1231 249 1160 l 249 1239 q 271 1325 249 1288 q 332 1383 293 1363 q 421 1404 371 1404 m 422 1325 q 358 1303 381 1325 q 336 1243 336 1282 l 336 1233 q 343 1199 336 1215 q 361 1172 350 1183 q 385 1163 374 1165 q 413 1160 397 1160 q 475 1181 453 1160 q 497 1239 497 1203 l 497 1247 q 490 1284 497 1268 q 469 1311 483 1300 q 449 1322 460 1318 q 422 1325 438 1325 z "},"Ű":{"ha":833,"x_min":75,"x_max":761,"o":"m 343 1290 q 381 1289 364 1290 q 412 1285 397 1288 q 440 1278 426 1282 q 460 1258 457 1271 q 458 1231 464 1246 q 438 1189 450 1208 q 408 1151 425 1169 q 370 1118 390 1133 q 326 1090 350 1103 q 290 1075 308 1079 q 249 1071 271 1071 q 224 1073 236 1071 q 199 1079 211 1075 q 174 1090 186 1083 q 251 1152 217 1121 q 308 1217 285 1183 q 343 1290 332 1251 m 642 1290 q 679 1289 663 1290 q 710 1285 696 1288 q 739 1278 725 1282 q 758 1258 756 1271 q 757 1231 761 1246 q 735 1189 749 1208 q 706 1151 722 1169 q 669 1118 689 1133 q 625 1090 649 1103 q 588 1075 606 1079 q 547 1071 569 1071 q 522 1073 535 1071 q 497 1079 510 1075 q 472 1090 485 1083 q 549 1152 515 1121 q 607 1217 583 1183 q 642 1290 631 1251 m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 459 601 374 q 601 631 601 544 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 948 711 965 q 732 900 732 931 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 592 240 678 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 z "},"Ų":{"ha":833,"x_min":75,"x_max":756,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 688 40 q 709 33 696 42 q 749 -6 722 25 q 731 -15 742 -11 q 706 -24 719 -19 q 605 -77 640 -42 q 569 -158 569 -112 q 588 -208 569 -192 q 642 -224 607 -224 q 690 -216 668 -224 q 735 -192 713 -208 l 743 -192 q 751 -210 749 -201 q 755 -228 754 -219 q 756 -249 756 -236 q 719 -322 756 -297 q 621 -347 682 -347 q 497 -307 542 -347 q 453 -192 453 -267 q 481 -83 453 -131 q 563 -5 510 -36 q 688 40 615 26 z "},"Ư":{"ha":833,"x_min":75,"x_max":863,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 729 1172 q 755 1183 740 1179 q 789 1186 769 1186 q 844 1167 825 1186 q 863 1106 863 1147 q 844 1017 863 1053 q 797 960 826 982 q 760 939 778 947 q 724 927 742 931 q 689 924 707 924 q 677 924 683 924 q 664 924 671 924 q 664 937 664 931 q 664 949 664 943 q 664 962 664 954 q 664 979 664 969 q 690 982 676 979 q 717 994 704 985 q 740 1024 732 1004 q 749 1078 749 1044 q 744 1126 749 1103 q 729 1172 739 1149 z "},"Ȕ":{"ha":833,"x_min":75,"x_max":749,"o":"m 206 1300 q 240 1226 218 1260 q 297 1160 263 1192 q 375 1099 331 1129 q 349 1088 361 1092 q 325 1082 338 1083 q 299 1081 313 1081 q 262 1084 279 1081 q 225 1097 244 1088 q 181 1126 201 1110 q 143 1159 161 1142 q 112 1197 125 1176 q 90 1238 99 1217 q 88 1265 85 1253 q 106 1285 90 1278 q 134 1294 119 1292 q 167 1299 149 1297 q 206 1300 185 1300 m 469 1300 q 506 1226 483 1260 q 562 1160 528 1192 q 639 1099 596 1129 q 615 1088 626 1092 q 590 1082 603 1083 q 564 1081 578 1081 q 527 1084 544 1081 q 490 1097 510 1088 q 446 1126 467 1110 q 408 1159 425 1142 q 377 1197 390 1176 q 356 1238 364 1217 q 351 1265 349 1253 q 371 1285 354 1278 q 399 1294 383 1292 q 431 1299 414 1297 q 469 1300 449 1300 m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 459 601 374 q 601 631 601 544 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 948 711 965 q 732 900 732 931 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 592 240 678 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 z "},"Ȗ":{"ha":833,"x_min":75,"x_max":749,"o":"m 253 1093 q 212 1099 229 1094 q 181 1113 194 1104 q 170 1127 172 1118 q 174 1149 168 1136 q 221 1228 189 1196 q 301 1279 253 1261 q 411 1297 349 1297 l 422 1297 q 533 1279 486 1297 q 613 1228 581 1261 q 660 1149 644 1196 q 663 1127 665 1136 q 653 1113 661 1118 q 622 1099 639 1104 q 581 1093 604 1094 q 522 1170 560 1144 q 417 1200 485 1196 q 311 1170 349 1196 q 253 1093 274 1144 m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 459 601 374 q 601 631 601 544 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 948 711 965 q 732 900 732 931 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 592 240 678 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 z "},"Ṹ":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 m 514 1544 q 552 1543 535 1544 q 583 1539 569 1542 q 611 1532 597 1536 q 631 1513 628 1525 q 629 1485 635 1500 q 608 1443 621 1463 q 578 1406 596 1424 q 541 1372 561 1388 q 497 1344 521 1357 q 460 1329 479 1333 q 419 1325 442 1325 q 394 1327 407 1325 q 369 1333 382 1329 q 344 1344 357 1338 q 422 1406 388 1375 q 479 1472 456 1438 q 514 1544 503 1506 z "},"Ṻ":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 m 194 1471 q 225 1474 208 1474 q 256 1475 242 1475 q 303 1470 282 1475 q 337 1453 324 1465 q 350 1418 350 1440 l 350 1319 q 319 1317 336 1318 q 288 1315 303 1315 q 242 1321 264 1315 q 208 1339 221 1326 q 194 1374 194 1351 l 194 1471 m 483 1471 q 514 1474 497 1474 q 544 1475 531 1475 q 592 1470 571 1475 q 626 1453 613 1465 q 639 1418 639 1440 l 639 1319 q 608 1317 625 1318 q 576 1315 592 1315 q 531 1321 553 1315 q 497 1339 510 1326 q 483 1374 483 1351 l 483 1471 z "},"Ụ":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 325 -125 q 341 -122 332 -124 q 358 -120 350 -121 q 376 -119 367 -119 q 394 -119 385 -119 q 469 -133 440 -119 q 497 -183 497 -146 l 497 -274 q 481 -276 490 -275 q 464 -278 472 -278 q 447 -279 456 -279 q 428 -279 438 -279 q 354 -265 383 -279 q 325 -215 325 -251 l 325 -125 z "},"Ủ":{"ha":833,"x_min":75,"x_max":749,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 347 1078 q 363 1114 347 1097 q 421 1146 379 1131 q 474 1169 460 1160 q 489 1193 489 1179 q 489 1201 489 1197 q 488 1208 489 1204 q 460 1215 475 1214 q 428 1217 446 1217 q 347 1205 381 1217 q 285 1167 313 1193 l 276 1167 q 268 1188 271 1178 q 265 1214 265 1199 q 272 1249 265 1233 q 292 1276 278 1264 q 313 1291 301 1285 q 339 1302 324 1297 q 374 1309 354 1307 q 417 1311 393 1311 q 506 1297 471 1311 q 558 1257 540 1282 q 575 1200 575 1232 l 575 1197 q 560 1150 575 1168 q 510 1113 544 1132 q 462 1079 472 1092 q 449 1049 451 1067 q 435 1045 443 1047 q 418 1042 426 1043 q 401 1042 410 1042 q 360 1052 374 1042 q 347 1078 347 1063 z "},"Ứ":{"ha":833,"x_min":75,"x_max":863,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 729 1172 q 755 1183 740 1179 q 789 1186 769 1186 q 844 1167 825 1186 q 863 1106 863 1147 q 844 1017 863 1053 q 797 960 826 982 q 760 939 778 947 q 724 927 742 931 q 689 924 707 924 q 677 924 683 924 q 664 924 671 924 q 664 937 664 931 q 664 949 664 943 q 664 962 664 954 q 664 979 664 969 q 690 982 676 979 q 717 994 704 985 q 740 1024 732 1004 q 749 1078 749 1044 q 744 1126 749 1103 q 729 1172 739 1149 m 488 1297 q 516 1296 503 1297 q 542 1292 529 1294 q 565 1288 554 1290 q 587 1267 583 1282 q 582 1228 590 1251 q 559 1182 572 1204 q 528 1141 546 1160 q 490 1104 511 1122 q 456 1085 472 1092 q 421 1078 440 1078 q 397 1080 408 1078 q 375 1086 386 1082 q 351 1096 364 1090 q 411 1153 385 1122 q 457 1221 438 1185 q 488 1297 476 1257 z "},"Ừ":{"ha":833,"x_min":75,"x_max":863,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 729 1172 q 755 1183 740 1179 q 789 1186 769 1186 q 844 1167 825 1186 q 863 1106 863 1147 q 844 1017 863 1053 q 797 960 826 982 q 760 939 778 947 q 724 927 742 931 q 689 924 707 924 q 677 924 683 924 q 664 924 671 924 q 664 937 664 931 q 664 949 664 943 q 664 962 664 954 q 664 979 664 969 q 690 982 676 979 q 717 994 704 985 q 740 1024 732 1004 q 749 1078 749 1044 q 744 1126 749 1103 q 729 1172 739 1149 m 346 1296 q 376 1221 357 1257 q 422 1153 396 1185 q 482 1096 449 1122 q 458 1086 469 1090 q 437 1080 447 1082 q 414 1078 426 1078 q 377 1085 394 1078 q 342 1104 360 1092 q 304 1141 322 1122 q 273 1182 286 1160 q 251 1228 260 1204 q 247 1267 242 1251 q 272 1288 253 1282 q 293 1292 282 1290 q 317 1295 304 1294 q 346 1296 331 1296 z "},"Ử":{"ha":833,"x_min":75,"x_max":863,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 729 1172 q 755 1183 740 1179 q 789 1186 769 1186 q 844 1167 825 1186 q 863 1106 863 1147 q 844 1017 863 1053 q 797 960 826 982 q 760 939 778 947 q 724 927 742 931 q 689 924 707 924 q 677 924 683 924 q 664 924 671 924 q 664 937 664 931 q 664 949 664 943 q 664 962 664 954 q 664 979 664 969 q 690 982 676 979 q 717 994 704 985 q 740 1024 732 1004 q 749 1078 749 1044 q 744 1126 749 1103 q 729 1172 739 1149 m 347 1078 q 363 1114 347 1097 q 421 1146 379 1131 q 474 1169 460 1160 q 489 1193 489 1179 q 489 1201 489 1197 q 488 1208 489 1204 q 460 1215 475 1214 q 428 1217 446 1217 q 347 1205 381 1217 q 285 1167 313 1193 l 276 1167 q 268 1188 271 1178 q 265 1214 265 1199 q 272 1249 265 1233 q 292 1276 278 1264 q 313 1291 301 1285 q 339 1302 324 1297 q 374 1309 354 1307 q 417 1311 393 1311 q 506 1297 471 1311 q 558 1257 540 1282 q 575 1200 575 1232 l 575 1197 q 560 1150 575 1168 q 510 1113 544 1132 q 462 1079 472 1092 q 449 1049 451 1067 q 435 1045 443 1047 q 418 1042 426 1043 q 401 1042 410 1042 q 360 1052 374 1042 q 347 1078 347 1063 z "},"Ữ":{"ha":833,"x_min":75,"x_max":863,"o":"m 749 -6 q 735 -10 742 -8 q 722 -12 729 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 152 608 97 q 601 286 601 207 q 601 460 601 374 q 601 631 601 546 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 947 711 965 q 732 900 732 929 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 593 240 679 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 729 1172 q 755 1183 740 1179 q 789 1186 769 1186 q 844 1167 825 1186 q 863 1106 863 1147 q 844 1017 863 1053 q 797 960 826 982 q 760 939 778 947 q 724 927 742 931 q 689 924 707 924 q 677 924 683 924 q 664 924 671 924 q 664 937 664 931 q 664 949 664 943 q 664 962 664 954 q 664 979 664 969 q 690 982 676 979 q 717 994 704 985 q 740 1024 732 1004 q 749 1078 749 1044 q 744 1126 749 1103 q 729 1172 739 1149 m 499 1210 q 544 1223 526 1210 q 576 1275 561 1236 l 585 1275 q 595 1249 592 1264 q 599 1218 599 1235 q 595 1182 599 1199 q 586 1153 592 1165 q 556 1117 576 1131 q 507 1104 536 1104 q 438 1119 468 1104 q 381 1152 407 1133 q 329 1185 356 1171 q 272 1200 303 1200 q 226 1184 242 1200 q 192 1136 210 1168 l 183 1136 q 174 1159 178 1146 q 171 1189 171 1172 q 174 1226 171 1210 q 185 1257 178 1242 q 217 1294 194 1281 q 272 1307 239 1307 q 333 1292 306 1307 q 387 1258 361 1276 q 440 1224 413 1239 q 499 1210 467 1210 z "},"Ự":{"ha":833,"x_min":75,"x_max":863,"o":"m 325 -125 q 341 -122 332 -124 q 358 -120 350 -121 q 376 -119 367 -119 q 394 -119 386 -119 q 469 -133 440 -119 q 497 -183 497 -146 l 497 -274 q 481 -276 490 -275 q 464 -278 472 -278 q 447 -279 456 -279 q 429 -279 438 -279 q 354 -265 383 -279 q 325 -215 325 -251 l 325 -125 m 749 -6 q 735 -10 742 -8 q 721 -12 728 -11 q 706 -12 714 -12 q 668 -8 685 -12 q 639 15 651 -3 q 617 65 626 32 q 605 151 608 97 q 601 286 601 206 q 601 459 601 374 q 601 631 601 544 q 601 803 601 717 q 601 975 601 889 q 615 979 608 978 q 631 981 622 981 q 646 982 639 982 q 693 974 675 982 q 722 948 711 965 q 732 900 732 931 q 732 710 732 806 q 732 520 732 615 q 732 330 732 425 q 732 139 732 235 q 735 65 732 100 q 749 -6 739 29 m 307 -22 q 222 -1 261 -22 q 155 56 183 19 q 111 137 126 92 q 96 231 96 182 q 96 422 96 326 q 96 613 96 517 q 96 803 96 710 q 91 899 96 857 q 75 978 86 942 q 101 984 89 982 q 129 986 114 986 q 190 967 165 986 q 228 901 215 947 q 240 775 240 856 q 237 592 240 678 q 226 419 233 507 q 207 225 218 331 q 249 142 219 168 q 328 117 278 117 q 431 135 382 117 q 530 201 479 153 q 640 340 581 249 l 640 182 l 600 182 q 511 62 558 107 q 413 -3 464 17 q 307 -22 361 -22 m 729 1172 q 755 1183 740 1179 q 789 1186 769 1186 q 844 1167 825 1186 q 863 1106 863 1147 q 844 1017 863 1053 q 797 960 826 982 q 760 939 778 947 q 724 927 742 931 q 689 924 707 924 q 677 924 683 924 q 664 924 671 924 q 664 937 664 931 q 664 949 664 943 q 664 962 664 954 q 664 979 664 969 q 690 982 676 979 q 717 994 704 985 q 740 1024 732 1004 q 749 1078 749 1044 q 744 1126 749 1103 q 729 1172 739 1149 z "},"V":{"ha":833,"x_min":79,"x_max":751,"o":"m 133 985 q 178 977 160 985 q 206 951 196 969 q 218 900 217 933 q 238 629 225 750 q 272 410 250 508 q 330 232 294 313 q 417 82 365 151 l 365 90 l 467 90 l 417 82 q 497 206 464 142 q 550 347 529 271 q 584 516 571 424 q 606 723 597 608 q 619 978 614 838 q 647 983 633 982 q 671 985 660 985 q 717 976 700 985 q 743 947 735 967 q 749 897 751 928 q 733 687 743 786 q 710 501 724 588 q 676 341 696 415 q 628 203 656 267 q 564 88 600 139 q 482 -6 528 36 q 451 -12 468 -10 q 419 -14 435 -14 q 365 -5 388 -14 q 321 26 343 4 q 251 120 282 67 q 194 241 219 174 q 150 389 169 308 q 117 563 131 469 q 93 763 103 657 q 88 832 90 797 q 83 903 85 867 q 79 978 82 940 q 106 983 93 982 q 133 985 118 985 z "},"W":{"ha":833,"x_min":46,"x_max":783,"o":"m 46 972 q 67 977 57 975 q 85 980 76 979 q 104 981 94 981 q 150 972 133 981 q 174 944 167 963 q 182 897 182 926 q 185 638 182 750 q 194 444 188 526 q 213 298 201 361 q 240 185 224 235 q 278 90 256 136 l 238 124 l 297 124 l 256 92 q 316 226 293 154 q 351 383 339 299 q 369 569 364 468 q 374 790 374 671 l 394 790 q 435 784 421 790 q 457 765 450 778 q 465 733 464 753 q 471 575 467 651 q 483 430 475 499 q 503 299 490 361 q 536 185 517 238 q 583 90 556 133 l 529 124 l 614 124 l 561 92 q 602 210 585 151 q 631 338 619 269 q 647 496 642 407 q 653 701 653 585 q 651 972 654 817 q 670 977 661 975 q 688 980 679 979 q 706 981 697 981 q 751 972 735 981 q 776 939 768 964 q 783 864 783 914 q 780 642 783 740 q 770 465 776 543 q 752 322 764 386 q 723 204 740 258 q 683 100 706 150 q 631 -3 660 50 q 622 -7 626 -6 q 614 -10 618 -8 q 605 -12 610 -11 q 596 -12 600 -12 q 556 -3 571 -12 q 525 28 542 6 q 492 85 508 53 q 462 162 476 118 q 436 263 447 206 q 417 394 425 321 l 453 329 l 386 329 l 424 394 q 408 287 417 336 q 386 197 399 238 q 360 122 374 157 q 329 57 346 88 q 294 -3 313 26 q 285 -8 290 -6 q 274 -11 279 -10 q 261 -12 268 -12 q 224 -2 242 -12 q 192 26 207 8 q 140 106 163 64 q 101 207 118 149 q 74 347 85 265 q 58 544 64 429 q 51 814 51 658 q 50 899 51 860 q 46 972 49 938 z "},"Ŵ":{"ha":833,"x_min":46,"x_max":783,"o":"m 46 972 q 67 977 57 975 q 85 980 76 979 q 104 981 94 981 q 150 972 133 981 q 174 944 167 963 q 182 897 182 926 q 185 638 182 750 q 194 444 188 526 q 213 298 201 361 q 240 185 224 235 q 278 90 256 136 l 238 124 l 297 124 l 256 92 q 316 226 293 154 q 351 383 339 299 q 369 569 364 468 q 374 790 374 671 l 394 790 q 435 784 421 790 q 457 765 450 778 q 465 733 464 753 q 471 575 467 651 q 483 430 475 499 q 503 299 490 361 q 536 185 517 238 q 583 90 556 133 l 529 124 l 614 124 l 561 92 q 602 210 585 151 q 631 338 619 269 q 647 496 642 407 q 653 701 653 585 q 651 972 654 817 q 670 977 661 975 q 688 980 679 979 q 706 981 697 981 q 751 972 735 981 q 776 939 768 964 q 783 864 783 914 q 780 642 783 740 q 770 465 776 543 q 752 322 764 386 q 723 204 740 258 q 683 100 706 150 q 631 -3 660 50 q 622 -7 626 -6 q 614 -10 618 -8 q 605 -12 610 -11 q 596 -12 600 -12 q 556 -3 571 -12 q 525 28 542 6 q 492 85 508 53 q 462 162 476 118 q 436 263 447 206 q 417 394 425 321 l 453 329 l 386 329 l 424 394 q 408 287 417 336 q 386 197 399 238 q 360 122 374 157 q 329 57 346 88 q 294 -3 313 26 q 285 -8 290 -6 q 274 -11 279 -10 q 261 -12 268 -12 q 224 -2 242 -12 q 192 26 207 8 q 140 106 163 64 q 101 207 118 149 q 74 347 85 265 q 58 544 64 429 q 51 814 51 658 q 50 899 51 860 q 46 972 49 938 m 374 1303 q 388 1303 381 1303 q 403 1303 396 1303 q 418 1303 411 1303 q 466 1297 443 1303 q 528 1267 489 1292 q 575 1234 550 1253 q 624 1193 600 1215 q 669 1144 647 1171 q 710 1088 690 1118 q 675 1076 692 1081 q 635 1072 658 1072 q 598 1080 611 1072 q 568 1106 585 1088 q 494 1171 535 1142 q 382 1232 454 1200 l 461 1215 q 416 1215 439 1215 q 369 1215 393 1215 l 447 1233 q 315 1151 367 1193 q 236 1071 264 1110 l 228 1071 q 176 1074 196 1071 q 149 1085 157 1078 q 140 1101 140 1093 q 149 1126 140 1110 q 178 1167 157 1143 q 219 1207 197 1188 q 265 1244 240 1226 q 317 1277 290 1263 q 374 1303 344 1292 z "},"Ẁ":{"ha":833,"x_min":46,"x_max":783,"o":"m 46 972 q 67 977 57 975 q 85 980 76 979 q 104 981 94 981 q 150 972 133 981 q 174 944 167 963 q 182 897 182 926 q 185 638 182 750 q 194 444 188 526 q 213 298 201 361 q 240 185 224 235 q 278 90 256 136 l 238 124 l 297 124 l 256 92 q 316 226 293 154 q 351 383 339 299 q 369 569 364 468 q 374 790 374 671 l 394 790 q 435 784 421 790 q 457 765 450 778 q 465 733 464 753 q 471 575 467 651 q 483 430 475 499 q 503 299 490 361 q 536 185 517 238 q 583 90 556 133 l 529 124 l 614 124 l 561 92 q 602 210 585 151 q 631 338 619 269 q 647 496 642 407 q 653 701 653 585 q 651 972 654 817 q 670 977 661 975 q 688 980 679 979 q 706 981 697 981 q 751 972 735 981 q 776 939 768 964 q 783 864 783 914 q 780 642 783 740 q 770 465 776 543 q 752 322 764 386 q 723 204 740 258 q 683 100 706 150 q 631 -3 660 50 q 622 -7 626 -6 q 614 -10 618 -8 q 605 -12 610 -11 q 596 -12 600 -12 q 556 -3 571 -12 q 525 28 542 6 q 492 85 508 53 q 462 162 476 118 q 436 263 447 206 q 417 394 425 321 l 453 329 l 386 329 l 424 394 q 408 287 417 336 q 386 197 399 238 q 360 122 374 157 q 329 57 346 88 q 294 -3 313 26 q 285 -8 290 -6 q 274 -11 279 -10 q 261 -12 268 -12 q 224 -2 242 -12 q 192 26 207 8 q 140 106 163 64 q 101 207 118 149 q 74 347 85 265 q 58 544 64 429 q 51 814 51 658 q 50 899 51 860 q 46 972 49 938 m 318 1299 q 353 1225 331 1260 q 410 1160 376 1190 q 488 1097 444 1129 q 463 1088 475 1092 q 438 1081 450 1083 q 413 1079 426 1079 q 374 1083 392 1079 q 339 1097 357 1086 q 294 1125 315 1110 q 256 1158 274 1140 q 226 1197 239 1176 q 204 1236 213 1217 q 200 1265 197 1253 q 218 1285 203 1278 q 247 1294 232 1290 q 280 1299 263 1297 q 318 1299 297 1300 z "},"Ẃ":{"ha":833,"x_min":46,"x_max":783,"o":"m 46 972 q 67 977 57 975 q 85 980 76 979 q 104 981 94 981 q 150 972 133 981 q 174 944 167 963 q 182 897 182 926 q 185 638 182 750 q 194 444 188 526 q 213 298 201 361 q 240 185 224 235 q 278 90 256 136 l 238 124 l 297 124 l 256 92 q 316 226 293 154 q 351 383 339 299 q 369 569 364 468 q 374 790 374 671 l 394 790 q 435 784 421 790 q 457 765 450 778 q 465 733 464 753 q 471 575 467 651 q 483 430 475 499 q 503 299 490 361 q 536 185 517 238 q 583 90 556 133 l 529 124 l 614 124 l 561 92 q 602 210 585 151 q 631 338 619 269 q 647 496 642 407 q 653 701 653 585 q 651 972 654 817 q 670 977 661 975 q 688 980 679 979 q 706 981 697 981 q 751 972 735 981 q 776 939 768 964 q 783 864 783 914 q 780 642 783 740 q 770 465 776 543 q 752 322 764 386 q 723 204 740 258 q 683 100 706 150 q 631 -3 660 50 q 622 -7 626 -6 q 614 -10 618 -8 q 605 -12 610 -11 q 596 -12 600 -12 q 556 -3 571 -12 q 525 28 542 6 q 492 85 508 53 q 462 162 476 118 q 436 263 447 206 q 417 394 425 321 l 453 329 l 386 329 l 424 394 q 408 287 417 336 q 386 197 399 238 q 360 122 374 157 q 329 57 346 88 q 294 -3 313 26 q 285 -8 290 -6 q 274 -11 279 -10 q 261 -12 268 -12 q 224 -2 242 -12 q 192 26 207 8 q 140 106 163 64 q 101 207 118 149 q 74 347 85 265 q 58 544 64 429 q 51 814 51 658 q 50 899 51 860 q 46 972 49 938 m 513 1290 q 551 1289 533 1290 q 582 1285 568 1288 q 610 1278 596 1282 q 630 1258 626 1271 q 628 1231 633 1246 q 607 1189 619 1208 q 577 1151 594 1169 q 540 1118 560 1133 q 496 1090 519 1103 q 459 1075 478 1079 q 418 1071 440 1071 q 393 1073 406 1071 q 368 1079 381 1075 q 343 1090 356 1083 q 420 1152 386 1121 q 478 1217 454 1183 q 513 1290 501 1251 z "},"Ẅ":{"ha":833,"x_min":46,"x_max":783,"o":"m 46 972 q 67 977 57 975 q 85 980 76 979 q 104 981 94 981 q 150 972 133 981 q 174 944 167 963 q 182 897 182 926 q 185 638 182 750 q 194 444 188 526 q 213 298 201 361 q 240 185 224 235 q 278 90 256 136 l 238 124 l 297 124 l 256 92 q 316 226 293 154 q 351 383 339 299 q 369 569 364 468 q 374 790 374 671 l 394 790 q 435 784 421 790 q 457 765 450 778 q 465 733 464 753 q 471 575 467 651 q 483 430 475 499 q 503 299 490 361 q 536 185 517 238 q 583 90 556 133 l 529 124 l 614 124 l 561 92 q 602 210 585 151 q 631 338 619 269 q 647 496 642 407 q 653 701 653 585 q 651 972 654 817 q 670 977 661 975 q 688 980 679 979 q 706 981 697 981 q 751 972 735 981 q 776 939 768 964 q 783 864 783 914 q 780 642 783 740 q 770 465 776 543 q 752 322 764 386 q 723 204 740 258 q 683 100 706 150 q 631 -3 660 50 q 622 -7 626 -6 q 614 -10 618 -8 q 605 -12 610 -11 q 596 -12 600 -12 q 556 -3 571 -12 q 525 28 542 6 q 492 85 508 53 q 462 162 476 118 q 436 263 447 206 q 417 394 425 321 l 453 329 l 386 329 l 424 394 q 408 287 417 336 q 386 197 399 238 q 360 122 374 157 q 329 57 346 88 q 294 -3 313 26 q 285 -8 290 -6 q 274 -11 279 -10 q 261 -12 268 -12 q 224 -2 242 -12 q 192 26 207 8 q 140 106 163 64 q 101 207 118 149 q 74 347 85 265 q 58 544 64 429 q 51 814 51 658 q 50 899 51 860 q 46 972 49 938 m 193 1261 q 224 1265 207 1264 q 254 1265 240 1265 q 301 1260 281 1265 q 335 1243 322 1256 q 349 1208 349 1231 l 349 1110 q 318 1107 335 1108 q 286 1106 301 1106 q 241 1111 263 1106 q 206 1129 219 1117 q 193 1164 193 1142 l 193 1261 m 482 1261 q 513 1265 496 1264 q 543 1265 529 1265 q 590 1260 569 1265 q 624 1243 611 1256 q 638 1208 638 1231 l 638 1110 q 607 1107 624 1108 q 575 1106 590 1106 q 530 1111 551 1106 q 495 1129 508 1117 q 482 1164 482 1142 l 482 1261 z "},"X":{"ha":833,"x_min":39,"x_max":797,"o":"m 732 -15 q 678 -10 700 -15 q 639 5 656 -6 q 608 31 622 15 q 531 119 572 68 q 446 231 489 169 q 358 360 403 293 l 326 415 q 215 607 268 510 q 117 798 163 704 q 39 972 72 892 q 74 980 57 978 q 110 982 92 982 q 161 976 140 982 q 197 958 182 971 q 219 921 211 944 q 272 797 242 863 q 340 658 301 731 q 426 506 379 585 l 461 443 q 628 197 540 314 q 797 0 715 81 q 768 -11 785 -7 q 732 -15 751 -15 m 694 981 q 742 973 722 981 q 768 946 761 965 q 763 892 775 926 q 720 789 743 839 q 669 692 697 739 q 610 598 642 644 q 540 503 578 551 q 456 407 501 456 l 381 522 l 426 522 q 481 606 456 564 q 528 690 506 647 q 569 777 550 732 q 607 871 589 822 q 642 974 625 919 q 667 979 654 978 q 694 981 679 981 m 126 -12 q 76 -3 97 -12 q 49 25 56 6 q 56 72 43 44 q 94 148 72 110 q 141 224 115 186 q 196 302 167 263 q 260 381 225 342 q 335 461 294 421 l 397 344 l 361 344 q 319 281 339 314 q 279 215 299 249 q 243 144 260 181 q 212 72 226 108 q 185 -3 197 35 q 158 -10 174 -7 q 126 -12 142 -12 z "},"Y":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 z "},"Ý":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Ŷ":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 375 1303 q 390 1303 382 1303 q 405 1303 397 1303 q 419 1303 413 1303 q 467 1297 444 1303 q 529 1267 490 1292 q 576 1234 551 1253 q 625 1193 601 1215 q 670 1144 649 1171 q 711 1088 692 1118 q 676 1076 693 1081 q 636 1072 660 1072 q 599 1080 613 1072 q 569 1106 586 1088 q 496 1171 536 1142 q 383 1232 456 1200 l 463 1215 q 417 1215 440 1215 q 371 1215 394 1215 l 449 1233 q 317 1151 368 1193 q 238 1071 265 1110 l 229 1071 q 178 1074 197 1071 q 150 1085 158 1078 q 142 1101 142 1093 q 150 1126 142 1110 q 179 1167 158 1143 q 220 1207 199 1188 q 267 1244 242 1226 q 319 1277 292 1263 q 375 1303 346 1292 z "},"Ÿ":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 194 1261 q 225 1265 208 1264 q 256 1265 242 1265 q 303 1260 282 1265 q 337 1243 324 1256 q 350 1208 350 1231 l 350 1110 q 319 1107 336 1108 q 288 1106 303 1106 q 242 1111 264 1106 q 208 1129 221 1117 q 194 1164 194 1142 l 194 1261 m 483 1261 q 514 1265 497 1264 q 544 1265 531 1265 q 592 1260 571 1265 q 626 1243 613 1256 q 639 1208 639 1231 l 639 1110 q 608 1107 625 1108 q 576 1106 592 1106 q 531 1111 553 1106 q 497 1129 510 1117 q 483 1164 483 1142 l 483 1261 z "},"Ȳ":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 143 1226 l 628 1226 q 676 1209 664 1226 q 689 1156 689 1192 q 688 1135 689 1146 q 685 1117 686 1125 l 246 1117 q 182 1126 204 1117 q 151 1156 160 1136 q 143 1207 143 1176 q 143 1217 143 1213 q 143 1226 143 1222 z "},"Ẏ":{"ha":833,"x_min":61,"x_max":769,"o":"m 324 1253 q 342 1258 332 1256 q 362 1262 351 1260 q 384 1264 372 1264 q 406 1264 396 1264 q 481 1248 453 1264 q 510 1194 510 1232 l 510 1111 q 492 1106 501 1108 q 474 1101 483 1103 q 455 1099 465 1100 q 433 1099 444 1099 q 354 1120 385 1099 q 324 1178 324 1142 l 324 1253 m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 201 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 700 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 463 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 z "},"Ỳ":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 319 1299 q 355 1225 332 1260 q 412 1160 378 1190 q 489 1097 446 1129 q 464 1088 476 1092 q 440 1081 451 1083 q 414 1079 428 1079 q 376 1083 393 1079 q 340 1097 358 1086 q 296 1125 317 1110 q 258 1158 275 1140 q 227 1197 240 1176 q 206 1236 214 1217 q 201 1265 199 1253 q 219 1285 204 1278 q 249 1294 233 1290 q 281 1299 264 1297 q 319 1299 299 1300 z "},"Ỵ":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"Ỷ":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 347 1078 q 363 1114 347 1097 q 421 1146 379 1131 q 474 1169 460 1160 q 489 1193 489 1179 q 489 1201 489 1197 q 488 1208 489 1204 q 460 1215 475 1214 q 428 1217 446 1217 q 347 1205 381 1217 q 285 1167 313 1193 l 276 1167 q 268 1188 271 1178 q 265 1214 265 1199 q 272 1249 265 1233 q 292 1276 278 1264 q 313 1291 301 1285 q 339 1302 324 1297 q 374 1309 354 1307 q 417 1311 393 1311 q 506 1297 471 1311 q 558 1257 540 1282 q 575 1200 575 1232 l 575 1197 q 560 1150 575 1168 q 510 1113 544 1132 q 462 1079 472 1092 q 449 1049 451 1067 q 435 1045 443 1047 q 418 1042 426 1043 q 401 1042 410 1042 q 360 1052 374 1042 q 347 1078 347 1063 z "},"Ỹ":{"ha":833,"x_min":61,"x_max":769,"o":"m 499 -6 q 479 -10 488 -8 q 461 -12 471 -11 q 440 -12 451 -12 q 386 -1 406 -12 q 358 35 367 11 q 350 93 350 58 q 350 227 350 160 q 350 361 350 294 l 483 361 q 483 290 483 325 q 483 217 483 254 q 483 144 483 181 q 486 67 483 104 q 499 -6 489 29 m 61 978 q 90 983 75 982 q 119 985 104 985 q 162 978 144 985 q 190 953 179 971 q 204 903 200 936 q 235 753 218 819 q 276 628 251 686 q 338 511 301 569 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 499 522 458 457 q 567 654 540 586 q 611 800 593 722 q 640 978 629 878 q 669 983 654 982 q 699 985 683 985 q 752 967 735 985 q 767 921 769 950 q 738 760 756 835 q 692 619 719 685 q 630 497 665 554 q 553 390 594 440 q 464 294 511 340 q 419 295 438 294 q 387 299 400 296 q 363 309 374 303 q 342 325 351 315 q 258 419 296 371 q 191 522 221 467 q 138 642 161 576 q 95 792 114 708 q 61 978 76 875 m 554 1196 q 619 1212 590 1196 q 675 1260 647 1228 l 683 1260 q 690 1237 688 1251 q 692 1210 692 1222 q 688 1174 692 1188 q 679 1149 685 1160 q 637 1106 665 1121 q 565 1090 608 1090 q 492 1106 528 1090 q 421 1141 456 1121 q 350 1176 386 1161 q 276 1192 314 1192 q 213 1176 240 1192 q 156 1128 185 1161 l 147 1128 q 141 1152 143 1139 q 139 1178 139 1165 q 142 1213 139 1200 q 151 1238 146 1226 q 194 1281 165 1265 q 265 1297 222 1297 q 339 1282 303 1297 q 410 1247 375 1267 q 481 1211 446 1226 q 554 1196 517 1196 z "},"Z":{"ha":833,"x_min":78,"x_max":756,"o":"m 751 0 l 149 0 q 93 28 108 0 q 78 104 78 57 l 78 121 q 224 251 156 186 q 353 387 293 317 q 465 531 413 457 q 510 599 489 564 q 551 669 532 633 q 585 742 569 706 q 615 815 601 778 q 639 892 628 853 l 635 818 l 613 888 l 658 867 q 595 856 624 860 q 538 850 567 851 q 478 849 510 849 l 215 849 q 183 862 196 849 q 163 895 169 875 q 156 936 157 915 q 161 972 156 957 l 665 972 q 716 958 696 972 q 746 915 736 943 q 756 844 756 886 l 756 836 q 726 734 756 801 q 645 585 696 667 q 529 424 594 503 q 471 350 500 385 q 411 283 442 315 q 349 219 381 250 q 285 160 318 189 q 215 103 251 132 l 242 160 l 249 96 l 211 115 q 294 122 258 119 q 360 126 331 125 q 421 126 390 126 l 682 126 q 740 100 725 126 q 756 33 756 74 q 755 15 756 24 q 751 0 754 7 m 233 736 q 213 733 225 735 q 188 732 201 732 q 143 737 161 732 q 117 753 125 742 q 108 786 108 765 q 112 853 108 819 q 122 921 115 888 q 140 986 129 954 q 163 1047 150 1018 q 225 1042 201 1047 q 260 1027 249 1038 q 271 1000 272 1017 q 262 939 271 975 q 243 853 253 903 q 233 736 233 803 z "},"Ź":{"ha":833,"x_min":78,"x_max":756,"o":"m 751 0 l 149 0 q 93 28 108 0 q 78 104 78 57 l 78 121 q 224 251 156 186 q 353 387 293 317 q 465 531 413 457 q 510 599 489 564 q 551 669 532 633 q 585 742 569 706 q 615 815 601 778 q 639 892 628 853 l 635 818 l 613 888 l 658 867 q 595 856 624 860 q 538 850 567 851 q 478 849 510 849 l 215 849 q 183 862 196 849 q 163 895 169 875 q 156 936 157 915 q 161 972 156 957 l 665 972 q 716 958 696 972 q 746 915 736 943 q 756 844 756 886 l 756 836 q 726 734 756 801 q 645 585 696 667 q 529 424 594 503 q 471 350 500 385 q 411 283 442 315 q 349 219 381 250 q 285 160 318 189 q 215 103 251 132 l 242 160 l 249 96 l 211 115 q 294 122 258 119 q 360 126 331 125 q 421 126 390 126 l 682 126 q 740 100 725 126 q 756 33 756 74 q 755 15 756 24 q 751 0 754 7 m 233 736 q 213 733 225 735 q 188 732 201 732 q 143 737 161 732 q 117 753 125 742 q 108 786 108 765 q 112 853 108 819 q 122 921 115 888 q 140 986 129 954 q 163 1047 150 1018 q 225 1042 201 1047 q 260 1027 249 1038 q 271 1000 272 1017 q 262 939 271 975 q 243 853 253 903 q 233 736 233 803 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Ż":{"ha":833,"x_min":78,"x_max":756,"o":"m 324 1251 q 342 1257 332 1254 q 362 1261 351 1260 q 384 1263 372 1263 q 406 1264 396 1264 q 481 1248 453 1264 q 510 1194 510 1232 l 510 1110 q 492 1105 501 1107 q 474 1101 483 1103 q 455 1099 465 1099 q 433 1099 444 1099 q 354 1120 385 1099 q 324 1178 324 1142 l 324 1251 m 751 0 l 149 0 q 93 28 108 0 q 78 104 78 57 l 78 121 q 224 251 156 186 q 353 387 293 317 q 465 531 413 457 q 510 599 489 564 q 551 669 532 633 q 585 742 569 706 q 615 815 601 778 q 639 892 628 853 l 635 818 l 613 888 l 658 867 q 595 856 624 860 q 538 850 567 851 q 478 849 510 849 l 215 849 q 183 862 196 849 q 163 895 169 875 q 156 936 157 915 q 161 972 156 957 l 665 972 q 716 958 696 972 q 746 915 736 943 q 756 844 756 886 l 756 836 q 726 734 756 801 q 645 585 696 667 q 529 424 594 503 q 471 350 500 385 q 411 283 442 315 q 349 219 381 250 q 285 160 318 189 q 215 103 251 132 l 242 160 l 249 96 l 211 115 q 294 122 258 119 q 360 126 331 125 q 421 126 390 126 l 682 126 q 740 100 725 126 q 756 33 756 74 q 755 15 756 24 q 751 0 754 7 m 233 736 q 213 733 225 735 q 188 732 201 732 q 143 737 161 732 q 117 753 125 742 q 108 786 108 765 q 112 853 108 819 q 122 921 115 888 q 140 986 129 954 q 163 1047 150 1018 q 225 1042 201 1047 q 260 1027 249 1038 q 271 1000 272 1017 q 262 939 271 975 q 243 853 253 903 q 233 736 233 803 z "},"Ž":{"ha":833,"x_min":78,"x_max":756,"o":"m 460 1089 q 447 1089 454 1089 q 431 1089 439 1089 q 415 1089 424 1089 q 367 1094 390 1089 q 306 1125 344 1100 q 258 1158 283 1139 q 210 1199 233 1176 q 165 1247 186 1221 q 124 1304 143 1274 q 158 1316 142 1313 q 199 1319 175 1319 q 236 1312 222 1319 q 265 1286 250 1304 q 339 1221 299 1250 q 451 1158 379 1192 l 372 1176 q 419 1176 396 1176 q 464 1176 442 1176 l 386 1157 q 518 1240 467 1199 q 597 1321 569 1282 l 606 1321 q 658 1317 639 1321 q 685 1307 676 1314 q 693 1290 693 1300 q 685 1265 693 1282 q 656 1225 678 1249 q 615 1185 636 1204 q 568 1147 593 1165 q 516 1115 543 1129 q 460 1089 489 1100 m 751 0 l 149 0 q 93 28 108 0 q 78 104 78 57 l 78 121 q 224 251 156 186 q 353 387 293 317 q 465 531 413 457 q 510 599 489 564 q 551 669 532 633 q 585 742 569 706 q 615 815 601 778 q 639 892 628 853 l 635 818 l 613 888 l 658 867 q 595 856 624 860 q 538 850 567 851 q 478 849 510 849 l 215 849 q 183 862 196 849 q 163 895 169 875 q 156 936 157 915 q 161 972 156 957 l 665 972 q 716 958 696 972 q 746 915 736 943 q 756 844 756 886 l 756 836 q 726 734 756 801 q 645 585 696 667 q 529 424 594 503 q 471 350 500 385 q 411 283 442 315 q 349 219 381 250 q 285 160 318 189 q 215 103 251 132 l 242 160 l 249 96 l 211 115 q 294 122 258 119 q 360 126 331 125 q 421 126 390 126 l 682 126 q 740 100 725 126 q 756 33 756 74 q 755 15 756 24 q 751 0 754 7 m 233 736 q 213 733 225 735 q 188 732 201 732 q 143 737 161 732 q 117 753 125 742 q 108 786 108 765 q 112 853 108 819 q 122 921 115 888 q 140 986 129 954 q 163 1047 150 1018 q 225 1042 201 1047 q 260 1027 249 1038 q 271 1000 272 1017 q 262 939 271 975 q 243 853 253 903 q 233 736 233 803 z "},"Ẓ":{"ha":833,"x_min":78,"x_max":756,"o":"m 324 -125 q 341 -122 332 -124 q 358 -120 350 -121 q 376 -119 367 -119 q 393 -119 385 -119 q 469 -133 440 -119 q 497 -183 497 -146 l 497 -274 q 481 -276 490 -275 q 464 -278 472 -278 q 447 -279 456 -279 q 428 -279 438 -279 q 353 -265 383 -279 q 324 -215 324 -251 l 324 -125 m 751 0 l 149 0 q 93 28 108 0 q 78 104 78 57 l 78 121 q 224 251 156 186 q 353 387 293 317 q 465 531 413 457 q 510 599 489 564 q 551 669 532 633 q 585 742 569 706 q 615 815 601 778 q 639 892 628 853 l 635 818 l 613 888 l 658 867 q 595 856 624 860 q 538 850 567 851 q 478 849 510 849 l 215 849 q 183 862 196 849 q 163 895 169 875 q 156 936 157 915 q 161 972 156 957 l 665 972 q 716 958 696 972 q 746 915 736 943 q 756 844 756 886 l 756 836 q 726 734 756 801 q 645 585 696 667 q 529 424 594 503 q 471 350 500 385 q 411 283 442 315 q 349 219 381 250 q 285 160 318 189 q 215 103 251 132 l 242 160 l 249 96 l 211 115 q 294 122 258 119 q 360 126 331 125 q 421 126 390 126 l 682 126 q 740 100 725 126 q 756 33 756 74 q 755 15 756 24 q 751 0 754 7 m 233 736 q 213 733 225 735 q 188 732 201 732 q 143 737 161 732 q 117 753 125 742 q 108 786 108 765 q 112 853 108 819 q 122 921 115 888 q 140 986 129 954 q 163 1047 150 1018 q 225 1042 201 1047 q 260 1027 249 1038 q 271 1000 272 1017 q 262 939 271 975 q 243 853 253 903 q 233 736 233 803 z "},"Æ":{"ha":833,"x_min":17,"x_max":810,"o":"m 163 -4 q 147 -8 154 -6 q 133 -10 140 -10 q 115 -11 125 -11 q 63 2 83 -11 q 43 46 43 15 q 58 319 43 192 q 103 561 74 447 q 179 774 133 675 q 286 960 225 874 q 316 971 299 967 q 358 976 333 975 q 417 978 383 978 l 736 978 q 792 956 775 978 q 810 896 810 933 q 808 869 810 883 q 803 846 806 854 l 310 846 l 374 881 q 283 709 322 800 q 218 510 244 618 q 178 276 192 403 q 163 -4 164 149 m 376 886 l 503 874 l 489 839 q 513 809 506 825 q 528 757 521 793 q 554 619 543 688 q 574 476 565 550 q 586 316 582 401 q 592 126 590 231 l 731 126 q 792 109 775 126 q 810 46 810 92 q 808 21 810 33 q 804 0 807 8 l 550 0 q 509 6 528 0 q 480 24 490 11 q 469 53 469 36 q 466 265 469 164 q 453 464 463 365 q 425 667 443 563 q 376 886 407 771 m 17 399 l 354 399 q 413 392 386 399 q 456 369 439 385 l 493 389 l 493 276 l 63 276 q 27 303 38 276 q 17 375 17 329 l 17 399 m 529 475 l 717 475 q 760 453 743 475 q 776 394 776 431 q 775 375 776 385 q 771 358 774 365 l 529 358 l 529 475 z "},"Ǽ":{"ha":833,"x_min":17,"x_max":810,"o":"m 163 -4 q 147 -8 154 -6 q 133 -10 140 -10 q 115 -11 125 -11 q 63 2 83 -11 q 43 46 43 15 q 58 319 43 192 q 103 561 74 447 q 179 774 133 675 q 286 960 225 874 q 316 971 299 967 q 358 976 333 975 q 417 978 383 978 l 736 978 q 792 956 775 978 q 810 896 810 933 q 808 869 810 883 q 803 846 806 854 l 310 846 l 374 881 q 283 709 322 800 q 218 510 244 618 q 178 276 192 403 q 163 -4 164 149 m 376 886 l 503 874 l 489 839 q 513 809 506 825 q 528 757 521 793 q 554 619 543 688 q 574 476 565 550 q 586 316 582 401 q 592 126 590 231 l 731 126 q 792 109 775 126 q 810 46 810 92 q 808 21 810 33 q 804 0 807 8 l 550 0 q 509 6 528 0 q 480 24 490 11 q 469 53 469 36 q 466 265 469 164 q 453 464 463 365 q 425 667 443 563 q 376 886 407 771 m 17 399 l 354 399 q 413 392 386 399 q 456 369 439 385 l 493 389 l 493 276 l 63 276 q 27 303 38 276 q 17 375 17 329 l 17 399 m 529 475 l 717 475 q 760 453 743 475 q 776 394 776 431 q 775 375 776 385 q 771 358 774 365 l 529 358 l 529 475 m 590 1290 q 628 1289 611 1290 q 660 1285 646 1288 q 688 1278 674 1282 q 708 1258 704 1271 q 706 1231 711 1246 q 685 1189 697 1208 q 655 1151 672 1169 q 617 1118 638 1133 q 574 1090 597 1103 q 537 1075 556 1079 q 496 1071 518 1071 q 471 1073 483 1071 q 446 1079 458 1075 q 421 1090 433 1083 q 498 1152 464 1121 q 556 1217 532 1183 q 590 1290 579 1251 z "},"Ð":{"ha":833,"x_min":19,"x_max":749,"o":"m 21 510 l 414 510 q 458 496 446 510 q 469 449 469 482 q 468 428 469 439 q 465 411 467 418 l 71 411 q 31 427 42 411 q 19 489 19 443 q 19 501 19 494 q 21 510 19 507 m 749 533 q 720 310 749 411 q 638 137 692 210 q 508 25 583 64 q 336 -14 432 -14 q 287 -11 310 -14 q 244 -3 264 -8 q 208 9 225 1 q 176 26 190 17 q 153 44 163 35 q 132 76 139 58 q 125 114 125 93 q 125 305 125 208 q 125 500 125 401 q 125 697 125 599 q 125 896 125 796 l 240 896 l 224 854 q 249 814 242 838 q 257 758 257 790 q 257 604 257 683 q 257 446 257 525 q 257 286 257 367 q 257 126 257 206 q 276 120 265 122 q 299 117 286 118 q 325 117 311 117 q 483 167 418 117 q 582 312 547 218 q 617 531 617 406 l 617 550 q 613 665 617 614 q 599 753 608 715 q 574 821 590 792 q 522 851 549 839 q 462 868 494 863 q 389 874 429 874 q 285 869 333 874 q 199 860 238 865 q 135 850 161 854 q 100 846 110 846 q 72 856 83 846 q 57 884 61 865 q 53 931 53 903 q 53 953 53 943 q 56 972 54 963 q 149 986 104 981 q 237 994 194 992 q 319 999 279 997 q 399 1000 360 1000 q 552 974 486 1000 q 661 894 618 947 q 726 760 704 840 q 749 569 749 679 l 749 533 z "},"Ø":{"ha":833,"x_min":29,"x_max":751,"o":"m 668 1068 q 640 947 654 1006 q 608 831 625 888 l 622 767 l 543 767 l 568 786 q 562 689 569 739 q 539 596 554 639 q 468 407 507 497 q 385 236 429 317 q 290 86 340 156 q 282 74 286 81 q 274 60 278 67 q 235 10 254 33 q 199 -35 217 -14 q 163 -74 181 -56 q 140 -87 154 -82 q 108 -92 125 -92 q 85 -90 96 -92 q 63 -86 74 -89 q 44 -79 53 -83 q 29 -69 36 -75 q 85 -17 56 -47 q 142 47 115 14 q 188 107 169 79 l 221 200 l 276 200 l 254 175 q 268 233 258 203 q 294 299 278 263 q 329 381 310 335 q 400 521 367 444 q 462 689 433 597 q 514 889 490 781 q 520 913 517 901 q 526 936 524 925 q 534 971 531 954 q 542 1004 538 988 q 565 1065 550 1050 q 615 1081 581 1081 q 633 1079 625 1081 q 651 1075 642 1078 q 668 1068 660 1072 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 419 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 z "},"Ǿ":{"ha":833,"x_min":29,"x_max":751,"o":"m 668 1068 q 640 947 654 1006 q 608 831 625 888 l 622 767 l 543 767 l 568 786 q 562 689 569 739 q 539 596 554 639 q 468 407 507 497 q 385 236 429 317 q 290 86 340 156 q 282 74 286 81 q 274 60 278 67 q 235 10 254 33 q 199 -35 217 -14 q 163 -74 181 -56 q 140 -87 154 -82 q 108 -92 125 -92 q 85 -90 96 -92 q 63 -86 74 -89 q 44 -79 53 -83 q 29 -69 36 -75 q 85 -17 56 -47 q 142 47 115 14 q 188 107 169 79 l 221 200 l 276 200 l 254 175 q 268 233 258 203 q 294 299 278 263 q 329 381 310 335 q 400 521 367 444 q 462 689 433 597 q 514 889 490 781 q 520 913 517 901 q 526 936 524 925 q 534 971 531 954 q 542 1004 538 988 q 565 1065 550 1050 q 615 1081 581 1081 q 633 1079 625 1081 q 651 1075 642 1078 q 668 1068 660 1072 m 418 1000 q 604 942 531 1000 q 715 772 678 883 q 751 504 751 661 l 751 471 q 712 203 751 315 q 598 32 672 92 q 419 -28 524 -28 q 231 27 306 -26 q 119 185 156 81 q 82 436 82 289 l 82 469 q 122 753 82 635 q 237 936 161 872 q 418 1000 313 1000 m 208 426 q 231 241 208 315 q 283 128 253 167 q 342 106 314 113 q 404 99 371 99 q 528 145 479 99 q 601 279 576 192 q 625 488 625 367 l 625 514 q 615 660 625 597 q 585 768 604 722 q 543 847 567 814 q 489 867 515 861 q 429 874 463 874 q 306 823 354 874 q 233 678 257 772 q 208 451 208 583 l 208 426 m 514 1290 q 552 1289 535 1290 q 583 1285 569 1288 q 611 1278 597 1282 q 631 1258 628 1271 q 629 1231 635 1246 q 608 1189 621 1208 q 578 1151 596 1169 q 541 1118 561 1133 q 497 1090 521 1103 q 460 1075 479 1079 q 419 1071 442 1071 q 394 1073 407 1071 q 369 1079 382 1075 q 344 1090 357 1083 q 422 1152 388 1121 q 479 1217 456 1183 q 514 1290 503 1251 z "},"Þ":{"ha":833,"x_min":94,"x_max":743,"o":"m 94 979 q 121 985 108 983 q 147 986 133 986 q 219 961 196 986 q 242 878 242 936 q 242 669 242 779 q 242 445 242 560 q 242 215 242 331 q 242 -12 242 100 q 228 -13 236 -12 q 211 -14 221 -14 q 156 -5 179 -14 q 121 22 133 4 q 108 68 108 40 q 108 265 108 163 q 108 468 108 367 q 108 661 108 569 q 108 828 108 753 q 106 906 108 868 q 94 979 103 943 m 164 806 q 299 824 236 818 q 425 831 363 831 q 553 810 494 831 q 654 751 611 789 q 720 663 697 713 q 743 553 743 613 l 743 518 q 713 372 743 439 q 628 257 682 306 q 503 181 574 208 q 353 154 433 154 q 291 166 317 154 q 250 201 265 178 l 221 196 l 221 292 q 263 281 244 285 q 311 278 282 278 q 467 307 400 278 q 574 390 535 336 q 613 521 613 444 l 613 540 q 605 606 613 576 q 585 658 597 635 q 511 697 549 686 q 414 707 474 707 q 337 703 376 707 q 265 693 297 699 q 229 687 243 689 q 206 685 215 685 q 173 705 186 685 q 160 765 160 725 q 161 787 160 776 q 164 806 163 797 z "},"Đ":{"ha":833,"x_min":19,"x_max":749,"o":"m 21 510 l 414 510 q 458 496 446 510 q 469 449 469 482 q 468 428 469 439 q 465 411 467 418 l 71 411 q 31 427 42 411 q 19 489 19 443 q 19 501 19 494 q 21 510 19 507 m 749 533 q 720 310 749 411 q 638 137 692 210 q 508 25 583 64 q 336 -14 432 -14 q 287 -11 310 -14 q 244 -3 264 -8 q 208 9 225 1 q 176 26 190 17 q 153 44 163 35 q 132 76 139 58 q 125 114 125 93 q 125 305 125 208 q 125 500 125 401 q 125 697 125 599 q 125 896 125 796 l 240 896 l 224 854 q 249 814 242 838 q 257 758 257 790 q 257 604 257 683 q 257 446 257 525 q 257 286 257 367 q 257 126 257 206 q 276 120 265 122 q 299 117 286 118 q 325 117 311 117 q 483 167 418 117 q 582 312 547 218 q 617 531 617 406 l 617 550 q 613 665 617 614 q 599 753 608 715 q 574 821 590 792 q 522 851 549 839 q 462 868 494 863 q 389 874 429 874 q 285 869 333 874 q 199 860 238 865 q 135 850 161 854 q 100 846 110 846 q 72 856 83 846 q 57 884 61 865 q 53 931 53 903 q 53 953 53 943 q 56 972 54 963 q 149 986 104 981 q 237 994 194 992 q 319 999 279 997 q 399 1000 360 1000 q 552 974 486 1000 q 661 894 618 947 q 726 760 704 840 q 749 569 749 679 l 749 533 z "},"Ħ":{"ha":833,"x_min":25,"x_max":808,"o":"m 26 769 l 754 769 q 797 756 785 769 q 808 707 808 742 q 808 688 808 699 q 804 669 807 678 l 76 669 q 36 685 47 669 q 25 749 25 701 q 26 760 25 754 q 26 769 26 765 m 103 974 q 129 979 117 978 q 156 981 142 981 q 226 952 206 981 q 247 874 247 924 q 247 654 247 764 q 247 435 247 544 q 247 216 247 325 q 247 -4 247 107 q 226 -8 236 -7 q 204 -8 215 -8 q 157 -1 176 -8 q 127 27 138 7 q 117 83 117 47 q 117 331 117 208 q 117 577 117 454 q 117 824 117 700 q 114 901 117 864 q 103 974 111 939 m 56 474 l 489 474 q 549 467 522 474 q 594 446 575 461 l 638 467 l 638 353 l 108 353 q 82 360 92 353 q 66 379 72 367 q 58 410 60 392 q 56 451 56 429 l 56 474 m 744 -1 q 719 -6 732 -4 q 692 -8 707 -8 q 643 4 664 -8 q 612 43 622 17 q 601 108 601 69 q 601 326 601 218 q 601 541 601 433 q 601 757 601 649 q 601 976 601 865 q 622 980 611 979 q 644 981 633 981 q 681 977 664 981 q 708 965 697 974 q 726 941 719 956 q 732 901 732 926 q 732 721 732 813 q 732 535 732 629 q 732 344 732 440 q 732 150 732 247 q 735 72 732 110 q 744 -1 738 35 z "},"Ĳ":{"ha":833,"x_min":94,"x_max":739,"o":"m 94 979 q 121 985 108 983 q 147 986 133 986 q 219 959 197 986 q 242 878 242 932 q 242 725 242 801 q 242 572 242 649 q 242 419 242 496 q 242 267 242 343 q 228 266 236 267 q 211 265 221 265 q 133 285 158 265 q 108 358 108 306 q 108 515 108 436 q 108 671 108 593 q 108 828 108 749 q 106 906 108 868 q 94 979 103 943 m 413 99 q 510 110 467 99 q 578 142 553 122 q 595 190 589 165 q 604 246 601 214 q 607 319 607 278 q 607 459 607 389 q 607 601 607 529 q 607 747 607 672 q 607 900 607 822 l 629 835 l 588 865 l 644 867 q 580 856 613 861 q 514 847 547 851 q 448 841 481 843 q 385 839 415 839 q 343 860 356 839 q 331 922 331 882 q 333 951 331 939 q 336 972 335 964 q 431 975 383 974 q 526 977 478 976 q 624 978 575 978 q 690 970 665 978 q 727 946 715 963 q 739 904 739 929 q 739 761 739 835 q 739 612 739 688 q 739 459 739 536 q 739 304 739 382 q 718 171 739 232 q 655 65 697 110 q 549 -3 613 21 q 397 -28 485 -28 q 297 -21 346 -28 q 210 -1 249 -14 q 146 33 171 13 q 123 67 131 47 q 115 115 115 86 q 117 150 115 135 q 122 176 119 165 l 131 176 q 265 116 197 133 q 413 99 332 99 z "},"Ŀ":{"ha":833,"x_min":106,"x_max":756,"o":"m 494 635 q 517 638 506 636 q 542 640 529 639 q 568 640 556 640 q 635 627 608 640 q 661 576 661 614 l 661 479 q 638 476 651 478 q 613 474 625 475 q 588 474 600 474 q 521 488 547 474 q 494 538 494 501 l 494 635 m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 254 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 z "},"Ł":{"ha":833,"x_min":-25,"x_max":756,"o":"m 204 0 q 167 12 183 0 q 140 43 150 24 q 124 86 129 63 q 118 135 118 110 q 118 304 118 218 q 118 477 118 390 q 118 652 118 564 q 118 828 118 740 q 116 906 118 874 q 106 975 114 939 q 134 981 119 979 q 165 983 149 983 q 219 971 201 983 q 244 936 238 958 q 251 882 251 914 q 251 698 251 792 q 251 509 251 604 q 251 318 251 414 q 251 126 251 222 l 638 126 q 667 119 654 126 q 688 95 681 111 q 697 55 694 79 q 696 0 699 31 l 204 0 m 636 288 q 649 289 642 288 q 663 290 656 290 q 678 290 671 290 q 721 285 704 290 q 747 267 738 279 q 756 235 756 256 q 751 163 756 199 q 738 89 746 126 q 717 17 729 51 q 692 -47 704 -17 q 639 -43 660 -47 q 608 -29 618 -39 q 599 -6 599 -19 q 609 64 600 22 q 627 161 618 106 q 636 288 636 217 m 485 689 q 490 666 489 678 q 492 643 492 654 q 483 591 492 613 q 454 552 474 569 q 403 518 435 535 l 256 442 q 225 433 243 436 q 190 426 207 429 q 158 417 174 424 l -18 322 q -21 343 -19 332 q -24 365 -22 354 q -25 383 -25 375 q -11 439 -25 419 q 36 475 3 458 l 161 539 q 190 548 174 546 q 222 553 206 550 q 250 563 238 556 l 485 689 z "},"Ŋ":{"ha":833,"x_min":94,"x_max":738,"o":"m 404 -221 q 523 -194 475 -221 q 596 -109 571 -167 q 621 43 621 -51 q 666 40 646 43 q 700 31 686 38 q 724 15 714 24 q 738 -6 733 7 q 718 -135 738 -74 q 658 -244 699 -196 q 555 -319 617 -292 q 410 -347 493 -347 q 335 -342 368 -347 q 280 -326 303 -336 q 243 -303 257 -317 q 222 -265 228 -287 q 217 -214 217 -242 q 217 -194 217 -204 q 221 -175 218 -183 l 229 -175 q 313 -211 274 -201 q 404 -221 353 -221 m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 z "},"Œ":{"ha":833,"x_min":63,"x_max":793,"o":"m 346 983 q 367 982 357 983 q 388 978 378 981 q 408 972 399 976 l 429 972 l 736 972 q 778 949 763 972 q 793 890 793 926 q 792 866 793 878 q 788 846 790 854 l 468 846 l 425 851 q 397 863 413 858 q 363 867 381 867 q 266 817 306 867 q 205 674 226 767 q 183 451 183 582 l 183 426 q 231 188 183 269 q 368 106 279 106 q 385 107 378 106 q 401 111 393 108 q 414 117 408 114 q 414 307 414 211 q 414 498 414 403 q 414 688 414 593 q 414 879 414 783 l 519 879 l 501 839 q 527 799 519 822 q 535 743 535 776 q 535 588 535 665 q 535 435 535 511 q 535 281 535 358 q 535 126 535 204 l 728 126 q 777 106 761 126 q 793 42 793 86 q 792 19 793 31 q 790 0 792 8 l 514 0 q 481 3 499 0 q 436 15 463 7 l 436 31 l 492 28 q 420 -2 453 7 q 353 -11 388 -11 q 192 40 257 -11 q 94 192 126 92 q 63 436 63 292 l 63 469 q 81 686 63 590 q 137 848 100 782 q 226 949 174 914 q 346 983 278 983 m 494 497 l 700 497 q 744 476 729 497 q 760 418 760 456 q 758 399 760 407 q 754 382 757 390 l 494 382 l 494 497 z "},"Ŧ":{"ha":833,"x_min":49,"x_max":781,"o":"m 99 510 l 682 510 q 724 493 713 510 q 736 438 736 476 q 735 414 736 425 q 731 393 733 403 l 161 393 q 123 401 138 393 q 103 431 108 410 q 97 489 97 451 q 98 501 97 494 q 99 510 99 507 m 53 972 l 721 972 q 767 949 754 972 q 781 890 781 926 q 779 865 781 876 q 775 846 778 854 l 165 846 q 97 856 122 846 q 60 887 71 867 q 49 935 49 907 q 50 955 49 946 q 53 972 51 964 m 494 -1 q 474 -6 485 -4 q 449 -7 464 -7 q 372 22 393 -7 q 350 104 350 51 q 350 298 350 201 q 350 491 350 394 q 350 684 350 588 q 350 879 350 781 l 467 879 l 450 839 q 469 814 463 828 q 480 782 476 800 q 483 740 483 764 q 483 547 483 646 q 483 346 483 447 q 483 140 483 244 q 485 69 483 104 q 494 -1 488 33 z "},"Ə":{"ha":833,"x_min":83,"x_max":743,"o":"m 379 989 q 574 931 493 989 q 699 765 656 874 q 743 501 743 656 l 743 485 q 715 260 743 354 q 638 104 688 165 q 525 13 589 43 q 390 -17 461 -17 q 225 22 293 -17 q 120 132 157 60 q 83 306 83 204 l 83 443 q 93 522 83 493 q 124 565 103 551 q 182 578 146 578 l 493 578 q 563 569 533 578 q 610 543 593 560 l 643 558 l 644 474 q 431 474 538 474 q 215 474 324 474 l 215 300 q 227 198 215 242 q 263 128 239 154 q 315 108 288 114 q 376 103 342 103 q 508 145 454 103 q 590 276 563 188 q 618 497 618 364 l 618 514 q 609 637 618 582 q 583 737 600 692 q 539 814 567 782 q 470 856 507 843 q 381 868 433 868 q 285 859 331 868 q 197 833 239 850 q 117 788 154 815 l 110 788 q 106 806 107 796 q 106 824 106 815 q 112 883 106 860 q 133 921 118 907 q 189 957 153 942 q 274 981 225 972 q 379 989 322 989 z "},"Ɲ":{"ha":833,"x_min":-72,"x_max":738,"o":"m 14 -104 q 84 -74 60 -104 q 108 24 108 -43 l 108 81 q 154 74 132 81 q 193 58 176 68 q 219 34 210 47 q 229 7 229 21 l 229 -14 q 204 -128 229 -78 q 135 -208 179 -179 q 31 -236 90 -236 l 21 -236 q -15 -230 3 -236 q -44 -212 -32 -224 q -65 -176 -58 -197 q -72 -125 -72 -156 q -71 -103 -72 -114 q -68 -82 -69 -92 l -60 -82 q -26 -99 -39 -93 q 14 -104 -12 -104 m 229 -3 q 212 -7 221 -6 q 189 -8 203 -8 q 146 0 164 -8 q 118 27 128 8 q 108 75 108 46 q 108 264 108 169 q 108 452 108 358 q 108 640 108 546 q 108 828 108 733 q 106 900 108 858 q 94 978 103 942 q 122 982 110 981 q 145 984 133 983 q 168 985 157 985 q 238 975 211 985 q 280 942 264 965 q 304 879 296 919 q 337 752 319 814 q 377 631 354 690 q 426 511 400 571 q 483 393 451 451 q 553 276 515 335 q 636 156 592 217 l 585 185 l 656 185 l 625 151 q 619 271 622 213 q 614 386 615 329 q 611 501 613 443 q 610 617 610 558 q 610 736 610 675 q 610 859 610 799 q 610 981 610 919 q 626 984 615 983 q 649 985 636 985 q 707 967 683 985 q 731 908 731 950 q 731 721 731 815 q 731 532 731 626 q 731 342 731 438 q 731 151 731 247 q 732 73 731 113 q 738 -6 733 33 q 723 -10 731 -8 q 708 -12 715 -11 q 692 -14 700 -14 q 643 -7 664 -14 q 603 17 622 0 q 501 140 556 64 q 392 319 446 215 q 291 551 338 424 q 213 824 244 678 l 246 783 l 186 783 l 208 826 q 219 698 215 765 q 226 560 224 631 q 228 417 228 489 q 229 274 229 344 q 229 138 229 204 q 229 68 229 103 q 229 -3 229 33 z "},"Ǆ":{"ha":833,"x_min":0,"x_max":850,"o":"m 189 1000 q 300 978 253 1000 q 377 908 347 956 q 421 780 407 860 q 435 586 435 700 l 435 532 q 415 274 435 379 q 361 106 396 169 q 281 15 326 43 q 185 -14 235 -14 q 158 -12 171 -14 q 134 -6 146 -10 q 113 2 122 -3 q 94 13 103 7 q 79 28 85 19 q 63 52 68 39 q 57 92 57 65 q 57 299 57 188 q 57 528 57 411 q 57 759 57 646 q 57 972 57 872 l 154 896 l 140 858 q 163 817 157 842 q 169 758 169 793 q 169 604 169 683 q 169 444 169 525 q 169 282 169 363 q 169 121 169 201 q 179 119 175 121 q 190 117 183 118 q 201 117 196 117 q 244 134 222 117 q 285 197 265 151 q 317 330 304 243 q 329 554 329 417 l 329 567 q 326 684 329 631 q 316 780 322 738 q 299 854 310 822 q 273 865 288 861 q 241 871 258 868 q 204 874 224 874 q 155 869 178 874 q 113 860 132 865 q 76 850 93 854 q 44 846 58 846 q 17 856 26 846 q 3 884 7 865 q 0 931 0 903 q 1 953 0 943 q 1 972 1 963 q 42 983 21 978 q 85 992 63 989 q 135 998 108 996 q 189 1000 161 1000 m 826 0 l 499 0 q 451 28 465 0 q 438 104 438 57 l 438 121 q 514 252 478 185 q 584 396 550 319 q 651 564 618 472 q 672 624 663 593 q 690 685 681 654 q 706 750 699 717 q 722 818 714 783 q 735 892 729 853 l 736 806 l 710 890 l 753 863 q 736 857 744 860 q 719 853 728 854 q 699 851 710 851 q 677 849 689 850 q 649 849 665 849 l 535 849 q 513 862 522 849 q 500 895 504 875 q 496 936 496 915 q 499 972 496 957 l 747 972 q 794 958 775 972 q 821 917 813 944 q 829 850 829 890 l 829 842 q 817 753 829 811 q 781 622 804 694 q 726 474 758 550 q 686 383 707 426 q 644 298 665 339 q 602 220 624 257 q 560 151 581 183 q 519 93 539 119 l 540 160 l 546 97 l 517 117 q 563 122 542 121 q 603 124 585 124 q 635 126 621 125 q 663 126 650 126 q 689 126 676 126 l 769 126 q 815 106 801 126 q 829 46 829 86 q 828 20 829 33 q 826 0 828 7 m 547 736 q 528 733 540 735 q 506 732 517 732 q 476 738 488 732 q 458 757 464 743 q 453 797 453 771 q 456 858 453 826 q 465 922 458 889 q 479 985 471 954 q 499 1047 488 1017 q 549 1042 532 1047 q 573 1027 567 1038 q 578 1000 579 1017 q 571 937 578 975 q 556 849 564 899 q 547 736 547 799 m 694 1089 q 682 1089 690 1089 q 666 1089 674 1089 q 653 1089 658 1089 q 608 1097 629 1089 q 558 1132 586 1106 q 526 1169 542 1150 q 498 1208 511 1188 q 472 1254 485 1229 q 447 1307 460 1279 q 474 1316 460 1313 q 503 1319 489 1319 q 535 1312 522 1319 q 557 1285 547 1304 q 607 1213 581 1244 q 667 1158 633 1182 l 614 1176 q 652 1176 633 1176 q 689 1176 671 1176 l 635 1157 q 714 1240 683 1197 q 767 1321 744 1282 l 793 1321 q 827 1317 815 1321 q 844 1308 839 1314 q 850 1293 850 1301 q 844 1267 850 1283 q 822 1225 838 1250 q 797 1189 810 1207 q 767 1153 783 1171 q 732 1119 750 1136 q 694 1089 714 1103 z "},"Ǉ":{"ha":833,"x_min":26,"x_max":815,"o":"m 121 0 q 83 12 100 0 q 56 43 67 24 q 40 86 46 63 q 35 135 35 110 q 35 234 35 178 q 35 352 35 290 q 35 479 35 414 q 35 607 35 544 q 35 726 35 669 q 35 828 35 783 q 33 906 35 874 q 26 975 32 938 q 42 979 35 978 q 58 982 50 981 q 78 983 67 983 q 127 970 110 983 q 151 935 144 957 q 157 882 157 913 q 157 775 157 835 q 157 648 157 715 q 157 511 157 581 q 157 373 157 442 q 157 242 157 304 q 157 126 157 179 l 417 126 q 447 119 433 126 q 467 95 460 111 q 476 55 474 79 q 475 0 478 31 l 121 0 m 429 288 q 445 289 436 288 q 465 290 454 290 q 482 290 475 290 q 513 285 499 290 q 534 267 526 279 q 542 235 542 256 q 539 169 542 203 q 530 100 536 135 q 515 32 524 65 q 497 -31 507 -1 q 442 -26 464 -31 q 412 -11 421 -22 q 403 19 403 0 q 409 84 403 43 q 422 178 415 125 q 429 288 429 231 m 492 -132 q 610 -76 565 -112 q 677 21 656 -40 q 699 175 699 82 q 699 316 699 242 q 699 467 699 390 q 699 619 699 543 q 699 767 699 696 q 699 900 699 838 l 726 842 l 674 878 l 725 867 q 680 855 704 860 q 631 847 656 850 q 583 841 606 843 q 543 839 561 839 q 500 861 514 839 q 486 922 486 883 q 488 951 486 939 q 492 972 489 964 q 538 974 511 974 q 595 976 565 975 q 656 977 625 976 q 717 978 688 978 q 770 968 749 978 q 803 942 792 958 q 815 904 815 925 q 815 779 815 849 q 815 633 815 710 q 815 475 815 556 q 815 316 815 394 q 815 165 815 238 q 806 41 815 93 q 780 -45 796 -11 q 742 -103 764 -79 q 669 -154 711 -136 q 588 -172 626 -172 q 545 -167 564 -172 q 514 -153 526 -162 q 492 -132 501 -143 z "},"Ǌ":{"ha":833,"x_min":26,"x_max":815,"o":"m 158 -3 q 145 -6 153 -4 q 129 -8 138 -7 q 111 -8 121 -8 q 69 0 85 -8 q 47 27 54 8 q 40 75 40 46 q 40 264 40 169 q 40 452 40 358 q 40 640 40 546 q 40 828 40 733 q 38 900 40 858 q 26 978 35 942 q 47 982 38 981 q 67 984 57 983 q 88 985 78 985 q 108 985 97 985 q 164 975 142 985 q 200 943 186 965 q 219 879 214 921 q 242 737 229 807 q 272 599 256 667 q 304 469 288 532 q 338 350 321 407 q 372 244 356 293 q 404 156 389 196 l 367 185 l 439 185 l 406 151 q 397 243 401 192 q 391 351 393 294 q 388 460 389 407 q 385 559 386 514 q 385 632 385 604 q 385 692 385 657 q 385 766 385 726 q 385 845 385 806 q 385 919 385 885 q 385 978 385 954 q 396 981 389 979 q 412 982 403 982 q 429 982 421 982 q 484 965 467 982 q 501 906 501 949 q 501 816 501 872 q 501 691 501 760 q 501 548 501 622 q 501 400 501 474 q 501 263 501 326 q 501 151 501 200 q 503 73 501 113 q 510 -6 506 33 q 498 -10 504 -8 q 485 -12 492 -11 q 474 -14 479 -14 q 461 -14 468 -14 q 397 -3 419 -14 q 358 39 374 8 q 299 172 329 93 q 242 352 269 251 q 188 572 214 453 q 140 824 163 690 l 171 783 l 108 783 l 132 826 q 145 661 140 750 q 153 480 150 572 q 158 301 157 388 q 158 138 158 214 q 158 68 158 103 q 158 -3 158 33 m 492 -132 q 610 -76 565 -112 q 677 21 656 -40 q 699 175 699 82 q 699 316 699 242 q 699 467 699 390 q 699 620 699 544 q 699 767 699 696 q 699 900 699 838 l 726 842 l 674 878 l 725 867 q 674 852 699 858 q 627 842 650 846 q 583 839 604 839 q 540 861 554 839 q 526 922 526 883 q 528 951 526 939 q 532 972 529 964 q 574 974 553 974 q 619 976 596 975 q 666 977 642 976 q 717 978 690 978 q 770 968 749 978 q 803 942 792 958 q 815 904 815 925 q 815 779 815 849 q 815 633 815 710 q 815 475 815 556 q 815 316 815 394 q 815 165 815 238 q 806 41 815 93 q 780 -45 796 -11 q 742 -103 764 -79 q 669 -154 711 -136 q 588 -172 626 -172 q 545 -167 564 -172 q 513 -153 526 -162 q 492 -132 500 -143 z "},"Ǳ":{"ha":833,"x_min":0,"x_max":829,"o":"m 189 1000 q 300 978 253 1000 q 377 908 347 956 q 421 780 407 860 q 435 586 435 700 l 435 532 q 415 274 435 379 q 361 106 396 169 q 281 15 326 43 q 185 -14 235 -14 q 158 -12 171 -14 q 134 -6 146 -10 q 113 2 122 -3 q 94 13 103 7 q 79 28 85 19 q 63 52 68 39 q 57 92 57 65 q 57 299 57 188 q 57 528 57 411 q 57 759 57 646 q 57 972 57 872 l 154 896 l 140 858 q 163 817 157 842 q 169 758 169 793 q 169 604 169 683 q 169 444 169 525 q 169 282 169 363 q 169 121 169 201 q 179 119 175 121 q 190 117 183 118 q 201 117 196 117 q 244 134 222 117 q 285 197 265 151 q 317 330 304 243 q 329 554 329 417 l 329 567 q 326 684 329 631 q 316 780 322 738 q 299 854 310 822 q 273 865 288 861 q 241 871 258 868 q 204 874 224 874 q 155 869 178 874 q 113 860 132 865 q 76 850 93 854 q 44 846 58 846 q 17 856 26 846 q 3 884 7 865 q 0 931 0 903 q 1 953 0 943 q 1 972 1 963 q 42 983 21 978 q 85 992 63 989 q 135 998 108 996 q 189 1000 161 1000 m 826 0 l 499 0 q 451 28 465 0 q 438 104 438 57 l 438 121 q 514 252 478 185 q 584 396 550 319 q 651 564 618 472 q 672 624 663 593 q 690 685 681 654 q 706 750 699 717 q 722 818 714 783 q 735 892 729 853 l 736 806 l 710 890 l 753 863 q 736 857 744 860 q 719 853 728 854 q 699 851 710 851 q 677 849 689 850 q 649 849 665 849 l 535 849 q 513 862 522 849 q 500 895 504 875 q 496 936 496 915 q 499 972 496 957 l 747 972 q 794 958 775 972 q 821 917 813 944 q 829 850 829 890 l 829 842 q 817 753 829 811 q 781 622 804 694 q 726 474 758 550 q 686 383 707 426 q 644 298 665 339 q 602 220 624 257 q 560 151 581 183 q 519 93 539 119 l 540 160 l 546 97 l 517 117 q 563 122 542 121 q 603 124 585 124 q 635 126 621 125 q 663 126 650 126 q 689 126 676 126 l 769 126 q 815 106 801 126 q 829 46 829 86 q 828 20 829 33 q 826 0 828 7 m 547 736 q 528 733 540 735 q 506 732 517 732 q 476 738 488 732 q 458 757 464 743 q 453 797 453 771 q 456 858 453 826 q 465 922 458 889 q 479 985 471 954 q 499 1047 488 1017 q 549 1042 532 1047 q 573 1027 567 1038 q 578 1000 579 1017 q 571 937 578 975 q 556 849 564 899 q 547 736 547 799 z "},"ẞ":{"ha":833,"x_min":56,"x_max":767,"o":"m 257 -3 q 232 -8 244 -6 q 206 -10 219 -10 q 135 17 158 -10 q 111 103 111 44 q 111 297 111 200 q 111 492 111 394 q 111 688 111 590 q 111 882 111 785 l 228 882 l 210 839 q 235 798 226 824 q 243 736 243 772 q 243 531 243 633 q 243 326 243 429 q 243 121 243 224 q 244 72 243 92 q 249 34 246 51 q 257 -3 251 17 m 539 117 q 607 128 578 117 q 649 163 636 140 q 653 189 651 176 q 654 217 654 201 q 644 265 654 243 q 611 307 635 286 q 544 353 588 328 l 476 394 q 414 449 432 422 q 396 515 396 476 l 396 531 q 416 608 396 569 q 486 697 436 646 l 510 722 q 544 761 529 743 q 569 797 558 779 q 583 839 579 815 l 579 846 l 100 846 q 67 866 78 846 q 56 931 56 886 q 56 952 56 942 q 58 972 57 963 l 669 972 q 699 960 688 972 q 717 928 711 947 q 724 888 724 908 l 724 875 q 713 805 724 839 q 679 739 701 771 q 622 674 657 707 l 596 649 q 542 590 561 614 q 517 547 524 567 q 513 501 511 528 q 546 478 528 490 q 583 454 564 467 l 622 429 q 706 363 674 397 q 752 291 738 329 q 767 206 767 253 l 767 193 q 739 81 767 128 q 660 10 711 35 q 540 -15 610 -15 q 473 -9 503 -15 q 422 8 443 -3 q 388 33 401 19 q 367 70 374 47 q 360 121 360 93 q 362 151 360 138 q 367 174 364 164 l 372 174 q 424 140 400 153 q 475 122 447 128 q 539 117 503 117 z "},"Ω":{"ha":833,"x_min":63,"x_max":771,"o":"m 418 1000 q 605 947 531 1000 q 715 793 679 893 q 751 551 751 693 l 751 518 q 740 382 751 446 q 704 266 728 318 q 644 176 681 214 q 561 117 608 139 l 596 161 l 596 106 l 568 126 l 714 126 q 758 108 744 126 q 771 44 771 89 q 769 22 771 35 q 765 0 768 10 l 554 0 q 507 9 525 0 q 481 37 489 18 q 474 83 474 56 q 476 109 474 97 q 483 131 479 121 q 560 193 529 150 q 608 314 592 236 q 625 513 625 392 l 625 539 q 601 731 625 650 q 526 857 578 813 q 478 870 500 867 q 429 874 456 874 q 306 826 354 874 q 233 690 257 779 q 208 476 208 601 l 208 450 q 224 295 208 361 q 272 188 240 229 q 346 131 303 147 q 354 108 351 118 q 357 83 357 97 q 349 36 357 54 q 323 9 340 18 q 276 0 306 0 l 140 0 q 83 21 103 0 q 63 82 63 42 q 64 105 63 93 q 68 126 65 117 l 267 126 l 235 106 l 235 161 l 272 119 q 169 190 213 140 q 104 315 126 240 q 82 483 82 390 l 82 517 q 121 772 82 664 q 235 940 160 881 q 418 1000 310 1000 z "},"a":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 z "},"à":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 299 1121 q 333 1035 311 1075 q 388 959 356 996 q 465 886 421 922 q 435 872 451 876 q 403 868 419 868 q 360 873 381 868 q 319 890 339 878 q 264 934 290 908 q 217 990 238 960 q 188 1054 197 1021 q 187 1083 182 1068 q 207 1106 192 1099 q 233 1116 219 1113 q 263 1121 246 1119 q 299 1121 281 1122 z "},"á":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 496 1121 q 547 1119 525 1122 q 588 1106 569 1115 q 608 1083 603 1099 q 607 1054 613 1068 q 578 990 599 1021 q 531 934 557 960 q 475 890 506 908 q 435 873 456 878 q 392 868 414 868 q 359 872 375 868 q 329 886 343 876 q 406 959 374 922 q 462 1035 439 996 q 496 1121 485 1075 z "},"â":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 369 1128 q 381 1128 375 1128 q 397 1128 388 1128 q 440 1122 419 1128 q 497 1089 460 1115 q 544 1051 519 1072 q 594 1005 569 1031 q 640 949 618 979 q 681 885 663 919 q 649 871 665 875 q 610 867 632 867 q 576 875 589 867 q 543 908 564 883 q 474 978 514 946 q 364 1049 435 1011 l 443 1029 l 353 1029 l 429 1050 q 300 957 350 1004 q 224 864 250 910 l 215 864 q 169 869 188 864 q 142 882 151 874 q 133 899 133 890 q 142 927 133 908 q 169 972 150 946 q 210 1019 188 996 q 260 1063 233 1042 q 314 1100 286 1083 q 369 1128 342 1117 z "},"ã":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 519 996 q 588 1011 561 996 q 642 1068 614 1026 l 650 1068 q 656 1052 654 1061 q 658 1033 657 1043 q 660 1008 660 1022 q 652 964 660 988 q 625 921 644 940 q 583 896 608 904 q 525 888 558 888 q 452 900 483 888 q 394 928 421 913 q 338 956 367 943 q 272 968 310 968 q 207 952 233 968 q 153 896 181 936 l 144 896 q 140 912 142 904 q 136 929 138 919 q 135 950 135 939 q 142 998 135 975 q 167 1039 150 1021 q 208 1066 183 1056 q 265 1076 232 1076 q 342 1064 308 1076 q 402 1036 375 1051 q 457 1008 429 1021 q 519 996 485 996 z "},"ä":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 175 1047 q 206 1051 189 1050 q 236 1051 222 1051 q 283 1047 263 1051 q 317 1029 304 1042 q 331 994 331 1017 l 331 890 q 300 887 317 888 q 268 886 283 886 q 223 891 244 886 q 188 909 201 896 q 175 943 175 922 l 175 1047 m 464 1047 q 494 1051 478 1050 q 525 1051 511 1051 q 572 1047 551 1051 q 606 1029 593 1042 q 619 994 619 1017 l 619 890 q 589 887 606 888 q 557 886 572 886 q 512 891 533 886 q 477 909 490 896 q 464 943 464 922 l 464 1047 z "},"å":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 401 1161 q 488 1141 450 1161 q 545 1085 525 1121 q 565 1003 565 1050 l 565 993 q 517 874 565 921 q 393 828 469 828 q 276 872 322 828 q 229 988 229 917 l 229 996 q 251 1082 229 1044 q 313 1140 274 1119 q 401 1161 351 1161 m 403 1082 q 339 1060 361 1082 q 317 1000 317 1039 l 317 990 q 324 956 317 972 q 342 929 331 940 q 366 919 354 922 q 393 917 378 917 q 456 938 433 917 q 478 996 478 960 l 478 1004 q 471 1041 478 1025 q 450 1068 464 1057 q 429 1078 440 1075 q 403 1082 418 1082 z "},"ā":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 125 1015 l 608 1015 q 657 998 644 1015 q 669 944 669 981 q 669 931 669 938 q 667 918 668 925 q 665 906 667 911 l 228 906 q 163 915 185 906 q 133 945 140 925 q 125 997 125 965 q 125 1003 125 1000 q 125 1010 125 1007 q 125 1015 125 1013 z "},"ă":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 397 985 q 506 1019 467 990 q 563 1110 544 1049 q 599 1103 582 1108 q 629 1088 615 1097 q 638 1071 636 1082 q 633 1046 639 1060 q 584 960 617 996 q 506 907 551 925 q 403 889 461 889 l 392 889 q 288 907 333 889 q 211 960 243 925 q 161 1046 179 996 q 157 1071 156 1060 q 165 1088 158 1082 q 196 1103 179 1097 q 232 1110 213 1108 q 289 1019 250 1049 q 397 985 328 990 z "},"ą":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 669 25 q 688 22 676 26 q 722 -1 699 17 q 712 -10 719 -6 q 686 -18 704 -15 q 583 -69 617 -35 q 550 -153 550 -104 q 572 -206 550 -186 q 636 -225 593 -225 q 681 -219 661 -225 q 721 -199 701 -214 l 729 -199 q 737 -217 735 -208 q 740 -235 739 -226 q 742 -256 742 -243 q 710 -326 742 -303 q 621 -349 678 -349 q 493 -306 542 -349 q 444 -186 444 -262 q 475 -78 444 -125 q 557 -4 506 -31 q 669 25 608 22 z "},"ǻ":{"ha":833,"x_min":99,"x_max":792,"o":"m 401 1165 q 488 1145 450 1165 q 546 1090 525 1125 q 567 1007 567 1054 l 567 999 q 518 880 567 926 q 393 833 469 833 q 276 877 324 833 q 229 992 229 921 l 229 1000 q 251 1087 229 1050 q 313 1144 274 1124 q 401 1165 351 1165 m 404 1086 q 340 1065 363 1086 q 318 1004 318 1043 l 318 996 q 324 960 318 976 q 343 935 331 944 q 367 924 356 926 q 394 921 379 921 q 456 942 435 921 q 478 1000 478 964 l 478 1010 q 471 1046 478 1029 q 451 1072 464 1063 q 429 1083 440 1079 q 404 1086 418 1086 m 507 1338 q 544 1336 528 1338 q 576 1332 561 1335 q 604 1324 590 1329 q 624 1305 621 1318 q 622 1278 626 1292 q 601 1235 614 1256 q 571 1198 588 1215 q 534 1165 554 1181 q 490 1136 514 1149 q 453 1122 471 1126 q 413 1118 435 1118 q 388 1120 400 1118 q 363 1126 375 1122 q 338 1136 350 1129 q 415 1199 381 1168 q 472 1264 449 1229 q 507 1338 496 1299 m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 z "},"ȁ":{"ha":833,"x_min":75,"x_max":792,"o":"m 190 1121 q 226 1035 204 1075 q 280 958 247 994 q 357 885 313 922 q 328 871 344 875 q 294 867 311 867 q 252 872 272 867 q 211 890 232 878 q 156 933 182 908 q 110 989 129 958 q 79 1053 90 1019 q 79 1083 75 1068 q 99 1106 83 1099 q 125 1115 111 1113 q 156 1119 139 1118 q 190 1121 172 1121 m 436 1121 q 471 1035 449 1075 q 526 958 493 994 q 603 885 558 922 q 573 871 589 875 q 540 867 557 867 q 497 872 518 867 q 457 890 476 878 q 401 933 428 908 q 354 989 374 958 q 325 1053 335 1019 q 324 1083 319 1068 q 344 1106 328 1099 q 370 1115 357 1113 q 400 1119 383 1118 q 436 1121 417 1121 m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 z "},"ȃ":{"ha":833,"x_min":99,"x_max":792,"o":"m 397 1011 q 290 978 329 1007 q 232 888 251 949 q 197 894 214 889 q 167 910 179 900 q 157 926 158 915 q 161 950 156 936 q 213 1037 181 1001 q 289 1090 244 1072 q 392 1108 333 1108 l 403 1108 q 507 1090 463 1108 q 584 1037 551 1072 q 635 950 617 1001 q 639 926 640 936 q 629 910 638 915 q 599 894 617 900 q 564 888 582 889 q 506 978 544 949 q 397 1011 467 1007 m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 z "},"ạ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 335 -125 q 351 -122 342 -124 q 368 -120 360 -121 q 385 -119 376 -119 q 404 -119 394 -119 q 478 -133 450 -119 q 507 -183 507 -146 l 507 -274 q 491 -276 500 -275 q 474 -278 482 -278 q 456 -279 465 -279 q 438 -279 447 -279 q 364 -265 393 -279 q 335 -215 335 -251 l 335 -125 z "},"ả":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 342 858 q 356 894 342 878 q 406 926 371 910 q 466 961 449 947 q 483 993 483 975 q 483 1001 483 997 q 482 1010 483 1006 q 456 1017 471 1015 q 422 1019 440 1019 q 364 1013 390 1019 q 317 994 338 1007 q 275 963 296 982 l 267 963 q 258 986 261 975 q 256 1013 256 997 q 263 1050 256 1033 q 282 1081 269 1067 q 299 1094 290 1088 q 319 1105 308 1100 q 345 1113 331 1110 q 376 1117 360 1115 q 413 1119 392 1119 q 501 1103 467 1119 q 553 1061 536 1088 q 569 1000 569 1035 l 569 997 q 554 942 569 963 q 506 899 539 921 q 458 862 469 875 q 443 829 446 849 q 429 826 438 828 q 413 822 421 824 q 396 821 404 821 q 355 831 368 821 q 342 858 342 840 z "},"ấ":{"ha":833,"x_min":99,"x_max":811,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 369 1128 q 381 1128 375 1128 q 397 1128 388 1128 q 440 1122 419 1128 q 497 1089 460 1115 q 544 1051 519 1072 q 594 1005 569 1031 q 640 949 618 979 q 681 885 663 919 q 649 871 665 875 q 610 867 632 867 q 576 875 589 867 q 543 908 564 883 q 474 978 514 946 q 364 1049 435 1011 l 443 1029 l 353 1029 l 429 1050 q 300 957 350 1004 q 224 864 250 910 l 215 864 q 169 869 188 864 q 142 882 151 874 q 133 899 133 890 q 142 927 133 908 q 169 972 150 946 q 210 1019 188 996 q 260 1063 233 1042 q 314 1100 286 1083 q 369 1128 342 1117 m 708 1290 q 737 1289 724 1290 q 763 1285 750 1288 q 786 1281 775 1283 q 808 1260 804 1275 q 803 1221 811 1244 q 780 1175 793 1197 q 749 1134 767 1153 q 711 1097 732 1115 q 677 1078 693 1085 q 642 1071 661 1071 q 618 1073 629 1071 q 596 1079 607 1075 q 572 1089 585 1083 q 632 1147 606 1115 q 678 1214 658 1178 q 708 1290 697 1250 z "},"ầ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 369 1128 q 381 1128 375 1128 q 397 1128 388 1128 q 440 1122 419 1128 q 497 1089 460 1115 q 544 1051 519 1072 q 594 1005 569 1031 q 640 949 618 979 q 681 885 663 919 q 649 871 665 875 q 610 867 632 867 q 576 875 589 867 q 543 908 564 883 q 474 978 514 946 q 364 1049 435 1011 l 443 1029 l 353 1029 l 429 1050 q 300 957 350 1004 q 224 864 250 910 l 215 864 q 169 869 188 864 q 142 882 151 874 q 133 899 133 890 q 142 927 133 908 q 169 972 150 946 q 210 1019 188 996 q 260 1063 233 1042 q 314 1100 286 1083 q 369 1128 342 1117 m 567 1289 q 597 1214 578 1250 q 643 1147 617 1178 q 703 1089 669 1115 q 679 1079 690 1083 q 658 1073 668 1075 q 635 1071 647 1071 q 598 1078 615 1071 q 563 1097 581 1085 q 525 1134 543 1115 q 494 1175 507 1153 q 472 1221 481 1197 q 468 1260 463 1244 q 493 1281 474 1275 q 514 1285 503 1283 q 538 1288 525 1288 q 567 1289 551 1289 z "},"ẩ":{"ha":833,"x_min":99,"x_max":796,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 369 1128 q 381 1128 375 1128 q 397 1128 388 1128 q 440 1122 419 1128 q 497 1089 460 1115 q 544 1051 519 1072 q 594 1005 569 1031 q 640 949 618 979 q 681 885 663 919 q 649 871 665 875 q 610 867 632 867 q 576 875 589 867 q 543 908 564 883 q 474 978 514 946 q 364 1049 435 1011 l 443 1029 l 353 1029 l 429 1050 q 300 957 350 1004 q 224 864 250 910 l 215 864 q 169 869 188 864 q 142 882 151 874 q 133 899 133 890 q 142 927 133 908 q 169 972 150 946 q 210 1019 188 996 q 260 1063 233 1042 q 314 1100 286 1083 q 369 1128 342 1117 m 568 1096 q 584 1132 568 1115 q 642 1164 600 1149 q 695 1188 681 1178 q 710 1211 710 1197 q 710 1219 710 1215 q 708 1226 710 1222 q 681 1233 696 1232 q 649 1235 667 1235 q 567 1223 601 1235 q 506 1185 533 1211 l 497 1185 q 489 1206 492 1196 q 486 1232 486 1217 q 492 1267 486 1251 q 513 1294 499 1282 q 533 1309 522 1303 q 560 1320 544 1315 q 594 1327 575 1325 q 638 1329 614 1329 q 726 1315 692 1329 q 778 1275 761 1300 q 796 1218 796 1250 l 796 1215 q 781 1168 796 1186 q 731 1131 765 1150 q 683 1097 693 1110 q 669 1067 672 1085 q 656 1063 664 1065 q 639 1060 647 1061 q 622 1060 631 1060 q 581 1070 594 1060 q 568 1096 568 1081 z "},"ẫ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 369 1128 q 381 1128 375 1128 q 397 1128 388 1128 q 440 1122 419 1128 q 497 1089 460 1115 q 544 1051 519 1072 q 594 1005 569 1031 q 640 949 618 979 q 681 885 663 919 q 649 871 665 875 q 610 867 632 867 q 576 875 589 867 q 543 908 564 883 q 474 978 514 946 q 364 1049 435 1011 l 443 1029 l 353 1029 l 429 1050 q 300 957 350 1004 q 224 864 250 910 l 215 864 q 169 869 188 864 q 142 882 151 874 q 133 899 133 890 q 142 927 133 908 q 169 972 150 946 q 210 1019 188 996 q 260 1063 233 1042 q 314 1100 286 1083 q 369 1128 342 1117 m 508 1267 q 553 1280 536 1267 q 586 1332 571 1293 l 594 1332 q 605 1306 601 1321 q 608 1275 608 1292 q 605 1239 608 1256 q 596 1210 601 1222 q 566 1174 586 1188 q 517 1161 546 1161 q 447 1176 478 1161 q 391 1209 417 1190 q 339 1242 365 1228 q 282 1257 313 1257 q 235 1241 251 1257 q 201 1193 219 1225 l 193 1193 q 184 1216 188 1203 q 181 1246 181 1229 q 184 1283 181 1267 q 194 1314 188 1299 q 226 1351 204 1338 q 282 1364 249 1364 q 343 1349 315 1364 q 397 1315 371 1333 q 449 1281 422 1296 q 508 1267 476 1267 z "},"ậ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 369 1128 q 381 1128 375 1128 q 397 1128 388 1128 q 440 1122 419 1128 q 497 1089 460 1115 q 544 1051 519 1072 q 594 1005 569 1031 q 640 949 618 979 q 681 885 663 919 q 649 871 665 875 q 610 867 632 867 q 576 875 589 867 q 543 908 564 883 q 474 978 514 946 q 364 1049 435 1011 l 443 1029 l 353 1029 l 429 1050 q 300 957 350 1004 q 224 864 250 910 l 215 864 q 169 869 188 864 q 142 882 151 874 q 133 899 133 890 q 142 927 133 908 q 169 972 150 946 q 210 1019 188 996 q 260 1063 233 1042 q 314 1100 286 1083 q 369 1128 342 1117 m 335 -125 q 351 -122 342 -124 q 368 -120 360 -121 q 385 -119 376 -119 q 404 -119 394 -119 q 478 -133 450 -119 q 507 -183 507 -146 l 507 -274 q 491 -276 500 -275 q 474 -278 482 -278 q 456 -279 465 -279 q 438 -279 447 -279 q 364 -265 393 -279 q 335 -215 335 -251 l 335 -125 z "},"ắ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 397 985 q 506 1019 467 990 q 563 1110 544 1049 q 599 1103 582 1108 q 629 1088 615 1097 q 638 1071 636 1082 q 633 1046 639 1060 q 584 960 617 996 q 506 907 551 925 q 403 889 461 889 l 392 889 q 288 907 333 889 q 211 960 243 925 q 161 1046 179 996 q 157 1071 156 1060 q 165 1088 158 1082 q 196 1103 179 1097 q 232 1110 213 1108 q 289 1019 250 1049 q 397 985 328 990 m 468 1332 q 497 1331 483 1332 q 522 1327 510 1329 q 546 1322 535 1325 q 567 1301 564 1317 q 563 1263 571 1286 q 540 1217 553 1239 q 509 1176 526 1194 q 471 1139 492 1157 q 437 1119 453 1126 q 401 1113 421 1113 q 378 1115 389 1113 q 356 1121 367 1117 q 332 1131 344 1125 q 392 1188 365 1157 q 438 1256 418 1219 q 468 1332 457 1292 z "},"ằ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 397 985 q 506 1019 467 990 q 563 1110 544 1049 q 599 1103 582 1108 q 629 1088 615 1097 q 638 1071 636 1082 q 633 1046 639 1060 q 584 960 617 996 q 506 907 551 925 q 403 889 461 889 l 392 889 q 288 907 333 889 q 211 960 243 925 q 161 1046 179 996 q 157 1071 156 1060 q 165 1088 158 1082 q 196 1103 179 1097 q 232 1110 213 1108 q 289 1019 250 1049 q 397 985 328 990 m 326 1331 q 357 1256 338 1292 q 403 1188 376 1219 q 463 1131 429 1157 q 439 1121 450 1125 q 417 1115 428 1117 q 394 1113 407 1113 q 358 1119 375 1113 q 322 1139 340 1126 q 285 1176 303 1157 q 253 1217 267 1194 q 232 1263 240 1239 q 228 1301 222 1286 q 253 1322 233 1317 q 274 1327 263 1325 q 298 1330 285 1329 q 326 1331 311 1331 z "},"ẳ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 397 985 q 506 1019 467 990 q 563 1110 544 1049 q 599 1103 582 1108 q 629 1088 615 1097 q 638 1071 636 1082 q 633 1046 639 1060 q 584 960 617 996 q 506 907 551 925 q 403 889 461 889 l 392 889 q 288 907 333 889 q 211 960 243 925 q 161 1046 179 996 q 157 1071 156 1060 q 165 1088 158 1082 q 196 1103 179 1097 q 232 1110 213 1108 q 289 1019 250 1049 q 397 985 328 990 m 328 1128 q 344 1164 328 1147 q 401 1196 360 1181 q 455 1219 440 1210 q 469 1243 469 1229 q 469 1251 469 1247 q 468 1258 469 1254 q 441 1265 456 1264 q 408 1267 426 1267 q 327 1255 361 1267 q 265 1217 293 1243 l 257 1217 q 249 1238 251 1228 q 246 1264 246 1249 q 252 1299 246 1283 q 272 1326 258 1314 q 293 1341 282 1335 q 319 1352 304 1347 q 354 1359 335 1357 q 397 1361 374 1361 q 486 1347 451 1361 q 538 1307 521 1332 q 556 1250 556 1282 l 556 1247 q 540 1200 556 1218 q 490 1163 525 1182 q 442 1129 453 1142 q 429 1099 432 1117 q 415 1095 424 1097 q 399 1092 407 1093 q 382 1092 390 1092 q 341 1102 354 1092 q 328 1128 328 1113 z "},"ẵ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 397 985 q 506 1019 467 990 q 563 1110 544 1049 q 599 1103 582 1108 q 629 1088 615 1097 q 638 1071 636 1082 q 633 1046 639 1060 q 584 960 617 996 q 506 907 551 925 q 403 889 461 889 l 392 889 q 288 907 333 889 q 211 960 243 925 q 161 1046 179 996 q 157 1071 156 1060 q 165 1088 158 1082 q 196 1103 179 1097 q 232 1110 213 1108 q 289 1019 250 1049 q 397 985 328 990 m 508 1244 q 553 1258 536 1244 q 586 1310 571 1271 l 594 1310 q 605 1284 601 1299 q 608 1253 608 1269 q 605 1217 608 1233 q 596 1188 601 1200 q 566 1152 586 1165 q 517 1139 546 1139 q 447 1153 478 1139 q 391 1187 417 1168 q 339 1220 365 1206 q 282 1235 313 1235 q 235 1219 251 1235 q 201 1171 219 1203 l 193 1171 q 184 1194 188 1181 q 181 1224 181 1207 q 184 1260 181 1244 q 194 1292 188 1276 q 226 1328 204 1315 q 282 1342 249 1342 q 343 1326 315 1342 q 397 1292 371 1311 q 449 1259 422 1274 q 508 1244 476 1244 z "},"ặ":{"ha":833,"x_min":99,"x_max":792,"o":"m 686 490 q 686 416 686 453 q 686 342 686 379 q 686 267 686 304 q 686 193 686 231 q 687 156 686 172 q 690 122 688 140 q 706 116 697 118 q 722 114 714 114 q 754 119 739 114 q 782 132 769 124 l 790 132 q 791 122 790 126 q 792 111 792 118 q 783 58 792 83 q 758 17 774 32 q 728 -4 744 3 q 694 -11 713 -11 q 635 3 661 -11 q 590 42 608 17 q 563 100 572 67 q 553 169 553 133 q 553 258 553 213 q 553 338 553 304 q 554 433 553 392 q 556 511 556 475 q 557 583 557 547 q 509 610 536 600 q 449 625 482 621 q 375 629 417 629 q 298 625 335 629 q 228 614 261 621 q 165 596 196 607 l 157 596 q 154 615 156 604 q 153 636 153 626 q 158 677 153 658 q 178 710 164 696 q 223 733 192 724 q 300 748 254 743 q 401 753 346 753 q 524 732 471 753 q 613 675 576 711 q 667 592 649 639 q 686 490 686 544 m 232 197 q 258 124 232 147 q 340 101 283 101 q 417 116 378 101 q 497 161 457 131 q 575 242 538 192 l 581 132 l 551 132 q 495 62 531 96 q 412 7 460 28 q 308 -14 364 -14 q 195 10 243 -14 q 123 79 147 33 q 99 192 99 125 l 99 200 q 117 284 99 244 q 171 354 136 324 q 252 402 206 385 q 356 419 299 419 q 460 414 411 419 q 545 398 510 408 q 594 378 581 388 q 607 360 603 371 q 613 336 611 350 q 615 301 615 322 q 538 316 576 311 q 460 324 499 321 q 385 326 422 326 q 306 318 339 326 q 249 294 272 310 q 237 253 242 275 q 232 201 232 231 l 232 197 m 397 985 q 506 1019 467 990 q 563 1110 544 1049 q 599 1103 582 1108 q 629 1088 615 1097 q 638 1071 636 1082 q 633 1046 639 1060 q 584 960 617 996 q 506 907 551 925 q 403 889 461 889 l 392 889 q 288 907 333 889 q 211 960 243 925 q 161 1046 179 996 q 157 1071 156 1060 q 165 1088 158 1082 q 196 1103 179 1097 q 232 1110 213 1108 q 289 1019 250 1049 q 397 985 328 990 m 335 -125 q 351 -122 342 -124 q 368 -120 360 -121 q 385 -119 376 -119 q 404 -119 394 -119 q 478 -133 450 -119 q 507 -183 507 -146 l 507 -274 q 491 -276 500 -275 q 474 -278 482 -278 q 456 -279 465 -279 q 438 -279 447 -279 q 364 -265 393 -279 q 335 -215 335 -251 l 335 -125 z "},"b":{"ha":833,"x_min":107,"x_max":750,"o":"m 231 -4 q 224 -5 228 -4 q 215 -6 219 -6 q 208 -6 211 -6 q 161 10 179 -6 q 135 51 143 25 q 126 113 126 78 q 126 319 126 219 q 126 515 126 418 q 126 711 126 613 q 126 914 126 810 q 122 986 126 957 q 107 1042 118 1015 q 116 1044 111 1043 q 126 1046 121 1044 q 135 1047 131 1047 q 146 1047 140 1047 q 201 1031 176 1047 q 240 981 225 1015 q 254 886 254 946 q 254 707 254 796 q 254 530 254 618 q 254 353 254 442 q 254 175 254 264 q 253 139 254 157 q 249 102 251 121 q 244 65 247 83 q 238 29 242 47 q 231 -4 235 11 m 233 94 l 233 208 q 320 133 276 157 q 425 108 364 108 q 534 145 490 108 q 599 253 578 182 q 619 428 619 324 l 619 442 q 616 519 619 488 q 600 582 613 551 q 569 610 588 599 q 524 621 550 621 q 420 592 469 621 q 327 500 371 564 q 240 328 283 436 l 240 522 l 265 522 q 332 645 290 593 q 425 726 374 697 q 531 754 476 754 q 618 733 578 754 q 688 674 658 713 q 733 583 717 635 q 750 467 750 531 l 750 440 q 727 235 750 321 q 663 93 704 149 q 568 11 622 38 q 451 -15 514 -15 q 373 1 410 -15 q 308 43 336 18 q 260 94 279 68 l 233 94 z "},"c":{"ha":833,"x_min":93,"x_max":717,"o":"m 482 754 q 567 747 529 754 q 633 727 604 740 q 681 694 663 714 q 703 658 697 679 q 710 606 710 638 q 707 567 710 583 q 697 535 704 551 l 689 535 q 594 603 640 582 q 471 624 547 624 q 338 585 394 624 q 252 479 282 547 q 222 324 222 411 l 222 306 q 233 219 222 260 q 269 144 244 179 q 358 119 313 128 q 453 110 403 110 q 553 119 508 110 q 634 149 597 128 q 704 199 671 169 l 713 199 q 715 180 714 190 q 717 154 717 169 q 709 98 717 124 q 681 53 701 72 q 629 19 663 33 q 552 -6 596 4 q 453 -15 508 -15 q 309 9 375 -15 q 195 78 243 33 q 120 183 147 122 q 93 317 93 243 l 93 335 q 144 560 93 467 q 282 704 194 654 q 482 754 369 754 z "},"ç":{"ha":833,"x_min":93,"x_max":717,"o":"m 482 754 q 567 747 529 754 q 633 727 604 740 q 681 694 663 714 q 703 658 697 679 q 710 606 710 638 q 707 567 710 583 q 697 535 704 551 l 689 535 q 594 603 640 582 q 471 624 547 624 q 338 585 394 624 q 252 479 282 547 q 222 324 222 411 l 222 306 q 233 219 222 260 q 269 144 244 179 q 358 119 313 128 q 453 110 403 110 q 553 119 508 110 q 634 149 597 128 q 704 199 671 169 l 713 199 q 715 180 714 190 q 717 154 717 169 q 709 98 717 124 q 681 53 701 72 q 629 19 663 33 q 552 -6 596 4 q 453 -15 508 -15 q 309 9 375 -15 q 195 78 243 33 q 120 183 147 122 q 93 317 93 243 l 93 335 q 144 560 93 467 q 282 704 194 654 q 482 754 369 754 m 493 36 q 488 15 490 28 q 484 -10 486 3 q 481 -33 482 -22 q 476 -51 479 -43 l 476 -58 q 563 -94 532 -64 q 593 -175 593 -124 q 544 -285 593 -244 q 408 -325 496 -325 q 342 -314 368 -325 q 303 -285 315 -303 q 292 -246 292 -267 q 293 -226 292 -236 q 297 -208 294 -217 q 303 -189 300 -199 l 311 -189 q 351 -215 331 -207 q 404 -224 371 -224 q 463 -208 443 -224 q 483 -161 483 -192 q 468 -124 483 -137 q 419 -111 453 -111 q 399 -105 407 -111 q 392 -89 392 -99 q 393 -62 392 -76 q 398 -33 394 -47 q 406 -5 401 -18 q 417 18 411 8 q 428 29 419 25 q 452 35 436 33 q 493 36 468 38 z "},"ć":{"ha":833,"x_min":93,"x_max":717,"o":"m 482 754 q 567 747 529 754 q 633 727 604 740 q 681 694 663 714 q 703 658 697 679 q 710 606 710 638 q 707 567 710 583 q 697 535 704 551 l 689 535 q 594 603 640 582 q 471 624 547 624 q 338 585 394 624 q 252 479 282 547 q 222 324 222 411 l 222 306 q 233 219 222 260 q 269 144 244 179 q 358 119 313 128 q 453 110 403 110 q 553 119 508 110 q 634 149 597 128 q 704 199 671 169 l 713 199 q 715 180 714 190 q 717 154 717 169 q 709 98 717 124 q 681 53 701 72 q 629 19 663 33 q 552 -6 596 4 q 453 -15 508 -15 q 309 9 375 -15 q 195 78 243 33 q 120 183 147 122 q 93 317 93 243 l 93 335 q 144 560 93 467 q 282 704 194 654 q 482 754 369 754 m 551 1129 q 603 1127 581 1131 q 643 1114 625 1124 q 663 1092 658 1107 q 663 1063 668 1076 q 633 999 654 1029 q 587 942 613 968 q 531 899 561 917 q 490 881 511 886 q 447 876 469 876 q 415 881 431 876 q 385 894 399 885 q 462 967 429 931 q 517 1044 494 1004 q 551 1129 540 1083 z "},"ĉ":{"ha":833,"x_min":93,"x_max":736,"o":"m 482 754 q 567 747 529 754 q 633 727 604 740 q 681 694 663 714 q 703 658 697 679 q 710 606 710 638 q 707 567 710 583 q 697 535 704 551 l 689 535 q 594 603 640 582 q 471 624 547 624 q 338 585 394 624 q 252 479 282 547 q 222 324 222 411 l 222 306 q 233 219 222 260 q 269 144 244 179 q 358 119 313 128 q 453 110 403 110 q 553 119 508 110 q 634 149 597 128 q 704 199 671 169 l 713 199 q 715 180 714 190 q 717 154 717 169 q 709 98 717 124 q 681 53 701 72 q 629 19 663 33 q 552 -6 596 4 q 453 -15 508 -15 q 309 9 375 -15 q 195 78 243 33 q 120 183 147 122 q 93 317 93 243 l 93 335 q 144 560 93 467 q 282 704 194 654 q 482 754 369 754 m 425 1136 q 437 1136 431 1136 q 453 1136 443 1136 q 495 1130 475 1136 q 553 1097 515 1124 q 600 1060 575 1081 q 649 1013 625 1039 q 696 958 674 988 q 736 893 718 928 q 704 879 721 883 q 665 875 688 875 q 632 883 644 875 q 599 917 619 892 q 530 987 569 954 q 419 1057 490 1019 l 499 1038 l 408 1038 l 485 1058 q 356 965 406 1013 q 279 872 306 918 l 271 872 q 225 877 243 872 q 198 890 207 882 q 189 907 189 899 q 197 935 189 917 q 225 981 206 954 q 266 1027 243 1004 q 315 1071 289 1050 q 369 1108 342 1092 q 425 1136 397 1125 z "},"ċ":{"ha":833,"x_min":93,"x_max":717,"o":"m 482 754 q 567 747 529 754 q 633 727 604 740 q 681 694 663 714 q 703 658 697 679 q 710 606 710 638 q 707 567 710 583 q 697 535 704 551 l 689 535 q 594 603 640 582 q 471 624 547 624 q 338 585 394 624 q 252 479 282 547 q 222 324 222 411 l 222 306 q 233 219 222 260 q 269 144 244 179 q 358 119 313 128 q 453 110 403 110 q 553 119 508 110 q 634 149 597 128 q 704 199 671 169 l 713 199 q 715 180 714 190 q 717 154 717 169 q 709 98 717 124 q 681 53 701 72 q 629 19 663 33 q 552 -6 596 4 q 453 -15 508 -15 q 309 9 375 -15 q 195 78 243 33 q 120 183 147 122 q 93 317 93 243 l 93 335 q 144 560 93 467 q 282 704 194 654 q 482 754 369 754 m 360 1044 q 378 1051 368 1049 q 398 1054 388 1053 q 420 1056 408 1056 q 442 1057 432 1057 q 517 1041 489 1057 q 546 988 546 1025 l 546 904 q 528 898 538 900 q 510 894 519 896 q 491 892 501 893 q 469 892 481 892 q 390 913 421 892 q 360 971 360 935 l 360 1044 z "},"č":{"ha":833,"x_min":93,"x_max":718,"o":"m 482 754 q 567 747 529 754 q 633 727 604 740 q 681 694 663 714 q 703 658 697 679 q 710 606 710 638 q 707 567 710 583 q 697 535 704 551 l 689 535 q 594 603 640 582 q 471 624 547 624 q 338 585 394 624 q 252 479 282 547 q 222 324 222 411 l 222 306 q 233 219 222 260 q 269 144 244 179 q 358 119 313 128 q 453 110 403 110 q 553 119 508 110 q 634 149 597 128 q 704 199 671 169 l 713 199 q 715 180 714 190 q 717 154 717 169 q 709 98 717 124 q 681 53 701 72 q 629 19 663 33 q 552 -6 596 4 q 453 -15 508 -15 q 309 9 375 -15 q 195 78 243 33 q 120 183 147 122 q 93 317 93 243 l 93 335 q 144 560 93 467 q 282 704 194 654 q 482 754 369 754 m 481 885 q 469 885 475 885 q 453 885 463 885 q 410 891 431 885 q 353 924 390 897 q 306 961 331 940 q 256 1008 281 982 q 210 1063 232 1033 q 169 1128 188 1093 q 202 1142 185 1138 q 240 1146 219 1146 q 274 1138 261 1146 q 307 1104 288 1129 q 377 1033 338 1067 q 486 964 417 1000 l 407 983 l 499 983 l 421 963 q 551 1055 500 1008 q 626 1149 601 1101 l 635 1149 q 681 1144 664 1149 q 708 1131 699 1139 q 718 1114 718 1124 q 710 1085 718 1103 q 681 1039 701 1067 q 640 993 663 1017 q 590 949 617 969 q 536 913 564 929 q 481 885 508 896 z "},"ḉ":{"ha":833,"x_min":93,"x_max":717,"o":"m 482 754 q 567 747 529 754 q 633 727 604 740 q 681 694 663 714 q 703 658 697 679 q 710 606 710 638 q 707 567 710 583 q 697 535 704 551 l 689 535 q 594 603 640 582 q 471 624 547 624 q 338 585 394 624 q 252 479 282 547 q 222 324 222 411 l 222 306 q 233 219 222 260 q 269 144 244 179 q 358 119 313 128 q 453 110 403 110 q 553 119 508 110 q 634 149 597 128 q 704 199 671 169 l 713 199 q 715 180 714 190 q 717 154 717 169 q 709 98 717 124 q 681 53 701 72 q 629 19 663 33 q 552 -6 596 4 q 453 -15 508 -15 q 309 9 375 -15 q 195 78 243 33 q 120 183 147 122 q 93 317 93 243 l 93 335 q 144 560 93 467 q 282 704 194 654 q 482 754 369 754 m 493 36 q 488 15 490 28 q 484 -10 486 3 q 481 -33 482 -22 q 476 -51 479 -43 l 476 -58 q 563 -94 532 -64 q 593 -175 593 -124 q 544 -285 593 -244 q 408 -325 496 -325 q 342 -314 368 -325 q 303 -285 315 -303 q 292 -246 292 -267 q 293 -226 292 -236 q 297 -208 294 -217 q 303 -189 300 -199 l 311 -189 q 351 -215 331 -207 q 404 -224 371 -224 q 463 -208 443 -224 q 483 -161 483 -192 q 468 -124 483 -137 q 419 -111 453 -111 q 399 -105 407 -111 q 392 -89 392 -99 q 393 -62 392 -76 q 398 -33 394 -47 q 406 -5 401 -18 q 417 18 411 8 q 428 29 419 25 q 452 35 436 33 q 493 36 468 38 m 551 1129 q 603 1127 581 1131 q 643 1114 625 1124 q 663 1092 658 1107 q 663 1063 668 1076 q 633 999 654 1029 q 587 942 613 968 q 531 899 561 917 q 490 881 511 886 q 447 876 469 876 q 415 881 431 876 q 385 894 399 885 q 462 967 429 931 q 517 1044 494 1004 q 551 1129 540 1083 z "},"d":{"ha":833,"x_min":83,"x_max":725,"o":"m 382 754 q 458 740 422 754 q 524 704 494 726 q 571 653 553 682 l 594 653 l 594 536 q 510 609 551 588 q 408 631 468 631 q 299 594 343 631 q 235 487 256 558 q 214 310 214 415 l 214 297 q 216 227 214 258 q 225 164 218 196 q 263 130 242 142 q 310 118 283 118 q 414 146 365 118 q 507 238 463 174 q 592 410 551 301 l 592 210 l 571 210 q 501 94 543 146 q 408 14 460 43 q 303 -15 357 -15 q 215 6 256 -15 q 146 65 175 26 q 100 156 117 104 q 83 271 83 208 l 83 297 q 106 504 83 418 q 170 646 129 590 q 265 728 211 701 q 382 754 319 754 m 597 1051 q 651 1037 626 1051 q 692 987 676 1022 q 707 890 707 951 q 707 701 707 794 q 707 513 707 607 q 707 326 707 419 q 707 139 707 233 q 710 63 707 93 q 725 0 714 33 q 714 -3 719 -1 q 703 -6 708 -4 q 692 -7 697 -7 q 681 -7 686 -7 q 624 13 647 -7 q 590 67 601 32 q 579 146 579 101 q 579 344 579 249 q 579 534 579 440 q 579 722 579 628 q 579 918 579 817 q 575 990 579 961 q 558 1046 571 1019 q 569 1048 564 1047 q 578 1050 574 1049 q 588 1051 583 1051 q 597 1051 593 1051 z "},"ď":{"ha":833,"x_min":83,"x_max":879,"o":"m 83 271 l 83 297 q 106 504 83 418 q 170 646 129 590 q 265 728 211 701 q 382 754 319 754 q 440 746 414 754 q 488 722 467 738 q 526 682 510 706 l 569 682 l 569 536 q 497 607 538 583 q 408 631 457 631 q 299 594 343 631 q 235 487 256 558 q 214 310 214 415 l 214 297 q 216 227 214 258 q 225 164 218 196 q 263 130 242 142 q 310 118 283 118 q 384 131 350 118 q 449 177 418 144 q 510 267 481 210 q 569 410 540 324 l 569 178 l 533 178 q 471 69 506 111 q 394 6 436 26 q 303 -15 353 -15 q 215 6 256 -15 q 146 65 175 26 q 100 156 117 104 q 83 271 83 208 m 535 918 q 531 988 535 961 q 519 1046 528 1014 q 529 1048 524 1047 q 541 1050 535 1049 q 553 1051 547 1051 q 567 1051 560 1051 q 618 1040 597 1051 q 650 1005 639 1029 q 661 943 661 981 q 661 723 661 828 q 661 519 661 618 q 661 327 661 421 q 661 139 661 233 q 665 63 661 93 q 678 -1 668 33 q 669 -3 674 -3 q 660 -5 665 -4 q 651 -6 656 -6 q 643 -6 647 -6 q 589 14 614 -6 q 549 75 564 33 q 535 179 535 117 q 535 358 535 269 q 535 538 535 447 q 535 723 535 629 q 535 918 535 817 m 783 779 q 760 781 771 779 q 743 788 750 783 q 758 872 753 836 q 767 948 764 908 q 769 1042 769 988 q 787 1047 779 1046 q 803 1050 794 1049 q 821 1051 811 1051 q 866 1038 853 1051 q 879 994 879 1025 q 872 919 879 958 q 853 848 865 881 q 824 796 840 815 q 806 783 815 786 q 783 779 797 779 z "},"ḍ":{"ha":833,"x_min":83,"x_max":725,"o":"m 382 754 q 458 740 422 754 q 524 704 494 726 q 571 653 553 682 l 594 653 l 594 536 q 510 609 551 588 q 408 631 468 631 q 299 594 343 631 q 235 487 256 558 q 214 310 214 415 l 214 297 q 216 227 214 258 q 225 164 218 196 q 263 130 242 142 q 310 118 283 118 q 414 146 365 118 q 507 238 463 174 q 592 410 551 301 l 592 210 l 571 210 q 501 94 543 146 q 408 14 460 43 q 303 -15 357 -15 q 215 6 256 -15 q 146 65 175 26 q 100 156 117 104 q 83 271 83 208 l 83 297 q 106 504 83 418 q 170 646 129 590 q 265 728 211 701 q 382 754 319 754 m 597 1051 q 651 1037 626 1051 q 692 987 676 1022 q 707 890 707 951 q 707 701 707 794 q 707 513 707 607 q 707 326 707 419 q 707 139 707 233 q 710 63 707 93 q 725 0 714 33 q 714 -3 719 -1 q 703 -6 708 -4 q 692 -7 697 -7 q 681 -7 686 -7 q 624 13 647 -7 q 590 67 601 32 q 579 146 579 101 q 579 344 579 249 q 579 534 579 440 q 579 722 579 628 q 579 918 579 817 q 575 990 579 961 q 558 1046 571 1019 q 569 1048 564 1047 q 578 1050 574 1049 q 588 1051 583 1051 q 597 1051 593 1051 m 300 -125 q 316 -122 307 -124 q 333 -120 325 -121 q 351 -119 342 -119 q 369 -119 360 -119 q 444 -133 415 -119 q 472 -183 472 -146 l 472 -274 q 456 -276 465 -275 q 439 -278 447 -278 q 422 -279 431 -279 q 403 -279 413 -279 q 329 -265 358 -279 q 300 -215 300 -251 l 300 -125 z "},"ḏ":{"ha":833,"x_min":83,"x_max":725,"o":"m 114 -156 l 599 -156 q 647 -174 635 -156 q 660 -226 660 -192 q 659 -240 660 -233 q 658 -253 658 -247 q 656 -265 657 -260 l 217 -265 q 153 -256 175 -265 q 122 -226 131 -246 q 114 -175 114 -206 q 114 -168 114 -171 q 114 -162 114 -165 q 114 -156 114 -158 m 382 754 q 458 740 422 754 q 524 704 494 726 q 571 653 553 682 l 594 653 l 594 536 q 510 609 551 588 q 408 631 468 631 q 299 594 343 631 q 235 487 256 558 q 214 310 214 415 l 214 297 q 216 227 214 258 q 225 164 218 196 q 263 130 242 142 q 310 118 283 118 q 414 146 365 118 q 507 238 463 174 q 592 410 551 301 l 592 210 l 571 210 q 501 94 543 146 q 408 14 460 43 q 303 -15 357 -15 q 215 6 256 -15 q 146 65 175 26 q 100 156 117 104 q 83 271 83 208 l 83 297 q 106 503 83 417 q 170 646 129 590 q 265 728 211 701 q 382 754 319 754 m 597 1051 q 651 1037 626 1051 q 692 987 676 1022 q 707 890 707 951 q 707 701 707 794 q 707 513 707 607 q 707 326 707 419 q 707 139 707 233 q 710 63 707 93 q 725 0 714 33 q 714 -3 719 -1 q 703 -6 708 -4 q 692 -7 697 -7 q 681 -7 688 -7 q 624 13 647 -7 q 590 67 601 32 q 579 146 579 101 q 579 344 579 249 q 579 534 579 440 q 579 722 579 628 q 579 918 579 817 q 575 990 579 961 q 558 1046 571 1019 q 569 1048 564 1047 q 578 1050 574 1049 q 588 1051 583 1051 q 597 1051 593 1051 z "},"e":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 z "},"è":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 349 1129 q 383 1044 361 1083 q 438 967 406 1004 q 515 894 471 931 q 485 881 501 885 q 453 876 469 876 q 410 881 431 876 q 369 899 389 886 q 314 942 340 917 q 267 999 288 968 q 238 1063 247 1029 q 237 1092 232 1076 q 257 1114 242 1107 q 283 1124 269 1121 q 313 1129 296 1128 q 349 1129 331 1131 z "},"é":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 546 1129 q 597 1127 575 1131 q 638 1114 619 1124 q 658 1092 653 1107 q 657 1063 663 1076 q 628 999 649 1029 q 581 942 607 968 q 525 899 556 917 q 485 881 506 886 q 442 876 464 876 q 409 881 425 876 q 379 894 393 885 q 456 967 424 931 q 512 1044 489 1004 q 546 1129 535 1083 z "},"ê":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 419 1136 q 431 1136 425 1136 q 447 1136 438 1136 q 490 1130 469 1136 q 547 1097 510 1124 q 594 1060 569 1081 q 644 1013 619 1039 q 690 958 668 988 q 731 893 713 928 q 699 879 715 883 q 660 875 682 875 q 626 883 639 875 q 593 917 614 892 q 524 987 564 954 q 414 1057 485 1019 l 493 1038 l 403 1038 l 479 1058 q 350 965 400 1013 q 274 872 300 918 l 265 872 q 219 877 238 872 q 192 890 201 882 q 183 907 183 899 q 192 935 183 917 q 219 981 200 954 q 260 1027 238 1004 q 310 1071 283 1050 q 364 1108 336 1092 q 419 1136 392 1125 z "},"ë":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 225 1056 q 256 1059 239 1058 q 286 1060 272 1060 q 333 1055 313 1060 q 367 1038 354 1050 q 381 1003 381 1025 l 381 899 q 350 895 367 896 q 318 894 333 894 q 273 899 294 894 q 238 917 251 904 q 225 951 225 931 l 225 1056 m 514 1056 q 544 1059 528 1058 q 575 1060 561 1060 q 622 1055 601 1060 q 656 1038 643 1050 q 669 1003 669 1025 l 669 899 q 639 895 656 896 q 607 894 622 894 q 562 899 583 894 q 527 917 540 904 q 514 951 514 931 l 514 1056 z "},"ē":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 175 1024 l 658 1024 q 707 1006 694 1024 q 719 953 719 989 q 719 940 719 946 q 717 926 718 933 q 715 914 717 919 l 278 914 q 213 924 235 914 q 183 953 190 933 q 175 1006 175 974 q 175 1012 175 1008 q 175 1018 175 1015 q 175 1024 175 1021 z "},"ĕ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 447 993 q 556 1028 517 999 q 613 1118 594 1057 q 649 1111 632 1117 q 679 1096 665 1106 q 688 1079 686 1090 q 683 1054 689 1068 q 634 969 667 1004 q 556 915 601 933 q 453 897 511 897 l 442 897 q 338 915 383 897 q 261 969 293 933 q 211 1054 229 1004 q 207 1079 206 1068 q 215 1096 208 1090 q 246 1111 229 1106 q 282 1118 263 1117 q 339 1028 300 1057 q 447 993 378 999 z "},"ė":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 354 1044 q 372 1051 363 1049 q 392 1054 382 1053 q 415 1056 403 1056 q 436 1057 426 1057 q 512 1041 483 1057 q 540 988 540 1025 l 540 904 q 523 898 532 900 q 505 894 514 896 q 485 892 496 893 q 464 892 475 892 q 385 913 415 892 q 354 971 354 935 l 354 1044 z "},"ę":{"ha":833,"x_min":97,"x_max":738,"o":"m 411 -190 q 426 -112 411 -149 q 469 -42 442 -75 q 539 18 497 -10 q 635 71 581 46 q 672 94 657 82 q 701 119 688 106 q 722 150 714 133 q 708 69 722 97 q 660 19 693 40 q 560 -65 593 -24 q 526 -151 526 -107 q 547 -206 526 -189 q 611 -224 568 -224 q 656 -218 635 -224 q 697 -197 678 -212 l 703 -197 q 711 -216 708 -207 q 715 -233 714 -225 q 715 -254 715 -242 q 683 -324 715 -301 q 589 -347 650 -347 q 497 -330 536 -347 q 434 -278 457 -312 q 411 -190 411 -243 m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 z "},"ě":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 475 885 q 463 885 469 885 q 447 885 457 885 q 405 891 425 885 q 347 924 385 897 q 300 961 325 940 q 251 1008 275 982 q 204 1063 226 1033 q 164 1128 182 1093 q 197 1142 179 1138 q 235 1146 214 1146 q 269 1138 256 1146 q 301 1104 282 1129 q 372 1033 332 1067 q 481 964 411 1000 l 401 983 l 493 983 l 415 963 q 545 1055 494 1008 q 621 1149 596 1101 l 629 1149 q 676 1144 658 1149 q 703 1131 693 1139 q 713 1114 713 1124 q 704 1085 713 1103 q 675 1039 696 1067 q 634 993 657 1017 q 585 949 611 969 q 531 913 558 929 q 475 885 503 896 z "},"ȅ":{"ha":833,"x_min":97,"x_max":738,"o":"m 240 1129 q 275 1044 253 1083 q 330 967 297 1004 q 407 894 363 931 q 377 881 393 885 q 344 876 361 876 q 301 881 322 876 q 261 899 281 886 q 206 942 232 917 q 160 999 179 968 q 129 1063 140 1029 q 129 1092 125 1076 q 149 1114 133 1107 q 175 1124 161 1121 q 206 1129 189 1128 q 240 1129 222 1131 m 486 1129 q 521 1044 499 1083 q 576 967 543 1004 q 651 894 608 931 q 622 881 639 885 q 589 876 606 876 q 547 881 568 876 q 507 899 526 886 q 451 942 478 917 q 404 999 424 968 q 375 1063 385 1029 q 374 1092 369 1076 q 394 1114 378 1107 q 420 1124 407 1121 q 450 1129 433 1128 q 486 1129 467 1131 m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 z "},"ȇ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 447 1021 q 339 987 378 1015 q 282 896 300 958 q 246 903 263 899 q 215 918 229 908 q 207 934 208 924 q 211 960 206 944 q 261 1046 229 1011 q 338 1099 293 1081 q 442 1117 383 1117 l 453 1117 q 556 1099 511 1117 q 634 1046 601 1081 q 683 960 667 1011 q 688 934 689 944 q 679 918 686 924 q 649 903 665 908 q 613 896 632 899 q 556 987 594 958 q 447 1021 517 1015 z "},"ḕ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 175 1024 l 658 1024 q 707 1006 694 1024 q 719 953 719 989 q 719 940 719 946 q 717 926 718 933 q 715 914 717 919 l 278 914 q 213 924 235 914 q 183 953 190 933 q 175 1006 175 974 q 175 1012 175 1008 q 175 1018 175 1015 q 175 1024 175 1021 m 350 1314 q 385 1240 363 1275 q 442 1175 408 1206 q 519 1113 476 1144 q 494 1103 507 1107 q 470 1097 482 1099 q 444 1094 458 1094 q 406 1098 424 1094 q 371 1113 389 1101 q 326 1140 347 1125 q 288 1174 306 1156 q 258 1212 271 1192 q 236 1251 244 1232 q 232 1281 229 1268 q 250 1300 235 1293 q 279 1309 264 1306 q 312 1314 294 1313 q 350 1314 329 1315 z "},"ḗ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 175 1024 l 658 1024 q 707 1006 694 1024 q 719 953 719 989 q 719 940 719 946 q 717 926 718 933 q 715 914 717 919 l 278 914 q 213 924 235 914 q 183 953 190 933 q 175 1006 175 974 q 175 1012 175 1008 q 175 1018 175 1015 q 175 1024 175 1021 m 544 1306 q 583 1304 565 1306 q 614 1300 600 1303 q 642 1293 628 1297 q 662 1274 658 1286 q 660 1246 665 1261 q 639 1204 651 1224 q 609 1167 626 1185 q 572 1133 592 1149 q 528 1106 551 1118 q 491 1090 510 1094 q 450 1086 472 1086 q 425 1088 438 1086 q 400 1094 413 1090 q 375 1106 388 1099 q 452 1167 418 1136 q 510 1233 486 1199 q 544 1306 533 1267 z "},"ḝ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 457 36 q 452 15 454 28 q 448 -10 450 3 q 444 -33 446 -22 q 440 -51 443 -43 l 440 -58 q 526 -94 496 -64 q 557 -175 557 -124 q 508 -285 557 -244 q 372 -325 460 -325 q 306 -314 332 -325 q 267 -285 279 -303 q 256 -246 256 -267 q 257 -226 256 -236 q 261 -208 258 -217 q 267 -189 264 -199 l 275 -189 q 315 -215 294 -207 q 368 -224 335 -224 q 427 -208 407 -224 q 447 -161 447 -192 q 432 -124 447 -137 q 383 -111 417 -111 q 363 -105 371 -111 q 356 -89 356 -99 q 357 -62 356 -76 q 362 -33 358 -47 q 370 -5 365 -18 q 381 18 375 8 q 392 29 383 25 q 416 35 400 33 q 457 36 432 38 m 447 993 q 556 1028 517 999 q 613 1118 594 1057 q 649 1111 632 1117 q 679 1096 665 1106 q 688 1079 686 1090 q 683 1054 689 1068 q 634 969 667 1004 q 556 915 601 933 q 453 897 511 897 l 442 897 q 338 915 383 897 q 261 969 293 933 q 211 1054 229 1004 q 207 1079 206 1068 q 215 1096 208 1090 q 246 1111 229 1106 q 282 1118 263 1117 q 339 1028 300 1057 q 447 993 378 999 z "},"ẹ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"ẻ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 382 858 q 397 894 382 878 q 446 926 411 910 q 506 961 489 947 q 524 993 524 975 q 524 1001 524 997 q 522 1010 524 1006 q 496 1017 511 1015 q 463 1019 481 1019 q 404 1013 431 1019 q 357 994 378 1007 q 315 963 336 982 l 307 963 q 299 986 301 975 q 296 1013 296 997 q 303 1050 296 1033 q 322 1081 310 1067 q 340 1094 331 1088 q 360 1105 349 1100 q 385 1113 371 1110 q 416 1117 400 1115 q 453 1119 432 1119 q 542 1103 507 1119 q 593 1061 576 1088 q 610 1000 610 1035 l 610 997 q 594 942 610 963 q 546 899 579 921 q 498 862 510 875 q 483 829 486 849 q 469 826 478 828 q 453 822 461 824 q 436 821 444 821 q 395 831 408 821 q 382 858 382 840 z "},"ẽ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 569 1004 q 638 1019 611 1004 q 692 1076 664 1035 l 700 1076 q 706 1060 704 1069 q 708 1041 707 1051 q 710 1017 710 1031 q 702 972 710 996 q 675 929 694 949 q 633 904 658 913 q 575 896 608 896 q 502 908 533 896 q 444 936 471 921 q 388 964 417 951 q 322 976 360 976 q 257 960 283 976 q 203 904 231 944 l 194 904 q 190 920 192 913 q 186 938 188 928 q 185 958 185 947 q 192 1006 185 983 q 217 1047 200 1029 q 258 1074 233 1064 q 315 1085 282 1085 q 392 1072 358 1085 q 452 1044 425 1060 q 507 1017 479 1029 q 569 1004 535 1004 z "},"ế":{"ha":833,"x_min":97,"x_max":861,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 419 1136 q 431 1136 425 1136 q 447 1136 438 1136 q 490 1130 469 1136 q 547 1097 510 1124 q 594 1060 569 1081 q 644 1013 619 1039 q 690 958 668 988 q 731 893 713 928 q 699 879 715 883 q 660 875 682 875 q 626 883 639 875 q 593 917 614 892 q 524 987 564 954 q 414 1057 485 1019 l 493 1038 l 403 1038 l 479 1058 q 350 965 400 1013 q 274 872 300 918 l 265 872 q 219 877 238 872 q 192 890 201 882 q 183 907 183 899 q 192 935 183 917 q 219 981 200 954 q 260 1027 238 1004 q 310 1071 283 1050 q 364 1108 336 1092 q 419 1136 392 1125 m 758 1299 q 787 1297 774 1299 q 813 1294 800 1296 q 836 1289 825 1292 q 858 1268 854 1283 q 853 1229 861 1253 q 830 1183 843 1206 q 799 1142 817 1161 q 761 1106 782 1124 q 727 1086 743 1093 q 692 1079 711 1079 q 668 1081 679 1079 q 646 1088 657 1083 q 622 1097 635 1092 q 682 1155 656 1124 q 728 1222 708 1186 q 758 1299 747 1258 z "},"ề":{"ha":833,"x_min":97,"x_max":751,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 419 1136 q 431 1136 425 1136 q 447 1136 438 1136 q 490 1130 469 1136 q 547 1097 510 1124 q 594 1060 569 1081 q 644 1013 619 1039 q 690 958 668 988 q 731 893 713 928 q 699 879 715 883 q 660 875 682 875 q 626 883 639 875 q 593 917 614 892 q 524 987 564 954 q 414 1057 485 1019 l 493 1038 l 403 1038 l 479 1058 q 350 965 400 1013 q 274 872 300 918 l 265 872 q 219 877 238 872 q 192 890 201 882 q 183 907 183 899 q 192 935 183 917 q 219 981 200 954 q 260 1027 238 1004 q 310 1071 283 1050 q 364 1108 336 1092 q 419 1136 392 1125 m 617 1297 q 647 1222 628 1258 q 693 1155 667 1186 q 753 1097 719 1124 q 729 1088 740 1092 q 708 1081 718 1083 q 685 1079 697 1079 q 648 1086 665 1079 q 613 1106 631 1093 q 575 1142 593 1124 q 544 1183 557 1161 q 522 1229 531 1206 q 518 1268 513 1253 q 543 1289 524 1283 q 564 1294 553 1292 q 588 1297 575 1296 q 617 1297 601 1297 z "},"ể":{"ha":833,"x_min":97,"x_max":846,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 419 1136 q 431 1136 425 1136 q 447 1136 438 1136 q 490 1130 469 1136 q 547 1097 510 1124 q 594 1060 569 1081 q 644 1013 619 1039 q 690 958 668 988 q 731 893 713 928 q 699 879 715 883 q 660 875 682 875 q 626 883 639 875 q 593 917 614 892 q 524 987 564 954 q 414 1057 485 1019 l 493 1038 l 403 1038 l 479 1058 q 350 965 400 1013 q 274 872 300 918 l 265 872 q 219 877 238 872 q 192 890 201 882 q 183 907 183 899 q 192 935 183 917 q 219 981 200 954 q 260 1027 238 1004 q 310 1071 283 1050 q 364 1108 336 1092 q 419 1136 392 1125 m 618 1106 q 634 1142 618 1125 q 692 1174 650 1158 q 745 1197 731 1188 q 760 1221 760 1207 q 760 1228 760 1225 q 758 1236 760 1232 q 731 1243 746 1242 q 699 1244 717 1244 q 617 1233 651 1244 q 556 1194 583 1221 l 547 1194 q 539 1216 542 1206 q 536 1242 536 1226 q 542 1276 536 1261 q 563 1304 549 1292 q 583 1319 572 1313 q 610 1330 594 1325 q 644 1337 625 1335 q 688 1339 664 1339 q 776 1324 742 1339 q 828 1285 811 1310 q 846 1228 846 1260 l 846 1225 q 831 1178 846 1196 q 781 1140 815 1160 q 733 1107 743 1119 q 719 1076 722 1094 q 706 1073 714 1075 q 689 1070 697 1071 q 672 1069 681 1069 q 631 1080 644 1069 q 618 1106 618 1090 z "},"ễ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 419 1136 q 431 1136 425 1136 q 447 1136 438 1136 q 490 1130 469 1136 q 547 1097 510 1124 q 594 1060 569 1081 q 644 1013 619 1039 q 690 958 668 988 q 731 893 713 928 q 699 879 715 883 q 660 875 682 875 q 626 883 639 875 q 593 917 614 892 q 524 987 564 954 q 414 1057 485 1019 l 493 1038 l 403 1038 l 479 1058 q 350 965 400 1013 q 274 872 300 918 l 265 872 q 219 877 238 872 q 192 890 201 882 q 183 907 183 899 q 192 935 183 917 q 219 981 200 954 q 260 1027 238 1004 q 310 1071 283 1050 q 364 1108 336 1092 q 419 1136 392 1125 m 558 1275 q 603 1288 586 1275 q 636 1340 621 1301 l 644 1340 q 655 1315 651 1329 q 658 1283 658 1300 q 655 1247 658 1264 q 646 1218 651 1231 q 616 1183 636 1196 q 567 1169 596 1169 q 497 1184 528 1169 q 441 1217 467 1199 q 389 1251 415 1236 q 332 1265 363 1265 q 285 1249 301 1265 q 251 1201 269 1233 l 243 1201 q 234 1224 238 1211 q 231 1254 231 1238 q 234 1291 231 1275 q 244 1322 238 1307 q 276 1359 254 1346 q 332 1372 299 1372 q 393 1357 365 1372 q 447 1323 421 1342 q 499 1290 472 1304 q 558 1275 526 1275 z "},"ệ":{"ha":833,"x_min":97,"x_max":738,"o":"m 457 756 q 610 719 547 756 q 705 619 672 683 q 738 475 738 556 l 738 469 q 732 394 738 425 q 715 347 726 363 q 688 331 704 331 l 317 331 q 269 338 290 331 q 233 356 247 344 l 208 342 l 208 417 l 606 417 q 610 450 608 433 q 613 483 613 467 q 601 565 613 532 q 565 626 590 599 q 521 640 543 636 q 463 644 499 644 q 290 562 356 644 q 225 315 225 479 l 225 300 q 235 217 225 254 q 265 150 244 179 q 349 114 303 125 q 461 103 394 103 q 555 110 513 103 q 636 136 597 118 q 711 182 675 154 l 719 182 q 722 165 721 174 q 724 143 724 156 q 715 89 724 111 q 689 50 706 67 q 632 13 667 28 q 553 -10 597 -3 q 457 -17 508 -17 q 315 6 381 -17 q 201 71 250 28 q 125 178 153 114 q 97 324 97 242 l 97 339 q 125 518 97 440 q 202 649 153 596 q 317 728 251 701 q 457 756 382 756 m 419 1136 q 431 1136 425 1136 q 447 1136 438 1136 q 490 1130 469 1136 q 547 1097 510 1124 q 594 1060 569 1081 q 644 1013 619 1039 q 690 958 668 988 q 731 893 713 928 q 699 879 715 883 q 660 875 682 875 q 626 883 639 875 q 593 917 614 892 q 524 987 564 954 q 414 1057 485 1019 l 493 1038 l 403 1038 l 479 1058 q 350 965 400 1013 q 274 872 300 918 l 265 872 q 219 877 238 872 q 192 890 201 882 q 183 907 183 899 q 192 935 183 917 q 219 981 200 954 q 260 1027 238 1004 q 310 1071 283 1050 q 364 1108 336 1092 q 419 1136 392 1125 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"f":{"ha":833,"x_min":85,"x_max":779,"o":"m 85 721 l 646 721 q 693 712 676 721 q 717 685 710 703 q 725 639 725 667 q 724 615 725 628 q 721 594 722 603 l 207 594 q 131 606 158 594 q 94 640 104 617 q 85 701 85 664 q 85 712 85 706 q 85 721 85 718 m 396 97 q 371 15 396 39 q 301 -8 346 -8 q 271 -6 283 -8 q 250 0 258 -3 q 264 63 258 33 q 269 140 269 93 q 269 290 269 215 q 269 441 269 365 q 269 592 269 517 q 269 740 269 667 q 288 881 269 821 q 346 980 307 940 q 442 1040 385 1019 q 575 1061 499 1061 q 659 1056 622 1061 q 721 1040 696 1050 q 757 1017 746 1029 q 774 987 769 1004 q 779 944 779 969 q 778 919 779 933 q 774 896 776 906 l 765 896 q 710 919 742 910 q 640 933 678 928 q 564 939 603 939 q 476 932 513 939 q 407 908 439 925 q 394 826 396 875 q 396 717 392 778 q 396 604 396 665 q 396 476 396 543 q 396 342 396 408 q 396 213 396 275 q 396 97 396 150 z "},"g":{"ha":833,"x_min":49,"x_max":753,"o":"m 225 100 q 234 149 225 126 q 259 192 243 172 q 297 224 275 211 l 297 246 l 393 242 q 357 190 368 219 q 346 132 346 161 q 360 97 346 110 q 406 82 374 85 l 568 69 q 667 43 626 67 q 731 -18 708 19 q 753 -103 753 -56 l 753 -115 q 733 -204 753 -162 q 669 -278 714 -246 q 549 -328 624 -310 q 364 -347 474 -347 l 321 -347 q 172 -322 232 -347 q 80 -256 111 -297 q 49 -164 49 -214 l 49 -154 q 74 -66 49 -106 q 142 -1 99 -26 q 243 28 186 24 l 243 54 l 315 0 q 237 -31 268 -11 q 190 -79 206 -51 q 175 -143 175 -107 l 175 -153 q 194 -206 175 -183 q 250 -242 213 -229 q 342 -254 288 -254 l 389 -254 q 510 -247 460 -254 q 610 -221 560 -239 q 623 -186 619 -206 q 626 -149 626 -167 l 626 -139 q 604 -77 626 -104 q 533 -47 582 -50 l 385 -39 q 297 -15 333 -35 q 243 37 261 6 q 225 100 225 68 m 446 657 l 579 661 l 579 626 q 654 560 625 601 q 683 457 683 518 l 683 447 q 644 328 683 379 q 538 251 606 278 q 386 224 471 224 q 225 252 294 222 q 117 340 156 282 q 78 481 78 399 l 78 489 q 118 630 78 569 q 235 724 158 690 q 421 758 313 758 q 585 754 510 758 q 749 740 660 750 q 752 724 751 735 q 753 704 753 714 q 743 647 753 669 q 707 625 733 625 q 647 630 682 625 q 557 640 613 635 q 413 644 501 644 q 253 601 310 644 q 196 471 196 558 l 196 463 q 204 410 196 440 q 236 351 213 381 q 304 331 269 338 q 385 325 339 325 q 519 362 469 325 q 568 471 568 399 l 568 481 q 558 540 568 507 q 523 604 549 572 q 446 657 497 636 z "},"ĝ":{"ha":833,"x_min":49,"x_max":753,"o":"m 225 100 q 234 149 225 126 q 259 192 243 172 q 297 224 275 211 l 297 246 l 393 242 q 357 190 368 219 q 346 132 346 161 q 360 97 346 110 q 406 82 374 85 l 568 69 q 667 43 626 67 q 731 -18 708 19 q 753 -103 753 -56 l 753 -115 q 733 -204 753 -162 q 669 -278 714 -246 q 549 -328 624 -310 q 364 -347 474 -347 l 321 -347 q 172 -322 232 -347 q 80 -256 111 -297 q 49 -164 49 -214 l 49 -154 q 74 -66 49 -106 q 142 -1 99 -26 q 243 28 186 24 l 243 54 l 315 0 q 237 -31 268 -11 q 190 -79 206 -51 q 175 -143 175 -107 l 175 -153 q 194 -206 175 -183 q 250 -242 213 -229 q 342 -254 288 -254 l 389 -254 q 510 -247 460 -254 q 610 -221 560 -239 q 623 -186 619 -206 q 626 -149 626 -167 l 626 -139 q 604 -77 626 -104 q 533 -47 582 -50 l 385 -39 q 297 -15 333 -35 q 243 37 261 6 q 225 100 225 68 m 446 657 l 579 661 l 579 626 q 654 560 625 601 q 683 457 683 518 l 683 447 q 644 328 683 379 q 538 251 606 278 q 386 224 471 224 q 225 252 294 222 q 117 340 156 282 q 78 481 78 399 l 78 489 q 118 630 78 569 q 235 724 158 690 q 421 758 313 758 q 585 754 510 758 q 749 740 660 750 q 752 724 751 735 q 753 704 753 714 q 743 647 753 669 q 707 625 733 625 q 647 630 682 625 q 557 640 613 635 q 413 644 501 644 q 253 601 310 644 q 196 471 196 558 l 196 463 q 204 410 196 440 q 236 351 213 381 q 304 331 269 338 q 385 325 339 325 q 519 362 469 325 q 568 471 568 399 l 568 481 q 558 540 568 507 q 523 604 549 572 q 446 657 497 636 m 411 1136 q 423 1136 417 1136 q 439 1136 429 1136 q 481 1130 461 1136 q 539 1097 501 1124 q 586 1060 561 1081 q 635 1013 611 1039 q 682 958 660 988 q 722 893 704 928 q 690 879 707 883 q 651 875 674 875 q 618 883 631 875 q 585 917 606 892 q 516 987 556 954 q 406 1057 476 1019 l 485 1038 l 394 1038 l 471 1058 q 342 965 392 1013 q 265 872 292 918 l 257 872 q 211 877 229 872 q 184 890 193 882 q 175 907 175 899 q 183 935 175 917 q 211 981 192 954 q 252 1027 229 1004 q 301 1071 275 1050 q 356 1108 328 1092 q 411 1136 383 1125 z "},"ğ":{"ha":833,"x_min":49,"x_max":753,"o":"m 225 100 q 234 149 225 126 q 259 192 243 172 q 297 224 275 211 l 297 246 l 393 242 q 357 190 368 219 q 346 132 346 161 q 360 97 346 110 q 406 82 374 85 l 568 69 q 667 43 626 67 q 731 -18 708 19 q 753 -103 753 -56 l 753 -115 q 733 -204 753 -162 q 669 -278 714 -246 q 549 -328 624 -310 q 364 -347 474 -347 l 321 -347 q 172 -322 232 -347 q 80 -256 111 -297 q 49 -164 49 -214 l 49 -154 q 74 -66 49 -106 q 142 -1 99 -26 q 243 28 186 24 l 243 54 l 315 0 q 237 -31 268 -11 q 190 -79 206 -51 q 175 -143 175 -107 l 175 -153 q 194 -206 175 -183 q 250 -242 213 -229 q 342 -254 288 -254 l 389 -254 q 510 -247 460 -254 q 610 -221 560 -239 q 623 -186 619 -206 q 626 -149 626 -167 l 626 -139 q 604 -77 626 -104 q 533 -47 582 -50 l 385 -39 q 297 -15 333 -35 q 243 37 261 6 q 225 100 225 68 m 446 657 l 579 661 l 579 626 q 654 560 625 601 q 683 457 683 518 l 683 447 q 644 328 683 379 q 538 251 606 278 q 386 224 471 224 q 225 252 294 222 q 117 340 156 282 q 78 481 78 399 l 78 489 q 118 630 78 569 q 235 724 158 690 q 421 758 313 758 q 585 754 510 758 q 749 740 660 750 q 752 724 751 735 q 753 704 753 714 q 743 647 753 669 q 707 625 733 625 q 647 630 682 625 q 557 640 613 635 q 413 644 501 644 q 253 601 310 644 q 196 471 196 558 l 196 463 q 204 410 196 440 q 236 351 213 381 q 304 331 269 338 q 385 325 339 325 q 519 362 469 325 q 568 471 568 399 l 568 481 q 558 540 568 507 q 523 604 549 572 q 446 657 497 636 m 439 993 q 547 1028 508 999 q 604 1118 586 1057 q 640 1111 624 1117 q 671 1096 657 1106 q 679 1079 678 1090 q 675 1054 681 1068 q 626 969 658 1004 q 548 915 593 933 q 444 897 503 897 l 433 897 q 330 915 375 897 q 253 969 285 933 q 203 1054 221 1004 q 199 1079 197 1068 q 207 1096 200 1090 q 238 1111 221 1106 q 274 1118 254 1117 q 331 1028 292 1057 q 439 993 369 999 z "},"ġ":{"ha":833,"x_min":49,"x_max":753,"o":"m 225 100 q 234 149 225 126 q 259 192 243 172 q 297 224 275 211 l 297 246 l 393 242 q 357 190 368 219 q 346 132 346 161 q 360 97 346 110 q 406 82 374 85 l 568 69 q 667 43 626 67 q 731 -18 708 19 q 753 -103 753 -56 l 753 -115 q 733 -204 753 -162 q 669 -278 714 -246 q 549 -328 624 -310 q 364 -347 474 -347 l 321 -347 q 172 -322 232 -347 q 80 -256 111 -297 q 49 -164 49 -214 l 49 -154 q 74 -66 49 -106 q 142 -1 99 -26 q 243 28 186 24 l 243 54 l 315 0 q 237 -31 268 -11 q 190 -79 206 -51 q 175 -143 175 -107 l 175 -153 q 194 -206 175 -183 q 250 -242 213 -229 q 342 -254 288 -254 l 389 -254 q 510 -247 460 -254 q 610 -221 560 -239 q 623 -186 619 -206 q 626 -149 626 -167 l 626 -139 q 604 -77 626 -104 q 533 -47 582 -50 l 385 -39 q 297 -15 333 -35 q 243 37 261 6 q 225 100 225 68 m 446 657 l 579 661 l 579 626 q 654 560 625 601 q 683 457 683 518 l 683 447 q 644 328 683 379 q 538 251 606 278 q 386 224 471 224 q 225 252 294 222 q 117 340 156 282 q 78 481 78 399 l 78 489 q 118 630 78 569 q 235 724 158 690 q 421 758 313 758 q 585 754 510 758 q 749 740 660 750 q 752 724 751 735 q 753 704 753 714 q 743 647 753 669 q 707 625 733 625 q 647 630 682 625 q 557 640 613 635 q 413 644 501 644 q 253 601 310 644 q 196 471 196 558 l 196 463 q 204 410 196 440 q 236 351 213 381 q 304 331 269 338 q 385 325 339 325 q 519 362 469 325 q 568 471 568 399 l 568 481 q 558 540 568 507 q 523 604 549 572 q 446 657 497 636 m 346 1044 q 364 1051 354 1049 q 384 1054 374 1053 q 406 1056 394 1056 q 428 1057 418 1057 q 503 1041 475 1057 q 532 988 532 1025 l 532 904 q 515 898 524 900 q 497 894 506 896 q 477 892 488 893 q 456 892 467 892 q 376 913 407 892 q 346 971 346 935 l 346 1044 z "},"ģ":{"ha":833,"x_min":49,"x_max":753,"o":"m 439 875 q 390 888 407 875 q 374 925 374 900 q 381 997 374 961 q 401 1065 388 1033 q 433 1118 415 1097 q 453 1133 443 1129 q 476 1136 463 1136 q 505 1133 493 1136 q 526 1125 517 1131 q 505 1046 513 1079 q 494 976 497 1013 q 490 885 490 940 q 465 878 476 881 q 439 875 454 875 m 225 100 q 234 149 225 126 q 259 192 243 172 q 297 224 275 211 l 297 246 l 393 242 q 357 190 368 219 q 346 132 346 161 q 360 97 346 110 q 406 82 374 85 l 568 69 q 667 43 626 67 q 731 -18 708 19 q 753 -103 753 -56 l 753 -115 q 733 -204 753 -162 q 669 -278 714 -246 q 549 -328 624 -310 q 364 -347 474 -347 l 321 -347 q 172 -322 232 -347 q 80 -256 111 -297 q 49 -164 49 -214 l 49 -154 q 74 -66 49 -106 q 142 -1 99 -26 q 243 28 186 24 l 243 54 l 315 0 q 237 -31 268 -11 q 190 -79 206 -51 q 175 -143 175 -107 l 175 -153 q 194 -206 175 -183 q 250 -242 213 -229 q 342 -254 288 -254 l 389 -254 q 510 -247 460 -254 q 610 -221 560 -239 q 623 -186 619 -206 q 626 -149 626 -167 l 626 -139 q 604 -77 626 -104 q 533 -47 582 -50 l 385 -39 q 297 -15 333 -35 q 243 37 261 6 q 225 100 225 68 m 446 657 l 579 661 l 579 626 q 654 560 625 601 q 683 457 683 518 l 683 447 q 644 328 683 379 q 538 251 606 278 q 386 224 471 224 q 225 252 294 222 q 117 340 156 282 q 78 481 78 399 l 78 489 q 118 630 78 569 q 235 724 158 690 q 421 758 313 758 q 585 754 510 758 q 749 740 660 750 q 752 724 751 735 q 753 704 753 714 q 743 647 753 669 q 707 625 733 625 q 647 630 682 625 q 557 640 613 635 q 413 644 501 644 q 253 601 310 644 q 196 471 196 558 l 196 463 q 204 410 196 440 q 236 351 213 381 q 304 331 269 338 q 385 325 339 325 q 519 362 469 325 q 568 471 568 399 l 568 481 q 558 540 568 507 q 523 604 549 572 q 446 657 497 636 z "},"ǧ":{"ha":833,"x_min":49,"x_max":753,"o":"m 225 100 q 234 149 225 126 q 259 192 243 172 q 297 224 275 211 l 297 246 l 393 242 q 357 190 368 219 q 346 132 346 161 q 360 97 346 110 q 406 82 374 85 l 568 69 q 667 43 626 67 q 731 -18 708 19 q 753 -103 753 -56 l 753 -115 q 733 -204 753 -162 q 669 -278 714 -246 q 549 -328 624 -310 q 364 -347 474 -347 l 321 -347 q 172 -322 232 -347 q 80 -256 111 -297 q 49 -164 49 -214 l 49 -154 q 74 -66 49 -106 q 142 -1 99 -26 q 243 28 186 24 l 243 54 l 315 0 q 237 -31 268 -11 q 190 -79 206 -51 q 175 -143 175 -107 l 175 -153 q 194 -206 175 -183 q 250 -242 213 -229 q 342 -254 288 -254 l 389 -254 q 510 -247 460 -254 q 610 -221 560 -239 q 623 -186 619 -206 q 626 -149 626 -167 l 626 -139 q 604 -77 626 -104 q 533 -47 582 -50 l 385 -39 q 297 -15 333 -35 q 243 37 261 6 q 225 100 225 68 m 446 657 l 579 661 l 579 626 q 654 560 625 601 q 683 457 683 518 l 683 447 q 644 328 683 379 q 538 251 606 278 q 386 224 471 224 q 225 252 294 222 q 117 340 156 282 q 78 481 78 399 l 78 489 q 118 630 78 569 q 235 724 158 690 q 421 758 313 758 q 585 754 510 758 q 749 740 660 750 q 752 724 751 735 q 753 704 753 714 q 743 647 753 669 q 707 625 733 625 q 647 630 682 625 q 557 640 613 635 q 413 644 501 644 q 253 601 310 644 q 196 471 196 558 l 196 463 q 204 410 196 440 q 236 351 213 381 q 304 331 269 338 q 385 325 339 325 q 519 362 469 325 q 568 471 568 399 l 568 481 q 558 540 568 507 q 523 604 549 572 q 446 657 497 636 m 467 885 q 455 885 461 885 q 439 885 449 885 q 397 891 417 885 q 339 924 376 897 q 292 961 317 940 q 242 1008 267 982 q 196 1063 218 1033 q 156 1128 174 1093 q 188 1142 171 1138 q 226 1146 206 1146 q 260 1138 247 1146 q 293 1104 274 1129 q 363 1033 324 1067 q 472 964 403 1000 l 393 983 l 485 983 l 407 963 q 537 1055 486 1008 q 613 1149 588 1101 l 621 1149 q 667 1144 650 1149 q 694 1131 685 1139 q 704 1114 704 1124 q 696 1085 704 1103 q 667 1039 688 1067 q 626 993 649 1017 q 576 949 603 969 q 522 913 550 929 q 467 885 494 896 z "},"ḡ":{"ha":833,"x_min":49,"x_max":753,"o":"m 225 100 q 234 149 225 126 q 259 192 243 172 q 297 224 275 211 l 297 246 l 393 242 q 357 190 368 219 q 346 132 346 161 q 360 97 346 110 q 406 82 374 85 l 568 69 q 667 43 626 67 q 731 -18 708 19 q 753 -103 753 -56 l 753 -115 q 733 -204 753 -162 q 669 -278 714 -246 q 549 -328 624 -310 q 364 -347 474 -347 l 321 -347 q 172 -322 232 -347 q 80 -256 111 -297 q 49 -164 49 -214 l 49 -154 q 74 -66 49 -106 q 142 -1 99 -26 q 243 28 186 24 l 243 54 l 315 0 q 237 -31 268 -11 q 190 -79 206 -51 q 175 -143 175 -107 l 175 -153 q 194 -206 175 -183 q 250 -242 213 -229 q 342 -254 288 -254 l 389 -254 q 510 -247 460 -254 q 610 -221 560 -239 q 623 -186 619 -206 q 626 -149 626 -167 l 626 -139 q 604 -77 626 -104 q 533 -47 582 -50 l 385 -39 q 297 -15 333 -35 q 243 37 261 6 q 225 100 225 68 m 446 657 l 579 661 l 579 626 q 654 560 625 601 q 683 457 683 518 l 683 447 q 644 328 683 379 q 538 251 606 278 q 386 224 471 224 q 225 252 294 222 q 117 340 156 282 q 78 481 78 399 l 78 489 q 118 630 78 569 q 235 724 158 690 q 421 758 313 758 q 585 754 510 758 q 749 740 660 750 q 752 724 751 735 q 753 704 753 714 q 743 647 753 669 q 707 625 733 625 q 647 630 682 625 q 557 640 613 635 q 413 644 501 644 q 253 601 310 644 q 196 471 196 558 l 196 463 q 204 410 196 440 q 236 351 213 381 q 304 331 269 338 q 385 325 339 325 q 519 362 469 325 q 568 471 568 399 l 568 481 q 558 540 568 507 q 523 604 549 572 q 446 657 497 636 m 167 1024 l 650 1024 q 699 1006 686 1024 q 711 953 711 989 q 710 940 711 946 q 709 926 710 933 q 707 914 708 919 l 269 914 q 204 924 226 914 q 174 953 182 933 q 167 1006 167 974 q 167 1012 167 1008 q 167 1018 167 1015 q 167 1024 167 1021 z "},"h":{"ha":833,"x_min":99,"x_max":735,"o":"m 214 -6 q 160 3 181 -6 q 128 28 139 13 q 118 64 118 43 q 118 283 118 176 q 118 492 118 389 q 118 699 118 594 q 118 914 118 803 q 114 986 118 957 q 99 1042 110 1015 q 112 1044 106 1043 q 125 1047 118 1046 q 138 1047 132 1047 q 190 1032 165 1047 q 231 981 215 1017 q 246 886 246 946 q 246 662 246 774 q 246 440 246 550 q 246 219 246 329 q 246 -4 246 108 q 235 -5 240 -4 q 224 -6 229 -6 q 214 -6 219 -6 m 226 264 l 224 500 l 254 500 q 311 601 279 554 q 382 682 343 649 q 463 735 421 715 q 547 754 504 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 181 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 z "},"ĥ":{"ha":833,"x_min":-86,"x_max":735,"o":"m 214 -6 q 160 3 181 -6 q 128 28 139 13 q 118 64 118 43 q 118 283 118 176 q 118 492 118 389 q 118 699 118 594 q 118 914 118 803 q 114 986 118 957 q 99 1042 110 1015 q 112 1044 106 1043 q 125 1047 118 1046 q 138 1047 132 1047 q 190 1032 165 1047 q 231 981 215 1017 q 246 886 246 946 q 246 662 246 774 q 246 440 246 550 q 246 219 246 329 q 246 -4 246 108 q 235 -5 240 -4 q 224 -6 229 -6 q 214 -6 219 -6 m 226 264 l 224 500 l 254 500 q 311 601 279 554 q 382 682 343 649 q 463 735 421 715 q 547 754 504 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 181 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 m 150 1396 q 162 1396 156 1396 q 178 1396 168 1396 q 220 1390 200 1396 q 278 1357 240 1383 q 325 1319 300 1340 q 374 1273 350 1299 q 421 1217 399 1247 q 461 1153 443 1188 q 429 1139 446 1143 q 390 1135 413 1135 q 357 1143 369 1135 q 324 1176 344 1151 q 255 1247 294 1214 q 144 1317 215 1279 l 224 1297 l 133 1297 l 210 1318 q 81 1225 131 1272 q 4 1132 31 1178 l -4 1132 q -50 1137 -32 1132 q -77 1150 -68 1142 q -86 1167 -86 1158 q -78 1195 -86 1176 q -50 1240 -69 1214 q -9 1287 -32 1264 q 40 1331 14 1310 q 94 1368 67 1351 q 150 1396 122 1385 z "},"ḥ":{"ha":833,"x_min":99,"x_max":735,"o":"m 214 -6 q 160 3 181 -6 q 128 28 139 13 q 118 64 118 43 q 118 283 118 176 q 118 492 118 389 q 118 699 118 594 q 118 914 118 803 q 114 986 118 957 q 99 1042 110 1015 q 112 1044 106 1043 q 125 1047 118 1046 q 138 1047 132 1047 q 190 1032 165 1047 q 231 981 215 1017 q 246 886 246 946 q 246 662 246 774 q 246 440 246 550 q 246 219 246 329 q 246 -4 246 108 q 235 -5 240 -4 q 224 -6 229 -6 q 214 -6 219 -6 m 226 264 l 224 500 l 254 500 q 311 601 279 554 q 382 682 343 649 q 463 735 421 715 q 547 754 504 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 181 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 m 336 -125 q 352 -122 343 -124 q 369 -120 361 -121 q 387 -119 378 -119 q 406 -119 396 -119 q 480 -133 451 -119 q 508 -183 508 -146 l 508 -274 q 492 -276 501 -275 q 475 -278 483 -278 q 458 -279 467 -279 q 439 -279 449 -279 q 365 -265 394 -279 q 336 -215 336 -251 l 336 -125 z "},"ḫ":{"ha":833,"x_min":99,"x_max":735,"o":"m 422 -192 q 530 -158 492 -187 q 588 -68 568 -129 q 624 -75 607 -69 q 654 -90 640 -81 q 663 -106 661 -96 q 658 -132 664 -117 q 608 -217 640 -182 q 531 -271 576 -253 q 428 -289 486 -289 l 417 -289 q 313 -271 358 -289 q 236 -217 268 -253 q 185 -132 204 -182 q 181 -106 179 -117 q 190 -90 183 -96 q 221 -75 204 -81 q 257 -68 238 -69 q 314 -158 275 -129 q 422 -192 353 -187 m 214 -6 q 160 3 181 -6 q 128 28 139 13 q 118 64 118 43 q 118 283 118 178 q 118 492 118 389 q 118 699 118 594 q 118 914 118 803 q 114 986 118 957 q 99 1042 110 1015 q 112 1044 106 1043 q 125 1047 118 1046 q 138 1047 132 1047 q 190 1032 165 1047 q 231 981 215 1017 q 246 886 246 946 q 246 662 246 774 q 246 440 246 550 q 246 219 246 329 q 246 -4 246 108 q 235 -5 240 -4 q 224 -6 229 -6 q 214 -6 219 -6 m 226 264 l 224 500 l 254 500 q 311 601 279 554 q 382 683 343 649 q 463 735 421 717 q 547 754 504 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 z "},"i":{"ha":833,"x_min":90,"x_max":525,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 339 1044 q 357 1051 347 1049 q 377 1054 367 1053 q 399 1056 388 1056 q 421 1057 411 1057 q 497 1041 468 1057 q 525 988 525 1025 l 525 904 q 508 898 517 900 q 490 894 499 896 q 470 892 481 893 q 449 892 460 892 q 369 913 400 892 q 339 971 339 935 l 339 1044 z "},"ì":{"ha":833,"x_min":90,"x_max":524,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 333 1129 q 368 1044 346 1083 q 423 967 390 1004 q 500 894 456 931 q 470 881 486 885 q 438 876 454 876 q 394 881 415 876 q 354 899 374 886 q 299 942 325 917 q 252 999 272 968 q 222 1063 232 1029 q 222 1092 217 1076 q 242 1114 226 1107 q 267 1124 254 1121 q 298 1129 281 1128 q 333 1129 315 1131 z "},"í":{"ha":833,"x_min":90,"x_max":647,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 531 1129 q 582 1127 560 1131 q 622 1114 604 1124 q 642 1092 638 1107 q 642 1063 647 1076 q 613 999 633 1029 q 566 942 592 968 q 510 899 540 917 q 469 881 490 886 q 426 876 449 876 q 394 881 410 876 q 364 894 378 885 q 441 967 408 931 q 497 1044 474 1004 q 531 1129 519 1083 z "},"î":{"ha":833,"x_min":90,"x_max":715,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 404 1136 q 416 1136 410 1136 q 432 1136 422 1136 q 474 1130 454 1136 q 532 1097 494 1124 q 579 1060 554 1081 q 628 1013 604 1039 q 675 958 653 988 q 715 893 697 928 q 683 879 700 883 q 644 875 667 875 q 611 883 624 875 q 578 917 599 892 q 509 987 549 954 q 399 1057 469 1019 l 478 1038 l 388 1038 l 464 1058 q 335 965 385 1013 q 258 872 285 918 l 250 872 q 204 877 222 872 q 177 890 186 882 q 168 907 168 899 q 176 935 168 917 q 204 981 185 954 q 245 1027 222 1004 q 294 1071 268 1050 q 349 1108 321 1092 q 404 1136 376 1125 z "},"ï":{"ha":833,"x_min":90,"x_max":654,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 210 1056 q 240 1059 224 1058 q 271 1060 257 1060 q 318 1055 297 1060 q 352 1038 339 1050 q 365 1003 365 1025 l 365 899 q 335 895 351 896 q 303 894 318 894 q 258 899 279 894 q 223 917 236 904 q 210 951 210 931 l 210 1056 m 499 1056 q 529 1059 513 1058 q 560 1060 546 1060 q 607 1055 586 1060 q 641 1038 628 1050 q 654 1003 654 1025 l 654 899 q 624 895 640 896 q 592 894 607 894 q 547 899 568 894 q 512 917 525 904 q 499 951 499 931 l 499 1056 z "},"ĩ":{"ha":833,"x_min":90,"x_max":694,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 554 1004 q 622 1019 596 1004 q 676 1076 649 1035 l 685 1076 q 690 1060 689 1069 q 693 1041 692 1051 q 694 1017 694 1031 q 687 972 694 996 q 660 929 679 949 q 618 904 643 913 q 560 896 593 896 q 487 908 518 896 q 428 936 456 921 q 373 964 401 951 q 307 976 344 976 q 242 960 268 976 q 188 904 215 944 l 179 904 q 174 920 176 913 q 171 938 172 928 q 169 958 169 947 q 177 1006 169 983 q 201 1047 185 1029 q 242 1074 218 1064 q 300 1085 267 1085 q 376 1072 343 1085 q 437 1044 410 1060 q 492 1017 464 1029 q 554 1004 519 1004 z "},"ī":{"ha":833,"x_min":90,"x_max":704,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 160 1024 l 643 1024 q 692 1006 679 1024 q 704 953 704 989 q 703 940 704 946 q 702 926 703 933 q 700 914 701 919 l 263 914 q 197 924 219 914 q 167 953 175 933 q 160 1006 160 974 q 160 1012 160 1008 q 160 1018 160 1015 q 160 1024 160 1021 z "},"ĭ":{"ha":833,"x_min":90,"x_max":675,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 432 993 q 540 1028 501 999 q 597 1118 579 1057 q 633 1111 617 1117 q 664 1096 650 1106 q 672 1079 671 1090 q 668 1054 674 1068 q 619 969 651 1004 q 541 915 586 933 q 438 897 496 897 l 426 897 q 323 915 368 897 q 246 969 278 933 q 196 1054 214 1004 q 192 1079 190 1068 q 200 1096 193 1090 q 231 1111 214 1106 q 267 1118 247 1117 q 324 1028 285 1057 q 432 993 363 999 z "},"į":{"ha":833,"x_min":90,"x_max":543,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 471 26 q 489 23 478 28 q 524 0 500 18 q 513 -9 521 -4 q 488 -17 506 -14 q 385 -68 418 -33 q 351 -151 351 -103 q 373 -204 351 -185 q 438 -224 394 -224 q 483 -218 463 -224 q 522 -197 503 -212 l 531 -197 q 538 -216 536 -207 q 542 -233 540 -225 q 543 -254 543 -242 q 511 -324 543 -301 q 422 -347 479 -347 q 294 -304 343 -347 q 246 -185 246 -261 q 276 -76 246 -124 q 358 -3 307 -29 q 471 26 410 24 m 339 1044 q 357 1051 347 1049 q 377 1054 367 1053 q 399 1056 388 1056 q 421 1057 411 1057 q 497 1041 468 1057 q 525 988 525 1025 l 525 904 q 508 898 517 900 q 490 894 499 896 q 470 892 481 893 q 449 892 460 892 q 369 913 400 892 q 339 971 339 935 l 339 1044 z "},"ȉ":{"ha":833,"x_min":90,"x_max":636,"o":"m 225 1129 q 260 1044 238 1083 q 315 967 282 1004 q 392 894 347 931 q 362 881 378 885 q 329 876 346 876 q 286 881 307 876 q 246 899 265 886 q 190 942 217 917 q 143 999 163 968 q 114 1063 124 1029 q 113 1092 108 1076 q 133 1114 117 1107 q 159 1124 146 1121 q 189 1129 172 1128 q 225 1129 206 1131 m 471 1129 q 505 1044 483 1083 q 560 967 526 1004 q 636 894 593 931 q 607 881 624 885 q 574 876 590 876 q 531 881 551 876 q 492 899 511 886 q 435 942 461 917 q 389 999 408 968 q 358 1063 369 1029 q 358 1092 354 1076 q 379 1114 363 1107 q 405 1124 392 1121 q 435 1129 418 1128 q 471 1129 451 1131 m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 101 631 113 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 z "},"ȋ":{"ha":833,"x_min":90,"x_max":675,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 432 1021 q 324 987 363 1015 q 267 896 285 958 q 231 903 247 899 q 200 918 214 908 q 192 934 193 924 q 196 960 190 944 q 246 1046 214 1011 q 323 1099 278 1081 q 426 1117 368 1117 l 438 1117 q 541 1099 496 1117 q 619 1046 586 1081 q 668 960 651 1011 q 672 934 674 944 q 664 918 671 924 q 633 903 650 908 q 597 896 617 899 q 540 987 579 958 q 432 1021 501 1015 z "},"ḯ":{"ha":833,"x_min":90,"x_max":654,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 210 1056 q 240 1059 224 1058 q 271 1060 257 1060 q 318 1055 297 1060 q 352 1038 339 1050 q 365 1003 365 1025 l 365 899 q 335 895 351 896 q 303 894 318 894 q 258 899 279 894 q 223 917 236 904 q 210 951 210 931 l 210 1056 m 499 1056 q 529 1059 513 1058 q 560 1060 546 1060 q 607 1055 586 1060 q 641 1038 628 1050 q 654 1003 654 1025 l 654 899 q 624 895 640 896 q 592 894 607 894 q 547 899 568 894 q 512 917 525 904 q 499 951 499 931 l 499 1056 m 529 1340 q 567 1339 550 1340 q 599 1335 585 1338 q 626 1328 613 1332 q 647 1308 643 1321 q 644 1281 650 1296 q 624 1239 636 1258 q 594 1201 611 1219 q 556 1168 576 1183 q 513 1140 536 1153 q 476 1125 494 1129 q 435 1121 457 1121 q 410 1123 422 1121 q 385 1129 397 1125 q 360 1140 372 1133 q 437 1202 403 1171 q 494 1267 471 1233 q 529 1340 518 1301 z "},"ỉ":{"ha":833,"x_min":90,"x_max":594,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 367 858 q 381 894 367 878 q 431 926 396 910 q 491 961 474 947 q 508 993 508 975 q 508 1001 508 997 q 507 1010 508 1006 q 481 1017 496 1015 q 447 1019 465 1019 q 389 1013 415 1019 q 342 994 363 1007 q 300 963 321 982 l 292 963 q 283 986 286 975 q 281 1013 281 997 q 288 1050 281 1033 q 307 1081 294 1067 q 324 1094 315 1088 q 344 1105 333 1100 q 370 1113 356 1110 q 401 1117 385 1115 q 438 1119 417 1119 q 526 1103 492 1119 q 578 1061 561 1088 q 594 1000 594 1035 l 594 997 q 579 942 594 963 q 531 899 564 921 q 483 862 494 875 q 468 829 471 849 q 454 826 463 828 q 438 822 446 824 q 421 821 429 821 q 380 831 393 821 q 367 858 367 840 z "},"ị":{"ha":833,"x_min":90,"x_max":528,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 m 354 -125 q 370 -122 361 -124 q 388 -120 379 -121 q 405 -119 396 -119 q 424 -119 414 -119 q 498 -133 469 -119 q 526 -183 526 -146 l 526 -274 q 510 -276 519 -275 q 493 -278 501 -278 q 476 -279 485 -279 q 457 -279 467 -279 q 383 -265 413 -279 q 354 -215 354 -251 l 354 -125 m 339 1044 q 357 1051 347 1049 q 377 1054 367 1053 q 399 1056 388 1056 q 421 1057 411 1057 q 497 1041 468 1057 q 525 988 525 1025 l 525 904 q 508 898 517 900 q 490 894 499 896 q 470 892 481 893 q 449 892 460 892 q 369 913 400 892 q 339 971 339 935 l 339 1044 z "},"j":{"ha":833,"x_min":53,"x_max":635,"o":"m 478 753 q 547 747 518 753 q 590 727 575 740 q 604 694 604 714 q 604 562 604 625 q 604 440 604 499 q 604 321 604 381 q 604 198 604 261 q 604 67 604 135 q 583 -82 604 -18 q 521 -190 563 -146 q 419 -256 479 -233 q 283 -278 360 -278 q 188 -272 229 -278 q 120 -254 147 -265 q 79 -229 93 -243 q 59 -191 65 -215 q 53 -139 53 -167 q 53 -119 53 -129 q 56 -100 54 -110 l 64 -100 q 130 -131 99 -119 q 198 -147 161 -142 q 285 -151 235 -151 q 365 -143 324 -151 q 443 -111 407 -135 q 464 -65 457 -89 q 474 -8 471 -40 q 478 69 478 24 q 478 215 478 147 q 478 349 478 283 q 478 481 478 414 q 478 628 478 549 l 469 631 q 346 623 400 628 q 251 615 292 618 q 183 610 211 613 q 136 608 154 608 q 103 629 115 608 q 90 690 90 650 q 92 717 90 704 q 96 739 93 729 q 198 746 146 743 q 299 750 250 749 q 393 752 347 751 q 478 753 439 753 m 449 1044 q 467 1051 457 1049 q 487 1054 476 1053 q 509 1056 497 1056 q 531 1057 521 1057 q 606 1041 578 1057 q 635 988 635 1025 l 635 904 q 617 898 626 900 q 599 894 608 896 q 580 892 590 893 q 558 892 569 892 q 479 913 510 892 q 449 971 449 935 l 449 1044 z "},"ĵ":{"ha":833,"x_min":53,"x_max":825,"o":"m 478 753 q 547 747 518 753 q 590 727 575 740 q 604 694 604 714 q 604 562 604 625 q 604 440 604 499 q 604 321 604 381 q 604 198 604 261 q 604 67 604 135 q 583 -82 604 -18 q 521 -190 563 -146 q 419 -256 479 -233 q 283 -278 360 -278 q 188 -272 229 -278 q 120 -254 147 -265 q 79 -229 93 -243 q 59 -191 65 -215 q 53 -139 53 -167 q 53 -119 53 -129 q 56 -100 54 -110 l 64 -100 q 130 -131 99 -119 q 198 -147 161 -142 q 285 -151 235 -151 q 365 -143 324 -151 q 443 -111 407 -135 q 464 -65 457 -89 q 474 -8 471 -40 q 478 69 478 24 q 478 215 478 147 q 478 349 478 283 q 478 481 478 414 q 478 628 478 549 l 469 631 q 346 623 400 628 q 251 615 292 618 q 183 610 211 613 q 136 608 154 608 q 103 629 115 608 q 90 690 90 650 q 92 717 90 704 q 96 739 93 729 q 198 746 146 743 q 299 750 250 749 q 393 752 347 751 q 478 753 439 753 m 514 1136 q 526 1136 519 1136 q 542 1136 532 1136 q 584 1130 564 1136 q 642 1097 604 1124 q 689 1060 664 1081 q 738 1013 714 1039 q 785 958 763 988 q 825 893 807 928 q 793 879 810 883 q 754 875 776 875 q 721 883 733 875 q 688 917 708 892 q 619 987 658 954 q 508 1057 579 1019 l 588 1038 l 497 1038 l 574 1058 q 444 965 494 1013 q 368 872 394 918 l 360 872 q 314 877 332 872 q 287 890 296 882 q 278 907 278 899 q 286 935 278 917 q 314 981 294 954 q 355 1027 332 1004 q 404 1071 378 1050 q 458 1108 431 1092 q 514 1136 486 1125 z "},"k":{"ha":833,"x_min":99,"x_max":783,"o":"m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 214 -6 219 -6 q 160 9 181 -6 q 128 49 139 24 q 118 104 118 74 q 118 313 118 211 q 118 511 118 414 q 118 708 118 608 q 118 914 118 808 q 114 986 118 957 q 99 1042 110 1015 q 112 1044 106 1043 q 125 1047 118 1046 q 138 1047 132 1047 q 190 1032 165 1047 q 231 981 215 1017 q 246 886 246 946 q 246 662 246 774 q 246 440 246 550 q 246 219 246 329 q 246 -4 246 108 m 708 -14 q 642 -5 669 -14 q 593 26 614 4 q 561 60 576 43 q 531 94 546 76 q 502 131 517 113 q 475 169 488 150 q 442 222 457 197 q 416 270 428 247 q 394 317 404 293 l 354 321 l 457 418 q 553 269 501 342 q 663 128 604 196 q 783 1 721 61 q 763 -7 775 -4 q 737 -12 750 -10 q 708 -14 724 -14 m 200 364 l 251 351 q 306 378 279 364 q 356 409 332 392 q 401 447 379 426 q 444 489 424 467 q 504 565 476 525 q 557 651 532 604 q 604 750 582 697 l 625 750 q 681 744 658 750 q 714 726 703 738 q 725 701 725 715 q 721 679 725 692 q 706 646 717 667 q 644 544 678 592 q 573 456 611 496 q 492 383 535 415 q 404 325 450 350 q 310 283 358 300 q 214 258 263 267 l 200 364 z "},"ķ":{"ha":833,"x_min":99,"x_max":783,"o":"m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 214 -6 219 -6 q 160 9 181 -6 q 128 49 139 24 q 118 104 118 74 q 118 313 118 211 q 118 511 118 414 q 118 708 118 608 q 118 914 118 808 q 114 986 118 957 q 99 1042 110 1015 q 112 1044 106 1043 q 125 1047 118 1046 q 138 1047 132 1047 q 190 1032 165 1047 q 231 981 215 1017 q 246 886 246 946 q 246 662 246 774 q 246 440 246 550 q 246 219 246 329 q 246 -4 246 108 m 708 -14 q 642 -5 669 -14 q 593 26 614 4 q 561 60 576 43 q 531 94 546 76 q 502 131 517 113 q 475 169 488 150 q 442 222 457 197 q 416 270 428 247 q 394 317 404 293 l 354 321 l 457 418 q 553 269 501 342 q 663 128 604 196 q 783 1 721 61 q 763 -7 775 -4 q 737 -12 750 -10 q 708 -14 724 -14 m 200 364 l 251 351 q 306 378 279 364 q 356 409 332 392 q 401 447 379 426 q 444 489 424 467 q 504 565 476 525 q 557 651 532 604 q 604 750 582 697 l 625 750 q 681 744 658 750 q 714 726 703 738 q 725 701 725 715 q 721 679 725 692 q 706 646 717 667 q 644 544 678 592 q 573 456 611 496 q 492 383 535 415 q 404 325 450 350 q 310 283 358 300 q 214 258 263 267 l 200 364 m 389 -97 q 414 -91 401 -93 q 442 -89 426 -89 q 492 -102 476 -89 q 508 -144 508 -115 q 501 -215 508 -178 q 483 -285 494 -253 q 458 -339 471 -318 q 438 -362 449 -356 q 413 -369 428 -369 q 377 -366 393 -369 q 346 -356 361 -362 q 370 -281 361 -321 q 384 -194 379 -240 q 389 -97 389 -149 z "},"l":{"ha":833,"x_min":47,"x_max":754,"o":"m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 405 1047 378 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 393 463 467 q 463 247 463 319 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 99 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 z "},"ĺ":{"ha":833,"x_min":47,"x_max":754,"o":"m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 405 1047 378 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 393 463 467 q 463 247 463 319 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 99 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 m 458 1333 q 497 1332 479 1333 q 528 1328 514 1331 q 556 1321 542 1325 q 576 1301 572 1314 q 574 1274 579 1289 q 553 1232 565 1251 q 523 1194 540 1213 q 485 1161 506 1176 q 442 1133 465 1146 q 405 1118 424 1122 q 364 1114 386 1114 q 339 1116 351 1114 q 314 1122 326 1118 q 289 1133 301 1126 q 366 1195 332 1164 q 424 1260 400 1226 q 458 1333 447 1294 z "},"ļ":{"ha":833,"x_min":47,"x_max":754,"o":"m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 405 1047 378 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 393 463 467 q 463 247 463 319 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 99 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 m 488 -96 q 513 -90 500 -92 q 540 -87 525 -87 q 591 -101 575 -87 q 607 -143 607 -114 q 600 -214 607 -176 q 581 -284 593 -251 q 557 -337 569 -317 q 537 -361 547 -354 q 511 -368 526 -368 q 476 -365 492 -368 q 444 -354 460 -361 q 469 -279 460 -319 q 483 -193 478 -239 q 488 -96 488 -147 z "},"ľ":{"ha":833,"x_min":47,"x_max":754,"o":"m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 405 1047 378 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 393 463 467 q 463 247 463 319 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 99 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 m 643 794 q 619 797 629 794 q 600 806 610 800 q 622 885 614 853 q 633 955 629 918 q 636 1046 636 992 q 653 1051 646 1050 q 669 1054 661 1053 q 688 1056 678 1056 q 733 1042 717 1056 q 749 1000 749 1028 q 742 927 749 963 q 722 862 736 892 q 686 810 708 832 q 667 798 676 801 q 643 794 658 794 z "},"ḷ":{"ha":833,"x_min":47,"x_max":754,"o":"m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 405 1047 378 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 393 463 467 q 463 247 463 319 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 99 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 m 443 -125 q 459 -122 450 -124 q 476 -120 468 -121 q 494 -119 485 -119 q 513 -119 503 -119 q 587 -133 558 -119 q 615 -183 615 -146 l 615 -274 q 599 -276 608 -275 q 582 -278 590 -278 q 565 -279 574 -279 q 546 -279 556 -279 q 472 -265 501 -279 q 443 -215 443 -251 l 443 -125 z "},"ḻ":{"ha":833,"x_min":47,"x_max":801,"o":"m 257 -157 l 740 -157 q 789 -174 776 -157 q 801 -228 801 -192 q 801 -241 801 -233 q 799 -255 800 -249 q 797 -267 799 -261 l 360 -267 q 294 -257 317 -267 q 265 -227 272 -247 q 257 -175 257 -207 q 257 -169 257 -172 q 257 -162 257 -165 q 257 -157 257 -160 m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 404 1047 376 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 394 463 467 q 463 247 463 321 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 100 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 z "},"m":{"ha":833,"x_min":47,"x_max":790,"o":"m 790 0 q 777 -3 785 -1 q 762 -5 769 -4 q 744 -6 754 -6 q 688 8 711 -6 q 652 60 664 22 q 640 172 640 99 q 642 246 640 208 q 644 322 643 283 q 648 400 646 360 q 653 485 650 440 q 661 579 657 529 q 642 613 654 601 q 608 624 631 624 q 548 601 578 624 q 491 535 518 578 q 443 438 464 493 l 443 611 l 469 611 q 519 685 492 653 q 578 736 546 718 q 642 754 610 754 q 693 740 669 754 q 734 702 717 725 q 760 652 751 679 q 769 597 769 625 q 769 496 769 546 q 769 395 769 446 q 769 294 769 344 q 769 193 769 243 q 774 94 769 136 q 790 0 778 51 m 463 0 q 456 -2 460 -1 q 449 -3 453 -3 q 440 -4 444 -4 q 400 9 417 -4 q 374 56 383 22 q 365 151 365 90 q 366 228 365 190 q 368 304 367 265 q 372 386 369 343 q 377 476 374 429 q 385 578 381 524 q 372 605 379 594 q 353 619 364 615 q 328 624 343 624 q 274 606 300 624 q 223 545 249 588 q 168 429 197 503 l 165 607 l 192 607 q 235 688 211 656 q 288 736 260 719 q 347 753 317 753 q 398 738 376 753 q 433 699 419 722 q 455 649 447 675 q 463 603 463 624 q 463 453 463 528 q 463 302 463 378 q 463 151 463 226 q 463 0 463 75 m 185 -4 q 176 -6 181 -4 q 166 -7 171 -7 q 156 -7 161 -7 q 143 -7 150 -7 q 110 -6 125 -7 q 85 2 94 -4 q 69 19 75 8 q 64 47 64 29 q 64 235 64 142 q 64 423 64 329 q 64 611 64 517 q 60 683 64 656 q 47 742 57 710 q 56 744 51 743 q 66 747 61 746 q 76 747 71 747 q 85 747 81 747 q 122 738 104 747 q 153 713 139 729 q 176 670 168 696 q 185 608 185 644 q 185 404 185 507 q 185 200 185 301 q 185 -4 185 99 z "},"ṃ":{"ha":833,"x_min":47,"x_max":790,"o":"m 790 0 q 777 -3 785 -1 q 762 -5 769 -4 q 744 -6 754 -6 q 688 8 711 -6 q 652 60 664 22 q 640 172 640 99 q 642 246 640 208 q 644 322 643 283 q 648 400 646 360 q 653 485 650 440 q 661 579 657 529 q 642 613 654 601 q 608 624 631 624 q 548 601 578 624 q 491 535 518 578 q 443 438 464 493 l 443 611 l 469 611 q 519 685 492 653 q 578 736 546 718 q 642 754 610 754 q 693 740 669 754 q 734 702 717 725 q 760 652 751 679 q 769 597 769 625 q 769 496 769 546 q 769 395 769 446 q 769 294 769 344 q 769 193 769 243 q 774 94 769 136 q 790 0 778 51 m 463 0 q 456 -2 460 -1 q 449 -3 453 -3 q 440 -4 444 -4 q 400 9 417 -4 q 374 56 383 22 q 365 151 365 90 q 366 228 365 190 q 368 304 367 265 q 372 386 369 343 q 377 476 374 429 q 385 578 381 524 q 372 605 379 594 q 353 619 364 615 q 328 624 343 624 q 274 606 300 624 q 223 545 249 588 q 168 429 197 503 l 165 607 l 192 607 q 235 688 211 656 q 288 736 260 719 q 347 753 317 753 q 398 738 376 753 q 433 699 419 722 q 455 649 447 675 q 463 603 463 624 q 463 453 463 528 q 463 302 463 378 q 463 151 463 226 q 463 0 463 75 m 185 -4 q 176 -6 181 -4 q 166 -7 171 -7 q 156 -7 161 -7 q 143 -7 150 -7 q 110 -6 125 -7 q 85 2 94 -4 q 69 19 75 8 q 64 47 64 29 q 64 235 64 142 q 64 423 64 329 q 64 611 64 517 q 60 683 64 656 q 47 742 57 710 q 56 744 51 743 q 66 747 61 746 q 76 747 71 747 q 85 747 81 747 q 122 738 104 747 q 153 713 139 729 q 176 670 168 696 q 185 608 185 644 q 185 404 185 507 q 185 200 185 301 q 185 -4 185 99 m 350 -125 q 366 -122 357 -124 q 383 -120 375 -121 q 401 -119 392 -119 q 419 -119 410 -119 q 494 -133 465 -119 q 522 -183 522 -146 l 522 -274 q 506 -276 515 -275 q 489 -278 497 -278 q 472 -279 481 -279 q 453 -279 463 -279 q 379 -265 408 -279 q 350 -215 350 -251 l 350 -125 z "},"n":{"ha":833,"x_min":99,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 z "},"ñ":{"ha":833,"x_min":99,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 m 539 1004 q 607 1019 581 1004 q 661 1076 633 1035 l 669 1076 q 675 1060 674 1069 q 678 1041 676 1051 q 679 1017 679 1031 q 672 972 679 996 q 644 929 664 949 q 603 904 628 913 q 544 896 578 896 q 472 908 503 896 q 413 936 440 921 q 358 964 386 951 q 292 976 329 976 q 226 960 253 976 q 172 904 200 944 l 164 904 q 159 920 161 913 q 156 938 157 928 q 154 958 154 947 q 162 1006 154 983 q 186 1047 169 1029 q 227 1074 203 1064 q 285 1085 251 1085 q 361 1072 328 1085 q 422 1044 394 1060 q 476 1017 449 1029 q 539 1004 504 1004 z "},"ń":{"ha":833,"x_min":99,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 m 515 1129 q 567 1127 544 1131 q 607 1114 589 1124 q 627 1092 622 1107 q 626 1063 632 1076 q 597 999 618 1029 q 551 942 576 968 q 494 899 525 917 q 454 881 475 886 q 411 876 433 876 q 378 881 394 876 q 349 894 363 885 q 426 967 393 931 q 481 1044 458 1004 q 515 1129 504 1083 z "},"ņ":{"ha":833,"x_min":99,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 m 376 -97 q 401 -91 389 -93 q 429 -89 414 -89 q 480 -102 464 -89 q 496 -144 496 -115 q 489 -215 496 -178 q 470 -285 482 -253 q 446 -339 458 -318 q 426 -362 436 -356 q 400 -369 415 -369 q 365 -366 381 -369 q 333 -356 349 -362 q 358 -281 349 -321 q 372 -194 367 -240 q 376 -97 376 -149 z "},"ň":{"ha":833,"x_min":99,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 m 444 885 q 433 885 439 885 q 417 885 426 885 q 374 891 394 885 q 317 924 354 897 q 269 961 294 940 q 220 1008 244 982 q 174 1063 196 1033 q 133 1128 151 1093 q 166 1142 149 1138 q 204 1146 183 1146 q 238 1138 225 1146 q 271 1104 251 1129 q 341 1033 301 1067 q 450 964 381 1000 l 371 983 l 463 983 l 385 963 q 515 1055 464 1008 q 590 1149 565 1101 l 599 1149 q 645 1144 628 1149 q 672 1131 663 1139 q 682 1114 682 1124 q 674 1085 682 1103 q 644 1039 665 1067 q 603 993 626 1017 q 554 949 581 969 q 500 913 528 929 q 444 885 472 896 z "},"ṅ":{"ha":833,"x_min":99,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 m 324 1044 q 342 1051 332 1049 q 362 1054 351 1053 q 384 1056 372 1056 q 406 1057 396 1057 q 481 1041 453 1057 q 510 988 510 1025 l 510 904 q 492 898 501 900 q 474 894 483 896 q 455 892 465 893 q 433 892 444 892 q 354 913 385 892 q 324 971 324 935 l 324 1044 z "},"ṇ":{"ha":833,"x_min":99,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 m 332 -125 q 348 -122 339 -124 q 365 -120 357 -121 q 383 -119 374 -119 q 401 -119 392 -119 q 476 -133 447 -119 q 504 -183 504 -146 l 504 -274 q 488 -276 497 -275 q 471 -278 479 -278 q 453 -279 463 -279 q 435 -279 444 -279 q 361 -265 390 -279 q 332 -215 332 -251 l 332 -125 z "},"ṉ":{"ha":833,"x_min":99,"x_max":735,"o":"m 146 -157 l 631 -157 q 678 -175 665 -157 q 690 -228 690 -193 q 690 -242 690 -235 q 689 -255 690 -249 q 688 -267 688 -261 l 249 -267 q 183 -257 206 -267 q 153 -227 161 -247 q 146 -176 146 -207 q 146 -169 146 -172 q 146 -163 146 -167 q 146 -157 146 -160 m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 z "},"o":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 z "},"ò":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 318 1129 q 353 1044 331 1083 q 408 967 375 1004 q 485 894 440 931 q 455 881 471 885 q 422 876 439 876 q 379 881 400 876 q 339 899 358 886 q 283 942 310 917 q 237 999 257 968 q 207 1063 217 1029 q 206 1092 201 1076 q 226 1114 211 1107 q 252 1124 239 1121 q 283 1129 265 1128 q 318 1129 300 1131 z "},"ó":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 515 1129 q 567 1127 544 1131 q 607 1114 589 1124 q 627 1092 622 1107 q 626 1063 632 1076 q 597 999 618 1029 q 551 942 576 968 q 494 899 525 917 q 454 881 475 886 q 411 876 433 876 q 378 881 394 876 q 349 894 363 885 q 426 967 393 931 q 481 1044 458 1004 q 515 1129 504 1083 z "},"ô":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 389 1136 q 401 1136 394 1136 q 417 1136 407 1136 q 459 1130 439 1136 q 517 1097 479 1124 q 564 1060 539 1081 q 613 1013 589 1039 q 660 958 638 988 q 700 893 682 928 q 668 879 685 883 q 629 875 651 875 q 596 883 608 875 q 563 917 583 892 q 494 987 533 954 q 383 1057 454 1019 l 463 1038 l 372 1038 l 449 1058 q 319 965 369 1013 q 243 872 269 918 l 235 872 q 189 877 207 872 q 162 890 171 882 q 153 907 153 899 q 161 935 153 917 q 189 981 169 954 q 230 1027 207 1004 q 279 1071 253 1050 q 333 1108 306 1092 q 389 1136 361 1125 z "},"õ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 539 1004 q 607 1019 581 1004 q 661 1076 633 1035 l 669 1076 q 675 1060 674 1069 q 678 1041 676 1051 q 679 1017 679 1031 q 672 972 679 996 q 644 929 664 949 q 603 904 628 913 q 544 896 578 896 q 472 908 503 896 q 413 936 440 921 q 358 964 386 951 q 292 976 329 976 q 226 960 253 976 q 172 904 200 944 l 164 904 q 159 920 161 913 q 156 938 157 928 q 154 958 154 947 q 162 1006 154 983 q 186 1047 169 1029 q 227 1074 203 1064 q 285 1085 251 1085 q 361 1072 328 1085 q 422 1044 394 1060 q 476 1017 449 1029 q 539 1004 504 1004 z "},"ö":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 194 1056 q 225 1059 208 1058 q 256 1060 242 1060 q 303 1055 282 1060 q 337 1038 324 1050 q 350 1003 350 1025 l 350 899 q 319 895 336 896 q 288 894 303 894 q 242 899 264 894 q 208 917 221 904 q 194 951 194 931 l 194 1056 m 483 1056 q 514 1059 497 1058 q 544 1060 531 1060 q 592 1055 571 1060 q 626 1038 613 1050 q 639 1003 639 1025 l 639 899 q 608 895 625 896 q 576 894 592 894 q 531 899 553 894 q 497 917 510 904 q 483 951 483 931 l 483 1056 z "},"ō":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 144 1024 l 628 1024 q 676 1006 664 1024 q 689 953 689 989 q 688 940 689 946 q 687 926 688 933 q 685 914 686 919 l 247 914 q 182 924 204 914 q 152 953 160 933 q 144 1006 144 974 q 144 1012 144 1008 q 144 1018 144 1015 q 144 1024 144 1021 z "},"ŏ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 417 993 q 525 1028 486 999 q 582 1118 564 1057 q 618 1111 601 1117 q 649 1096 635 1106 q 657 1079 656 1090 q 653 1054 658 1068 q 603 969 636 1004 q 526 915 571 933 q 422 897 481 897 l 411 897 q 308 915 353 897 q 231 969 263 933 q 181 1054 199 1004 q 176 1079 175 1068 q 185 1096 178 1090 q 215 1111 199 1106 q 251 1118 232 1117 q 308 1028 269 1057 q 417 993 347 999 z "},"ő":{"ha":833,"x_min":88,"x_max":746,"o":"m 343 1129 q 394 1127 372 1131 q 435 1114 417 1124 q 454 1092 450 1107 q 454 1063 458 1076 q 424 999 444 1029 q 378 942 404 968 q 322 899 353 917 q 281 881 301 886 q 239 876 261 876 q 206 881 222 876 q 176 894 190 885 q 253 967 221 931 q 308 1044 286 1004 q 343 1129 331 1083 m 621 1131 q 673 1127 650 1131 q 713 1115 696 1124 q 733 1093 729 1108 q 733 1063 738 1078 q 703 999 724 1029 q 658 942 683 968 q 600 900 632 917 q 560 882 581 888 q 518 876 540 876 q 485 881 501 876 q 456 894 469 885 q 533 968 500 932 q 588 1044 565 1004 q 621 1131 610 1085 m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 z "},"ơ":{"ha":833,"x_min":88,"x_max":789,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 658 908 q 676 917 667 914 q 695 921 685 919 q 718 922 706 922 q 772 901 754 922 q 789 839 789 881 q 771 745 789 782 q 721 686 753 708 q 662 658 692 665 q 606 650 632 650 q 597 650 601 650 q 589 650 593 650 q 581 650 585 650 q 581 663 581 657 q 581 674 581 668 q 581 688 581 681 q 581 704 581 696 q 610 708 596 704 q 640 721 625 713 q 666 753 656 732 q 676 811 676 774 q 672 862 676 839 q 658 908 667 885 z "},"ǫ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 444 -183 q 454 -108 444 -146 q 485 -35 464 -71 q 535 33 506 0 q 603 92 564 65 q 643 121 626 113 q 675 129 660 129 q 662 90 672 107 q 631 54 651 74 q 563 -41 582 8 q 544 -137 544 -90 q 565 -202 544 -181 q 629 -224 586 -224 q 675 -218 654 -224 q 715 -197 696 -212 l 722 -197 q 730 -216 726 -207 q 734 -233 733 -225 q 735 -254 735 -242 q 702 -324 735 -301 q 614 -347 669 -347 q 490 -306 535 -347 q 444 -183 444 -265 z "},"ȍ":{"ha":833,"x_min":88,"x_max":746,"o":"m 210 1129 q 244 1044 222 1083 q 299 967 267 1004 q 375 894 332 931 q 347 881 363 885 q 313 876 331 876 q 271 881 292 876 q 231 899 250 886 q 174 942 201 917 q 128 999 147 968 q 99 1063 108 1029 q 97 1092 93 1076 q 118 1114 101 1107 q 144 1124 131 1121 q 174 1129 157 1128 q 210 1129 190 1131 m 454 1129 q 490 1044 468 1083 q 544 967 511 1004 q 621 894 576 931 q 592 881 608 885 q 558 876 575 876 q 516 881 536 876 q 475 899 496 886 q 419 942 446 917 q 374 999 393 968 q 343 1063 354 1029 q 343 1092 339 1076 q 364 1114 347 1107 q 389 1124 375 1121 q 419 1129 403 1128 q 454 1129 436 1131 m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 z "},"ȏ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 417 1021 q 308 987 347 1015 q 251 896 269 958 q 215 903 232 899 q 185 918 199 908 q 176 934 178 924 q 181 960 175 944 q 231 1046 199 1011 q 308 1099 263 1081 q 411 1117 353 1117 l 422 1117 q 526 1099 481 1117 q 603 1046 571 1081 q 653 960 636 1011 q 657 934 658 944 q 649 918 656 924 q 618 903 635 908 q 582 896 601 899 q 525 987 564 958 q 417 1021 486 1015 z "},"ȫ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 194 1056 q 225 1059 208 1058 q 256 1060 242 1060 q 303 1055 282 1060 q 337 1038 324 1050 q 350 1003 350 1025 l 350 899 q 319 895 336 896 q 288 894 303 894 q 242 899 264 894 q 208 917 221 904 q 194 951 194 931 l 194 1056 m 483 1056 q 514 1059 497 1058 q 544 1060 531 1060 q 592 1055 571 1060 q 626 1038 613 1050 q 639 1003 639 1025 l 639 899 q 608 895 625 896 q 576 894 592 894 q 531 899 553 894 q 497 917 510 904 q 483 951 483 931 l 483 1056 m 143 1276 l 628 1276 q 676 1259 664 1276 q 689 1206 689 1242 q 688 1185 689 1196 q 685 1167 686 1175 l 246 1167 q 182 1176 204 1167 q 151 1206 160 1186 q 143 1257 143 1226 q 143 1267 143 1263 q 143 1276 143 1272 z "},"ȭ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 539 1004 q 607 1019 581 1004 q 661 1076 633 1035 l 669 1076 q 675 1060 674 1069 q 678 1041 676 1051 q 679 1017 679 1031 q 672 972 679 996 q 644 929 664 949 q 603 904 628 913 q 544 896 578 896 q 472 908 503 896 q 413 936 440 921 q 358 964 386 951 q 292 976 329 976 q 226 960 253 976 q 172 904 200 944 l 164 904 q 159 920 161 913 q 156 938 157 928 q 154 958 154 947 q 162 1006 154 983 q 186 1047 169 1029 q 227 1074 203 1064 q 285 1085 251 1085 q 361 1072 328 1085 q 422 1044 394 1060 q 476 1017 449 1029 q 539 1004 504 1004 m 144 1282 l 628 1282 q 676 1265 664 1282 q 689 1211 689 1247 q 688 1198 689 1204 q 687 1185 688 1192 q 685 1172 686 1178 l 247 1172 q 182 1182 204 1172 q 152 1212 160 1192 q 144 1264 144 1232 q 144 1270 144 1267 q 144 1276 144 1274 q 144 1282 144 1279 z "},"ȱ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 324 1044 q 342 1051 332 1049 q 362 1054 351 1053 q 384 1056 372 1056 q 406 1057 396 1057 q 481 1041 453 1057 q 510 988 510 1025 l 510 904 q 492 898 501 900 q 474 894 483 896 q 455 892 465 893 q 433 892 444 892 q 354 913 385 892 q 324 971 324 935 l 324 1044 m 144 1251 l 628 1251 q 676 1234 664 1251 q 689 1181 689 1217 q 688 1167 689 1174 q 687 1154 688 1161 q 685 1142 686 1147 l 247 1142 q 182 1151 204 1142 q 152 1181 160 1161 q 144 1233 144 1201 q 144 1240 144 1236 q 144 1246 144 1243 q 144 1251 144 1249 z "},"ṍ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 539 1004 q 607 1019 581 1004 q 661 1076 633 1035 l 669 1076 q 675 1060 674 1069 q 678 1041 676 1051 q 679 1017 679 1031 q 672 972 679 996 q 644 929 664 949 q 603 904 628 913 q 544 896 578 896 q 472 908 503 896 q 413 936 440 921 q 358 964 386 951 q 292 976 329 976 q 226 960 253 976 q 172 904 200 944 l 164 904 q 159 920 161 913 q 156 938 157 928 q 154 958 154 947 q 162 1006 154 983 q 186 1047 169 1029 q 227 1074 203 1064 q 285 1085 251 1085 q 361 1072 328 1085 q 422 1044 394 1060 q 476 1017 449 1029 q 539 1004 504 1004 m 515 1388 q 567 1385 544 1389 q 607 1372 589 1382 q 627 1350 622 1365 q 626 1321 632 1335 q 597 1257 618 1288 q 551 1201 576 1226 q 494 1157 525 1175 q 454 1140 475 1144 q 411 1135 433 1135 q 378 1139 394 1135 q 349 1153 363 1143 q 426 1226 393 1189 q 481 1302 458 1263 q 515 1388 504 1342 z "},"ṏ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 539 1004 q 607 1019 581 1004 q 661 1076 633 1035 l 669 1076 q 675 1060 674 1069 q 678 1041 676 1051 q 679 1017 679 1031 q 672 972 679 996 q 644 929 664 949 q 603 904 628 913 q 544 896 578 896 q 472 908 503 896 q 413 936 440 921 q 358 964 386 951 q 292 976 329 976 q 226 960 253 976 q 172 904 200 944 l 164 904 q 159 920 161 913 q 156 938 157 928 q 154 958 154 947 q 162 1006 154 983 q 186 1047 169 1029 q 227 1074 203 1064 q 285 1085 251 1085 q 361 1072 328 1085 q 422 1044 394 1060 q 476 1017 449 1029 q 539 1004 504 1004 m 194 1314 q 225 1317 208 1317 q 256 1318 242 1318 q 303 1313 282 1318 q 337 1296 324 1308 q 350 1261 350 1283 l 350 1157 q 319 1153 336 1154 q 288 1153 303 1153 q 242 1158 264 1153 q 208 1176 221 1163 q 194 1210 194 1189 l 194 1314 m 483 1314 q 514 1317 497 1317 q 544 1318 531 1318 q 592 1313 571 1318 q 626 1296 613 1308 q 639 1261 639 1283 l 639 1157 q 608 1153 625 1154 q 576 1153 592 1153 q 531 1158 553 1153 q 497 1176 510 1163 q 483 1210 483 1189 l 483 1314 z "},"ṑ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 144 1024 l 628 1024 q 676 1006 664 1024 q 689 953 689 989 q 688 940 689 946 q 687 926 688 933 q 685 914 686 919 l 247 914 q 182 924 204 914 q 152 953 160 933 q 144 1006 144 974 q 144 1012 144 1008 q 144 1018 144 1015 q 144 1024 144 1021 m 319 1314 q 355 1240 332 1275 q 412 1175 378 1206 q 489 1113 446 1144 q 464 1103 476 1107 q 440 1097 451 1099 q 414 1094 428 1094 q 376 1098 393 1094 q 340 1113 358 1101 q 296 1140 317 1125 q 258 1174 275 1156 q 227 1212 240 1192 q 206 1251 214 1232 q 201 1281 199 1268 q 219 1300 204 1293 q 249 1309 233 1306 q 281 1314 264 1313 q 319 1314 299 1315 z "},"ṓ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 144 1024 l 628 1024 q 676 1006 664 1024 q 689 953 689 989 q 688 940 689 946 q 687 926 688 933 q 685 914 686 919 l 247 914 q 182 924 204 914 q 152 953 160 933 q 144 1006 144 974 q 144 1012 144 1008 q 144 1018 144 1015 q 144 1024 144 1021 m 514 1306 q 552 1304 535 1306 q 583 1300 569 1303 q 611 1293 597 1297 q 631 1274 628 1286 q 629 1246 635 1261 q 608 1204 621 1224 q 578 1167 596 1185 q 541 1133 561 1149 q 497 1106 521 1118 q 460 1090 479 1094 q 419 1086 442 1086 q 394 1088 407 1086 q 369 1094 382 1090 q 344 1106 357 1099 q 422 1167 388 1136 q 479 1233 456 1199 q 514 1306 503 1267 z "},"ọ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"ỏ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 353 858 q 367 894 353 878 q 417 926 382 910 q 477 961 460 947 q 494 993 494 975 q 494 1001 494 997 q 493 1010 494 1006 q 467 1017 482 1015 q 433 1019 451 1019 q 375 1013 401 1019 q 328 994 349 1007 q 286 963 307 982 l 278 963 q 269 986 272 975 q 267 1013 267 997 q 274 1050 267 1033 q 293 1081 281 1067 q 310 1094 301 1088 q 331 1105 319 1100 q 356 1113 342 1110 q 387 1117 371 1115 q 424 1119 403 1119 q 513 1103 478 1119 q 564 1061 547 1088 q 581 1000 581 1035 l 581 997 q 565 942 581 963 q 517 899 550 921 q 469 862 481 875 q 454 829 457 849 q 440 826 449 828 q 424 822 432 824 q 407 821 415 821 q 366 831 379 821 q 353 858 353 840 z "},"ố":{"ha":833,"x_min":88,"x_max":831,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 389 1136 q 401 1136 394 1136 q 417 1136 407 1136 q 459 1130 439 1136 q 517 1097 479 1124 q 564 1060 539 1081 q 613 1013 589 1039 q 660 958 638 988 q 700 893 682 928 q 668 879 685 883 q 629 875 651 875 q 596 883 608 875 q 563 917 583 892 q 494 987 533 954 q 383 1057 454 1019 l 463 1038 l 372 1038 l 449 1058 q 319 965 369 1013 q 243 872 269 918 l 235 872 q 189 877 207 872 q 162 890 171 882 q 153 907 153 899 q 161 935 153 917 q 189 981 169 954 q 230 1027 207 1004 q 279 1071 253 1050 q 333 1108 306 1092 q 389 1136 361 1125 m 726 1299 q 755 1297 742 1299 q 781 1294 768 1296 q 804 1289 793 1292 q 826 1268 822 1283 q 821 1229 829 1253 q 798 1183 811 1206 q 767 1142 785 1161 q 729 1106 750 1124 q 695 1086 711 1093 q 660 1079 679 1079 q 636 1081 647 1079 q 614 1088 625 1083 q 590 1097 603 1092 q 650 1155 624 1124 q 696 1222 676 1186 q 726 1299 715 1258 z "},"ồ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 389 1136 q 401 1136 394 1136 q 417 1136 407 1136 q 459 1130 439 1136 q 517 1097 479 1124 q 564 1060 539 1081 q 613 1013 589 1039 q 660 958 638 988 q 700 893 682 928 q 668 879 685 883 q 629 875 651 875 q 596 883 608 875 q 563 917 583 892 q 494 987 533 954 q 383 1057 454 1019 l 463 1038 l 372 1038 l 449 1058 q 319 965 369 1013 q 243 872 269 918 l 235 872 q 189 877 207 872 q 162 890 171 882 q 153 907 153 899 q 161 935 153 917 q 189 981 169 954 q 230 1027 207 1004 q 279 1071 253 1050 q 333 1108 306 1092 q 389 1136 361 1125 m 585 1297 q 615 1222 596 1258 q 661 1155 635 1186 q 721 1097 688 1124 q 697 1088 708 1092 q 676 1081 686 1083 q 653 1079 665 1079 q 616 1086 633 1079 q 581 1106 599 1093 q 543 1142 561 1124 q 512 1183 525 1161 q 490 1229 499 1206 q 486 1268 481 1253 q 511 1289 492 1283 q 532 1294 521 1292 q 556 1297 543 1296 q 585 1297 569 1297 z "},"ổ":{"ha":833,"x_min":88,"x_max":815,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 389 1136 q 401 1136 394 1136 q 417 1136 407 1136 q 459 1130 439 1136 q 517 1097 479 1124 q 564 1060 539 1081 q 613 1013 589 1039 q 660 958 638 988 q 700 893 682 928 q 668 879 685 883 q 629 875 651 875 q 596 883 608 875 q 563 917 583 892 q 494 987 533 954 q 383 1057 454 1019 l 463 1038 l 372 1038 l 449 1058 q 319 965 369 1013 q 243 872 269 918 l 235 872 q 189 877 207 872 q 162 890 171 882 q 153 907 153 899 q 161 935 153 917 q 189 981 169 954 q 230 1027 207 1004 q 279 1071 253 1050 q 333 1108 306 1092 q 389 1136 361 1125 m 586 1106 q 602 1142 586 1125 q 660 1174 618 1158 q 713 1197 699 1188 q 728 1221 728 1207 q 728 1228 728 1225 q 726 1236 728 1232 q 699 1243 714 1242 q 667 1244 685 1244 q 585 1233 619 1244 q 524 1194 551 1221 l 515 1194 q 507 1216 510 1206 q 504 1242 504 1226 q 510 1276 504 1261 q 531 1304 517 1292 q 551 1319 540 1313 q 578 1330 563 1325 q 613 1337 593 1335 q 656 1339 632 1339 q 744 1324 710 1339 q 797 1285 779 1310 q 814 1228 814 1260 l 814 1225 q 799 1178 814 1196 q 749 1140 783 1160 q 701 1107 711 1119 q 688 1076 690 1094 q 674 1073 682 1075 q 657 1070 665 1071 q 640 1069 649 1069 q 599 1080 613 1069 q 586 1106 586 1090 z "},"ỗ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 389 1136 q 401 1136 394 1136 q 417 1136 407 1136 q 459 1130 439 1136 q 517 1097 479 1124 q 564 1060 539 1081 q 613 1013 589 1039 q 660 958 638 988 q 700 893 682 928 q 668 879 685 883 q 629 875 651 875 q 596 883 608 875 q 563 917 583 892 q 494 987 533 954 q 383 1057 454 1019 l 463 1038 l 372 1038 l 449 1058 q 319 965 369 1013 q 243 872 269 918 l 235 872 q 189 877 207 872 q 162 890 171 882 q 153 907 153 899 q 161 935 153 917 q 189 981 169 954 q 230 1027 207 1004 q 279 1071 253 1050 q 333 1108 306 1092 q 389 1136 361 1125 m 528 1275 q 573 1288 556 1275 q 606 1340 590 1301 l 614 1340 q 624 1315 621 1329 q 628 1283 628 1300 q 624 1247 628 1264 q 615 1218 621 1231 q 585 1183 606 1196 q 536 1169 565 1169 q 467 1184 497 1169 q 410 1217 436 1199 q 358 1251 385 1236 q 301 1265 332 1265 q 255 1249 271 1265 q 221 1201 239 1233 l 213 1201 q 203 1224 207 1211 q 200 1254 200 1238 q 203 1291 200 1275 q 214 1322 207 1307 q 246 1359 224 1346 q 301 1372 268 1372 q 363 1357 335 1372 q 416 1323 390 1342 q 469 1290 442 1304 q 528 1275 496 1275 z "},"ộ":{"ha":833,"x_min":88,"x_max":746,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 389 1136 q 401 1136 394 1136 q 417 1136 407 1136 q 459 1130 439 1136 q 517 1097 479 1124 q 564 1060 539 1081 q 613 1013 589 1039 q 660 958 638 988 q 700 893 682 928 q 668 879 685 883 q 629 875 651 875 q 596 883 608 875 q 563 917 583 892 q 494 987 533 954 q 383 1057 454 1019 l 463 1038 l 372 1038 l 449 1058 q 319 965 369 1013 q 243 872 269 918 l 235 872 q 189 877 207 872 q 162 890 171 882 q 153 907 153 899 q 161 935 153 917 q 189 981 169 954 q 230 1027 207 1004 q 279 1071 253 1050 q 333 1108 306 1092 q 389 1136 361 1125 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"ớ":{"ha":833,"x_min":88,"x_max":789,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 658 908 q 676 917 667 914 q 695 921 685 919 q 718 922 706 922 q 772 901 754 922 q 789 839 789 881 q 771 745 789 782 q 721 686 753 708 q 662 658 692 665 q 606 650 632 650 q 597 650 601 650 q 589 650 593 650 q 581 650 585 650 q 581 663 581 657 q 581 674 581 668 q 581 688 581 681 q 581 704 581 696 q 610 708 596 704 q 640 721 625 713 q 666 753 656 732 q 676 811 676 774 q 672 862 676 839 q 658 908 667 885 m 488 1064 q 516 1063 503 1064 q 542 1059 529 1061 q 565 1054 554 1057 q 587 1033 583 1049 q 582 994 590 1018 q 559 949 572 971 q 528 908 546 926 q 490 871 511 889 q 456 851 472 858 q 421 844 440 844 q 397 847 408 844 q 375 853 386 849 q 351 863 364 857 q 411 920 385 889 q 457 988 438 951 q 488 1064 476 1024 z "},"ờ":{"ha":833,"x_min":88,"x_max":789,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 658 908 q 676 917 667 914 q 695 921 685 919 q 718 922 706 922 q 772 901 754 922 q 789 839 789 881 q 771 745 789 782 q 721 686 753 708 q 662 658 692 665 q 606 650 632 650 q 597 650 601 650 q 589 650 593 650 q 581 650 585 650 q 581 663 581 657 q 581 674 581 668 q 581 688 581 681 q 581 704 581 696 q 610 708 596 704 q 640 721 625 713 q 666 753 656 732 q 676 811 676 774 q 672 862 676 839 q 658 908 667 885 m 346 1063 q 376 988 357 1024 q 422 920 396 951 q 482 863 449 889 q 458 853 469 857 q 437 847 447 849 q 414 844 426 844 q 377 851 394 844 q 342 871 360 858 q 304 908 322 889 q 273 949 286 926 q 251 994 260 971 q 247 1033 242 1018 q 272 1054 253 1049 q 293 1059 282 1057 q 317 1062 304 1061 q 346 1063 331 1063 z "},"ở":{"ha":833,"x_min":88,"x_max":789,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 658 908 q 676 917 667 914 q 695 921 685 919 q 718 922 706 922 q 772 901 754 922 q 789 839 789 881 q 771 745 789 782 q 721 686 753 708 q 662 658 692 665 q 606 650 632 650 q 597 650 601 650 q 589 650 593 650 q 581 650 585 650 q 581 663 581 657 q 581 674 581 668 q 581 688 581 681 q 581 704 581 696 q 610 708 596 704 q 640 721 625 713 q 666 753 656 732 q 676 811 676 774 q 672 862 676 839 q 658 908 667 885 m 353 858 q 367 894 353 878 q 417 926 382 910 q 477 961 460 947 q 494 993 494 975 q 494 1001 494 997 q 493 1010 494 1006 q 467 1017 482 1015 q 433 1019 451 1019 q 375 1013 401 1019 q 328 994 349 1007 q 286 963 307 982 l 278 963 q 269 986 272 975 q 267 1013 267 997 q 274 1050 267 1033 q 293 1081 281 1067 q 310 1094 301 1088 q 331 1105 319 1100 q 356 1113 342 1110 q 387 1117 371 1115 q 424 1119 403 1119 q 513 1103 478 1119 q 564 1061 547 1088 q 581 1000 581 1035 l 581 997 q 565 942 581 963 q 517 899 550 921 q 469 862 481 875 q 454 829 457 849 q 440 826 449 828 q 424 822 432 824 q 407 821 415 821 q 366 831 379 821 q 353 858 353 840 z "},"ỡ":{"ha":833,"x_min":88,"x_max":789,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 658 908 q 676 917 667 914 q 695 921 685 919 q 718 922 706 922 q 772 901 754 922 q 789 839 789 881 q 771 745 789 782 q 721 686 753 708 q 662 658 692 665 q 606 650 632 650 q 597 650 601 650 q 589 650 593 650 q 581 650 585 650 q 581 663 581 657 q 581 674 581 668 q 581 688 581 681 q 581 704 581 696 q 610 708 596 704 q 640 721 625 713 q 666 753 656 732 q 676 811 676 774 q 672 862 676 839 q 658 908 667 885 m 488 976 q 533 990 515 976 q 565 1042 550 1003 l 574 1042 q 584 1016 581 1031 q 588 985 588 1001 q 584 949 588 965 q 575 919 581 932 q 545 884 565 897 q 496 871 525 871 q 426 885 457 871 q 370 919 396 900 q 318 952 344 938 q 261 967 292 967 q 215 951 231 967 q 181 903 199 935 l 172 903 q 163 926 167 913 q 160 956 160 939 q 163 992 160 976 q 174 1024 167 1008 q 206 1060 183 1047 q 261 1074 228 1074 q 322 1058 294 1074 q 376 1024 350 1043 q 428 991 401 1006 q 488 976 456 976 z "},"ợ":{"ha":833,"x_min":88,"x_max":789,"o":"m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 658 908 q 676 917 667 914 q 695 921 685 919 q 718 922 706 922 q 772 901 754 922 q 789 839 789 881 q 771 745 789 782 q 721 686 753 708 q 662 658 692 665 q 606 650 632 650 q 597 650 601 650 q 589 650 593 650 q 581 650 585 650 q 581 663 581 657 q 581 674 581 668 q 581 688 581 681 q 581 704 581 696 q 610 708 596 704 q 640 721 625 713 q 666 753 656 732 q 676 811 676 774 q 672 862 676 839 q 658 908 667 885 m 331 -125 q 347 -122 338 -124 q 364 -120 356 -121 q 381 -119 372 -119 q 400 -119 390 -119 q 474 -133 446 -119 q 503 -183 503 -146 l 503 -274 q 487 -276 496 -275 q 469 -278 478 -278 q 452 -279 461 -279 q 433 -279 443 -279 q 360 -265 389 -279 q 331 -215 331 -251 l 331 -125 z "},"p":{"ha":833,"x_min":107,"x_max":750,"o":"m 107 742 q 120 745 114 744 q 133 747 126 746 q 146 747 140 747 q 201 732 176 747 q 240 681 225 717 q 254 586 254 646 q 254 367 254 475 q 254 154 254 260 q 254 -58 254 49 q 254 -276 254 -165 q 243 -277 249 -276 q 233 -278 238 -278 q 222 -278 228 -278 q 168 -263 189 -278 q 137 -224 147 -249 q 126 -168 126 -199 q 126 35 126 -62 q 126 226 126 132 q 126 415 126 319 q 126 614 126 510 q 122 686 126 657 q 107 742 118 715 m 531 754 q 644 717 594 754 q 722 616 693 681 q 750 467 750 551 l 750 440 q 727 235 750 321 q 663 93 704 149 q 568 11 622 38 q 451 -15 514 -15 q 374 1 410 -15 q 310 40 338 17 q 264 90 282 64 l 239 90 l 239 203 q 322 133 282 157 q 424 108 363 108 q 533 145 490 108 q 598 253 576 182 q 619 428 619 324 l 619 442 q 617 512 619 481 q 606 569 614 543 q 570 609 590 597 q 519 621 550 621 q 419 593 468 621 q 327 501 371 565 q 242 328 283 438 l 242 522 l 265 522 q 332 645 290 593 q 425 726 374 697 q 531 754 476 754 z "},"q":{"ha":833,"x_min":83,"x_max":715,"o":"m 592 740 q 610 744 601 743 q 629 744 619 744 q 669 732 651 744 q 697 691 686 719 q 707 613 707 663 q 707 421 707 515 q 707 233 707 326 q 707 48 707 140 q 707 -140 707 -44 q 708 -213 707 -185 q 715 -274 710 -242 q 696 -276 704 -275 q 678 -278 688 -278 q 623 -259 644 -278 q 590 -206 601 -240 q 579 -128 579 -171 q 579 58 579 -33 q 579 240 579 149 q 579 422 579 331 q 579 607 579 514 q 581 660 579 638 q 585 703 582 683 q 592 740 588 722 m 594 211 l 571 210 q 501 94 543 146 q 408 14 460 43 q 303 -15 357 -15 q 190 22 240 -15 q 112 123 140 58 q 83 271 83 188 l 83 297 q 106 504 83 418 q 170 646 129 590 q 265 728 211 701 q 382 754 319 754 q 458 740 422 754 q 524 704 494 726 q 571 653 553 682 l 594 653 l 594 536 q 510 609 551 588 q 408 631 468 631 q 299 594 343 631 q 235 487 256 558 q 214 310 214 415 l 214 297 q 217 228 214 260 q 225 164 219 196 q 263 130 242 142 q 310 118 283 118 q 415 146 365 118 q 509 238 464 174 q 594 411 554 303 l 594 211 z "},"r":{"ha":833,"x_min":126,"x_max":733,"o":"m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 594 728 604 q 719 578 724 585 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 z "},"ŕ":{"ha":833,"x_min":126,"x_max":733,"o":"m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 594 728 604 q 719 578 724 585 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 m 539 1129 q 590 1127 568 1131 q 631 1114 613 1124 q 651 1092 646 1107 q 650 1063 656 1076 q 621 999 642 1029 q 574 942 600 968 q 518 899 549 917 q 478 881 499 886 q 435 876 457 876 q 402 881 418 876 q 372 894 386 885 q 449 967 417 931 q 505 1044 482 1004 q 539 1129 528 1083 z "},"ŗ":{"ha":833,"x_min":126,"x_max":733,"o":"m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 594 728 604 q 719 578 724 585 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 m 174 -97 q 199 -91 186 -93 q 226 -89 211 -89 q 277 -102 261 -89 q 293 -144 293 -115 q 286 -215 293 -178 q 267 -285 279 -253 q 243 -339 256 -318 q 223 -362 233 -356 q 197 -369 213 -369 q 162 -366 178 -369 q 131 -356 146 -362 q 155 -281 146 -321 q 169 -194 164 -240 q 174 -97 174 -149 z "},"ř":{"ha":833,"x_min":126,"x_max":733,"o":"m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 594 728 604 q 719 578 724 585 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 m 468 885 q 456 885 463 885 q 440 885 450 885 q 398 891 418 885 q 340 924 378 897 q 293 961 318 940 q 244 1008 268 982 q 197 1063 219 1033 q 157 1128 175 1093 q 190 1142 172 1138 q 228 1146 207 1146 q 262 1138 249 1146 q 294 1104 275 1129 q 365 1033 325 1067 q 474 964 404 1000 l 394 983 l 486 983 l 408 963 q 538 1055 488 1008 q 614 1149 589 1101 l 622 1149 q 669 1144 651 1149 q 696 1131 686 1139 q 706 1114 706 1124 q 697 1085 706 1103 q 668 1039 689 1067 q 627 993 650 1017 q 578 949 604 969 q 524 913 551 929 q 468 885 496 896 z "},"ȑ":{"ha":833,"x_min":117,"x_max":733,"o":"m 233 1129 q 268 1044 246 1083 q 323 967 290 1004 q 400 894 356 931 q 370 881 386 885 q 338 876 354 876 q 294 881 315 876 q 254 899 274 886 q 199 942 225 917 q 152 999 172 968 q 122 1063 132 1029 q 122 1092 117 1076 q 142 1114 126 1107 q 167 1124 154 1121 q 198 1129 181 1128 q 233 1129 215 1131 m 479 1129 q 513 1044 492 1083 q 568 967 535 1004 q 644 894 601 931 q 615 881 632 885 q 582 876 599 876 q 540 881 560 876 q 500 899 519 886 q 444 942 471 917 q 397 999 417 968 q 367 1063 378 1029 q 367 1092 363 1076 q 388 1114 371 1107 q 413 1124 400 1121 q 443 1129 426 1128 q 479 1129 460 1131 m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 595 728 604 q 719 578 724 586 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 z "},"ȓ":{"ha":833,"x_min":126,"x_max":733,"o":"m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 594 728 604 q 719 578 724 585 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 m 440 1021 q 332 987 371 1015 q 275 896 293 958 q 239 903 256 899 q 208 918 222 908 q 200 934 201 924 q 204 960 199 944 q 254 1046 222 1011 q 331 1099 286 1081 q 435 1117 376 1117 l 446 1117 q 549 1099 504 1117 q 627 1046 594 1081 q 676 960 660 1011 q 681 934 682 944 q 672 918 679 924 q 642 903 658 908 q 606 896 625 899 q 549 987 588 958 q 440 1021 510 1015 z "},"ṛ":{"ha":833,"x_min":126,"x_max":733,"o":"m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 594 728 604 q 719 578 724 585 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 m 129 -125 q 145 -122 136 -124 q 163 -120 154 -121 q 180 -119 171 -119 q 199 -119 189 -119 q 273 -133 244 -119 q 301 -183 301 -146 l 301 -274 q 285 -276 294 -275 q 268 -278 276 -278 q 251 -279 260 -279 q 232 -279 242 -279 q 158 -265 188 -279 q 129 -215 129 -251 l 129 -125 z "},"ṟ":{"ha":833,"x_min":-57,"x_max":733,"o":"m -57 -157 l 426 -157 q 475 -175 463 -157 q 488 -228 488 -193 q 487 -242 488 -235 q 485 -255 486 -249 q 483 -267 485 -261 l 46 -267 q -19 -257 3 -267 q -49 -227 -42 -247 q -57 -176 -57 -207 q -57 -169 -57 -172 q -57 -163 -57 -167 q -57 -157 -57 -160 m 264 471 l 282 471 q 353 627 310 563 q 455 726 396 692 q 588 761 514 761 q 663 752 633 761 q 711 725 693 743 q 728 699 722 715 q 733 654 733 682 q 733 634 733 644 q 730 614 732 624 q 726 595 728 604 q 719 578 724 586 l 711 578 q 649 605 681 596 q 574 614 617 614 q 447 576 503 614 q 346 458 390 539 q 264 247 301 378 l 264 471 m 274 -4 q 263 -5 268 -4 q 252 -6 257 -6 q 240 -6 247 -6 q 199 -1 217 -6 q 169 13 181 3 q 153 35 158 22 q 147 65 147 49 q 147 179 147 124 q 147 290 147 235 q 147 399 147 344 q 147 506 147 453 q 147 614 147 560 q 143 685 147 656 q 126 742 139 714 q 140 744 133 743 q 153 746 146 744 q 165 747 160 747 q 221 732 196 747 q 260 681 246 717 q 274 586 274 646 q 274 465 274 525 q 274 345 274 406 q 274 226 274 285 q 274 109 274 167 q 274 -4 274 51 z "},"s":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 z "},"ś":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 538 1129 q 589 1127 567 1131 q 629 1114 611 1124 q 649 1092 644 1107 q 649 1063 654 1076 q 619 999 640 1029 q 573 942 599 968 q 517 899 547 917 q 476 881 497 886 q 433 876 456 876 q 401 881 417 876 q 371 894 385 885 q 448 967 415 931 q 503 1044 481 1004 q 538 1129 526 1083 z "},"ŝ":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 411 1136 q 423 1136 417 1136 q 439 1136 429 1136 q 481 1130 461 1136 q 539 1097 501 1124 q 586 1060 561 1081 q 635 1013 611 1039 q 682 958 660 988 q 722 893 704 928 q 690 879 707 883 q 651 875 674 875 q 618 883 631 875 q 585 917 606 892 q 516 987 556 954 q 406 1057 476 1019 l 485 1038 l 394 1038 l 471 1058 q 342 965 392 1013 q 265 872 292 918 l 257 872 q 211 877 229 872 q 184 890 193 882 q 175 907 175 899 q 183 935 175 917 q 211 981 192 954 q 252 1027 229 1004 q 301 1071 275 1050 q 356 1108 328 1092 q 411 1136 383 1125 z "},"ş":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 474 36 q 469 15 471 28 q 465 -10 467 3 q 461 -33 463 -22 q 457 -51 460 -43 l 457 -58 q 543 -94 513 -64 q 574 -175 574 -124 q 525 -285 574 -244 q 389 -325 476 -325 q 322 -314 349 -325 q 284 -285 296 -303 q 272 -246 272 -267 q 274 -226 272 -236 q 278 -208 275 -217 q 283 -189 281 -199 l 292 -189 q 331 -215 311 -207 q 385 -224 351 -224 q 444 -208 424 -224 q 464 -161 464 -192 q 449 -124 464 -137 q 400 -111 433 -111 q 380 -105 388 -111 q 372 -89 372 -99 q 374 -62 372 -76 q 378 -33 375 -47 q 387 -5 382 -18 q 397 18 392 8 q 408 29 400 25 q 433 35 417 33 q 474 36 449 38 z "},"š":{"ha":833,"x_min":100,"x_max":726,"o":"m 467 885 q 454 885 461 885 q 439 885 447 885 q 397 891 417 885 q 339 924 376 897 q 292 961 317 940 q 242 1008 267 982 q 196 1063 218 1033 q 156 1128 174 1093 q 188 1142 171 1138 q 226 1146 204 1146 q 260 1138 247 1146 q 293 1104 274 1129 q 362 1033 322 1067 q 472 964 401 1000 l 393 983 l 483 983 l 407 963 q 536 1055 486 1008 q 613 1149 586 1101 l 621 1149 q 667 1144 649 1149 q 694 1131 685 1139 q 703 1114 703 1124 q 695 1085 703 1103 q 667 1039 688 1067 q 624 993 647 1017 q 576 949 601 969 q 522 913 550 929 q 467 885 494 896 m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 234 613 211 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 429 174 396 q 132 508 132 463 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 611 693 619 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 492 q 309 442 279 457 q 397 415 339 426 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 317 116 274 119 q 417 113 360 113 z "},"ș":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 392 -97 q 417 -91 404 -93 q 444 -89 429 -89 q 495 -102 479 -89 q 511 -144 511 -115 q 504 -215 511 -178 q 485 -285 497 -253 q 461 -339 474 -318 q 441 -362 451 -356 q 415 -369 431 -369 q 380 -366 396 -369 q 349 -356 364 -362 q 373 -281 364 -321 q 387 -194 382 -240 q 392 -97 392 -149 z "},"ṡ":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 346 1044 q 364 1051 354 1049 q 384 1054 374 1053 q 406 1056 394 1056 q 428 1057 418 1057 q 503 1041 475 1057 q 532 988 532 1025 l 532 904 q 515 898 524 900 q 497 894 506 896 q 477 892 488 893 q 456 892 467 892 q 376 913 407 892 q 346 971 346 935 l 346 1044 z "},"ṣ":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 347 -125 q 363 -122 354 -124 q 381 -120 372 -121 q 398 -119 389 -119 q 417 -119 407 -119 q 491 -133 463 -119 q 519 -183 519 -146 l 519 -274 q 503 -276 513 -275 q 486 -278 494 -278 q 469 -279 478 -279 q 450 -279 460 -279 q 376 -265 406 -279 q 347 -215 347 -251 l 347 -125 z "},"ṥ":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 608 1129 q 660 1127 638 1131 q 700 1114 682 1124 q 720 1092 715 1107 q 719 1063 725 1076 q 690 999 711 1029 q 644 942 669 968 q 588 899 618 917 q 547 881 568 886 q 504 876 526 876 q 472 881 488 876 q 442 894 456 885 q 519 967 486 931 q 574 1044 551 1004 q 608 1129 597 1083 m 233 1067 q 251 1073 242 1071 q 272 1076 261 1075 q 294 1078 282 1078 q 315 1079 306 1079 q 391 1063 363 1079 q 419 1010 419 1047 l 419 926 q 402 920 411 922 q 384 917 393 918 q 365 915 375 915 q 343 914 354 914 q 264 935 294 914 q 233 993 233 957 l 233 1067 z "},"ṧ":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 467 885 q 455 885 461 885 q 439 885 449 885 q 397 891 417 885 q 339 924 376 897 q 292 961 317 940 q 242 1008 267 982 q 196 1063 218 1033 q 156 1128 174 1093 q 188 1142 171 1138 q 226 1146 206 1146 q 260 1138 247 1146 q 293 1104 274 1129 q 363 1033 324 1067 q 472 964 403 1000 l 393 983 l 485 983 l 407 963 q 537 1055 486 1008 q 613 1149 588 1101 l 621 1149 q 667 1144 650 1149 q 694 1131 685 1139 q 704 1114 704 1124 q 696 1085 704 1103 q 667 1039 688 1067 q 626 993 649 1017 q 576 949 603 969 q 522 913 550 929 q 467 885 494 896 m 346 1285 q 364 1291 354 1289 q 384 1294 374 1293 q 406 1297 394 1296 q 428 1297 418 1297 q 503 1281 475 1297 q 532 1228 532 1265 l 532 1144 q 515 1138 524 1140 q 497 1135 506 1136 q 477 1133 488 1133 q 456 1132 467 1132 q 376 1153 407 1132 q 346 1211 346 1175 l 346 1285 z "},"ṩ":{"ha":833,"x_min":100,"x_max":726,"o":"m 417 113 q 541 133 493 113 q 611 183 589 153 q 601 235 613 213 q 563 274 590 257 q 481 303 535 292 l 339 333 q 219 373 264 350 q 153 430 174 396 q 132 508 132 464 q 162 608 132 563 q 243 686 192 653 q 361 738 294 719 q 501 756 428 756 q 578 752 546 756 q 632 742 610 749 q 664 724 654 736 q 680 701 674 714 q 690 669 686 688 q 693 629 693 651 q 692 612 693 621 q 688 594 690 603 l 679 594 q 633 613 658 606 q 575 625 607 621 q 499 629 543 629 q 375 613 429 629 q 290 569 321 596 q 260 508 260 542 q 269 474 260 490 q 309 442 279 457 q 397 415 339 428 l 526 390 q 642 350 599 376 q 706 288 686 324 q 726 210 726 253 q 690 85 726 135 q 583 10 654 35 q 406 -15 511 -15 q 308 -10 353 -15 q 228 3 264 -6 q 168 22 193 11 q 131 47 143 33 q 107 88 114 64 q 100 149 100 113 q 101 174 100 163 q 104 193 101 185 l 113 193 q 177 153 147 169 q 240 128 207 138 q 316 116 274 119 q 417 113 358 113 m 347 -125 q 363 -122 354 -124 q 381 -120 372 -121 q 398 -119 389 -119 q 417 -119 407 -119 q 491 -133 463 -119 q 519 -183 519 -146 l 519 -274 q 503 -276 513 -275 q 486 -278 494 -278 q 469 -279 478 -279 q 450 -279 460 -279 q 376 -265 406 -279 q 347 -215 347 -251 l 347 -125 m 346 1044 q 364 1051 354 1049 q 384 1054 374 1053 q 406 1056 394 1056 q 428 1057 418 1057 q 503 1041 475 1057 q 532 988 532 1025 l 532 904 q 515 898 524 900 q 497 894 506 896 q 477 892 488 893 q 456 892 467 892 q 376 913 407 892 q 346 971 346 935 l 346 1044 z "},"t":{"ha":833,"x_min":72,"x_max":744,"o":"m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 z "},"ţ":{"ha":833,"x_min":72,"x_max":744,"o":"m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 m 547 36 q 542 15 544 28 q 538 -10 540 3 q 535 -33 536 -22 q 531 -51 533 -43 l 531 -58 q 617 -94 586 -64 q 647 -175 647 -124 q 599 -285 647 -244 q 463 -325 550 -325 q 396 -314 422 -325 q 358 -285 369 -303 q 346 -246 346 -267 q 347 -226 346 -236 q 351 -208 349 -217 q 357 -189 354 -199 l 365 -189 q 405 -215 385 -207 q 458 -224 425 -224 q 517 -208 497 -224 q 538 -161 538 -192 q 522 -124 538 -137 q 474 -111 507 -111 q 453 -105 461 -111 q 446 -89 446 -99 q 447 -62 446 -76 q 452 -33 449 -47 q 460 -5 456 -18 q 471 18 465 8 q 482 29 474 25 q 506 35 490 33 q 547 36 522 38 z "},"ť":{"ha":833,"x_min":72,"x_max":744,"o":"m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 m 633 1115 q 683 1103 665 1115 q 700 1065 700 1090 q 693 992 700 1029 q 672 924 686 956 q 640 872 658 893 q 621 858 631 861 q 596 854 611 854 q 569 857 581 854 q 546 865 558 860 q 568 945 561 913 q 578 1015 575 978 q 582 1106 582 1051 q 608 1113 596 1110 q 633 1115 619 1115 z "},"ț":{"ha":833,"x_min":72,"x_max":744,"o":"m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 m 464 -97 q 481 -92 474 -93 q 498 -90 489 -90 q 517 -89 507 -89 q 569 -101 551 -89 q 586 -140 586 -112 q 578 -213 586 -176 q 558 -281 571 -250 q 531 -337 546 -312 q 508 -363 519 -357 q 481 -369 496 -369 q 444 -366 461 -369 q 411 -354 426 -362 q 443 -278 432 -317 q 459 -195 454 -239 q 464 -97 464 -151 z "},"ṭ":{"ha":833,"x_min":72,"x_max":744,"o":"m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 m 419 -125 q 435 -122 426 -124 q 453 -120 444 -121 q 470 -119 461 -119 q 489 -119 479 -119 q 563 -133 535 -119 q 592 -183 592 -146 l 592 -274 q 576 -276 585 -275 q 558 -278 567 -278 q 541 -279 550 -279 q 522 -279 532 -279 q 449 -265 478 -279 q 419 -215 419 -251 l 419 -125 z "},"ṯ":{"ha":833,"x_min":72,"x_max":779,"o":"m 233 -157 l 718 -157 q 766 -175 753 -157 q 779 -228 779 -193 q 778 -242 779 -235 q 776 -255 778 -249 q 775 -267 775 -261 l 336 -267 q 272 -257 294 -267 q 242 -227 250 -247 q 233 -176 233 -207 q 233 -169 233 -172 q 233 -163 233 -167 q 233 -157 233 -160 m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 z "},"ẗ":{"ha":833,"x_min":72,"x_max":744,"o":"m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 m 99 1183 q 129 1187 113 1186 q 160 1188 146 1188 q 207 1183 186 1188 q 241 1165 228 1178 q 254 1131 254 1153 l 254 1032 q 224 1029 240 1031 q 192 1028 207 1028 q 147 1033 168 1028 q 112 1051 125 1039 q 99 1086 99 1064 l 99 1183 m 388 1183 q 418 1187 401 1186 q 449 1188 435 1188 q 496 1183 475 1188 q 530 1165 517 1178 q 543 1131 543 1153 l 543 1032 q 513 1029 529 1031 q 481 1028 496 1028 q 435 1033 457 1028 q 401 1051 414 1039 q 388 1086 388 1064 l 388 1183 z "},"u":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 z "},"ù":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 315 1129 q 350 1044 328 1083 q 405 967 372 1004 q 482 894 438 931 q 452 881 468 885 q 419 876 436 876 q 376 881 397 876 q 336 899 356 886 q 281 942 307 917 q 234 999 254 968 q 204 1063 214 1029 q 203 1092 199 1076 q 224 1114 208 1107 q 249 1124 236 1121 q 280 1129 263 1128 q 315 1129 297 1131 z "},"ú":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 513 1129 q 564 1127 542 1131 q 604 1114 586 1124 q 624 1092 619 1107 q 624 1063 629 1076 q 594 999 615 1029 q 548 942 574 968 q 492 899 522 917 q 451 881 472 886 q 408 876 431 876 q 376 881 392 876 q 346 894 360 885 q 423 967 390 931 q 478 1044 456 1004 q 513 1129 501 1083 z "},"û":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 386 1136 q 398 1136 392 1136 q 414 1136 404 1136 q 456 1130 436 1136 q 514 1097 476 1124 q 561 1060 536 1081 q 610 1013 586 1039 q 657 958 635 988 q 697 893 679 928 q 665 879 682 883 q 626 875 649 875 q 593 883 606 875 q 560 917 581 892 q 491 987 531 954 q 381 1057 451 1019 l 460 1038 l 369 1038 l 446 1058 q 317 965 367 1013 q 240 872 267 918 l 232 872 q 186 877 204 872 q 159 890 168 882 q 150 907 150 899 q 158 935 150 917 q 186 981 167 954 q 227 1027 204 1004 q 276 1071 250 1050 q 331 1108 303 1092 q 386 1136 358 1125 z "},"ü":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 192 1056 q 222 1059 206 1058 q 253 1060 239 1060 q 300 1055 279 1060 q 334 1038 321 1050 q 347 1003 347 1025 l 347 899 q 317 895 333 896 q 285 894 300 894 q 240 899 261 894 q 205 917 218 904 q 192 951 192 931 l 192 1056 m 481 1056 q 511 1059 494 1058 q 542 1060 528 1060 q 589 1055 568 1060 q 623 1038 610 1050 q 636 1003 636 1025 l 636 899 q 606 895 622 896 q 574 894 589 894 q 528 899 550 894 q 494 917 507 904 q 481 951 481 931 l 481 1056 z "},"ũ":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 536 1004 q 604 1019 578 1004 q 658 1076 631 1035 l 667 1076 q 672 1060 671 1069 q 675 1041 674 1051 q 676 1017 676 1031 q 669 972 676 996 q 642 929 661 949 q 600 904 625 913 q 542 896 575 896 q 469 908 500 896 q 410 936 438 921 q 355 964 383 951 q 289 976 326 976 q 224 960 250 976 q 169 904 197 944 l 161 904 q 156 920 158 913 q 153 938 154 928 q 151 958 151 947 q 159 1006 151 983 q 183 1047 167 1029 q 224 1074 200 1064 q 282 1085 249 1085 q 358 1072 325 1085 q 419 1044 392 1060 q 474 1017 446 1029 q 536 1004 501 1004 z "},"ū":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 142 1024 l 625 1024 q 674 1006 661 1024 q 686 953 686 989 q 685 940 686 946 q 684 926 685 933 q 682 914 683 919 l 244 914 q 179 924 201 914 q 149 953 157 933 q 142 1006 142 974 q 142 1012 142 1008 q 142 1018 142 1015 q 142 1024 142 1021 z "},"ŭ":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 414 993 q 522 1028 483 999 q 579 1118 561 1057 q 615 1111 599 1117 q 646 1096 632 1106 q 654 1079 653 1090 q 650 1054 656 1068 q 601 969 633 1004 q 523 915 568 933 q 419 897 478 897 l 408 897 q 305 915 350 897 q 228 969 260 933 q 178 1054 196 1004 q 174 1079 172 1068 q 182 1096 175 1090 q 213 1111 196 1106 q 249 1118 229 1117 q 306 1028 267 1057 q 414 993 344 999 z "},"ů":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 418 1169 q 504 1149 467 1169 q 562 1094 542 1129 q 582 1011 582 1058 l 582 1001 q 534 883 582 929 q 410 836 486 836 q 292 881 339 836 q 246 996 246 925 l 246 1004 q 268 1090 246 1053 q 329 1149 290 1128 q 418 1169 368 1169 m 419 1090 q 356 1069 378 1090 q 333 1008 333 1047 l 333 999 q 340 965 333 981 q 358 938 347 949 q 383 928 371 931 q 410 925 394 925 q 472 947 450 925 q 494 1004 494 968 l 494 1013 q 488 1049 494 1033 q 467 1076 481 1065 q 446 1087 457 1083 q 419 1090 435 1090 z "},"ű":{"ha":833,"x_min":96,"x_max":735,"o":"m 339 1129 q 391 1127 368 1131 q 431 1114 414 1124 q 451 1092 447 1107 q 450 1063 456 1076 q 422 999 442 1029 q 375 942 401 968 q 318 899 349 917 q 278 881 299 886 q 236 876 257 876 q 203 881 219 876 q 174 894 188 885 q 250 967 218 931 q 305 1044 282 1004 q 339 1129 328 1083 m 618 1131 q 669 1127 647 1131 q 710 1115 692 1124 q 731 1093 726 1108 q 729 1063 735 1078 q 701 999 721 1029 q 654 942 681 968 q 597 900 628 917 q 557 882 578 888 q 514 876 536 876 q 481 881 497 876 q 451 894 465 885 q 529 968 497 932 q 584 1044 561 1004 q 618 1131 607 1085 m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 633 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 489 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 475 711 563 q 711 301 711 388 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 z "},"ų":{"ha":833,"x_min":96,"x_max":751,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 679 24 q 697 20 686 25 q 732 -3 708 15 q 722 -12 729 -7 q 696 -19 714 -17 q 593 -71 626 -36 q 560 -154 560 -106 q 581 -207 560 -187 q 646 -226 603 -226 q 691 -221 671 -226 q 731 -200 711 -215 l 739 -200 q 747 -219 744 -210 q 750 -236 749 -228 q 751 -257 751 -244 q 719 -327 751 -304 q 631 -350 688 -350 q 503 -307 551 -350 q 454 -187 454 -264 q 485 -79 454 -126 q 567 -6 515 -32 q 679 24 618 21 z "},"ư":{"ha":833,"x_min":96,"x_max":850,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 719 946 q 737 954 728 951 q 756 958 746 957 q 779 960 767 960 q 833 939 815 960 q 850 876 850 918 q 832 783 850 819 q 782 724 814 746 q 723 695 753 703 q 667 688 693 688 q 658 688 663 688 q 650 688 654 688 q 642 688 646 688 q 642 700 642 694 q 642 712 642 706 q 642 726 642 718 q 642 742 642 733 q 672 746 657 742 q 701 758 686 750 q 727 790 717 769 q 738 849 738 811 q 733 899 738 876 q 719 946 728 922 z "},"ȕ":{"ha":833,"x_min":90,"x_max":732,"o":"m 206 1129 q 241 1044 219 1083 q 295 967 263 1004 q 372 894 328 931 q 343 881 360 885 q 310 876 326 876 q 267 881 288 876 q 226 899 247 886 q 171 942 197 917 q 125 999 144 968 q 94 1063 106 1029 q 94 1092 90 1076 q 114 1114 99 1107 q 140 1124 126 1121 q 171 1129 154 1128 q 206 1129 188 1131 m 451 1129 q 486 1044 464 1083 q 541 967 508 1004 q 618 894 574 931 q 588 881 604 885 q 556 876 572 876 q 513 881 533 876 q 472 899 492 886 q 416 942 443 917 q 369 999 389 968 q 340 1063 350 1029 q 339 1092 335 1076 q 360 1114 343 1107 q 385 1124 372 1121 q 415 1129 399 1128 q 451 1129 432 1131 m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 633 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 489 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 475 711 563 q 711 301 711 388 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 z "},"ȗ":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 414 1021 q 306 987 344 1015 q 249 896 267 958 q 213 903 229 899 q 182 918 196 908 q 174 934 175 924 q 178 960 172 944 q 228 1046 196 1011 q 305 1099 260 1081 q 408 1117 350 1117 l 419 1117 q 523 1099 478 1117 q 601 1046 568 1081 q 650 960 633 1011 q 654 934 656 944 q 646 918 653 924 q 615 903 632 908 q 579 896 599 899 q 522 987 561 958 q 414 1021 483 1015 z "},"ṹ":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 536 1004 q 604 1019 578 1004 q 658 1076 631 1035 l 667 1076 q 672 1060 671 1069 q 675 1041 674 1051 q 676 1017 676 1031 q 669 972 676 996 q 642 929 661 949 q 600 904 625 913 q 542 896 575 896 q 469 908 500 896 q 410 936 438 921 q 355 964 383 951 q 289 976 326 976 q 224 960 250 976 q 169 904 197 944 l 161 904 q 156 920 158 913 q 153 938 154 928 q 151 958 151 947 q 159 1006 151 983 q 183 1047 167 1029 q 224 1074 200 1064 q 282 1085 249 1085 q 358 1072 325 1085 q 419 1044 392 1060 q 474 1017 446 1029 q 536 1004 501 1004 m 511 1388 q 563 1385 540 1389 q 603 1372 585 1382 q 623 1350 618 1365 q 622 1321 628 1335 q 593 1257 614 1288 q 547 1201 572 1226 q 490 1157 521 1175 q 450 1140 471 1144 q 407 1135 429 1135 q 374 1139 390 1135 q 344 1153 358 1143 q 422 1226 389 1189 q 477 1302 454 1263 q 511 1388 500 1342 z "},"ṻ":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 142 1024 l 625 1024 q 674 1006 661 1024 q 686 953 686 989 q 685 940 686 946 q 684 926 685 933 q 682 914 683 919 l 244 914 q 179 924 201 914 q 149 953 157 933 q 142 1006 142 974 q 142 1012 142 1008 q 142 1018 142 1015 q 142 1024 142 1021 m 192 1276 q 222 1280 206 1279 q 253 1281 239 1281 q 300 1276 279 1281 q 334 1258 321 1271 q 347 1224 347 1246 l 347 1125 q 317 1122 333 1124 q 285 1121 300 1121 q 240 1126 261 1121 q 205 1144 218 1132 q 192 1179 192 1157 l 192 1276 m 481 1276 q 511 1280 494 1279 q 542 1281 528 1281 q 589 1276 568 1281 q 623 1258 610 1271 q 636 1224 636 1246 l 636 1125 q 606 1122 622 1124 q 574 1121 589 1121 q 528 1126 550 1121 q 494 1144 507 1132 q 481 1179 481 1157 l 481 1276 z "},"ụ":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 332 -125 q 348 -122 339 -124 q 365 -120 357 -121 q 383 -119 374 -119 q 401 -119 392 -119 q 476 -133 447 -119 q 504 -183 504 -146 l 504 -274 q 488 -276 497 -275 q 471 -278 479 -278 q 453 -279 463 -279 q 435 -279 444 -279 q 361 -265 390 -279 q 332 -215 332 -251 l 332 -125 z "},"ủ":{"ha":833,"x_min":96,"x_max":732,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 349 858 q 363 894 349 878 q 413 926 378 910 q 473 961 456 947 q 490 993 490 975 q 490 1001 490 997 q 489 1010 490 1006 q 463 1017 478 1015 q 429 1019 447 1019 q 371 1013 397 1019 q 324 994 344 1007 q 282 963 303 982 l 274 963 q 265 986 268 975 q 263 1013 263 997 q 269 1050 263 1033 q 289 1081 276 1067 q 306 1094 297 1088 q 326 1105 315 1100 q 352 1113 338 1110 q 383 1117 367 1115 q 419 1119 399 1119 q 508 1103 474 1119 q 560 1061 543 1088 q 576 1000 576 1035 l 576 997 q 561 942 576 963 q 513 899 546 921 q 465 862 476 875 q 450 829 453 849 q 436 826 444 828 q 419 822 428 824 q 403 821 411 821 q 362 831 375 821 q 349 858 349 840 z "},"ứ":{"ha":833,"x_min":96,"x_max":850,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 719 946 q 737 954 728 951 q 756 958 746 957 q 779 960 767 960 q 833 939 815 960 q 850 876 850 918 q 832 783 850 819 q 782 724 814 746 q 723 695 753 703 q 667 688 693 688 q 658 688 663 688 q 650 688 654 688 q 642 688 646 688 q 642 700 642 694 q 642 712 642 706 q 642 726 642 718 q 642 742 642 733 q 672 746 657 742 q 701 758 686 750 q 727 790 717 769 q 738 849 738 811 q 733 899 738 876 q 719 946 728 922 m 485 1064 q 513 1063 500 1064 q 539 1059 526 1061 q 563 1054 551 1057 q 584 1033 581 1049 q 579 994 588 1018 q 556 949 569 971 q 526 908 543 926 q 488 871 508 889 q 453 851 469 858 q 418 844 438 844 q 394 847 406 844 q 372 853 383 849 q 349 863 361 857 q 408 920 382 889 q 454 988 435 951 q 485 1064 474 1024 z "},"ừ":{"ha":833,"x_min":96,"x_max":850,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 719 946 q 737 954 728 951 q 756 958 746 957 q 779 960 767 960 q 833 939 815 960 q 850 876 850 918 q 832 783 850 819 q 782 724 814 746 q 723 695 753 703 q 667 688 693 688 q 658 688 663 688 q 650 688 654 688 q 642 688 646 688 q 642 700 642 694 q 642 712 642 706 q 642 726 642 718 q 642 742 642 733 q 672 746 657 742 q 701 758 686 750 q 727 790 717 769 q 738 849 738 811 q 733 899 738 876 q 719 946 728 922 m 343 1063 q 374 988 354 1024 q 419 920 393 951 q 479 863 446 889 q 456 853 467 857 q 434 847 444 849 q 411 844 424 844 q 374 851 392 844 q 339 871 357 858 q 301 908 319 889 q 270 949 283 926 q 249 994 257 971 q 244 1033 239 1018 q 269 1054 250 1049 q 290 1059 279 1057 q 315 1062 301 1061 q 343 1063 328 1063 z "},"ử":{"ha":833,"x_min":96,"x_max":850,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 719 946 q 737 954 728 951 q 756 958 746 957 q 779 960 767 960 q 833 939 815 960 q 850 876 850 918 q 832 783 850 819 q 782 724 814 746 q 723 695 753 703 q 667 688 693 688 q 658 688 663 688 q 650 688 654 688 q 642 688 646 688 q 642 700 642 694 q 642 712 642 706 q 642 726 642 718 q 642 742 642 733 q 672 746 657 742 q 701 758 686 750 q 727 790 717 769 q 738 849 738 811 q 733 899 738 876 q 719 946 728 922 m 349 858 q 363 894 349 878 q 413 926 378 910 q 473 961 456 947 q 490 993 490 975 q 490 1001 490 997 q 489 1010 490 1006 q 463 1017 478 1015 q 429 1019 447 1019 q 371 1013 397 1019 q 324 994 344 1007 q 282 963 303 982 l 274 963 q 265 986 268 975 q 263 1013 263 997 q 269 1050 263 1033 q 289 1081 276 1067 q 306 1094 297 1088 q 326 1105 315 1100 q 352 1113 338 1110 q 383 1117 367 1115 q 419 1119 399 1119 q 508 1103 474 1119 q 560 1061 543 1088 q 576 1000 576 1035 l 576 997 q 561 942 576 963 q 513 899 546 921 q 465 862 476 875 q 450 829 453 849 q 436 826 444 828 q 419 822 428 824 q 403 821 411 821 q 362 831 375 821 q 349 858 349 840 z "},"ữ":{"ha":833,"x_min":96,"x_max":850,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 719 946 q 737 954 728 951 q 756 958 746 957 q 779 960 767 960 q 833 939 815 960 q 850 876 850 918 q 832 783 850 819 q 782 724 814 746 q 723 695 753 703 q 667 688 693 688 q 658 688 663 688 q 650 688 654 688 q 642 688 646 688 q 642 700 642 694 q 642 712 642 706 q 642 726 642 718 q 642 742 642 733 q 672 746 657 742 q 701 758 686 750 q 727 790 717 769 q 738 849 738 811 q 733 899 738 876 q 719 946 728 922 m 481 976 q 526 990 508 976 q 558 1042 543 1003 l 567 1042 q 577 1016 574 1031 q 581 985 581 1001 q 577 949 581 965 q 568 919 574 932 q 538 884 558 897 q 489 871 518 871 q 419 885 450 871 q 363 919 389 900 q 311 952 338 938 q 254 967 285 967 q 208 951 224 967 q 174 903 192 935 l 165 903 q 156 926 160 913 q 153 956 153 939 q 156 992 153 976 q 167 1024 160 1008 q 199 1060 176 1047 q 254 1074 221 1074 q 315 1058 288 1074 q 369 1024 343 1043 q 422 991 394 1006 q 481 976 449 976 z "},"ự":{"ha":833,"x_min":96,"x_max":850,"o":"m 142 744 q 203 729 178 744 q 244 674 229 714 q 258 560 258 635 q 256 474 258 515 q 251 392 254 433 q 242 307 247 351 q 228 207 236 263 q 263 144 242 165 q 317 122 285 122 q 397 147 357 122 q 475 219 438 171 q 544 337 513 267 q 599 499 575 407 l 599 240 l 578 240 q 499 109 546 167 q 397 18 451 51 q 285 -15 343 -15 q 217 3 247 -15 q 166 51 188 21 q 132 119 144 81 q 119 196 119 157 q 119 314 119 256 q 119 431 119 372 q 119 547 119 490 q 115 647 119 604 q 96 740 110 689 q 119 743 108 742 q 142 744 129 744 m 621 743 q 673 733 653 743 q 702 704 693 724 q 711 656 711 685 q 711 474 711 563 q 711 301 711 386 q 711 129 711 215 q 713 78 711 100 q 720 37 715 56 q 732 0 725 18 q 719 -3 726 -1 q 706 -5 713 -4 q 693 -6 700 -6 q 639 10 664 -6 q 600 60 614 25 q 586 154 586 94 q 586 353 586 254 q 586 550 586 453 q 586 740 586 647 q 598 742 593 742 q 609 742 603 742 q 621 743 615 743 m 719 946 q 737 954 728 951 q 756 958 746 957 q 779 960 767 960 q 833 939 815 960 q 850 876 850 918 q 832 783 850 819 q 782 724 814 746 q 723 695 753 703 q 667 688 693 688 q 658 688 663 688 q 650 688 654 688 q 642 688 646 688 q 642 700 642 694 q 642 712 642 706 q 642 726 642 718 q 642 742 642 733 q 672 746 657 742 q 701 758 686 750 q 727 790 717 769 q 738 849 738 811 q 733 899 738 876 q 719 946 728 922 m 332 -125 q 348 -122 339 -124 q 365 -120 357 -121 q 383 -119 374 -119 q 401 -119 392 -119 q 476 -133 447 -119 q 504 -183 504 -146 l 504 -274 q 488 -276 497 -275 q 471 -278 479 -278 q 453 -279 463 -279 q 435 -279 444 -279 q 361 -265 390 -279 q 332 -215 332 -251 l 332 -125 z "},"v":{"ha":833,"x_min":82,"x_max":746,"o":"m 129 747 q 178 741 158 747 q 210 722 199 735 q 224 685 222 708 q 256 423 235 533 q 312 231 276 313 q 404 86 347 150 l 414 86 q 483 178 453 129 q 536 283 514 226 q 573 408 558 339 q 597 558 588 476 q 611 740 607 640 q 635 746 622 744 q 661 747 649 747 q 710 738 692 747 q 738 709 729 728 q 743 663 746 690 q 710 436 732 539 q 656 250 689 333 q 576 102 622 167 q 471 -8 531 38 q 440 -12 457 -11 q 404 -14 422 -14 q 369 -10 385 -14 q 338 5 353 -6 q 308 33 324 15 q 238 126 268 75 q 183 238 207 176 q 140 375 158 300 q 107 541 121 450 q 82 740 93 632 q 105 746 92 744 q 129 747 118 747 z "},"w":{"ha":833,"x_min":68,"x_max":764,"o":"m 367 611 l 382 611 q 429 605 411 611 q 456 586 447 599 q 465 557 465 574 q 472 424 467 485 q 489 308 478 363 q 517 203 500 254 q 560 104 535 153 l 568 104 q 601 203 588 151 q 623 325 615 254 q 635 499 631 396 q 639 750 639 601 q 647 752 643 751 q 656 753 651 753 q 667 754 661 754 q 716 747 694 754 q 751 724 738 739 q 764 685 764 708 q 757 458 764 564 q 735 264 750 353 q 693 107 719 175 q 626 -7 667 39 q 615 -10 621 -8 q 605 -12 610 -11 q 594 -13 600 -12 q 582 -14 588 -14 q 549 -8 564 -14 q 519 18 535 -1 q 494 60 506 38 q 471 110 482 83 q 451 166 460 136 q 435 229 443 196 q 421 299 428 263 l 413 299 q 401 241 407 269 q 386 186 394 213 q 369 135 378 160 q 349 86 360 110 q 326 40 338 63 q 300 -4 314 17 q 285 -10 293 -7 q 269 -13 278 -12 q 250 -14 260 -14 q 216 -8 229 -14 q 183 19 203 -3 q 147 82 164 43 q 115 178 129 121 q 90 315 101 235 q 74 503 79 396 q 68 750 68 611 q 78 753 74 753 q 90 753 83 753 q 101 754 96 754 q 152 747 132 754 q 183 724 172 739 q 193 689 193 710 q 198 469 193 563 q 211 309 203 376 q 233 192 219 242 q 264 103 246 142 l 274 103 q 318 208 300 153 q 347 326 336 264 q 362 459 357 389 q 367 611 367 529 z "},"ŵ":{"ha":833,"x_min":68,"x_max":764,"o":"m 367 611 l 382 611 q 429 605 411 611 q 456 586 447 599 q 465 557 465 574 q 472 424 467 485 q 489 308 478 363 q 517 203 500 254 q 560 104 535 153 l 568 104 q 601 203 588 151 q 623 325 615 254 q 635 499 631 396 q 639 750 639 601 q 647 752 643 751 q 656 753 651 753 q 667 754 661 754 q 716 747 694 754 q 751 724 738 739 q 764 685 764 708 q 757 458 764 564 q 735 264 750 353 q 693 107 719 175 q 626 -7 667 39 q 615 -10 621 -8 q 605 -12 610 -11 q 594 -13 600 -12 q 582 -14 588 -14 q 549 -8 564 -14 q 519 18 535 -1 q 494 60 506 38 q 471 110 482 83 q 451 166 460 136 q 435 229 443 196 q 421 299 428 263 l 413 299 q 401 241 407 269 q 386 186 394 213 q 369 135 378 160 q 349 86 360 110 q 326 40 338 63 q 300 -4 314 17 q 285 -10 293 -7 q 269 -13 278 -12 q 250 -14 260 -14 q 216 -8 229 -14 q 183 19 203 -3 q 147 82 164 43 q 115 178 129 121 q 90 315 101 235 q 74 503 79 396 q 68 750 68 611 q 78 753 74 753 q 90 753 83 753 q 101 754 96 754 q 152 747 132 754 q 183 724 172 739 q 193 689 193 710 q 198 469 193 563 q 211 309 203 376 q 233 192 219 242 q 264 103 246 142 l 274 103 q 318 208 300 153 q 347 326 336 264 q 362 459 357 389 q 367 611 367 529 m 388 1136 q 399 1136 393 1136 q 415 1136 406 1136 q 458 1130 438 1136 q 515 1097 478 1124 q 563 1060 538 1081 q 612 1013 588 1039 q 658 958 636 988 q 699 893 681 928 q 667 879 683 883 q 628 875 650 875 q 594 883 607 875 q 561 917 582 892 q 492 987 532 954 q 382 1057 453 1019 l 461 1038 l 371 1038 l 447 1058 q 318 965 368 1013 q 242 872 268 918 l 233 872 q 188 877 206 872 q 160 890 169 882 q 151 907 151 899 q 160 935 151 917 q 188 981 168 954 q 228 1027 206 1004 q 278 1071 251 1050 q 332 1108 304 1092 q 388 1136 360 1125 z "},"ẁ":{"ha":833,"x_min":68,"x_max":764,"o":"m 367 611 l 382 611 q 429 605 411 611 q 456 586 447 599 q 465 557 465 574 q 472 424 467 485 q 489 308 478 363 q 517 203 500 254 q 560 104 535 153 l 568 104 q 601 203 588 151 q 623 325 615 254 q 635 499 631 396 q 639 750 639 601 q 647 752 643 751 q 656 753 651 753 q 667 754 661 754 q 716 747 694 754 q 751 724 738 739 q 764 685 764 708 q 757 458 764 564 q 735 264 750 353 q 693 107 719 175 q 626 -7 667 39 q 615 -10 621 -8 q 605 -12 610 -11 q 594 -13 600 -12 q 582 -14 588 -14 q 549 -8 564 -14 q 519 18 535 -1 q 494 60 506 38 q 471 110 482 83 q 451 166 460 136 q 435 229 443 196 q 421 299 428 263 l 413 299 q 401 241 407 269 q 386 186 394 213 q 369 135 378 160 q 349 86 360 110 q 326 40 338 63 q 300 -4 314 17 q 285 -10 293 -7 q 269 -13 278 -12 q 250 -14 260 -14 q 216 -8 229 -14 q 183 19 203 -3 q 147 82 164 43 q 115 178 129 121 q 90 315 101 235 q 74 503 79 396 q 68 750 68 611 q 78 753 74 753 q 90 753 83 753 q 101 754 96 754 q 152 747 132 754 q 183 724 172 739 q 193 689 193 710 q 198 469 193 563 q 211 309 203 376 q 233 192 219 242 q 264 103 246 142 l 274 103 q 318 208 300 153 q 347 326 336 264 q 362 459 357 389 q 367 611 367 529 m 317 1129 q 351 1044 329 1083 q 406 967 374 1004 q 483 894 439 931 q 453 881 469 885 q 421 876 438 876 q 378 881 399 876 q 338 899 357 886 q 282 942 308 917 q 235 999 256 968 q 206 1063 215 1029 q 205 1092 200 1076 q 225 1114 210 1107 q 251 1124 238 1121 q 281 1129 264 1128 q 317 1129 299 1131 z "},"ẃ":{"ha":833,"x_min":68,"x_max":764,"o":"m 367 611 l 382 611 q 429 605 411 611 q 456 586 447 599 q 465 557 465 574 q 472 424 467 485 q 489 308 478 363 q 517 203 500 254 q 560 104 535 153 l 568 104 q 601 203 588 151 q 623 325 615 254 q 635 499 631 396 q 639 750 639 601 q 647 752 643 751 q 656 753 651 753 q 667 754 661 754 q 716 747 694 754 q 751 724 738 739 q 764 685 764 708 q 757 458 764 564 q 735 264 750 353 q 693 107 719 175 q 626 -7 667 39 q 615 -10 621 -8 q 605 -12 610 -11 q 594 -13 600 -12 q 582 -14 588 -14 q 549 -8 564 -14 q 519 18 535 -1 q 494 60 506 38 q 471 110 482 83 q 451 166 460 136 q 435 229 443 196 q 421 299 428 263 l 413 299 q 401 241 407 269 q 386 186 394 213 q 369 135 378 160 q 349 86 360 110 q 326 40 338 63 q 300 -4 314 17 q 285 -10 293 -7 q 269 -13 278 -12 q 250 -14 260 -14 q 216 -8 229 -14 q 183 19 203 -3 q 147 82 164 43 q 115 178 129 121 q 90 315 101 235 q 74 503 79 396 q 68 750 68 611 q 78 753 74 753 q 90 753 83 753 q 101 754 96 754 q 152 747 132 754 q 183 724 172 739 q 193 689 193 710 q 198 469 193 563 q 211 309 203 376 q 233 192 219 242 q 264 103 246 142 l 274 103 q 318 208 300 153 q 347 326 336 264 q 362 459 357 389 q 367 611 367 529 m 514 1129 q 565 1127 543 1131 q 606 1114 588 1124 q 626 1092 621 1107 q 625 1063 631 1076 q 596 999 617 1029 q 549 942 575 968 q 493 899 524 917 q 453 881 474 886 q 410 876 432 876 q 377 881 393 876 q 347 894 361 885 q 424 967 392 931 q 480 1044 457 1004 q 514 1129 503 1083 z "},"ẅ":{"ha":833,"x_min":68,"x_max":764,"o":"m 367 611 l 382 611 q 429 605 411 611 q 456 586 447 599 q 465 557 465 574 q 472 424 467 485 q 489 308 478 363 q 517 203 500 254 q 560 104 535 153 l 568 104 q 601 203 588 151 q 623 325 615 254 q 635 499 631 396 q 639 750 639 601 q 647 752 643 751 q 656 753 651 753 q 667 754 661 754 q 716 747 694 754 q 751 724 738 739 q 764 685 764 708 q 757 458 764 564 q 735 264 750 353 q 693 107 719 175 q 626 -7 667 39 q 615 -10 621 -8 q 605 -12 610 -11 q 594 -13 600 -12 q 582 -14 588 -14 q 549 -8 564 -14 q 519 18 535 -1 q 494 60 506 38 q 471 110 482 83 q 451 166 460 136 q 435 229 443 196 q 421 299 428 263 l 413 299 q 401 241 407 269 q 386 186 394 213 q 369 135 378 160 q 349 86 360 110 q 326 40 338 63 q 300 -4 314 17 q 285 -10 293 -7 q 269 -13 278 -12 q 250 -14 260 -14 q 216 -8 229 -14 q 183 19 203 -3 q 147 82 164 43 q 115 178 129 121 q 90 315 101 235 q 74 503 79 396 q 68 750 68 611 q 78 753 74 753 q 90 753 83 753 q 101 754 96 754 q 152 747 132 754 q 183 724 172 739 q 193 689 193 710 q 198 469 193 563 q 211 309 203 376 q 233 192 219 242 q 264 103 246 142 l 274 103 q 318 208 300 153 q 347 326 336 264 q 362 459 357 389 q 367 611 367 529 m 193 1056 q 224 1059 207 1058 q 254 1060 240 1060 q 301 1055 281 1060 q 335 1038 322 1050 q 349 1003 349 1025 l 349 899 q 318 895 335 896 q 286 894 301 894 q 241 899 263 894 q 206 917 219 904 q 193 951 193 931 l 193 1056 m 482 1056 q 513 1059 496 1058 q 543 1060 529 1060 q 590 1055 569 1060 q 624 1038 611 1050 q 638 1003 638 1025 l 638 899 q 607 895 624 896 q 575 894 590 894 q 530 899 551 894 q 495 917 508 904 q 482 951 482 931 l 482 1056 z "},"x":{"ha":833,"x_min":74,"x_max":771,"o":"m 74 740 q 106 745 89 743 q 142 747 122 747 q 212 738 188 747 q 247 706 236 728 q 337 532 288 615 q 442 372 386 449 l 479 321 q 618 159 544 238 q 771 10 692 81 q 753 -1 763 4 q 733 -10 743 -7 q 710 -14 722 -12 q 682 -15 697 -15 q 624 -6 644 -15 q 583 26 604 4 q 522 85 554 53 q 460 151 490 117 q 400 221 429 186 l 358 272 q 205 495 278 378 q 74 740 132 613 m 364 319 l 449 206 l 406 206 q 341 128 374 165 q 274 56 308 90 q 204 -14 240 21 l 194 -14 q 110 0 138 -14 q 82 39 82 14 q 88 58 82 50 q 111 81 94 67 q 247 199 185 139 q 364 319 310 258 m 653 749 q 726 737 699 749 q 754 700 754 725 q 753 686 754 693 q 747 669 751 679 q 631 464 697 558 q 479 279 564 369 l 400 397 l 433 397 q 507 503 472 449 q 573 618 542 557 q 632 749 604 679 l 653 749 z "},"y":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 z "},"ý":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 515 1129 q 567 1127 544 1131 q 607 1114 589 1124 q 627 1092 622 1107 q 626 1063 632 1076 q 597 999 618 1029 q 551 942 576 968 q 494 899 525 917 q 454 881 475 886 q 411 876 433 876 q 378 881 394 876 q 349 894 363 885 q 426 967 393 931 q 481 1044 458 1004 q 515 1129 504 1083 z "},"ÿ":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 194 1056 q 225 1059 208 1058 q 256 1060 242 1060 q 303 1055 282 1060 q 337 1038 324 1050 q 350 1003 350 1025 l 350 899 q 319 895 336 896 q 288 894 303 894 q 242 899 264 894 q 208 917 221 904 q 194 951 194 931 l 194 1056 m 483 1056 q 514 1059 497 1058 q 544 1060 531 1060 q 592 1055 571 1060 q 626 1038 613 1050 q 639 1003 639 1025 l 639 899 q 608 895 625 896 q 576 894 592 894 q 531 899 553 894 q 497 917 510 904 q 483 951 483 931 l 483 1056 z "},"ŷ":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 389 1136 q 401 1136 394 1136 q 417 1136 407 1136 q 459 1130 439 1136 q 517 1097 479 1124 q 564 1060 539 1081 q 613 1013 589 1039 q 660 958 638 988 q 700 893 682 928 q 668 879 685 883 q 629 875 651 875 q 596 883 608 875 q 563 917 583 892 q 494 987 533 954 q 383 1057 454 1019 l 463 1038 l 372 1038 l 449 1058 q 319 965 369 1013 q 243 872 269 918 l 235 872 q 189 877 207 872 q 162 890 171 882 q 153 907 153 899 q 161 935 153 917 q 189 981 169 954 q 230 1027 207 1004 q 279 1071 253 1050 q 333 1108 306 1092 q 389 1136 361 1125 z "},"ȳ":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 144 1024 l 628 1024 q 676 1006 664 1024 q 689 953 689 989 q 688 940 689 946 q 687 926 688 933 q 685 914 686 919 l 247 914 q 182 924 204 914 q 152 953 160 933 q 144 1006 144 974 q 144 1012 144 1008 q 144 1018 144 1015 q 144 1024 144 1021 z "},"ẏ":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 324 1044 q 342 1051 332 1049 q 362 1054 351 1053 q 384 1056 372 1056 q 406 1057 396 1057 q 481 1041 453 1057 q 510 988 510 1025 l 510 904 q 492 898 501 900 q 474 894 483 896 q 455 892 465 893 q 433 892 444 892 q 354 913 385 892 q 324 971 324 935 l 324 1044 z "},"ỳ":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 318 1129 q 353 1044 331 1083 q 408 967 375 1004 q 485 894 440 931 q 455 881 471 885 q 422 876 439 876 q 379 881 400 876 q 339 899 358 886 q 283 942 310 917 q 237 999 257 968 q 207 1063 217 1029 q 206 1092 201 1076 q 226 1114 211 1107 q 252 1124 239 1121 q 283 1129 265 1128 q 318 1129 300 1131 z "},"ỵ":{"ha":833,"x_min":78,"x_max":794,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 622 -125 q 638 -122 629 -124 q 656 -120 647 -121 q 673 -119 664 -119 q 692 -119 682 -119 q 766 -133 738 -119 q 794 -183 794 -146 l 794 -274 q 778 -276 788 -275 q 761 -278 769 -278 q 744 -279 753 -279 q 725 -279 735 -279 q 651 -265 681 -279 q 622 -215 622 -251 l 622 -125 z "},"ỷ":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 354 858 q 369 894 354 878 q 418 926 383 910 q 478 961 461 947 q 496 993 496 975 q 496 1001 496 997 q 494 1010 496 1006 q 468 1017 483 1015 q 435 1019 453 1019 q 376 1013 403 1019 q 329 994 350 1007 q 288 963 308 982 l 279 963 q 271 986 274 975 q 268 1013 268 997 q 275 1050 268 1033 q 294 1081 282 1067 q 312 1094 303 1088 q 332 1105 321 1100 q 358 1113 343 1110 q 388 1117 372 1115 q 425 1119 404 1119 q 514 1103 479 1119 q 565 1061 549 1088 q 582 1000 582 1035 l 582 997 q 567 942 582 963 q 518 899 551 921 q 470 862 482 875 q 456 829 458 849 q 442 826 450 828 q 425 822 433 824 q 408 821 417 821 q 367 831 381 821 q 354 858 354 840 z "},"ỹ":{"ha":833,"x_min":78,"x_max":753,"o":"m 661 746 q 729 728 706 746 q 749 669 753 711 q 708 367 733 497 q 647 138 682 236 q 567 -31 611 40 q 469 -157 522 -103 q 390 -222 431 -194 q 308 -264 350 -250 q 224 -278 267 -278 q 208 -276 215 -278 q 193 -273 200 -275 q 181 -267 186 -271 q 169 -257 175 -262 q 149 -219 157 -244 q 142 -160 142 -193 l 142 -156 l 150 -156 q 159 -156 154 -156 q 168 -156 164 -156 q 288 -131 229 -156 q 397 -54 346 -106 q 462 26 432 -19 q 516 135 492 72 q 560 285 540 199 q 593 483 579 371 q 614 739 607 594 q 628 742 622 740 q 640 744 635 743 q 651 745 646 744 q 661 746 657 746 m 126 744 q 197 730 172 744 q 226 669 222 715 q 251 495 235 575 q 290 350 267 415 q 343 233 313 285 q 409 147 374 182 q 488 93 444 113 l 535 93 l 503 17 l 493 17 q 410 27 449 17 q 338 60 371 38 q 274 119 304 82 q 228 181 250 146 q 184 263 206 215 q 142 378 163 311 q 106 533 122 444 q 78 739 89 622 q 91 742 85 740 q 103 744 97 743 q 115 744 108 744 q 126 744 121 744 m 539 1004 q 607 1019 581 1004 q 661 1076 633 1035 l 669 1076 q 675 1060 674 1069 q 678 1041 676 1051 q 679 1017 679 1031 q 672 972 679 996 q 644 929 664 949 q 603 904 628 913 q 544 896 578 896 q 472 908 503 896 q 413 936 440 921 q 358 964 386 951 q 292 976 329 976 q 226 960 253 976 q 172 904 200 944 l 164 904 q 159 920 161 913 q 156 938 157 928 q 154 958 154 947 q 162 1006 154 983 q 186 1047 169 1029 q 227 1074 203 1064 q 285 1085 251 1085 q 361 1072 328 1085 q 422 1044 394 1060 q 476 1017 449 1029 q 539 1004 504 1004 z "},"z":{"ha":833,"x_min":100,"x_max":729,"o":"m 103 739 l 654 739 q 694 724 678 739 q 720 685 711 708 q 729 636 729 661 l 729 629 q 710 581 729 615 q 655 499 690 547 q 572 397 619 451 q 466 285 524 342 q 346 179 408 229 q 307 152 328 167 q 271 126 286 138 l 272 119 q 340 125 307 124 q 410 126 374 126 l 668 126 q 717 107 704 126 q 729 44 729 88 q 728 21 729 33 q 726 0 728 8 l 157 0 q 123 14 135 0 q 106 53 111 28 q 100 104 100 78 l 100 115 q 256 244 178 174 q 405 390 335 314 q 528 540 475 465 q 555 577 542 558 q 578 614 568 596 l 575 621 q 492 613 533 615 q 406 611 451 611 l 160 611 q 125 623 139 611 q 106 656 111 635 q 100 707 100 678 q 101 724 100 715 q 103 739 101 732 z "},"ź":{"ha":833,"x_min":100,"x_max":729,"o":"m 103 739 l 654 739 q 694 724 678 739 q 720 685 711 708 q 729 636 729 661 l 729 629 q 710 581 729 615 q 655 499 690 547 q 572 397 619 451 q 466 285 524 342 q 346 179 408 229 q 307 152 328 167 q 271 126 286 138 l 272 119 q 340 125 307 124 q 410 126 374 126 l 668 126 q 717 107 704 126 q 729 44 729 88 q 728 21 729 33 q 726 0 728 8 l 157 0 q 123 14 135 0 q 106 53 111 28 q 100 104 100 78 l 100 115 q 256 244 178 174 q 405 390 335 314 q 528 540 475 465 q 555 577 542 558 q 578 614 568 596 l 575 621 q 492 613 533 615 q 406 611 451 611 l 160 611 q 125 623 139 611 q 106 656 111 635 q 100 707 100 678 q 101 724 100 715 q 103 739 101 732 m 515 1129 q 567 1127 544 1131 q 607 1114 589 1124 q 627 1092 622 1107 q 626 1063 632 1076 q 597 999 618 1029 q 551 942 576 968 q 494 899 525 917 q 454 881 475 886 q 411 876 433 876 q 378 881 394 876 q 349 894 363 885 q 426 967 393 931 q 481 1044 458 1004 q 515 1129 504 1083 z "},"ż":{"ha":833,"x_min":100,"x_max":729,"o":"m 103 739 l 654 739 q 694 724 678 739 q 720 685 711 708 q 729 636 729 661 l 729 629 q 710 581 729 615 q 655 499 690 547 q 572 397 619 451 q 466 285 524 342 q 346 179 408 229 q 307 152 328 167 q 271 126 286 138 l 272 119 q 340 125 307 124 q 410 126 374 126 l 668 126 q 717 107 704 126 q 729 44 729 88 q 728 21 729 33 q 726 0 728 8 l 157 0 q 123 14 135 0 q 106 53 111 28 q 100 104 100 78 l 100 115 q 256 244 178 174 q 405 390 335 314 q 528 540 475 465 q 555 577 542 558 q 578 614 568 596 l 575 621 q 492 613 533 615 q 406 611 451 611 l 160 611 q 125 623 139 611 q 106 656 111 635 q 100 707 100 678 q 101 724 100 715 q 103 739 101 732 m 324 1044 q 342 1051 332 1049 q 362 1054 351 1053 q 384 1056 372 1056 q 406 1057 396 1057 q 481 1041 453 1057 q 510 988 510 1025 l 510 904 q 492 898 501 900 q 474 894 483 896 q 455 892 465 893 q 433 892 444 892 q 354 913 385 892 q 324 971 324 935 l 324 1044 z "},"ž":{"ha":833,"x_min":100,"x_max":729,"o":"m 103 739 l 654 739 q 694 724 678 739 q 720 685 711 708 q 729 636 729 661 l 729 629 q 710 581 729 615 q 655 499 690 547 q 572 397 619 451 q 466 285 524 342 q 346 179 408 229 q 307 152 328 167 q 271 126 286 138 l 272 119 q 340 125 307 124 q 410 126 374 126 l 668 126 q 717 107 704 126 q 729 44 729 88 q 728 21 729 33 q 726 0 728 8 l 157 0 q 123 14 135 0 q 106 53 111 28 q 100 104 100 78 l 100 115 q 256 244 178 174 q 405 390 335 314 q 528 540 475 465 q 555 577 542 558 q 578 614 568 596 l 575 621 q 492 613 533 615 q 406 611 451 611 l 160 611 q 125 623 139 611 q 106 656 111 635 q 100 707 100 678 q 101 724 100 715 q 103 739 101 732 m 444 885 q 433 885 439 885 q 417 885 426 885 q 374 891 394 885 q 317 924 354 897 q 269 961 294 940 q 220 1008 244 982 q 174 1063 196 1033 q 133 1128 151 1093 q 166 1142 149 1138 q 204 1146 183 1146 q 238 1138 225 1146 q 271 1104 251 1129 q 341 1033 301 1067 q 450 964 381 1000 l 371 983 l 463 983 l 385 963 q 515 1055 464 1008 q 590 1149 565 1101 l 599 1149 q 645 1144 628 1149 q 672 1131 663 1139 q 682 1114 682 1124 q 674 1085 682 1103 q 644 1039 665 1067 q 603 993 626 1017 q 554 949 581 969 q 500 913 528 929 q 444 885 472 896 z "},"ẓ":{"ha":833,"x_min":100,"x_max":729,"o":"m 103 739 l 654 739 q 694 724 678 739 q 720 685 711 708 q 729 636 729 661 l 729 629 q 710 581 729 615 q 655 499 690 547 q 572 397 619 451 q 466 285 524 342 q 346 179 408 229 q 307 152 328 167 q 271 126 286 138 l 272 119 q 340 125 307 124 q 410 126 374 126 l 668 126 q 717 107 704 126 q 729 44 729 88 q 728 21 729 33 q 726 0 728 8 l 157 0 q 123 14 135 0 q 106 53 111 28 q 100 104 100 78 l 100 115 q 256 244 178 174 q 405 390 335 314 q 528 540 475 465 q 555 577 542 558 q 578 614 568 596 l 575 621 q 492 613 533 615 q 406 611 451 611 l 160 611 q 125 623 139 611 q 106 656 111 635 q 100 707 100 678 q 101 724 100 715 q 103 739 101 732 m 335 -125 q 351 -122 342 -124 q 368 -120 360 -121 q 385 -119 376 -119 q 404 -119 394 -119 q 478 -133 450 -119 q 507 -183 507 -146 l 507 -274 q 491 -276 500 -275 q 474 -278 482 -278 q 456 -279 465 -279 q 438 -279 447 -279 q 364 -265 393 -279 q 335 -215 335 -251 l 335 -125 z "},"ß":{"ha":833,"x_min":92,"x_max":767,"o":"m 433 1061 q 569 1044 514 1061 q 659 1000 625 1028 q 708 938 693 972 q 724 869 724 904 l 724 851 q 715 791 724 818 q 686 738 706 764 q 633 682 667 713 l 588 639 q 533 578 549 601 q 517 533 517 556 q 531 492 517 507 q 585 456 546 478 l 625 431 q 706 367 675 400 q 752 294 738 333 q 767 206 767 254 l 767 193 q 739 81 767 128 q 660 10 711 35 q 540 -15 610 -15 q 446 -1 485 -15 q 388 33 407 13 q 367 70 374 47 q 360 121 360 93 q 361 149 360 138 q 365 169 363 161 l 374 169 q 448 126 413 139 q 538 113 483 113 q 608 126 579 113 q 649 163 636 140 q 653 188 651 175 q 654 217 654 200 q 642 268 654 244 q 606 314 631 292 q 543 358 582 336 l 503 382 q 422 453 446 417 q 397 538 397 490 l 397 547 q 406 594 397 571 q 431 644 414 618 q 475 694 449 669 l 535 750 q 574 792 560 774 q 592 826 588 810 q 597 863 597 843 q 547 924 588 904 q 436 943 506 943 q 346 932 388 943 q 276 899 304 921 q 258 852 265 878 q 247 794 250 826 q 243 717 243 763 q 243 563 243 640 q 243 408 243 485 q 243 254 243 331 q 243 100 243 178 q 230 37 243 61 q 192 1 217 13 q 132 -10 167 -10 q 111 -8 122 -10 q 92 -3 100 -6 q 101 40 97 19 q 108 85 106 60 q 110 146 110 111 q 110 297 110 221 q 110 449 110 374 q 110 599 110 524 q 110 750 110 675 q 147 919 110 850 q 256 1025 185 989 q 433 1061 328 1061 z "},"æ":{"ha":833,"x_min":35,"x_max":796,"o":"m 254 753 q 336 733 300 753 q 398 678 372 714 q 433 593 424 642 l 401 638 l 443 638 l 408 593 q 482 712 433 669 q 594 754 531 754 q 699 724 653 754 q 770 638 744 693 q 796 511 796 583 q 796 501 796 506 q 796 492 796 496 q 772 374 796 422 q 701 301 747 325 q 590 278 656 278 q 537 281 560 278 q 497 288 514 283 q 470 299 481 293 q 453 310 460 304 l 436 310 l 436 397 q 474 386 457 390 q 507 379 490 382 q 541 376 524 376 q 578 375 558 375 q 640 387 617 375 q 674 428 663 399 q 686 507 686 457 q 676 580 686 546 q 643 638 667 614 q 622 644 633 642 q 594 646 610 646 q 526 621 553 646 q 485 547 499 596 q 472 425 472 499 l 472 289 q 489 186 472 231 q 535 114 506 142 q 572 101 551 106 q 617 97 592 97 q 684 102 656 97 q 735 118 713 107 q 781 144 757 129 l 789 144 q 794 121 793 133 q 796 92 796 108 q 788 49 796 64 q 772 26 781 33 q 714 -3 751 8 q 618 -15 676 -15 q 522 6 564 -15 q 450 65 479 26 q 404 156 421 103 l 433 110 l 400 110 l 435 156 q 388 75 421 114 q 310 11 356 36 q 213 -14 265 -14 q 117 10 157 -14 q 56 80 76 33 q 35 194 35 126 l 35 208 q 51 293 35 253 q 97 365 68 333 q 165 415 126 397 q 249 432 204 432 q 315 427 286 432 q 363 416 343 422 q 394 403 383 410 l 414 403 l 414 313 q 363 324 386 319 q 319 330 340 328 q 271 332 299 332 q 215 325 239 332 q 171 303 190 318 q 156 260 160 283 q 151 208 151 238 l 151 201 q 169 122 151 147 q 222 97 188 97 l 226 97 q 281 108 256 97 q 326 143 306 118 q 364 210 347 168 l 364 458 q 353 559 364 519 q 315 617 342 599 q 242 636 289 636 q 153 625 193 636 q 74 596 113 614 l 65 596 q 61 617 63 606 q 60 640 60 628 q 65 680 60 661 q 83 711 71 699 q 122 734 96 725 q 181 748 147 743 q 254 753 215 753 z "},"ǽ":{"ha":833,"x_min":35,"x_max":796,"o":"m 254 753 q 336 733 300 753 q 398 678 372 714 q 433 593 424 642 l 401 638 l 443 638 l 408 593 q 482 712 433 669 q 594 754 531 754 q 699 724 653 754 q 770 638 744 693 q 796 511 796 583 q 796 501 796 506 q 796 492 796 496 q 772 374 796 422 q 701 301 747 325 q 590 278 656 278 q 537 281 560 278 q 497 288 514 283 q 470 299 481 293 q 453 310 460 304 l 436 310 l 436 397 q 474 386 457 390 q 507 379 490 382 q 541 376 524 376 q 578 375 558 375 q 640 387 617 375 q 674 428 663 399 q 686 507 686 457 q 676 580 686 546 q 643 638 667 614 q 622 644 633 642 q 594 646 610 646 q 526 621 553 646 q 485 547 499 596 q 472 425 472 499 l 472 289 q 489 186 472 231 q 535 114 506 142 q 572 101 551 106 q 617 97 592 97 q 684 102 656 97 q 735 118 713 107 q 781 144 757 129 l 789 144 q 794 121 793 133 q 796 92 796 108 q 788 49 796 64 q 772 26 781 33 q 714 -3 751 8 q 618 -15 676 -15 q 522 6 564 -15 q 450 65 479 26 q 404 156 421 103 l 433 110 l 400 110 l 435 156 q 388 75 421 114 q 310 11 356 36 q 213 -14 265 -14 q 117 10 157 -14 q 56 80 76 33 q 35 194 35 126 l 35 208 q 51 293 35 253 q 97 365 68 333 q 165 415 126 397 q 249 432 204 432 q 315 427 286 432 q 363 416 343 422 q 394 403 383 410 l 414 403 l 414 313 q 363 324 386 319 q 319 330 340 328 q 271 332 299 332 q 215 325 239 332 q 171 303 190 318 q 156 260 160 283 q 151 208 151 238 l 151 201 q 169 122 151 147 q 222 97 188 97 l 226 97 q 281 108 256 97 q 326 143 306 118 q 364 210 347 168 l 364 458 q 353 559 364 519 q 315 617 342 599 q 242 636 289 636 q 153 625 193 636 q 74 596 113 614 l 65 596 q 61 617 63 606 q 60 640 60 628 q 65 680 60 661 q 83 711 71 699 q 122 734 96 725 q 181 748 147 743 q 254 753 215 753 m 515 1129 q 567 1127 544 1131 q 607 1114 589 1124 q 627 1092 622 1107 q 626 1063 632 1076 q 597 999 618 1029 q 551 942 576 968 q 494 899 525 917 q 454 881 475 886 q 411 876 433 876 q 378 881 394 876 q 349 894 363 885 q 426 967 393 931 q 481 1044 458 1004 q 515 1129 504 1083 z "},"ð":{"ha":833,"x_min":90,"x_max":747,"o":"m 742 1021 q 747 997 746 1010 q 747 974 747 985 q 742 941 747 954 q 721 919 736 928 q 674 901 706 910 l 558 869 q 531 865 543 865 q 506 865 519 865 q 475 860 493 865 l 164 774 q 159 801 161 788 q 157 828 157 814 q 169 865 157 851 q 217 889 182 879 l 413 942 q 448 948 435 947 q 472 949 461 949 q 499 953 483 949 l 742 1021 m 374 703 q 476 687 432 703 q 563 640 521 671 l 628 640 l 625 483 q 524 560 572 536 q 403 583 475 583 q 298 551 340 583 q 235 466 256 519 q 214 344 214 413 l 214 335 q 220 257 214 297 q 245 181 226 217 q 300 121 264 146 q 344 110 321 114 q 393 107 367 107 q 523 140 474 107 q 596 229 572 172 q 619 357 619 286 l 619 374 q 606 526 619 454 q 565 664 592 599 q 498 791 538 729 q 407 913 458 853 q 293 1032 356 972 l 293 1039 q 327 1060 308 1051 q 374 1069 346 1069 q 415 1060 396 1069 q 453 1031 433 1051 q 549 922 504 978 q 630 803 594 865 q 691 675 665 742 q 730 536 717 608 q 743 386 743 464 l 743 367 q 702 160 743 246 q 586 30 661 75 q 408 -15 511 -15 q 244 26 317 -15 q 131 147 172 68 q 90 335 90 225 l 90 349 q 126 538 90 458 q 227 660 163 617 q 374 703 292 703 z "},"ø":{"ha":833,"x_min":88,"x_max":746,"o":"m 632 815 q 619 760 625 788 q 606 706 613 732 q 594 654 600 681 l 599 576 l 518 576 l 550 604 q 541 534 549 569 q 519 458 533 499 q 432 243 482 340 q 321 69 382 146 q 313 52 317 60 q 306 35 310 44 q 285 3 296 17 q 263 -24 275 -11 q 236 -51 251 -37 q 209 -70 224 -64 q 178 -76 194 -76 q 156 -75 165 -76 q 138 -70 146 -74 q 122 -61 129 -67 q 107 -50 114 -56 q 157 -8 136 -28 q 193 29 178 11 q 217 61 208 47 l 219 150 l 306 150 l 276 126 q 288 171 281 149 q 307 216 296 193 q 335 263 318 239 q 424 440 383 342 q 497 665 464 539 q 492 679 494 672 q 488 693 489 686 q 495 733 492 713 q 503 772 499 753 q 526 816 508 804 q 575 828 544 828 q 591 827 583 828 q 605 824 599 826 q 617 821 611 822 q 632 815 624 819 m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 z "},"ǿ":{"ha":833,"x_min":88,"x_max":746,"o":"m 632 815 q 619 760 625 788 q 606 706 613 732 q 594 654 600 681 l 599 576 l 518 576 l 550 604 q 541 534 549 569 q 519 458 533 499 q 432 243 482 340 q 321 69 382 146 q 313 52 317 60 q 306 35 310 44 q 285 3 296 17 q 263 -24 275 -11 q 236 -51 251 -37 q 209 -70 224 -64 q 178 -76 194 -76 q 156 -75 165 -76 q 138 -70 146 -74 q 122 -61 129 -67 q 107 -50 114 -56 q 157 -8 136 -28 q 193 29 178 11 q 217 61 208 47 l 219 150 l 306 150 l 276 126 q 288 171 281 149 q 307 216 296 193 q 335 263 318 239 q 424 440 383 342 q 497 665 464 539 q 492 679 494 672 q 488 693 489 686 q 495 733 492 713 q 503 772 499 753 q 526 816 508 804 q 575 828 544 828 q 591 827 583 828 q 605 824 599 826 q 617 821 611 822 q 632 815 624 819 m 419 754 q 546 726 486 754 q 651 643 606 697 q 721 513 696 589 q 746 338 746 436 l 746 324 q 705 143 746 219 q 589 26 664 67 q 414 -15 514 -15 q 282 6 342 -15 q 178 70 222 28 q 111 176 135 113 q 88 322 88 239 l 88 336 q 131 558 88 464 q 249 703 174 651 q 419 754 324 754 m 432 632 q 309 594 358 632 q 235 488 260 556 q 211 329 211 419 l 211 321 q 226 212 211 265 q 282 121 242 158 q 338 110 311 113 q 399 107 365 107 q 524 133 475 107 q 598 210 574 160 q 622 329 622 260 l 622 338 q 600 501 622 429 q 529 621 578 574 q 485 630 508 628 q 432 632 461 632 m 515 1146 q 567 1144 544 1147 q 607 1132 589 1140 q 627 1109 622 1124 q 626 1079 632 1094 q 597 1015 618 1046 q 551 959 576 985 q 494 915 525 933 q 454 898 475 903 q 411 893 433 893 q 378 897 394 893 q 349 911 363 901 q 426 984 393 947 q 481 1060 458 1021 q 515 1146 504 1100 z "},"þ":{"ha":833,"x_min":110,"x_max":750,"o":"m 110 1051 q 122 1053 117 1053 q 134 1055 128 1054 q 146 1056 140 1056 q 201 1040 176 1056 q 240 989 225 1024 q 254 899 254 954 q 254 688 254 808 q 254 433 254 567 q 254 165 254 299 q 254 -88 254 31 q 254 -296 254 -207 q 242 -298 249 -297 q 228 -299 235 -299 q 213 -299 221 -299 q 169 -294 189 -299 q 138 -278 150 -290 q 126 -244 126 -267 q 126 -59 126 -158 q 126 147 126 40 q 126 363 126 254 q 126 573 126 471 q 126 765 126 675 q 126 922 126 854 q 123 992 126 965 q 110 1051 119 1019 m 531 754 q 644 717 594 754 q 722 616 693 681 q 750 467 750 551 l 750 440 q 727 235 750 321 q 663 93 704 149 q 568 11 622 38 q 451 -15 514 -15 q 374 1 410 -15 q 310 40 338 17 q 264 90 282 64 l 239 90 l 239 203 q 294 151 267 172 q 352 119 321 129 q 425 108 383 108 q 534 145 490 108 q 599 253 578 182 q 619 428 619 324 l 619 442 q 617 512 619 481 q 606 569 614 543 q 570 609 590 597 q 519 621 550 621 q 419 593 468 621 q 327 501 371 565 q 242 328 283 438 l 242 522 l 265 522 q 332 645 290 593 q 425 726 374 697 q 531 754 476 754 z "},"đ":{"ha":833,"x_min":83,"x_max":804,"o":"m 288 932 l 768 932 q 797 916 789 932 q 804 868 804 900 q 803 853 804 861 q 801 836 803 844 l 333 836 q 298 855 308 836 q 288 917 288 874 q 288 925 288 921 q 288 932 288 929 m 382 754 q 458 740 422 754 q 524 704 494 726 q 571 653 553 682 l 594 653 l 594 536 q 510 609 551 588 q 408 631 468 631 q 299 594 343 631 q 235 487 256 558 q 214 310 214 415 l 214 297 q 216 227 214 258 q 225 164 218 196 q 263 130 242 142 q 310 118 283 118 q 414 146 365 118 q 507 238 463 174 q 592 410 551 301 l 592 210 l 571 210 q 501 94 543 146 q 408 14 460 43 q 303 -15 357 -15 q 215 6 256 -15 q 146 65 175 26 q 100 156 117 104 q 83 271 83 208 l 83 297 q 106 504 83 418 q 170 646 129 590 q 265 728 211 701 q 382 754 319 754 m 597 1051 q 651 1037 626 1051 q 692 987 676 1022 q 707 890 707 951 q 707 701 707 794 q 707 513 707 607 q 707 326 707 419 q 707 139 707 233 q 710 63 707 93 q 725 0 714 33 q 714 -3 719 -1 q 703 -6 708 -4 q 692 -7 697 -7 q 681 -7 686 -7 q 624 13 647 -7 q 590 67 601 32 q 579 146 579 101 q 579 344 579 249 q 579 534 579 440 q 579 722 579 628 q 579 918 579 817 q 575 990 579 961 q 558 1046 571 1019 q 569 1048 564 1047 q 578 1050 574 1049 q 588 1051 583 1051 q 597 1051 593 1051 z "},"ħ":{"ha":833,"x_min":32,"x_max":735,"o":"m 32 932 l 513 932 q 541 915 533 932 q 549 865 549 899 q 548 849 549 858 q 546 833 547 840 l 76 833 q 42 852 51 833 q 32 917 32 871 q 32 925 32 921 q 32 932 32 929 m 214 -6 q 160 3 181 -6 q 128 28 139 13 q 118 64 118 43 q 118 283 118 178 q 118 492 118 389 q 118 699 118 594 q 118 914 118 803 q 114 986 118 957 q 99 1042 110 1015 q 112 1044 106 1043 q 125 1047 118 1046 q 138 1047 132 1047 q 190 1032 165 1047 q 231 981 215 1017 q 246 886 246 946 q 246 662 246 774 q 246 440 246 550 q 246 219 246 329 q 246 -4 246 108 q 235 -5 240 -4 q 224 -6 229 -6 q 214 -6 219 -6 m 226 264 l 224 500 l 254 500 q 311 601 279 554 q 382 683 343 649 q 463 735 421 717 q 547 754 504 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 z "},"ı":{"ha":833,"x_min":90,"x_max":524,"o":"m 374 132 q 374 224 374 174 q 374 331 374 275 q 374 441 374 386 q 374 549 374 496 q 374 644 374 601 l 367 649 q 292 634 326 640 q 228 622 257 628 q 176 614 200 617 q 133 611 153 611 q 102 631 114 611 q 90 690 90 651 q 92 716 90 704 q 96 739 93 728 q 161 744 131 742 q 221 749 192 747 q 276 751 250 750 q 329 752 303 751 q 382 753 356 753 q 449 746 422 753 q 488 726 475 739 q 501 696 501 714 q 501 563 501 631 q 501 430 501 496 q 501 301 501 364 q 501 181 501 238 q 503 119 501 147 q 509 62 504 90 q 524 0 514 33 q 501 -4 513 -3 q 478 -6 490 -6 q 400 23 426 -6 q 374 132 374 51 z "},"ĳ":{"ha":833,"x_min":99,"x_max":732,"o":"m 268 901 q 251 899 260 900 q 233 897 242 897 q 217 896 225 896 q 199 896 208 896 q 148 901 171 896 q 112 921 125 907 q 99 960 99 935 l 99 1050 q 116 1053 107 1051 q 133 1055 125 1054 q 151 1056 142 1056 q 168 1056 160 1056 q 240 1042 213 1056 q 268 992 268 1029 l 268 901 m 732 901 q 716 899 725 900 q 698 897 707 897 q 681 896 689 896 q 663 896 672 896 q 610 901 633 896 q 572 921 586 907 q 558 960 558 935 l 558 1050 q 576 1053 567 1051 q 593 1055 585 1054 q 610 1056 601 1056 q 628 1056 619 1056 q 703 1042 674 1056 q 732 992 732 1029 l 732 901 m 142 744 q 185 739 161 744 q 224 718 210 733 q 246 679 240 701 q 251 618 251 657 q 251 530 251 574 q 251 442 251 486 q 251 353 251 397 q 251 267 251 310 q 253 194 251 225 q 260 138 254 164 q 294 119 275 126 q 339 113 314 113 q 392 119 368 113 q 432 139 415 125 l 439 139 q 441 118 440 128 q 442 99 442 108 q 433 47 442 72 q 414 11 425 22 q 376 -8 401 -1 q 317 -14 350 -14 q 235 1 272 -14 q 174 43 199 15 q 135 110 149 71 q 121 196 121 149 q 121 334 121 265 q 121 471 121 403 q 121 608 121 539 q 117 680 121 653 q 104 739 114 707 q 117 742 111 742 q 130 744 124 743 q 142 744 136 744 m 613 747 q 659 740 638 747 q 694 713 681 733 q 708 654 708 693 q 708 492 708 574 q 708 330 708 411 q 708 167 708 249 q 708 4 708 86 q 672 -185 710 -106 q 563 -306 635 -264 q 388 -347 490 -347 q 294 -341 335 -347 q 225 -324 253 -335 q 183 -299 197 -312 q 163 -263 169 -286 q 157 -212 157 -240 q 158 -192 157 -203 q 160 -174 158 -182 l 168 -174 q 233 -203 201 -192 q 302 -219 265 -214 q 389 -224 339 -224 q 474 -213 431 -224 q 551 -171 517 -203 q 574 -97 568 -139 q 581 8 581 -56 q 581 211 581 110 q 581 413 581 313 q 581 615 581 514 q 577 684 581 657 q 564 740 574 711 q 588 746 576 744 q 613 747 600 747 z "},"ĸ":{"ha":833,"x_min":106,"x_max":783,"o":"m 254 -6 q 242 -7 250 -6 q 228 -8 235 -8 q 213 -8 221 -8 q 167 -4 188 -8 q 134 12 146 0 q 122 46 122 24 l 122 613 q 119 685 122 658 q 106 744 115 713 q 117 747 111 746 q 130 748 124 747 q 143 749 136 749 q 188 744 163 749 q 228 722 213 739 q 244 699 238 713 q 252 667 250 685 q 254 622 254 649 l 254 -6 m 604 750 l 625 750 q 678 743 656 750 q 713 725 700 736 q 725 700 725 714 q 724 688 725 694 q 719 672 722 682 q 708 649 717 663 q 648 545 682 594 q 576 455 614 496 q 495 379 538 414 q 407 318 453 344 q 314 273 361 292 q 217 243 267 254 l 171 333 q 345 415 265 363 q 490 549 425 467 q 604 750 554 631 m 713 -14 q 642 -4 671 -14 q 589 31 614 6 q 556 67 574 46 q 517 111 538 88 q 478 162 497 135 q 440 217 458 189 q 403 274 421 246 q 371 331 386 303 l 457 418 q 553 269 501 342 q 663 129 604 196 q 783 4 721 63 q 765 -6 775 -1 q 742 -12 754 -10 q 713 -14 729 -14 z "},"ŀ":{"ha":833,"x_min":47,"x_max":763,"o":"m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 405 1047 378 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 393 463 467 q 463 247 463 319 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 99 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 m 763 481 q 732 476 749 478 q 699 475 715 475 q 652 481 674 475 q 619 500 631 486 q 607 539 607 514 l 607 629 q 638 633 621 632 q 671 635 654 635 q 718 629 697 635 q 751 609 739 624 q 763 571 763 594 l 763 481 z "},"ł":{"ha":833,"x_min":47,"x_max":754,"o":"m 54 1008 q 123 1027 90 1019 q 185 1040 156 1035 q 242 1049 215 1046 q 292 1054 268 1053 q 338 1056 317 1056 q 405 1047 378 1056 q 447 1022 432 1039 q 463 979 463 1006 q 463 834 463 907 q 463 688 463 761 q 463 540 463 614 q 463 393 463 467 q 463 247 463 319 q 465 176 463 204 q 476 125 468 147 q 521 107 496 111 q 575 103 546 103 q 668 116 628 103 q 742 158 708 129 l 750 158 q 753 140 753 150 q 754 119 754 129 q 750 81 754 99 q 738 49 746 63 q 721 25 731 35 q 687 1 708 11 q 635 -16 665 -10 q 567 -22 606 -22 q 468 -6 511 -22 q 395 42 425 11 q 350 113 365 72 q 335 203 335 154 q 335 350 335 276 q 335 498 335 424 q 335 646 335 572 q 335 793 335 719 q 335 940 335 867 l 329 946 q 222 913 265 932 q 147 881 178 894 q 93 868 117 868 q 60 891 72 868 q 47 957 47 914 q 49 985 47 971 q 54 1008 51 999 m 633 681 q 639 658 638 669 q 640 635 640 646 q 631 582 640 604 q 603 543 622 560 q 551 511 583 526 l 435 453 q 404 443 422 446 q 369 438 386 440 q 338 426 353 435 l 183 340 q 181 361 182 350 q 178 383 179 372 q 178 401 178 393 q 192 456 178 438 q 238 493 206 475 l 340 549 q 369 558 353 556 q 401 563 385 561 q 429 572 417 565 l 633 681 z "},"ŉ":{"ha":833,"x_min":39,"x_max":735,"o":"m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 m 126 1114 q 176 1101 158 1114 q 193 1064 193 1089 q 186 991 193 1028 q 165 923 179 954 q 133 871 151 892 q 114 856 124 860 q 89 853 104 853 q 63 856 74 853 q 39 864 51 858 q 61 944 54 911 q 72 1013 68 976 q 75 1104 75 1050 q 101 1111 89 1108 q 126 1114 113 1114 z "},"ŋ":{"ha":833,"x_min":99,"x_max":711,"o":"m 438 -221 q 533 -199 494 -221 q 593 -122 572 -176 q 614 29 614 -68 l 711 0 q 711 -32 711 -19 q 711 -54 711 -44 q 711 -75 711 -64 q 694 -183 711 -133 q 640 -269 676 -232 q 551 -327 604 -307 q 428 -347 499 -347 q 322 -335 367 -347 q 260 -304 278 -322 q 240 -266 246 -290 q 233 -214 233 -242 q 234 -194 233 -204 q 236 -175 235 -183 l 242 -175 q 330 -210 288 -200 q 438 -221 372 -221 m 547 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 711 94 711 136 q 711 0 711 51 q 697 -3 704 -1 q 678 -6 689 -6 q 599 22 625 -6 q 574 139 574 50 q 575 249 574 200 q 580 342 576 297 q 590 433 583 386 q 603 533 596 479 q 567 597 589 575 q 514 618 546 618 q 434 594 474 618 q 358 524 394 569 q 290 413 322 478 q 231 264 257 347 l 229 500 l 260 500 q 338 631 293 574 q 435 721 382 688 q 547 754 489 754 m 138 747 q 197 732 171 747 q 237 681 222 717 q 251 586 251 646 q 251 385 251 486 q 251 187 251 285 q 251 -4 251 89 q 238 -5 244 -4 q 226 -6 232 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 z "},"œ":{"ha":833,"x_min":38,"x_max":796,"o":"m 263 754 q 335 733 303 754 q 390 675 367 713 q 428 583 414 638 l 408 583 q 482 709 433 664 q 594 754 531 754 q 699 723 653 754 q 770 638 744 692 q 796 511 796 583 l 796 493 q 743 339 796 393 q 597 285 690 285 q 541 288 565 285 q 499 297 517 292 q 469 307 481 301 q 450 319 457 313 l 432 319 l 432 400 q 482 385 460 390 q 528 377 504 379 q 578 375 551 375 q 660 404 633 375 q 686 499 686 433 l 686 510 q 676 580 686 546 q 644 638 667 614 q 622 644 633 642 q 594 646 610 646 q 526 622 554 646 q 485 547 499 597 q 472 419 472 497 l 472 299 q 490 185 472 235 q 539 106 508 136 q 575 94 557 97 q 617 92 593 92 q 712 103 675 92 q 783 139 749 115 l 789 139 q 794 117 793 128 q 796 92 796 106 q 788 49 796 64 q 772 26 781 33 q 712 -4 751 7 q 613 -15 672 -15 q 520 4 561 -15 q 451 60 479 24 q 406 147 422 97 l 426 147 q 384 62 411 99 q 323 5 357 25 q 249 -15 289 -15 q 135 22 182 -15 q 63 128 88 58 q 38 297 38 199 l 38 326 q 66 556 38 461 q 146 703 94 651 q 263 754 197 754 m 147 303 q 153 217 147 256 q 170 151 158 179 q 200 104 182 122 q 225 94 213 97 q 251 92 238 92 q 312 119 288 92 q 349 194 336 146 q 361 306 361 242 l 361 389 q 344 550 361 488 q 297 642 328 613 q 283 645 292 644 q 265 646 274 646 q 206 611 233 646 q 163 505 179 576 q 147 322 147 433 l 147 303 z "},"ŧ":{"ha":833,"x_min":72,"x_max":744,"o":"m 90 458 l 672 458 q 711 438 701 458 q 721 376 721 418 q 720 360 721 369 q 718 344 719 351 l 147 344 q 115 353 128 344 q 96 383 101 363 q 90 442 90 404 q 90 450 90 446 q 90 458 90 454 m 76 739 l 679 739 q 730 719 715 739 q 744 657 744 700 q 744 640 744 649 q 742 625 743 632 q 740 611 742 618 l 242 611 q 161 617 194 611 q 108 636 128 624 q 81 668 89 649 q 72 713 72 688 q 73 723 72 718 q 74 732 74 728 q 76 739 75 736 m 738 178 q 741 160 740 169 q 742 143 742 150 q 733 83 742 108 q 700 33 724 57 q 672 13 689 22 q 631 -5 654 3 q 581 -16 608 -12 q 521 -19 553 -19 q 413 -4 461 -19 q 332 41 365 11 q 281 114 299 71 q 264 211 264 157 q 264 370 264 290 q 264 528 264 450 q 264 687 264 607 q 264 846 264 767 q 260 915 264 883 q 247 972 257 947 q 276 978 263 976 q 304 981 290 981 q 347 969 328 981 q 378 931 367 957 q 390 864 390 906 q 390 706 390 785 q 390 549 390 628 q 390 391 390 469 q 390 233 390 313 q 393 180 390 203 q 403 136 396 157 q 451 112 425 119 q 510 104 478 104 q 593 110 557 104 q 662 133 629 117 q 729 178 694 150 l 738 178 z "},"ǆ":{"ha":833,"x_min":18,"x_max":843,"o":"m 183 754 q 228 742 208 754 q 265 710 249 731 q 296 661 282 689 l 315 661 l 315 536 q 286 589 303 568 q 252 620 269 610 q 218 631 235 631 q 183 619 200 631 q 154 574 167 607 q 135 479 142 540 q 128 318 128 418 l 128 304 q 134 188 128 231 q 150 118 140 146 q 158 118 154 118 q 165 118 161 118 q 219 144 193 118 q 268 238 244 171 q 313 426 292 306 l 313 168 l 296 168 q 258 61 279 101 q 210 3 236 21 q 153 -15 183 -15 q 100 5 125 -15 q 57 63 75 25 q 28 158 39 100 q 18 292 18 215 l 18 325 q 31 530 18 447 q 66 662 43 613 q 119 733 89 711 q 183 754 149 754 m 324 1051 q 369 1038 350 1051 q 399 994 389 1024 q 410 914 410 964 q 410 711 410 810 q 410 516 410 613 q 410 326 410 419 q 410 139 410 233 q 413 63 410 93 q 425 0 415 33 q 415 -3 419 -3 q 406 -6 411 -4 q 397 -7 401 -7 q 386 -7 392 -7 q 342 8 360 -7 q 313 53 324 22 q 303 129 303 83 q 303 338 303 239 q 303 532 303 438 q 303 722 303 626 q 303 918 303 817 q 300 990 303 961 q 288 1046 297 1019 q 294 1048 290 1047 q 303 1050 299 1049 q 313 1051 308 1051 q 324 1051 318 1051 m 471 739 l 756 739 q 791 724 775 739 q 815 686 807 708 q 824 642 824 664 l 824 635 q 808 568 824 614 q 766 463 793 522 q 704 340 739 404 q 629 218 669 276 q 598 174 614 194 q 565 135 582 154 l 567 126 l 769 126 q 811 107 799 126 q 824 44 824 88 q 823 21 824 33 q 821 0 822 8 l 524 0 q 487 12 500 0 q 467 47 474 24 q 461 104 461 71 l 461 115 q 540 232 501 169 q 612 363 578 294 q 674 503 646 432 q 692 553 683 529 q 710 604 701 578 l 707 611 l 529 611 q 493 623 506 611 q 475 656 481 635 q 469 707 469 678 q 469 724 469 715 q 471 739 469 732 m 685 885 q 672 885 679 885 q 656 885 665 885 q 638 885 647 885 q 597 894 617 885 q 550 933 576 904 q 518 970 533 950 q 488 1015 503 990 q 458 1069 472 1040 q 429 1132 443 1097 q 447 1140 438 1136 q 468 1144 457 1143 q 489 1146 479 1146 q 520 1137 508 1146 q 546 1100 532 1128 q 594 1027 569 1061 q 656 964 619 993 l 606 983 l 678 983 l 625 963 q 701 1051 667 1001 q 757 1149 735 1101 l 782 1149 q 817 1144 804 1149 q 837 1135 831 1140 q 843 1119 843 1129 q 836 1088 843 1107 q 813 1042 829 1069 q 785 998 800 1019 q 754 956 771 976 q 720 917 738 936 q 685 885 703 899 z "},"ǉ":{"ha":833,"x_min":17,"x_max":793,"o":"m 24 1029 q 58 1038 40 1033 q 94 1045 76 1042 q 129 1051 111 1049 q 166 1055 147 1054 q 203 1056 185 1056 q 258 1047 236 1056 q 292 1022 281 1039 q 303 979 303 1006 q 303 834 303 907 q 303 689 303 761 q 303 544 303 617 q 303 399 303 471 q 303 253 303 326 q 307 178 303 211 q 319 122 311 144 q 356 112 336 115 q 404 108 375 108 q 448 113 428 108 q 486 129 468 118 q 522 158 504 140 l 531 158 q 534 140 533 150 q 535 119 535 129 q 532 81 535 99 q 523 49 529 63 q 507 25 517 36 q 474 -2 493 8 q 431 -17 456 -12 q 376 -22 407 -22 q 264 7 308 -22 q 198 88 219 36 q 176 203 176 139 q 176 347 176 276 q 176 488 176 418 q 176 626 176 557 q 176 767 176 696 q 176 911 176 838 l 169 917 q 128 901 147 908 q 92 891 108 894 q 63 888 75 888 q 29 908 42 888 q 17 969 17 929 q 19 1001 17 986 q 24 1029 21 1017 m 665 753 q 725 747 700 753 q 765 727 750 740 q 779 694 779 714 q 779 555 779 625 q 779 414 779 485 q 779 271 779 343 q 779 125 779 199 q 779 -25 779 51 q 765 -156 779 -97 q 721 -258 750 -215 q 648 -324 692 -301 q 546 -347 604 -347 q 446 -333 483 -347 q 388 -299 408 -319 q 367 -265 372 -285 q 361 -217 361 -244 q 362 -196 361 -206 q 364 -178 363 -186 l 372 -178 q 451 -211 415 -201 q 536 -221 488 -221 q 585 -215 564 -221 q 624 -199 606 -210 q 643 -151 638 -178 q 651 -87 649 -124 q 653 0 653 -50 q 653 156 653 78 q 653 314 653 235 q 653 471 653 393 q 653 628 653 549 l 644 631 q 605 624 628 628 q 557 616 582 619 q 510 610 532 613 q 474 608 488 608 q 439 629 451 608 q 426 690 426 650 q 428 717 426 704 q 432 739 429 729 q 493 744 463 742 q 553 749 524 747 q 612 752 583 751 q 665 753 640 753 m 608 1047 q 625 1053 615 1051 q 645 1057 635 1056 q 667 1059 656 1058 q 690 1060 679 1060 q 765 1044 736 1060 q 793 990 793 1028 l 793 907 q 776 901 785 903 q 758 897 767 899 q 739 895 749 896 q 718 894 729 894 q 660 904 685 894 q 622 931 636 914 q 608 974 608 949 l 608 1047 z "},"ǌ":{"ha":833,"x_min":44,"x_max":815,"o":"m 703 753 q 750 747 728 753 q 785 727 772 740 q 799 694 799 714 q 799 554 799 624 q 799 415 799 485 q 799 276 799 346 q 799 136 799 206 q 799 -3 799 67 q 788 -150 799 -86 q 750 -258 776 -214 q 681 -324 724 -301 q 576 -347 639 -347 q 492 -335 529 -347 q 433 -300 454 -322 q 415 -265 421 -286 q 408 -215 408 -244 q 409 -196 408 -206 q 413 -178 410 -186 l 421 -178 q 493 -212 460 -203 q 567 -221 526 -221 q 622 -213 597 -221 q 667 -187 647 -206 q 678 -142 675 -168 q 683 -81 682 -115 q 683 0 683 -46 q 683 156 683 78 q 683 314 683 235 q 683 471 683 393 q 683 628 683 549 l 675 631 q 637 624 654 628 q 606 616 619 619 q 578 610 592 613 q 554 608 565 608 q 529 618 540 608 q 513 646 518 628 q 507 690 507 664 q 509 717 507 704 q 513 739 511 729 q 563 744 540 742 q 606 749 585 747 q 650 751 626 750 q 703 753 674 753 m 629 1047 q 647 1053 638 1051 q 667 1057 657 1056 q 690 1059 678 1058 q 713 1060 701 1060 q 787 1044 758 1060 q 815 990 815 1028 l 815 907 q 798 901 807 903 q 780 897 789 899 q 760 895 771 896 q 740 894 750 894 q 682 904 707 894 q 643 931 657 914 q 629 974 629 949 l 629 1047 m 519 0 q 501 -4 510 -3 q 483 -6 492 -6 q 431 10 454 -6 q 394 67 408 26 q 379 179 379 107 q 382 293 379 239 q 391 405 385 347 q 406 535 397 463 q 385 598 400 578 q 344 618 369 618 q 302 603 324 618 q 258 547 281 588 q 212 432 236 506 q 161 239 188 358 l 158 536 l 185 536 q 235 656 208 607 q 297 729 263 704 q 375 754 331 754 q 429 735 406 754 q 468 685 453 715 q 491 617 483 654 q 499 544 499 579 q 499 428 499 486 q 499 310 499 369 q 499 193 499 251 q 503 94 499 136 q 519 0 507 51 m 178 -4 q 169 -5 174 -4 q 160 -6 164 -6 q 150 -6 156 -6 q 115 -1 132 -6 q 87 14 99 4 q 68 40 75 24 q 61 78 61 57 q 61 213 61 146 q 61 346 61 279 q 61 479 61 413 q 61 614 61 546 q 58 685 61 656 q 44 742 54 714 q 55 744 50 743 q 65 746 60 744 q 76 747 71 747 q 132 732 110 747 q 166 681 154 717 q 178 586 178 646 q 178 435 178 511 q 178 285 178 360 q 178 138 178 211 q 178 -4 178 65 z "},"ǳ":{"ha":833,"x_min":18,"x_max":824,"o":"m 183 754 q 228 742 208 754 q 265 710 249 731 q 296 661 282 689 l 315 661 l 315 536 q 286 589 303 568 q 252 620 269 610 q 218 631 235 631 q 183 619 200 631 q 154 574 167 607 q 135 479 142 540 q 128 318 128 418 l 128 304 q 134 188 128 231 q 150 118 140 146 q 158 118 154 118 q 165 118 161 118 q 219 144 193 118 q 268 238 244 171 q 313 426 292 306 l 313 168 l 296 168 q 258 61 279 101 q 210 3 236 21 q 153 -15 183 -15 q 100 5 125 -15 q 57 63 75 25 q 28 158 39 100 q 18 292 18 215 l 18 325 q 31 530 18 447 q 66 662 43 613 q 119 733 89 711 q 183 754 149 754 m 324 1051 q 369 1038 350 1051 q 399 994 389 1024 q 410 914 410 964 q 410 711 410 810 q 410 516 410 613 q 410 326 410 419 q 410 139 410 233 q 413 63 410 93 q 425 0 415 33 q 415 -3 419 -3 q 406 -6 411 -4 q 397 -7 401 -7 q 386 -7 392 -7 q 342 8 360 -7 q 313 53 324 22 q 303 129 303 83 q 303 338 303 239 q 303 532 303 438 q 303 722 303 626 q 303 918 303 817 q 300 990 303 961 q 288 1046 297 1019 q 294 1048 290 1047 q 303 1050 299 1049 q 313 1051 308 1051 q 324 1051 318 1051 m 471 739 l 756 739 q 791 724 775 739 q 815 686 807 708 q 824 642 824 664 l 824 635 q 808 568 824 614 q 766 463 793 522 q 704 340 739 404 q 629 218 669 276 q 598 174 614 194 q 565 135 582 154 l 567 126 l 769 126 q 811 107 799 126 q 824 44 824 88 q 823 21 824 33 q 821 0 822 8 l 524 0 q 487 12 500 0 q 467 47 474 24 q 461 104 461 71 l 461 115 q 540 232 501 169 q 612 363 578 294 q 674 503 646 432 q 692 553 683 529 q 710 604 701 578 l 707 611 l 529 611 q 493 623 506 611 q 475 656 481 635 q 469 707 469 678 q 469 724 469 715 q 471 739 469 732 z "},"ȷ":{"ha":833,"x_min":53,"x_max":604,"o":"m 478 753 q 547 747 518 753 q 590 727 575 740 q 604 694 604 714 q 604 562 604 625 q 604 440 604 499 q 604 321 604 381 q 604 198 604 261 q 604 67 604 135 q 583 -82 604 -18 q 521 -190 563 -146 q 419 -256 479 -233 q 283 -278 360 -278 q 188 -272 229 -278 q 120 -254 147 -265 q 79 -229 93 -243 q 59 -191 65 -215 q 53 -139 53 -167 q 53 -119 53 -129 q 56 -100 54 -110 l 64 -100 q 130 -131 99 -119 q 198 -147 161 -142 q 285 -151 235 -151 q 365 -143 324 -151 q 443 -111 407 -135 q 464 -65 457 -89 q 474 -8 471 -40 q 478 69 478 24 q 478 215 478 147 q 478 349 478 283 q 478 481 478 414 q 478 628 478 549 l 469 631 q 346 623 400 628 q 251 615 292 618 q 183 610 211 613 q 136 608 154 608 q 103 629 115 608 q 90 690 90 650 q 92 717 90 704 q 96 739 93 729 q 198 746 146 743 q 299 750 250 749 q 393 752 347 751 q 478 753 439 753 z "},"ə":{"ha":833,"x_min":96,"x_max":736,"o":"m 378 -19 q 224 17 288 -19 q 128 117 161 54 q 96 261 96 181 l 96 268 q 101 342 96 311 q 119 390 107 374 q 147 406 131 406 l 518 406 q 566 399 544 406 q 601 381 588 392 l 626 394 l 625 319 l 229 319 q 224 286 226 303 q 222 253 222 269 q 234 171 222 204 q 269 110 246 138 q 313 97 292 100 q 372 93 335 93 q 544 175 479 93 q 610 421 610 257 l 610 436 q 600 519 610 482 q 569 586 590 557 q 485 624 531 613 q 374 635 440 635 q 281 626 324 635 q 199 601 238 618 q 124 554 161 583 l 115 554 q 112 572 113 563 q 111 593 111 582 q 120 648 111 626 q 144 686 129 669 q 202 724 167 708 q 283 747 238 739 q 376 754 328 754 q 519 731 454 754 q 633 665 585 708 q 709 558 682 622 q 736 414 736 494 l 736 397 q 708 218 736 296 q 631 88 681 140 q 517 8 582 35 q 378 -19 451 -19 z "},"ɲ":{"ha":833,"x_min":-60,"x_max":735,"o":"m 26 -104 q 97 -74 74 -104 q 121 24 121 -43 l 121 51 q 169 48 146 51 q 212 38 193 44 q 241 24 231 32 q 251 7 251 17 l 251 -14 q 225 -128 251 -78 q 152 -208 199 -179 q 43 -236 106 -236 l 33 -236 q -2 -230 15 -236 q -32 -211 -19 -224 q -53 -176 -46 -197 q -60 -125 -60 -156 q -58 -103 -60 -114 q -56 -82 -57 -92 l -50 -82 q -15 -99 -29 -93 q 26 -104 0 -104 m 735 0 q 712 -4 722 -3 q 689 -6 701 -6 q 628 10 654 -6 q 588 67 603 26 q 574 179 574 107 q 576 292 574 239 q 586 403 579 346 q 603 533 593 461 q 567 597 589 575 q 514 618 546 618 q 433 594 474 618 q 356 524 393 569 q 285 413 318 478 q 226 264 253 347 l 224 500 l 254 500 q 333 631 288 574 q 434 721 379 688 q 547 754 489 754 q 613 737 583 754 q 665 689 643 719 q 699 621 688 658 q 711 544 711 583 q 711 428 711 486 q 711 310 711 369 q 711 193 711 251 q 716 94 711 136 q 735 0 721 51 m 246 -4 q 235 -5 240 -4 q 224 -6 229 -6 q 213 -6 219 -6 q 171 -1 189 -6 q 142 13 153 3 q 125 35 131 22 q 119 67 119 49 q 119 207 119 138 q 119 344 119 276 q 119 479 119 413 q 119 614 119 546 q 115 685 119 656 q 99 742 111 714 q 112 744 106 743 q 125 746 118 744 q 138 747 132 747 q 195 732 171 747 q 233 681 219 717 q 246 586 246 646 q 246 385 246 486 q 246 187 246 285 q 246 -4 246 89 z "},"π":{"ha":833,"x_min":85,"x_max":744,"o":"m 89 739 l 683 739 q 721 730 708 739 q 739 702 733 721 q 744 656 744 683 q 744 641 744 649 q 742 626 743 633 q 740 611 742 618 l 136 611 q 95 633 106 611 q 85 696 85 654 q 85 712 85 704 q 87 726 86 719 q 89 739 88 733 m 179 676 l 279 676 l 279 603 q 297 575 290 590 q 306 538 303 560 q 308 485 308 517 q 308 363 308 424 q 308 240 308 301 q 308 118 308 179 q 308 -4 308 57 q 297 -6 303 -6 q 283 -7 290 -7 q 267 -7 276 -7 q 222 -3 242 -7 q 191 12 203 0 q 179 47 179 24 q 179 203 179 125 q 179 361 179 282 q 179 519 179 440 q 179 676 179 597 m 735 119 q 735 113 735 117 q 735 104 735 108 q 727 51 735 78 q 706 5 719 24 q 669 -14 692 -14 l 665 -14 q 590 6 622 -14 q 538 60 557 26 q 519 136 519 94 q 519 272 519 204 q 519 406 519 339 q 519 542 519 474 q 519 678 519 610 l 615 678 l 615 603 q 640 559 633 582 q 646 500 646 536 q 646 420 646 460 q 646 340 646 381 q 646 261 646 300 q 646 182 646 222 q 647 149 646 163 q 651 124 649 136 q 673 114 663 117 q 693 111 683 111 q 711 113 703 111 q 726 119 719 115 l 735 119 z "},"ǅ":{"ha":833,"x_min":0,"x_max":843,"o":"m 189 1000 q 300 978 253 1000 q 377 908 347 956 q 421 780 407 860 q 435 586 435 700 l 435 532 q 415 274 435 379 q 361 106 396 169 q 281 15 326 43 q 185 -14 235 -14 q 158 -12 171 -14 q 134 -6 146 -10 q 113 2 122 -3 q 94 13 103 7 q 79 28 85 19 q 63 52 68 39 q 57 92 57 65 q 57 299 57 188 q 57 528 57 411 q 57 759 57 646 q 57 972 57 872 l 154 896 l 140 858 q 163 817 157 842 q 169 758 169 793 q 169 604 169 683 q 169 444 169 525 q 169 282 169 363 q 169 121 169 201 q 179 119 175 121 q 190 117 183 118 q 201 117 196 117 q 244 134 222 117 q 285 197 265 151 q 317 330 304 243 q 329 554 329 417 l 329 567 q 326 684 329 631 q 316 780 322 738 q 299 854 310 822 q 273 865 288 861 q 241 871 258 868 q 204 874 224 874 q 155 869 178 874 q 113 860 132 865 q 76 850 93 854 q 44 846 58 846 q 17 856 26 846 q 3 884 7 865 q 0 931 0 903 q 1 953 0 943 q 1 972 1 963 q 42 983 21 978 q 85 992 63 989 q 135 998 108 996 q 189 1000 161 1000 m 471 739 l 756 739 q 791 724 775 739 q 815 686 807 708 q 824 642 824 664 l 824 635 q 808 569 824 614 q 767 465 793 524 q 705 342 740 406 q 632 219 669 279 q 599 175 615 196 q 565 135 582 154 l 567 126 l 769 126 q 811 107 799 126 q 824 44 824 88 q 823 22 824 33 q 821 0 822 10 l 524 0 q 487 12 500 0 q 467 47 474 24 q 461 104 461 71 l 461 115 q 540 232 501 169 q 612 363 578 294 q 674 501 646 431 q 692 553 683 528 q 710 604 701 579 l 707 611 l 529 611 q 493 623 506 611 q 475 656 481 635 q 469 707 469 678 q 469 724 469 715 q 471 739 469 732 m 685 885 q 672 885 679 885 q 656 885 665 885 q 638 885 647 885 q 596 894 615 885 q 550 933 576 904 q 518 970 533 950 q 488 1015 503 990 q 458 1069 472 1040 q 429 1132 443 1097 q 447 1140 438 1136 q 468 1144 457 1143 q 489 1146 479 1146 q 520 1137 508 1146 q 546 1100 532 1128 q 594 1027 569 1061 q 656 964 619 993 l 606 983 l 678 983 l 625 963 q 701 1051 667 1001 q 757 1149 735 1101 l 782 1149 q 817 1144 804 1149 q 837 1135 831 1140 q 843 1119 843 1129 q 836 1088 843 1107 q 813 1042 829 1069 q 785 998 800 1019 q 754 956 771 976 q 720 917 738 936 q 685 885 703 899 z "},"ǈ":{"ha":833,"x_min":26,"x_max":793,"o":"m 121 0 q 83 12 100 0 q 56 43 67 24 q 40 86 46 63 q 35 135 35 110 q 35 234 35 178 q 35 352 35 290 q 35 479 35 414 q 35 607 35 544 q 35 726 35 669 q 35 828 35 783 q 33 906 35 874 q 26 975 32 938 q 42 979 35 978 q 58 982 50 981 q 78 983 67 983 q 127 970 110 983 q 151 935 144 957 q 157 882 157 913 q 157 775 157 835 q 157 648 157 715 q 157 511 157 581 q 157 373 157 442 q 157 242 157 304 q 157 126 157 179 l 421 126 q 451 119 439 126 q 471 95 464 111 q 480 55 478 79 q 481 0 482 31 l 121 0 m 435 288 q 447 289 440 288 q 463 290 454 290 q 479 290 471 290 q 513 285 499 290 q 537 267 528 279 q 546 235 546 256 q 542 167 546 201 q 531 97 538 132 q 516 31 525 63 q 497 -31 507 -1 q 450 -24 471 -31 q 418 -6 429 -18 q 407 25 407 6 q 413 88 407 47 q 426 179 419 128 q 435 288 433 231 m 664 753 q 724 746 699 753 q 765 726 750 739 q 779 694 779 714 q 779 555 779 625 q 779 414 779 485 q 779 271 779 343 q 779 125 779 199 q 779 -25 779 51 q 765 -156 779 -97 q 721 -258 750 -215 q 648 -324 692 -301 q 546 -347 604 -347 q 446 -333 483 -347 q 388 -299 408 -319 q 367 -265 374 -285 q 361 -215 361 -244 q 362 -196 361 -206 q 364 -178 363 -186 l 372 -178 q 451 -211 415 -201 q 536 -221 488 -221 q 585 -215 564 -221 q 624 -199 606 -210 q 643 -151 638 -178 q 651 -87 649 -124 q 653 0 653 -50 q 653 156 653 78 q 653 314 653 235 q 653 471 653 393 q 653 628 653 549 l 644 631 q 599 624 624 628 q 547 616 574 619 q 499 610 521 613 q 461 608 476 608 q 426 629 439 608 q 414 690 414 650 q 416 717 414 704 q 419 739 418 729 q 483 744 451 742 q 546 749 515 747 q 607 752 576 751 q 664 753 638 753 m 608 1047 q 625 1053 615 1051 q 645 1057 635 1056 q 667 1059 656 1058 q 690 1060 679 1060 q 765 1044 736 1060 q 793 990 793 1028 l 793 907 q 776 901 785 903 q 758 897 767 899 q 739 895 749 896 q 718 894 729 894 q 660 904 685 894 q 622 931 636 914 q 608 974 608 949 l 608 1047 z "},"ǋ":{"ha":833,"x_min":26,"x_max":815,"o":"m 158 -3 q 145 -6 153 -4 q 129 -8 138 -7 q 111 -8 121 -8 q 69 0 85 -8 q 47 27 54 8 q 40 75 40 46 q 40 264 40 169 q 40 452 40 358 q 40 640 40 546 q 40 828 40 733 q 38 900 40 858 q 26 978 35 942 q 47 982 38 981 q 67 984 57 983 q 86 985 76 985 q 107 985 96 985 q 163 975 140 985 q 199 943 185 965 q 218 879 213 921 q 240 738 228 807 q 265 601 251 668 q 293 471 279 533 q 321 351 307 408 q 349 244 335 293 q 376 156 364 196 l 340 185 l 413 185 l 379 151 q 372 243 375 192 q 365 351 368 294 q 361 460 363 407 q 359 559 360 514 q 358 632 358 604 q 358 692 358 657 q 358 766 358 726 q 358 845 358 806 q 358 919 358 885 q 358 978 358 954 q 369 981 363 979 q 385 982 376 982 q 403 982 394 982 q 458 965 440 982 q 476 906 476 949 q 476 816 476 872 q 476 691 476 760 q 476 548 476 622 q 476 400 476 474 q 476 263 476 326 q 476 151 476 200 q 478 73 476 113 q 483 -6 479 33 q 472 -10 478 -8 q 460 -12 467 -11 q 447 -14 453 -14 q 436 -14 442 -14 q 370 -3 394 -14 q 331 39 346 7 q 279 174 304 94 q 230 353 254 253 q 183 572 206 453 q 139 824 161 690 l 171 783 l 108 783 l 132 826 q 145 661 140 750 q 153 480 150 572 q 158 301 157 388 q 158 138 158 214 q 158 68 158 103 q 158 -3 158 33 m 703 753 q 750 747 728 753 q 785 727 772 740 q 799 694 799 714 q 799 555 799 625 q 799 415 799 485 q 799 276 799 346 q 799 136 799 206 q 799 -3 799 67 q 788 -150 799 -86 q 750 -258 776 -214 q 681 -324 724 -301 q 576 -347 639 -347 q 492 -335 529 -347 q 433 -300 454 -322 q 415 -265 421 -286 q 408 -215 408 -244 q 409 -196 408 -206 q 413 -178 410 -186 l 421 -178 q 493 -212 460 -203 q 567 -221 526 -221 q 622 -213 597 -221 q 667 -189 647 -206 q 678 -142 675 -168 q 683 -81 682 -117 q 683 0 683 -46 q 683 156 683 78 q 683 314 683 235 q 683 471 683 393 q 683 628 683 549 l 675 631 q 637 624 654 628 q 606 616 619 619 q 578 610 592 613 q 554 608 565 608 q 531 618 540 608 q 517 646 521 628 q 514 690 514 664 q 515 717 514 704 q 519 739 517 729 q 566 744 544 742 q 608 749 588 747 q 651 751 628 750 q 703 753 674 753 m 629 1047 q 647 1053 638 1051 q 667 1057 657 1056 q 690 1059 678 1058 q 713 1060 701 1060 q 787 1044 758 1060 q 815 990 815 1028 l 815 907 q 798 901 807 903 q 780 897 789 899 q 760 895 771 896 q 740 894 750 894 q 682 904 707 894 q 643 931 657 914 q 629 974 629 949 l 629 1047 z "},"ǲ":{"ha":833,"x_min":0,"x_max":824,"o":"m 189 1000 q 300 978 253 1000 q 377 908 347 956 q 421 780 407 860 q 435 586 435 700 l 435 532 q 415 274 435 379 q 361 106 396 169 q 281 15 326 43 q 185 -14 235 -14 q 158 -12 171 -14 q 134 -6 146 -10 q 113 2 122 -3 q 94 13 103 7 q 79 28 85 19 q 63 52 68 39 q 57 92 57 65 q 57 299 57 188 q 57 528 57 411 q 57 759 57 646 q 57 972 57 872 l 154 896 l 140 858 q 163 817 157 842 q 169 758 169 793 q 169 604 169 683 q 169 444 169 525 q 169 282 169 363 q 169 121 169 201 q 179 119 175 121 q 190 117 183 118 q 201 117 196 117 q 244 134 222 117 q 285 197 265 151 q 317 330 304 243 q 329 554 329 417 l 329 567 q 326 684 329 631 q 316 780 322 738 q 299 854 310 822 q 273 865 288 861 q 241 871 258 868 q 204 874 224 874 q 155 869 178 874 q 113 860 132 865 q 76 850 93 854 q 44 846 58 846 q 17 856 26 846 q 3 884 7 865 q 0 931 0 903 q 1 953 0 943 q 1 972 1 963 q 42 983 21 978 q 85 992 63 989 q 135 998 108 996 q 189 1000 161 1000 m 471 739 l 756 739 q 791 724 775 739 q 815 686 807 708 q 824 642 824 664 l 824 635 q 808 569 824 614 q 767 465 793 524 q 705 342 740 406 q 632 219 669 279 q 599 175 615 196 q 565 135 582 154 l 567 126 l 769 126 q 811 107 799 126 q 824 44 824 88 q 823 22 824 33 q 821 0 822 10 l 524 0 q 487 12 500 0 q 467 47 474 24 q 461 104 461 71 l 461 115 q 540 232 501 169 q 612 363 578 294 q 674 501 646 431 q 692 553 683 528 q 710 604 701 579 l 707 611 l 529 611 q 493 623 506 611 q 475 656 481 635 q 469 707 469 678 q 469 724 469 715 q 471 739 469 732 z "},"ʹ":{"ha":833,"x_min":290,"x_max":543,"o":"m 375 603 q 331 608 351 603 q 290 625 310 614 q 345 749 325 689 q 374 878 365 808 q 382 1039 382 949 q 400 1044 392 1042 q 416 1047 408 1046 q 433 1048 424 1047 q 451 1049 442 1049 q 501 1042 481 1049 q 532 1017 521 1035 q 543 969 543 1000 q 528 834 543 901 q 486 712 513 767 q 429 625 460 657 q 406 608 418 613 q 375 603 394 603 z "},"ʺ":{"ha":833,"x_min":142,"x_max":703,"o":"m 449 625 q 494 724 476 675 q 525 824 513 774 q 543 927 538 874 q 549 1039 549 981 q 563 1044 556 1042 q 577 1047 569 1046 q 593 1048 585 1047 q 613 1049 601 1049 q 676 1034 650 1049 q 703 976 703 1019 q 693 870 703 922 q 667 772 683 818 q 628 686 650 725 q 585 621 607 647 q 563 607 575 611 q 532 603 551 603 q 510 603 521 603 q 490 608 500 604 q 469 615 479 611 q 449 625 458 619 m 142 625 q 188 724 169 675 q 219 824 207 774 q 236 927 231 874 q 242 1039 242 981 q 256 1044 250 1042 q 270 1047 263 1046 q 286 1048 278 1047 q 306 1049 294 1049 q 370 1034 344 1049 q 396 976 396 1019 q 386 870 396 922 q 360 772 376 818 q 323 686 344 725 q 278 621 301 647 q 256 607 268 611 q 225 603 244 603 q 204 603 215 603 q 183 608 193 604 q 162 615 172 611 q 142 625 151 619 z "},"ʻ":{"ha":833,"x_min":310,"x_max":563,"o":"m 478 1049 q 522 1044 501 1049 q 563 1026 542 1039 q 508 903 528 964 q 479 774 488 843 q 471 613 471 704 q 453 608 461 610 q 436 605 444 606 q 419 603 428 604 q 401 603 411 603 q 353 610 374 603 q 321 634 332 617 q 310 682 310 651 q 325 817 310 750 q 367 940 340 885 q 424 1028 393 996 q 447 1044 436 1039 q 478 1049 458 1049 z "},"ʼ":{"ha":0,"x_min":-79,"x_max":75,"o":"m 8 992 q 58 979 40 992 q 75 942 75 967 q 68 869 75 906 q 47 801 61 832 q 15 749 33 769 q -4 734 6 738 q -29 731 -14 731 q -56 733 -44 731 q -79 742 -67 736 q -57 822 -64 789 q -47 891 -50 854 q -43 982 -43 928 q -17 989 -29 986 q 8 992 -6 992 z "},"ʾ":{"ha":833,"x_min":326,"x_max":511,"o":"m 346 833 q 331 839 336 833 q 326 857 326 844 q 328 889 326 872 q 335 922 331 906 q 399 944 375 924 q 422 1004 422 965 l 422 1011 q 417 1049 422 1033 q 396 1075 411 1064 q 374 1085 386 1082 q 349 1088 363 1088 q 338 1092 342 1088 q 335 1106 335 1097 q 337 1137 335 1122 q 343 1167 339 1151 q 430 1147 392 1167 q 490 1091 468 1126 q 511 1008 511 1056 l 511 999 q 488 914 511 951 q 428 855 465 876 q 346 833 390 833 z "},"ʿ":{"ha":833,"x_min":311,"x_max":496,"o":"m 478 833 q 359 878 407 833 q 311 993 311 922 l 311 1001 q 333 1088 311 1050 q 396 1146 356 1125 q 489 1167 436 1167 q 494 1137 493 1151 q 496 1107 496 1122 q 493 1091 496 1094 q 483 1088 490 1088 q 422 1066 446 1088 q 399 1006 399 1044 l 399 996 q 406 959 399 975 q 424 935 413 943 q 451 924 436 926 q 486 922 467 922 q 494 890 492 906 q 496 858 496 875 q 478 833 496 833 z "},"ˈ":{"ha":833,"x_min":346,"x_max":486,"o":"m 486 613 q 468 610 479 611 q 445 610 457 610 q 422 610 433 610 q 381 615 397 610 q 358 632 365 621 q 350 664 350 643 l 350 971 q 349 1013 350 997 q 346 1043 347 1028 q 378 1047 360 1046 q 417 1047 397 1047 q 471 1035 456 1047 q 486 994 486 1024 l 486 613 z "},"ˉ":{"ha":833,"x_min":144,"x_max":690,"o":"m 144 1021 l 629 1021 q 678 1003 665 1021 q 690 950 690 986 q 690 937 690 943 q 688 924 689 931 q 686 911 688 917 l 247 911 q 183 921 206 911 q 153 951 161 931 q 144 1003 144 971 q 144 1009 144 1006 q 144 1015 144 1013 q 144 1021 144 1018 z "},"ˊ":{"ha":833,"x_min":332,"x_max":614,"o":"m 497 1126 q 549 1124 526 1128 q 589 1111 572 1121 q 610 1089 606 1104 q 608 1060 614 1074 q 580 996 600 1026 q 533 940 560 965 q 476 896 507 914 q 436 878 457 883 q 394 874 415 874 q 362 878 378 874 q 332 892 346 882 q 408 965 376 928 q 463 1041 440 1001 q 497 1126 486 1081 z "},"ˋ":{"ha":833,"x_min":219,"x_max":501,"o":"m 336 1126 q 371 1041 349 1081 q 426 965 393 1001 q 503 892 458 928 q 473 878 489 882 q 440 874 457 874 q 397 878 418 874 q 357 896 376 883 q 301 940 328 914 q 255 996 275 965 q 225 1060 235 1026 q 224 1089 219 1074 q 244 1111 229 1104 q 270 1122 257 1118 q 301 1126 283 1125 q 336 1126 318 1128 z "},"ˌ":{"ha":0,"x_min":-72,"x_max":69,"o":"m 69 -344 q 50 -346 61 -344 q 27 -347 39 -347 q 4 -347 15 -347 q -51 -335 -35 -347 q -67 -293 -67 -324 l -67 -149 q -68 -107 -67 -122 q -72 -76 -69 -92 q -39 -73 -57 -74 q 0 -72 -21 -72 q 53 -84 38 -72 q 69 -125 69 -96 l 69 -344 z "},"ª":{"ha":833,"x_min":135,"x_max":738,"o":"m 321 404 q 247 422 281 404 q 188 472 213 439 q 149 548 163 504 q 135 646 135 592 l 135 668 q 167 885 135 800 q 257 1013 200 971 q 388 1054 314 1054 q 475 1031 435 1054 q 536 969 515 1008 l 551 969 l 557 868 q 490 927 521 910 q 411 944 458 944 q 322 915 358 944 q 268 825 286 885 q 250 678 250 765 l 250 667 q 253 609 250 636 q 261 556 256 582 q 290 530 272 538 q 326 522 307 522 q 410 547 371 522 q 485 626 449 571 q 554 771 521 681 l 550 597 l 535 597 q 440 456 499 508 q 321 404 381 404 m 735 533 q 737 516 736 526 q 738 497 738 506 q 731 458 738 478 q 713 425 725 438 q 690 409 703 414 q 661 404 678 404 q 599 422 625 404 q 558 472 572 439 q 543 546 543 504 q 543 674 543 610 q 543 802 543 738 q 543 931 543 867 q 544 976 543 957 q 549 1012 546 996 q 554 1043 551 1028 q 573 1047 564 1046 q 593 1047 582 1047 q 639 1022 621 1047 q 657 936 657 997 q 657 800 657 868 q 657 663 657 732 q 657 526 657 594 q 669 518 663 521 q 685 515 676 515 q 708 520 697 515 q 726 533 718 525 l 735 533 z "},"º":{"ha":833,"x_min":143,"x_max":690,"o":"m 418 1060 q 556 1018 494 1060 q 653 898 617 976 q 690 710 690 819 l 690 694 q 656 534 690 601 q 559 431 621 467 q 413 394 497 394 q 274 428 335 394 q 178 529 213 463 q 143 693 143 596 l 143 708 q 179 894 143 815 q 278 1017 215 974 q 418 1060 340 1060 m 418 957 q 328 924 364 957 q 274 833 292 892 q 256 697 256 775 l 256 689 q 267 599 256 642 q 310 524 279 556 q 356 506 332 514 q 408 499 381 499 q 503 523 467 499 q 558 592 540 547 q 576 700 576 638 l 576 711 q 553 855 576 792 q 481 949 529 918 q 451 955 467 953 q 418 957 436 957 z "},"̀":{"ha":0,"x_min":-215,"x_max":68,"o":"m -99 1126 q -64 1041 -86 1081 q -9 965 -42 1001 q 68 892 24 928 q 38 878 54 882 q 6 874 22 874 q -37 878 -17 874 q -78 896 -58 883 q -133 940 -107 914 q -180 996 -160 965 q -210 1060 -200 1026 q -210 1089 -215 1074 q -190 1111 -206 1104 q -165 1122 -178 1118 q -134 1126 -151 1125 q -99 1126 -117 1128 z "},"́":{"ha":0,"x_min":-68,"x_max":215,"o":"m 99 1126 q 150 1124 128 1128 q 190 1111 172 1121 q 210 1089 206 1104 q 210 1060 215 1074 q 181 996 201 1026 q 134 940 160 965 q 78 896 108 914 q 38 878 58 883 q -6 874 17 874 q -38 878 -22 874 q -68 892 -54 882 q 9 965 -24 928 q 65 1041 42 1001 q 99 1126 88 1081 z "},"̂":{"ha":0,"x_min":-264,"x_max":283,"o":"m -28 1133 q -16 1133 -22 1133 q 0 1133 -10 1133 q 42 1127 22 1133 q 100 1094 63 1121 q 147 1057 122 1078 q 197 1010 172 1036 q 243 955 221 985 q 283 890 265 925 q 251 876 268 881 q 213 872 235 872 q 179 881 192 872 q 146 914 167 889 q 77 984 117 951 q -33 1054 38 1017 l 46 1035 l -44 1035 l 32 1056 q -97 963 -47 1010 q -174 869 -147 915 l -182 869 q -228 874 -210 869 q -255 888 -246 879 q -264 904 -264 896 q -256 933 -264 914 q -228 978 -247 951 q -187 1024 -210 1001 q -137 1068 -164 1047 q -83 1106 -111 1089 q -28 1133 -56 1122 z "},"̃":{"ha":0,"x_min":-262,"x_max":263,"o":"m 122 1001 q 190 1017 164 1001 q 244 1074 217 1032 l 253 1074 q 258 1058 257 1067 q 261 1038 260 1049 q 263 1014 263 1028 q 255 969 263 993 q 228 926 247 946 q 186 901 211 910 q 128 893 161 893 q 55 906 86 893 q -3 933 24 918 q -59 961 -31 949 q -125 974 -87 974 q -190 958 -164 974 q -244 901 -217 942 l -253 901 q -258 917 -256 910 q -261 935 -260 925 q -262 956 -262 944 q -255 1003 -262 981 q -231 1044 -247 1026 q -190 1072 -214 1061 q -132 1082 -165 1082 q -56 1069 -89 1082 q 5 1042 -22 1057 q 60 1014 32 1026 q 122 1001 88 1001 z "},"̄":{"ha":0,"x_min":-272,"x_max":272,"o":"m -272 1021 l 211 1021 q 260 1003 247 1021 q 272 950 272 986 q 272 937 272 943 q 270 924 271 931 q 268 911 269 917 l -169 911 q -235 921 -212 911 q -265 951 -257 931 q -272 1003 -272 971 q -272 1009 -272 1006 q -272 1015 -272 1013 q -272 1021 -272 1018 z "},"̆":{"ha":0,"x_min":-242,"x_max":242,"o":"m 0 990 q 108 1025 69 996 q 165 1115 147 1054 q 201 1108 185 1114 q 232 1093 218 1103 q 240 1076 239 1088 q 236 1051 242 1065 q 187 966 219 1001 q 109 913 154 931 q 6 894 64 894 l -6 894 q -109 913 -64 894 q -186 966 -154 931 q -236 1051 -218 1001 q -240 1076 -242 1065 q -232 1093 -239 1088 q -201 1108 -218 1103 q -165 1115 -185 1114 q -108 1025 -147 1054 q 0 990 -69 996 z "},"̇":{"ha":0,"x_min":-93,"x_max":93,"o":"m -93 1044 q -75 1051 -85 1049 q -55 1054 -65 1053 q -33 1056 -44 1056 q -11 1057 -21 1057 q 65 1041 36 1057 q 93 988 93 1025 l 93 904 q 76 898 85 900 q 58 894 67 896 q 38 892 49 893 q 17 892 28 892 q -62 913 -32 892 q -93 971 -93 935 l -93 1044 z "},"̈":{"ha":0,"x_min":-222,"x_max":222,"o":"m -222 1053 q -192 1056 -208 1056 q -161 1057 -175 1057 q -114 1052 -135 1057 q -80 1035 -93 1047 q -67 1000 -67 1022 l -67 896 q -97 892 -81 893 q -129 892 -114 892 q -174 897 -153 892 q -209 915 -196 901 q -222 949 -222 928 l -222 1053 m 67 1053 q 97 1056 81 1056 q 128 1057 114 1057 q 175 1052 154 1057 q 209 1035 196 1047 q 222 1000 222 1022 l 222 896 q 192 892 208 893 q 160 892 175 892 q 115 897 136 892 q 80 915 93 901 q 67 949 67 928 l 67 1053 z "},"̉":{"ha":0,"x_min":-150,"x_max":164,"o":"m -64 858 q -49 894 -64 878 q 0 926 -35 910 q 60 961 43 947 q 78 993 78 975 q 78 1001 78 997 q 76 1010 78 1006 q 50 1017 65 1015 q 17 1019 35 1019 q -42 1013 -15 1019 q -89 994 -68 1007 q -131 963 -110 982 l -139 963 q -147 986 -144 975 q -150 1013 -150 997 q -143 1050 -150 1033 q -124 1081 -136 1067 q -106 1094 -115 1088 q -86 1105 -97 1100 q -60 1113 -75 1110 q -30 1117 -46 1115 q 7 1119 -14 1119 q 96 1103 61 1119 q 147 1061 131 1088 q 164 1000 164 1035 l 164 997 q 149 942 164 963 q 100 899 133 921 q 52 862 64 875 q 38 829 40 849 q 24 826 32 828 q 7 822 15 824 q -10 821 -1 821 q -51 831 -37 821 q -64 858 -64 840 z "},"̊":{"ha":0,"x_min":-168,"x_max":168,"o":"m 4 1167 q 90 1147 53 1167 q 148 1091 128 1126 q 168 1008 168 1056 l 168 999 q 120 880 168 926 q -4 833 72 833 q -122 878 -75 833 q -168 993 -168 922 l -168 1001 q -146 1088 -168 1050 q -85 1146 -124 1125 q 4 1167 -46 1167 m 6 1088 q -58 1066 -36 1088 q -81 1006 -81 1044 l -81 996 q -74 962 -81 978 q -56 935 -67 946 q -31 925 -43 928 q -4 922 -19 922 q 58 944 36 922 q 81 1001 81 965 l 81 1010 q 74 1047 81 1031 q 53 1074 67 1063 q 32 1084 43 1081 q 6 1088 21 1088 z "},"̋":{"ha":0,"x_min":-240,"x_max":321,"o":"m -74 1126 q -22 1124 -44 1128 q 18 1111 0 1121 q 38 1089 33 1104 q 38 1060 43 1074 q 8 996 29 1026 q -38 940 -12 965 q -94 896 -64 914 q -135 878 -114 883 q -178 874 -156 874 q -210 878 -194 874 q -240 892 -226 882 q -163 965 -196 928 q -108 1041 -131 1001 q -74 1126 -85 1081 m 206 1126 q 257 1124 235 1128 q 297 1111 279 1121 q 317 1089 313 1104 q 317 1060 322 1074 q 288 996 308 1026 q 241 940 267 965 q 185 896 215 914 q 144 878 165 883 q 101 874 124 874 q 69 878 85 874 q 39 892 53 882 q 116 965 83 928 q 172 1041 149 1001 q 206 1126 194 1081 z "},"̌":{"ha":0,"x_min":-283,"x_max":265,"o":"m 28 882 q 16 882 22 882 q 0 882 10 882 q -42 888 -22 882 q -100 921 -62 894 q -147 958 -122 938 q -197 1005 -172 979 q -243 1060 -221 1031 q -283 1125 -265 1090 q -251 1139 -268 1135 q -212 1143 -233 1143 q -178 1135 -192 1143 q -146 1101 -165 1126 q -76 1031 -115 1064 q 33 961 -36 997 l -46 981 l 46 981 l -32 960 q 98 1052 47 1006 q 174 1146 149 1099 l 182 1146 q 228 1141 211 1146 q 256 1128 246 1136 q 265 1111 265 1121 q 257 1082 265 1100 q 228 1036 249 1064 q 187 990 210 1014 q 138 947 164 967 q 83 910 111 926 q 28 882 56 893 z "},"̏":{"ha":0,"x_min":-324,"x_max":204,"o":"m -207 1126 q -172 1041 -194 1081 q -117 965 -150 1001 q -40 892 -85 928 q -70 878 -54 882 q -103 874 -86 874 q -146 878 -125 874 q -186 896 -167 883 q -242 940 -215 914 q -288 996 -268 965 q -318 1060 -308 1026 q -319 1089 -324 1074 q -299 1111 -314 1104 q -273 1122 -286 1118 q -242 1126 -260 1125 q -207 1126 -225 1128 m 38 1126 q 72 1041 50 1081 q 127 965 94 1001 q 204 892 160 928 q 174 878 190 882 q 142 874 158 874 q 99 878 119 874 q 58 896 78 883 q 3 940 29 914 q -44 996 -24 965 q -74 1060 -64 1026 q -74 1089 -79 1074 q -54 1111 -69 1104 q -28 1122 -42 1118 q 2 1126 -15 1125 q 38 1126 19 1128 z "},"̑":{"ha":0,"x_min":-242,"x_max":242,"o":"m 0 1018 q -108 984 -69 1013 q -165 893 -147 956 q -201 901 -185 896 q -232 915 -218 906 q -240 931 -239 921 q -236 957 -242 942 q -186 1043 -218 1008 q -109 1096 -154 1078 q -6 1114 -64 1114 l 6 1114 q 109 1096 64 1114 q 187 1043 154 1078 q 236 957 219 1008 q 240 931 242 942 q 232 915 239 921 q 201 901 218 906 q 165 893 185 896 q 108 984 147 956 q 0 1018 69 1013 z "},"̒":{"ha":0,"x_min":-65,"x_max":88,"o":"m 0 872 q -49 885 -32 872 q -65 922 -65 897 q -58 994 -65 958 q -37 1063 -50 1031 q -6 1115 -24 1094 q 14 1130 4 1126 q 39 1133 24 1133 q 66 1131 54 1133 q 88 1122 78 1128 q 66 1043 74 1076 q 56 974 58 1010 q 53 882 53 938 q 27 875 39 878 q 0 872 15 872 z "},"̕":{"ha":0,"x_min":-79,"x_max":75,"o":"m 8 992 q 58 979 40 992 q 75 942 75 967 q 68 869 75 906 q 47 801 61 832 q 15 749 33 769 q -4 734 6 738 q -29 731 -14 731 q -56 733 -44 731 q -79 742 -67 736 q -57 822 -64 789 q -47 891 -50 854 q -43 982 -43 928 q -17 989 -29 986 q 8 992 -6 992 z "},"̛":{"ha":0,"x_min":1,"x_max":210,"o":"m 79 946 q 97 954 88 951 q 116 958 106 957 q 139 960 126 960 q 192 939 175 960 q 210 876 210 918 q 192 783 210 819 q 142 724 174 746 q 83 695 113 703 q 26 688 53 688 q 18 688 22 688 q 10 688 14 688 q 1 688 6 688 q 1 700 1 694 q 1 712 1 706 q 1 726 1 718 q 1 742 1 733 q 31 746 17 742 q 61 758 46 750 q 87 790 76 769 q 97 849 97 811 q 92 899 97 876 q 79 946 88 922 z "},"̣":{"ha":0,"x_min":-86,"x_max":86,"o":"m -86 -125 q -70 -122 -79 -124 q -53 -120 -61 -121 q -35 -119 -44 -119 q -17 -119 -26 -119 q 58 -133 29 -119 q 86 -183 86 -146 l 86 -274 q 70 -276 79 -275 q 53 -278 61 -278 q 35 -279 44 -279 q 17 -279 26 -279 q -57 -265 -28 -279 q -86 -215 -86 -251 l -86 -125 z "},"̤":{"ha":0,"x_min":-222,"x_max":222,"o":"m -222 -131 q -192 -127 -208 -128 q -161 -126 -175 -126 q -114 -131 -135 -126 q -80 -149 -93 -136 q -67 -183 -67 -161 l -67 -287 q -97 -291 -81 -290 q -129 -292 -114 -292 q -174 -287 -153 -292 q -209 -269 -196 -282 q -222 -235 -222 -256 l -222 -131 m 67 -131 q 97 -127 81 -128 q 128 -126 114 -126 q 175 -131 154 -126 q 209 -149 196 -136 q 222 -183 222 -161 l 222 -287 q 192 -291 208 -290 q 160 -292 175 -292 q 115 -287 136 -292 q 80 -269 93 -282 q 67 -235 67 -256 l 67 -131 z "},"̥":{"ha":0,"x_min":-168,"x_max":168,"o":"m 4 -62 q 90 -83 53 -62 q 148 -138 128 -103 q 168 -221 168 -174 l 168 -231 q 120 -349 168 -303 q -4 -396 72 -396 q -122 -351 -75 -396 q -168 -236 -168 -307 l -168 -228 q -146 -142 -168 -179 q -85 -83 -124 -104 q 4 -62 -46 -62 m 6 -142 q -58 -163 -36 -142 q -81 -224 -81 -185 l -81 -233 q -74 -267 -81 -251 q -56 -294 -67 -283 q -31 -304 -43 -301 q -4 -307 -19 -307 q 58 -285 36 -307 q 81 -228 81 -264 l 81 -219 q 74 -183 81 -199 q 53 -156 67 -167 q 32 -145 43 -149 q 6 -142 21 -142 z "},"̦":{"ha":0,"x_min":-85,"x_max":78,"o":"m -42 -103 q -17 -97 -29 -99 q 11 -94 -4 -94 q 62 -108 46 -94 q 78 -150 78 -121 q 71 -221 78 -183 q 52 -291 64 -258 q 28 -344 40 -324 q 8 -368 18 -361 q -18 -375 -3 -375 q -53 -372 -37 -375 q -85 -361 -69 -368 q -60 -286 -69 -326 q -47 -200 -51 -246 q -42 -103 -42 -154 z "},"̧":{"ha":0,"x_min":-160,"x_max":142,"o":"m 42 38 q 37 17 39 29 q 33 -8 35 4 q 29 -31 31 -21 q 25 -50 28 -42 l 25 -57 q 111 -92 81 -62 q 142 -174 142 -122 q 93 -283 142 -243 q -43 -324 44 -324 q -110 -312 -83 -324 q -148 -283 -136 -301 q -160 -244 -160 -265 q -158 -225 -160 -235 q -154 -206 -157 -215 q -149 -187 -151 -197 l -140 -187 q -101 -214 -121 -206 q -47 -222 -81 -222 q 12 -206 -8 -222 q 32 -160 32 -190 q 17 -123 32 -136 q -32 -110 1 -110 q -52 -103 -44 -110 q -60 -87 -60 -97 q -58 -60 -60 -75 q -53 -31 -57 -46 q -45 -3 -50 -17 q -35 19 -40 10 q -24 31 -32 26 q 1 37 -15 35 q 42 38 17 39 z "},"̨":{"ha":0,"x_min":-243,"x_max":54,"o":"m -18 26 q 0 23 -11 28 q 35 0 11 18 q 24 -9 32 -4 q -1 -17 17 -14 q -104 -68 -71 -33 q -137 -151 -137 -103 q -116 -204 -137 -185 q -51 -224 -94 -224 q -6 -218 -26 -224 q 33 -197 14 -212 l 42 -197 q 49 -216 47 -207 q 53 -233 51 -225 q 54 -254 54 -242 q 22 -324 54 -301 q -67 -347 -10 -347 q -194 -304 -146 -347 q -243 -185 -243 -261 q -212 -76 -243 -124 q -131 -3 -182 -29 q -18 26 -79 24 z "},"̮":{"ha":0,"x_min":-242,"x_max":242,"o":"m 0 -193 q 108 -158 69 -187 q 165 -68 147 -129 q 201 -75 185 -69 q 232 -90 218 -81 q 240 -107 239 -96 q 236 -132 242 -118 q 187 -217 219 -182 q 109 -271 154 -253 q 6 -289 64 -289 l -6 -289 q -109 -271 -64 -289 q -186 -217 -154 -253 q -236 -132 -218 -182 q -240 -107 -242 -118 q -232 -90 -239 -96 q -201 -75 -218 -81 q -165 -68 -185 -69 q -108 -158 -147 -129 q 0 -193 -69 -187 z "},"̱":{"ha":0,"x_min":-272,"x_max":272,"o":"m -272 -157 l 211 -157 q 260 -174 247 -157 q 272 -228 272 -192 q 272 -241 272 -235 q 270 -254 271 -247 q 268 -267 269 -261 l -169 -267 q -235 -257 -212 -267 q -265 -227 -257 -247 q -272 -175 -272 -207 q -272 -169 -272 -172 q -272 -162 -272 -165 q -272 -157 -272 -160 z "},"̵":{"ha":0,"x_min":-339,"x_max":346,"o":"m -339 238 l 285 238 q 322 228 308 238 q 340 201 335 219 q 346 156 346 183 q 344 134 346 146 q 342 111 343 122 l -257 111 q -309 121 -292 111 q -333 154 -326 131 q -339 219 -339 178 q -339 229 -339 224 q -339 238 -339 235 z "},"¹":{"ha":833,"x_min":229,"x_max":606,"o":"m 239 614 l 474 614 q 572 596 538 614 q 606 547 606 578 q 605 538 606 543 q 603 526 604 532 q 602 515 603 519 q 601 506 601 510 l 303 506 q 248 524 264 506 q 232 574 232 542 q 233 585 232 581 q 234 595 233 590 q 236 605 235 600 q 239 614 238 610 m 485 582 l 397 582 l 404 619 q 391 632 396 625 q 383 651 386 639 q 381 679 381 663 q 381 719 381 692 q 381 783 381 747 q 381 858 381 819 q 381 929 381 896 q 381 986 381 963 l 399 950 l 358 950 l 389 978 q 369 936 379 957 q 347 896 358 915 q 319 857 335 876 q 295 831 308 842 q 265 819 282 819 q 240 839 251 819 q 229 906 229 858 l 229 933 q 267 963 249 947 q 300 994 285 978 q 333 1036 318 1015 q 361 1083 349 1057 q 373 1087 367 1085 q 387 1090 379 1089 q 402 1092 394 1092 q 418 1092 410 1092 q 466 1085 447 1092 q 485 1053 485 1078 q 485 1008 485 1043 q 485 924 485 972 q 485 821 485 875 q 485 717 485 767 q 485 631 485 668 q 485 582 485 594 z "},"²":{"ha":833,"x_min":225,"x_max":608,"o":"m 597 504 q 571 504 593 504 q 516 504 549 504 q 447 504 483 504 q 375 504 410 504 q 315 504 340 504 q 279 504 290 504 q 251 513 264 504 q 232 540 239 522 q 225 581 225 557 l 225 585 q 238 667 225 626 q 286 747 251 708 q 388 814 321 785 q 462 854 436 838 q 497 890 488 871 q 506 931 506 908 q 505 943 506 938 q 501 953 504 949 q 464 980 489 971 q 404 989 439 989 q 326 977 363 989 q 254 939 289 965 l 246 939 q 243 949 244 943 q 241 960 242 954 q 240 972 240 967 q 240 985 240 978 q 244 1019 240 1004 q 260 1046 249 1035 q 317 1079 279 1067 q 411 1092 354 1092 q 522 1070 479 1092 q 587 1010 565 1049 q 608 925 608 972 l 608 918 q 591 849 608 881 q 539 792 574 818 q 449 739 504 765 q 369 692 397 715 q 329 640 340 669 q 317 561 318 610 l 306 613 l 340 589 l 297 589 q 362 603 331 600 q 447 607 393 607 l 532 607 q 588 595 572 607 q 604 556 604 583 q 603 543 604 550 q 602 529 603 536 q 600 516 601 522 q 597 504 599 510 z "},"³":{"ha":833,"x_min":226,"x_max":608,"o":"m 601 946 q 565 855 601 893 q 456 797 529 817 l 494 831 l 494 786 l 456 814 q 544 783 511 803 q 593 736 578 764 q 608 669 608 708 l 608 664 q 582 578 608 615 q 509 519 556 540 q 403 499 463 499 q 302 513 339 499 q 247 546 265 528 q 231 573 236 558 q 226 608 226 588 q 227 622 226 615 q 229 634 228 628 q 233 647 231 640 q 238 658 235 653 l 246 658 q 310 616 275 631 q 392 601 344 601 q 474 617 438 601 q 519 675 510 632 q 497 713 515 696 q 447 743 478 731 q 369 758 415 756 q 340 771 349 758 q 332 808 332 783 q 333 819 332 814 q 334 831 333 825 q 336 842 335 836 q 417 853 382 843 q 475 881 451 864 q 508 919 499 897 q 472 971 503 953 q 396 989 442 989 q 317 975 350 989 q 254 929 283 961 l 246 929 q 242 940 243 935 q 239 951 240 946 q 238 963 238 957 q 238 974 238 968 q 242 1010 238 993 q 263 1044 247 1028 q 315 1076 279 1061 q 404 1092 350 1092 q 513 1072 469 1092 q 579 1022 557 1053 q 601 951 601 990 l 601 946 z "},"¼":{"ha":833,"x_min":21,"x_max":790,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 719 -110 q 709 -112 715 -111 q 697 -115 703 -114 q 685 -115 692 -115 q 671 -115 679 -115 q 627 -103 643 -115 q 611 -57 611 -90 l 611 90 q 613 135 611 113 q 618 178 614 157 q 627 220 622 199 q 640 264 632 242 l 646 264 q 692 250 672 264 q 711 218 711 236 l 711 -35 q 713 -77 711 -60 q 719 -110 715 -94 m 783 11 l 415 11 q 377 37 393 11 q 361 97 361 63 l 361 103 q 369 147 361 119 q 392 209 378 175 q 426 278 407 243 q 463 347 444 314 q 499 408 482 381 q 531 450 517 435 q 569 483 550 474 q 613 493 589 493 q 632 491 624 493 q 649 486 640 489 q 667 478 658 483 q 683 467 675 472 l 683 460 q 635 408 660 436 q 586 346 610 379 q 540 278 563 313 q 499 207 518 243 q 466 135 481 171 q 442 67 451 100 l 456 149 l 456 69 l 414 94 q 478 107 447 103 q 537 113 508 111 q 594 114 565 114 l 742 114 q 780 98 769 114 q 790 56 790 82 q 790 43 790 49 q 788 32 789 38 q 786 22 788 26 q 783 11 785 17 m 31 614 l 265 614 q 364 596 331 614 q 397 547 397 578 q 397 538 397 543 q 397 526 397 532 q 394 515 396 519 q 393 506 393 510 l 94 506 q 40 524 56 506 q 24 574 24 542 q 24 585 24 581 q 26 595 25 590 q 28 605 26 600 q 31 614 29 610 m 278 582 l 190 582 l 196 619 q 183 632 188 625 q 176 651 178 639 q 174 681 174 663 q 174 720 174 693 q 174 783 174 747 q 174 858 174 819 q 174 929 174 896 q 174 986 174 963 l 190 950 l 150 950 l 181 978 q 162 936 172 957 q 139 896 151 915 q 111 857 126 876 q 88 831 100 842 q 57 819 75 819 q 32 838 43 819 q 21 906 21 857 l 21 933 q 60 963 42 947 q 93 994 78 978 q 125 1036 110 1015 q 153 1083 140 1057 q 165 1087 158 1085 q 179 1090 172 1089 q 194 1092 186 1092 q 210 1092 203 1092 q 258 1085 239 1092 q 278 1053 278 1078 q 278 1008 278 1043 q 278 924 278 972 q 278 821 278 875 q 278 717 278 767 q 278 631 278 668 q 278 582 278 594 z "},"½":{"ha":833,"x_min":21,"x_max":793,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 599 767 589 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 750 876 754 906 q 737 815 746 847 q 716 751 728 783 q 689 687 704 718 q 657 629 674 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 543 560 554 558 q 524 564 532 561 q 506 571 515 567 m 328 400 q 288 335 306 368 q 258 270 271 303 q 234 204 244 238 q 215 137 224 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 83 94 79 65 q 97 156 88 124 q 117 221 106 189 q 144 284 129 253 q 176 342 160 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 289 411 278 413 q 310 408 300 410 q 328 400 319 406 m 783 -99 q 757 -99 779 -99 q 701 -99 735 -99 q 631 -99 668 -99 q 560 -99 594 -99 q 501 -99 526 -99 q 465 -99 475 -99 q 436 -90 449 -99 q 417 -63 424 -81 q 411 -22 411 -46 l 411 -18 q 424 65 411 24 q 472 144 438 106 q 572 211 507 182 q 648 251 622 235 q 683 286 674 268 q 692 326 692 304 q 691 340 692 335 q 688 350 690 346 q 650 377 675 368 q 590 386 625 386 q 512 374 549 386 q 440 335 475 363 l 432 335 q 429 346 431 340 q 427 358 428 351 q 426 369 426 364 q 426 382 426 375 q 431 417 426 401 q 444 443 435 432 q 501 476 464 464 q 597 489 539 489 q 708 467 664 489 q 772 407 751 444 q 793 322 793 369 l 793 315 q 776 247 793 278 q 724 188 760 215 q 635 136 689 161 q 554 90 583 113 q 515 36 525 67 q 501 -42 504 6 l 492 10 l 526 -15 l 483 -15 q 548 0 517 -4 q 633 4 579 4 l 717 4 q 774 -8 758 4 q 790 -47 790 -19 q 790 -60 790 -53 q 788 -74 789 -67 q 786 -87 788 -81 q 783 -99 785 -93 m 31 614 l 265 614 q 364 596 331 614 q 397 547 397 578 q 397 538 397 543 q 397 526 397 532 q 394 515 396 519 q 393 506 393 510 l 94 506 q 40 524 56 506 q 24 574 24 542 q 24 585 24 581 q 26 595 25 590 q 28 605 26 600 q 31 614 29 610 m 278 582 l 190 582 l 196 619 q 183 632 188 625 q 176 651 178 639 q 174 681 174 663 q 174 719 174 692 q 174 783 174 747 q 174 858 174 819 q 174 929 174 896 q 174 986 174 963 l 190 950 l 150 950 l 181 978 q 162 936 172 957 q 139 896 151 915 q 111 857 126 876 q 88 831 100 842 q 57 819 75 819 q 32 838 43 819 q 21 906 21 857 l 21 933 q 60 963 42 947 q 93 994 78 978 q 125 1036 110 1015 q 153 1083 140 1057 q 165 1087 158 1085 q 179 1090 172 1089 q 194 1092 186 1092 q 210 1092 203 1092 q 258 1085 239 1092 q 278 1053 278 1078 q 278 1008 278 1043 q 278 924 278 972 q 278 821 278 875 q 278 717 278 767 q 278 631 278 668 q 278 582 278 594 z "},"¾":{"ha":833,"x_min":61,"x_max":790,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 719 -110 q 709 -112 715 -111 q 697 -115 703 -114 q 685 -115 692 -115 q 671 -115 679 -115 q 627 -103 643 -115 q 611 -57 611 -90 l 611 90 q 613 135 611 113 q 618 178 614 157 q 627 220 622 199 q 640 264 632 242 l 646 264 q 692 250 672 264 q 711 218 711 236 l 711 -35 q 713 -77 711 -60 q 719 -110 715 -94 m 783 11 l 415 11 q 377 37 393 11 q 361 97 361 63 l 361 103 q 369 147 361 119 q 392 209 378 175 q 426 278 407 243 q 463 347 444 314 q 499 408 482 381 q 531 450 517 435 q 569 483 550 474 q 613 493 589 493 q 632 491 624 493 q 649 486 640 489 q 667 478 658 483 q 683 467 675 472 l 683 460 q 635 408 660 436 q 586 346 610 379 q 540 278 563 313 q 499 207 518 243 q 466 135 481 171 q 442 67 451 100 l 456 149 l 456 69 l 414 94 q 478 107 449 103 q 537 113 508 111 q 594 114 565 114 l 742 114 q 780 98 769 114 q 790 56 790 82 q 790 43 790 49 q 788 32 789 38 q 786 22 788 26 q 783 11 785 17 m 436 946 q 401 855 436 893 q 292 797 365 817 l 331 831 l 331 786 l 292 814 q 380 783 347 803 q 428 736 413 764 q 443 669 443 708 l 443 664 q 417 578 443 615 q 344 519 390 540 q 239 499 299 499 q 138 513 175 499 q 83 546 101 528 q 67 573 72 558 q 61 608 61 588 q 62 622 61 615 q 64 634 63 628 q 67 647 65 640 q 72 658 69 653 l 81 658 q 146 616 111 631 q 228 601 181 601 q 309 617 272 601 q 356 675 346 632 q 332 713 350 696 q 282 743 314 731 q 204 758 250 756 q 176 771 185 758 q 167 808 167 783 q 167 819 167 814 q 169 831 168 825 q 172 842 171 836 q 252 853 217 843 q 311 881 288 864 q 343 919 335 897 q 308 971 339 953 q 232 989 278 989 q 153 975 186 989 q 90 929 119 961 l 82 929 q 77 940 79 935 q 74 951 75 946 q 73 963 74 957 q 72 974 72 968 q 78 1010 72 993 q 99 1044 83 1028 q 151 1076 115 1061 q 240 1092 186 1092 q 349 1072 306 1092 q 415 1022 393 1053 q 436 951 436 990 l 436 946 z "},"⁰":{"ha":833,"x_min":207,"x_max":628,"o":"m 418 1092 q 536 1056 490 1092 q 605 954 582 1021 q 628 796 628 888 l 628 743 q 604 616 628 674 q 534 524 581 558 q 417 490 488 490 q 301 524 347 490 q 231 615 254 557 q 207 750 207 674 l 207 801 q 231 951 207 885 q 301 1054 254 1017 q 418 1092 349 1092 m 426 994 q 334 945 367 994 q 301 797 301 896 l 301 751 q 313 660 301 701 q 339 600 324 619 q 369 591 354 594 q 410 588 385 588 q 470 603 442 588 q 516 658 499 619 q 533 764 533 697 l 533 806 q 522 911 533 868 q 496 979 511 954 q 467 990 483 986 q 426 994 450 994 m 544 960 l 547 904 l 550 851 l 493 851 l 531 874 q 508 827 524 851 q 472 781 492 803 q 436 744 453 760 q 386 703 414 724 q 330 665 358 682 q 272 633 301 647 l 272 726 l 335 726 l 303 706 q 336 758 311 728 q 389 817 361 789 q 431 856 407 833 q 483 906 454 879 q 544 960 513 933 z "},"⁴":{"ha":833,"x_min":203,"x_max":632,"o":"m 561 493 q 551 490 557 492 q 540 488 546 489 q 527 488 533 488 q 513 488 521 488 q 469 500 485 488 q 453 546 453 513 l 453 693 q 455 738 453 715 q 460 781 457 760 q 469 823 464 801 q 482 867 474 844 l 488 867 q 534 853 514 867 q 554 821 554 839 l 554 568 q 556 526 554 543 q 561 493 557 508 m 625 615 l 257 615 q 219 640 235 615 q 203 700 203 665 l 203 706 q 211 750 203 722 q 234 812 219 778 q 267 881 249 846 q 305 950 286 917 q 342 1010 324 983 q 372 1053 360 1038 q 412 1086 393 1076 q 454 1096 431 1096 q 474 1094 465 1096 q 492 1089 483 1092 q 508 1081 500 1086 q 525 1069 517 1076 l 525 1064 q 476 1010 501 1039 q 428 949 451 982 q 383 881 404 915 q 342 810 361 846 q 308 738 322 774 q 285 669 293 703 l 297 751 l 297 674 l 256 699 q 320 710 290 706 q 378 715 350 714 q 436 717 407 717 l 585 717 q 622 701 613 717 q 632 658 632 685 q 631 647 632 653 q 630 635 631 640 q 628 624 629 629 q 625 615 626 619 z "},"⁵":{"ha":833,"x_min":228,"x_max":606,"o":"m 238 1078 l 526 1078 q 577 1067 560 1078 q 594 1031 594 1057 q 594 1019 594 1025 q 593 1005 594 1013 q 590 990 592 997 q 585 978 588 983 l 282 978 q 240 988 251 978 q 228 1024 228 997 q 228 1036 228 1029 q 231 1050 229 1043 q 233 1065 232 1057 q 238 1078 235 1072 m 606 667 q 583 571 606 610 q 515 511 560 532 q 404 490 469 490 q 310 504 344 490 q 261 532 276 518 q 242 562 247 544 q 236 594 236 579 q 237 606 236 600 q 238 619 238 613 q 241 631 239 625 q 244 643 243 638 l 253 643 q 318 603 281 615 q 397 592 356 592 q 485 611 451 592 q 528 669 519 631 l 528 672 q 492 726 518 710 q 418 742 465 742 q 385 742 401 742 q 350 742 369 742 l 310 742 q 267 748 281 742 q 256 772 253 754 q 260 811 257 788 q 266 862 263 835 q 273 916 269 889 q 281 967 276 943 q 289 1008 285 992 q 315 1006 301 1008 q 342 999 329 1003 q 360 989 354 996 l 354 972 q 365 948 363 961 q 363 915 367 935 q 357 878 361 901 q 349 831 353 854 q 342 792 344 808 l 332 826 l 374 815 l 335 808 q 383 827 357 821 q 443 833 408 833 q 531 814 494 833 q 586 758 567 794 q 606 675 606 722 l 606 667 z "},"⁶":{"ha":833,"x_min":217,"x_max":617,"o":"m 454 1092 q 525 1083 497 1092 q 565 1064 553 1074 q 582 1040 578 1053 q 586 1013 586 1028 q 585 997 586 1004 q 584 983 585 989 q 582 970 583 976 q 579 960 581 964 l 571 960 q 519 983 549 975 q 453 992 489 992 q 394 985 419 992 q 349 964 369 978 q 320 881 329 926 q 311 765 311 836 l 311 744 q 317 667 311 703 q 340 611 324 632 q 376 597 356 603 q 421 592 396 592 q 495 614 467 592 q 524 685 524 636 l 524 692 q 520 725 524 713 q 511 746 517 738 q 476 756 499 753 q 426 760 453 760 q 349 748 388 760 q 282 717 311 736 l 282 801 l 335 801 l 307 785 q 363 834 325 815 q 451 853 400 853 q 538 832 501 853 q 596 774 575 811 q 617 685 617 736 l 617 676 q 592 576 617 618 q 524 513 567 535 q 426 490 482 490 q 315 518 363 490 q 242 607 268 546 q 217 768 217 668 l 217 779 q 245 946 217 876 q 327 1053 274 1015 q 454 1092 381 1092 z "},"⁷":{"ha":833,"x_min":207,"x_max":626,"o":"m 228 1082 q 263 1081 247 1082 q 290 1076 279 1079 q 307 1067 301 1072 q 313 1054 313 1063 q 312 1016 313 1040 q 309 963 311 992 q 306 907 307 935 q 306 860 306 879 q 292 857 299 858 q 279 854 286 856 q 266 852 272 853 q 253 851 260 851 q 218 864 229 851 q 207 901 207 876 q 209 939 207 917 q 214 987 211 961 q 220 1037 217 1013 q 228 1082 224 1061 m 536 994 l 544 951 l 508 994 l 547 981 q 517 976 536 978 q 471 973 499 974 q 404 972 443 972 l 282 972 q 267 982 272 972 q 257 1006 261 992 q 251 1038 253 1021 q 250 1071 250 1056 q 292 1071 265 1071 q 354 1071 319 1071 q 426 1071 389 1071 q 495 1071 463 1071 q 551 1071 528 1071 q 583 1071 575 1071 q 609 1062 600 1071 q 622 1038 618 1053 q 626 1004 626 1022 l 626 996 q 616 954 626 979 q 590 898 606 929 q 556 831 574 867 q 521 754 538 794 q 492 677 503 714 q 474 608 481 640 q 464 549 467 576 q 460 499 461 522 q 451 496 456 497 q 440 493 446 494 q 428 490 435 492 q 417 489 422 489 q 404 489 411 489 q 365 501 376 489 q 354 538 354 513 q 358 571 354 549 q 369 622 361 593 q 386 683 376 651 q 410 742 396 714 q 456 835 432 792 q 501 917 481 878 q 536 994 522 957 z "},"⁸":{"ha":833,"x_min":217,"x_max":617,"o":"m 419 1092 q 497 1081 463 1092 q 558 1050 532 1071 q 597 1002 583 1029 q 610 943 610 975 l 610 936 q 593 873 610 903 q 547 825 576 843 q 475 803 517 807 l 511 826 l 511 778 l 394 814 q 487 865 458 835 q 515 931 515 894 l 515 935 q 513 960 515 949 q 504 982 511 971 q 469 993 492 989 q 421 997 446 997 q 345 977 371 997 q 319 921 319 957 q 340 869 319 889 q 404 835 361 849 l 492 808 q 556 777 528 799 q 601 728 585 756 q 617 668 617 700 l 617 660 q 591 571 617 610 q 520 511 565 532 q 415 490 475 490 q 312 510 357 490 q 242 564 267 529 q 217 644 217 599 l 217 651 q 233 711 217 681 q 283 763 250 742 q 363 788 317 785 l 315 760 l 315 799 l 431 772 q 339 723 368 756 q 304 649 310 690 q 341 601 314 617 q 413 586 368 586 q 487 603 453 586 q 529 654 521 621 q 502 713 526 692 q 433 747 478 733 l 351 772 q 285 806 313 785 q 242 855 257 826 q 226 919 226 883 l 226 926 q 249 1011 226 974 q 316 1070 272 1049 q 419 1092 360 1092 z "},"⁹":{"ha":833,"x_min":217,"x_max":617,"o":"m 415 1092 q 528 1060 483 1092 q 595 968 574 1029 q 617 819 617 907 l 617 804 q 600 651 617 711 q 551 555 583 590 q 474 505 519 519 q 374 490 429 490 q 306 497 333 490 q 268 514 279 504 q 256 536 258 524 q 253 564 253 549 q 253 578 253 571 q 255 592 254 585 q 258 605 256 599 q 263 618 260 611 l 271 618 q 326 597 294 603 q 389 590 358 590 q 442 594 418 590 q 485 608 465 597 q 510 696 503 643 q 518 822 518 749 l 518 831 q 511 910 518 875 q 490 978 504 944 q 455 990 474 986 q 410 993 436 993 q 335 964 358 993 q 311 890 311 935 l 311 885 q 315 846 311 861 q 326 817 318 831 q 359 806 340 808 q 406 803 378 803 q 479 811 440 803 q 554 840 518 819 l 554 760 l 476 760 l 525 778 q 466 728 503 743 q 381 714 429 714 q 294 733 331 714 q 237 789 257 751 q 217 883 217 826 l 217 893 q 238 994 217 949 q 304 1065 260 1039 q 415 1092 349 1092 z "},"₀":{"ha":833,"x_min":207,"x_max":628,"o":"m 418 489 q 536 453 490 489 q 605 351 582 418 q 628 193 628 285 l 628 140 q 604 13 628 71 q 534 -78 581 -44 q 417 -112 488 -112 q 301 -79 347 -112 q 231 13 254 -46 q 207 147 207 71 l 207 199 q 231 348 207 282 q 301 451 254 414 q 418 489 349 489 m 426 392 q 334 342 367 392 q 301 194 301 293 l 301 149 q 313 58 301 99 q 339 -3 324 17 q 369 -12 354 -8 q 410 -15 385 -15 q 470 1 442 -15 q 516 56 499 17 q 533 161 533 94 l 533 203 q 522 308 533 265 q 496 376 511 351 q 467 388 483 383 q 426 392 450 392 m 544 357 l 547 301 l 550 249 l 493 249 l 531 271 q 508 224 524 249 q 472 178 492 200 q 436 142 453 157 q 386 100 414 121 q 330 62 358 79 q 272 31 301 44 l 272 124 l 335 124 l 303 103 q 336 156 311 125 q 389 214 361 186 q 431 253 407 231 q 483 303 454 276 q 544 357 513 331 z "},"₁":{"ha":833,"x_min":229,"x_max":606,"o":"m 239 11 l 474 11 q 572 -7 538 11 q 606 -56 606 -25 q 605 -65 606 -60 q 603 -77 604 -71 q 602 -88 603 -83 q 601 -97 601 -93 l 303 -97 q 248 -79 264 -97 q 232 -29 232 -61 q 233 -17 232 -22 q 234 -8 233 -12 q 236 2 235 -3 q 239 11 238 7 m 485 -21 l 397 -21 l 404 17 q 391 29 396 22 q 383 48 386 36 q 381 76 381 60 q 381 117 381 89 q 381 181 381 144 q 381 255 381 217 q 381 326 381 293 q 381 383 381 360 l 399 347 l 358 347 l 389 375 q 369 333 379 354 q 347 293 358 313 q 319 254 335 274 q 295 228 308 239 q 265 217 282 217 q 240 236 251 217 q 229 303 229 256 l 229 331 q 267 360 249 344 q 300 392 285 375 q 333 433 318 413 q 361 481 349 454 q 373 484 367 482 q 387 488 379 486 q 402 489 394 489 q 418 489 410 489 q 466 482 447 489 q 485 450 485 475 q 485 405 485 440 q 485 321 485 369 q 485 218 485 272 q 485 115 485 164 q 485 28 485 65 q 485 -21 485 -8 z "},"₂":{"ha":833,"x_min":225,"x_max":608,"o":"m 597 -99 q 571 -99 593 -99 q 516 -99 549 -99 q 447 -99 483 -99 q 375 -99 410 -99 q 315 -99 340 -99 q 279 -99 290 -99 q 251 -90 264 -99 q 232 -63 239 -81 q 225 -22 225 -46 l 225 -18 q 238 65 225 24 q 286 144 251 106 q 388 211 321 182 q 462 251 436 235 q 497 287 488 268 q 506 328 506 306 q 505 340 506 335 q 501 350 504 346 q 464 377 489 368 q 404 386 439 386 q 326 374 363 386 q 254 336 289 363 l 246 336 q 243 346 244 340 q 241 358 242 351 q 240 369 240 364 q 240 382 240 375 q 244 417 240 401 q 260 443 249 432 q 317 476 279 464 q 411 489 354 489 q 522 467 479 489 q 587 408 565 446 q 608 322 608 369 l 608 315 q 591 247 608 278 q 539 189 574 215 q 449 136 504 163 q 369 90 397 113 q 329 37 340 67 q 317 -42 318 7 l 306 10 l 340 -14 l 297 -14 q 362 1 331 -3 q 447 4 393 4 l 532 4 q 588 -8 572 4 q 604 -47 604 -19 q 603 -60 604 -53 q 602 -74 603 -67 q 600 -87 601 -81 q 597 -99 599 -93 z "},"₃":{"ha":833,"x_min":226,"x_max":608,"o":"m 601 343 q 565 252 601 290 q 456 194 529 214 l 494 228 l 494 183 l 456 211 q 544 181 511 200 q 593 133 578 161 q 608 67 608 106 l 608 61 q 582 -25 608 13 q 509 -83 556 -62 q 403 -104 463 -104 q 302 -90 339 -104 q 247 -57 265 -75 q 231 -30 236 -44 q 226 6 226 -15 q 227 19 226 13 q 229 31 228 25 q 233 44 231 38 q 238 56 235 50 l 246 56 q 310 13 275 28 q 392 -1 344 -1 q 474 14 438 -1 q 519 72 510 29 q 497 110 515 93 q 447 140 478 128 q 369 156 415 153 q 340 168 349 156 q 332 206 332 181 q 333 217 332 211 q 334 228 333 222 q 336 239 335 233 q 417 251 382 240 q 475 278 451 261 q 508 317 499 294 q 472 368 503 350 q 396 386 442 386 q 317 372 350 386 q 254 326 283 358 l 246 326 q 242 338 243 332 q 239 349 240 343 q 238 360 238 354 q 238 371 238 365 q 242 408 238 390 q 263 442 247 425 q 315 474 279 458 q 404 489 350 489 q 513 469 469 489 q 579 419 557 450 q 601 349 601 388 l 601 343 z "},"₄":{"ha":833,"x_min":203,"x_max":632,"o":"m 561 -110 q 551 -112 557 -111 q 540 -115 546 -114 q 527 -115 533 -115 q 513 -115 521 -115 q 469 -103 485 -115 q 453 -57 453 -90 l 453 90 q 455 135 453 113 q 460 178 457 157 q 469 220 464 199 q 482 264 474 242 l 488 264 q 534 250 514 264 q 554 218 554 236 l 554 -35 q 556 -77 554 -60 q 561 -110 557 -94 m 625 13 l 257 13 q 219 38 235 13 q 203 97 203 63 l 203 103 q 211 147 203 119 q 234 209 219 175 q 267 278 249 243 q 305 347 286 314 q 342 408 324 381 q 372 450 360 435 q 412 483 393 474 q 454 493 431 493 q 474 491 465 493 q 492 486 483 489 q 508 478 500 483 q 525 467 517 474 l 525 461 q 476 408 501 436 q 428 346 451 379 q 383 278 404 313 q 342 207 361 243 q 308 135 322 171 q 285 67 293 100 l 297 149 l 297 71 l 256 96 q 320 107 290 103 q 378 113 350 111 q 436 114 407 114 l 585 114 q 622 98 613 114 q 632 56 632 82 q 631 44 632 50 q 630 32 631 38 q 628 22 629 26 q 625 13 626 17 z "},"₅":{"ha":833,"x_min":228,"x_max":606,"o":"m 238 475 l 526 475 q 577 465 560 475 q 594 428 594 454 q 594 416 594 422 q 593 402 594 410 q 590 388 592 394 q 585 375 588 381 l 282 375 q 240 385 251 375 q 228 421 228 394 q 228 433 228 426 q 231 447 229 440 q 233 462 232 454 q 238 475 235 469 m 606 64 q 583 -32 606 7 q 515 -92 560 -71 q 404 -112 469 -112 q 310 -99 344 -112 q 261 -71 276 -85 q 242 -41 247 -58 q 236 -8 236 -24 q 237 3 236 -3 q 238 16 238 10 q 241 28 239 22 q 244 40 243 35 l 253 40 q 318 1 281 13 q 397 -11 356 -11 q 485 8 451 -11 q 528 67 519 28 l 528 69 q 492 123 518 107 q 418 139 465 139 q 385 139 401 139 q 350 139 369 139 l 310 139 q 267 145 281 139 q 256 169 253 151 q 260 208 257 185 q 266 259 263 232 q 273 313 269 286 q 281 365 276 340 q 289 406 285 389 q 315 403 301 406 q 342 397 329 400 q 360 386 354 393 l 354 369 q 365 345 363 358 q 363 313 367 332 q 357 275 361 299 q 349 228 353 251 q 342 189 344 206 l 332 224 l 374 213 l 335 206 q 383 224 357 218 q 443 231 408 231 q 531 211 494 231 q 586 156 567 192 q 606 72 606 119 l 606 64 z "},"₆":{"ha":833,"x_min":217,"x_max":617,"o":"m 454 489 q 525 480 497 489 q 565 461 553 471 q 582 438 578 450 q 586 410 586 425 q 585 394 586 401 q 584 380 585 386 q 582 367 583 374 q 579 357 581 361 l 571 357 q 519 381 549 372 q 453 389 489 389 q 394 382 419 389 q 349 361 369 375 q 320 278 329 324 q 311 163 311 233 l 311 142 q 317 65 311 100 q 340 8 324 29 q 376 -6 356 0 q 421 -11 396 -11 q 495 11 467 -11 q 524 82 524 33 l 524 89 q 520 122 524 110 q 511 143 517 135 q 476 153 499 150 q 426 157 453 157 q 349 145 388 157 q 282 114 311 133 l 282 199 l 335 199 l 307 182 q 363 231 325 213 q 451 250 400 250 q 538 229 501 250 q 596 171 575 208 q 617 82 617 133 l 617 74 q 592 -26 617 15 q 524 -90 567 -68 q 426 -112 482 -112 q 315 -85 363 -112 q 242 4 268 -57 q 217 165 217 65 l 217 176 q 245 343 217 274 q 327 451 274 413 q 454 489 381 489 z "},"₇":{"ha":833,"x_min":207,"x_max":626,"o":"m 228 479 q 263 478 247 479 q 290 473 279 476 q 307 465 301 469 q 313 451 313 460 q 312 413 313 438 q 309 360 311 389 q 306 304 307 332 q 306 257 306 276 q 292 254 299 256 q 279 251 286 253 q 266 249 272 250 q 253 249 260 249 q 218 261 229 249 q 207 299 207 274 q 209 336 207 314 q 214 384 211 358 q 220 434 217 410 q 228 479 224 458 m 536 392 l 544 349 l 508 392 l 547 378 q 517 373 536 375 q 471 370 499 371 q 404 369 443 369 l 282 369 q 267 379 272 369 q 257 403 261 389 q 251 435 253 418 q 250 468 250 453 q 292 468 265 468 q 354 468 319 468 q 426 468 389 468 q 495 468 463 468 q 551 468 528 468 q 583 468 575 468 q 609 459 600 468 q 622 435 618 450 q 626 401 626 419 l 626 393 q 616 351 626 376 q 590 295 606 326 q 556 228 574 264 q 521 151 538 192 q 492 74 503 111 q 474 6 481 38 q 464 -53 467 -26 q 460 -104 461 -81 q 451 -107 456 -106 q 440 -110 446 -108 q 428 -112 435 -111 q 417 -114 422 -114 q 404 -114 411 -114 q 365 -102 376 -114 q 354 -65 354 -90 q 358 -32 354 -54 q 369 19 361 -10 q 386 80 376 49 q 410 139 396 111 q 456 232 432 189 q 501 315 481 275 q 536 392 522 354 z "},"₈":{"ha":833,"x_min":217,"x_max":617,"o":"m 419 489 q 497 478 463 489 q 558 447 532 468 q 597 399 583 426 q 610 340 610 372 l 610 333 q 593 270 610 300 q 547 222 576 240 q 475 200 517 204 l 511 224 l 511 175 l 394 211 q 487 262 458 232 q 515 328 515 292 l 515 332 q 513 357 515 346 q 504 379 511 368 q 469 390 492 386 q 421 394 446 394 q 345 374 371 394 q 319 318 319 354 q 340 266 319 286 q 404 232 361 246 l 492 206 q 556 174 528 196 q 601 125 585 153 q 617 65 617 97 l 617 57 q 591 -32 617 7 q 520 -92 565 -71 q 415 -112 475 -112 q 312 -93 357 -112 q 242 -39 267 -74 q 217 42 217 -4 l 217 49 q 233 108 217 78 q 283 160 250 139 q 363 185 317 182 l 315 157 l 315 196 l 431 169 q 339 120 368 153 q 304 46 310 88 q 341 -1 314 14 q 413 -17 368 -17 q 487 1 453 -17 q 529 51 521 18 q 502 110 526 89 q 433 144 478 131 l 351 169 q 285 203 313 182 q 242 252 257 224 q 226 317 226 281 l 226 324 q 249 408 226 371 q 316 467 272 446 q 419 489 360 489 z "},"₉":{"ha":833,"x_min":217,"x_max":617,"o":"m 415 489 q 528 458 483 489 q 595 365 574 426 q 617 217 617 304 l 617 201 q 600 48 617 108 q 551 -48 583 -12 q 474 -98 519 -83 q 374 -112 429 -112 q 306 -106 333 -112 q 268 -89 279 -99 q 256 -67 258 -79 q 253 -39 253 -54 q 253 -25 253 -32 q 255 -11 254 -18 q 258 2 256 -4 q 263 15 260 8 l 271 15 q 326 -6 294 0 q 389 -12 358 -12 q 442 -9 418 -12 q 485 6 465 -6 q 510 93 503 40 q 518 219 518 146 l 518 228 q 511 307 518 272 q 490 375 504 342 q 455 387 474 383 q 410 390 436 390 q 335 361 358 390 q 311 288 311 332 l 311 282 q 315 243 311 258 q 326 214 318 228 q 359 203 340 206 q 406 200 378 200 q 479 208 440 200 q 554 238 518 217 l 554 157 l 476 157 l 525 175 q 466 126 503 140 q 381 111 429 111 q 294 130 331 111 q 237 186 257 149 q 217 281 217 224 l 217 290 q 238 391 217 346 q 304 463 260 436 q 415 489 349 489 z "},"⅓":{"ha":833,"x_min":21,"x_max":775,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 768 343 q 732 252 768 290 q 622 194 696 214 l 661 228 l 661 183 l 622 211 q 711 181 678 200 q 760 133 744 161 q 775 67 775 106 l 775 61 q 749 -26 775 11 q 676 -83 722 -62 q 569 -104 629 -104 q 469 -90 506 -104 q 414 -58 432 -75 q 398 -30 403 -44 q 393 6 393 -15 q 394 19 393 13 q 396 31 394 25 q 399 43 397 36 q 404 56 401 50 l 413 56 q 476 13 442 26 q 558 -1 511 -1 q 640 14 604 -1 q 686 72 676 29 q 663 110 682 93 q 613 140 644 128 q 536 154 582 153 q 507 168 515 156 q 499 204 499 181 q 499 217 499 211 q 501 228 500 222 q 503 239 501 233 q 583 251 549 240 q 642 278 618 261 q 675 317 665 294 q 639 368 669 350 q 563 386 608 386 q 483 372 517 386 q 421 326 450 358 l 413 326 q 408 338 410 332 q 406 348 407 343 q 404 359 404 353 q 404 371 404 365 q 409 407 404 389 q 429 442 414 425 q 481 474 446 458 q 571 489 517 489 q 680 469 636 489 q 746 419 724 450 q 768 349 768 388 l 768 343 m 31 614 l 265 614 q 364 596 331 614 q 397 547 397 578 q 397 538 397 543 q 397 526 397 532 q 394 515 396 519 q 393 506 393 510 l 94 506 q 40 524 56 506 q 24 574 24 542 q 24 585 24 581 q 26 595 25 590 q 28 605 26 600 q 31 614 29 610 m 278 582 l 190 582 l 196 619 q 183 632 188 625 q 176 651 178 639 q 174 681 174 663 q 174 719 174 692 q 174 783 174 747 q 174 858 174 819 q 174 929 174 896 q 174 986 174 963 l 190 950 l 150 950 l 181 978 q 162 936 172 957 q 139 896 151 915 q 111 857 126 876 q 88 831 100 842 q 57 819 75 819 q 32 838 43 819 q 21 906 21 857 l 21 933 q 60 963 42 947 q 93 994 78 978 q 125 1036 110 1015 q 153 1083 140 1057 q 165 1087 158 1085 q 179 1090 172 1089 q 194 1092 186 1092 q 210 1092 203 1092 q 258 1085 239 1092 q 278 1053 278 1078 q 278 1008 278 1043 q 278 924 278 972 q 278 821 278 875 q 278 717 278 767 q 278 631 278 668 q 278 582 278 594 z "},"⅔":{"ha":833,"x_min":58,"x_max":775,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 768 343 q 732 252 768 290 q 622 194 696 214 l 661 228 l 661 183 l 622 211 q 711 181 678 200 q 760 133 744 161 q 775 67 775 106 l 775 61 q 749 -26 775 11 q 676 -83 722 -62 q 569 -104 629 -104 q 469 -90 506 -104 q 414 -58 432 -75 q 398 -30 403 -44 q 393 6 393 -15 q 394 19 393 13 q 396 31 394 25 q 399 43 397 36 q 404 56 401 50 l 413 56 q 476 13 442 26 q 558 -1 511 -1 q 640 14 604 -1 q 686 72 676 29 q 663 110 682 93 q 613 140 644 128 q 536 154 582 153 q 507 168 515 156 q 499 204 499 181 q 499 217 499 211 q 501 228 500 222 q 503 239 501 233 q 583 251 549 240 q 642 278 618 261 q 675 317 665 294 q 639 368 669 350 q 563 386 608 386 q 483 372 517 386 q 421 326 450 358 l 413 326 q 408 338 410 332 q 406 348 407 343 q 404 359 404 353 q 404 371 404 365 q 409 407 404 389 q 429 442 414 425 q 481 474 446 458 q 571 489 517 489 q 680 469 636 489 q 746 419 724 450 q 768 349 768 388 l 768 343 m 431 504 q 404 504 426 504 q 349 504 382 504 q 280 504 317 504 q 208 504 243 504 q 149 504 174 504 q 113 504 124 504 q 85 513 97 504 q 65 540 72 522 q 58 581 58 557 l 58 585 q 72 667 58 626 q 119 747 85 708 q 221 814 154 785 q 295 854 269 838 q 330 890 321 871 q 339 931 339 908 q 338 943 339 938 q 335 953 338 949 q 297 980 322 971 q 238 989 272 989 q 159 977 196 989 q 88 939 122 965 l 79 939 q 76 949 78 943 q 74 960 75 954 q 74 972 74 967 q 74 985 74 978 q 78 1019 74 1004 q 93 1046 82 1035 q 150 1079 113 1067 q 244 1092 188 1092 q 356 1070 313 1092 q 420 1010 399 1049 q 442 925 442 972 l 442 918 q 424 849 442 881 q 372 792 407 818 q 282 739 338 765 q 202 692 231 715 q 163 640 174 669 q 150 561 151 610 l 139 613 l 174 589 l 131 589 q 195 603 164 600 q 281 607 226 607 l 365 607 q 422 595 406 607 q 438 556 438 583 q 437 543 438 550 q 435 529 436 536 q 433 516 435 522 q 431 504 432 510 z "},"⅛":{"ha":833,"x_min":21,"x_max":781,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 583 489 q 662 478 626 489 q 722 447 697 467 q 760 399 747 426 q 774 340 774 372 l 774 333 q 758 270 774 300 q 711 222 742 240 q 639 199 681 203 l 675 224 l 675 175 l 560 211 q 651 262 622 232 q 679 328 679 292 l 679 332 q 677 357 679 346 q 669 379 675 368 q 633 390 657 386 q 585 394 610 394 q 509 374 535 394 q 483 318 483 353 q 504 266 483 286 q 569 232 525 246 l 657 206 q 721 174 693 196 q 765 125 749 153 q 781 65 781 97 l 781 57 q 755 -33 781 6 q 684 -92 729 -71 q 579 -112 639 -112 q 476 -93 521 -112 q 406 -39 431 -74 q 381 40 381 -4 l 381 47 q 397 108 381 78 q 447 160 414 139 q 528 183 481 182 l 481 157 l 481 196 l 596 169 q 503 119 532 153 q 469 46 474 86 q 506 -1 479 14 q 576 -17 532 -17 q 651 1 617 -17 q 693 51 685 18 q 667 110 690 89 q 597 144 643 131 l 515 169 q 449 203 476 182 q 406 252 421 224 q 390 317 390 281 l 390 324 q 413 408 390 371 q 480 467 436 444 q 583 489 524 489 m 31 614 l 265 614 q 364 596 331 614 q 397 547 397 578 q 397 538 397 543 q 397 526 397 532 q 394 515 396 519 q 393 506 393 510 l 94 506 q 40 524 56 506 q 24 574 24 542 q 24 585 24 581 q 26 595 25 590 q 28 605 26 600 q 31 614 29 610 m 278 582 l 190 582 l 196 619 q 183 632 188 625 q 176 651 178 639 q 174 681 174 663 q 174 719 174 692 q 174 783 174 747 q 174 858 174 819 q 174 929 174 896 q 174 986 174 963 l 190 950 l 150 950 l 181 978 q 162 936 172 957 q 139 896 151 915 q 111 857 126 876 q 88 831 100 842 q 57 819 75 819 q 32 838 43 819 q 21 906 21 857 l 21 933 q 60 963 42 947 q 93 994 78 978 q 125 1036 110 1015 q 153 1083 140 1057 q 165 1087 158 1085 q 179 1090 172 1089 q 194 1092 186 1092 q 210 1092 203 1092 q 258 1085 239 1092 q 278 1053 278 1078 q 278 1008 278 1043 q 278 924 278 972 q 278 821 278 875 q 278 717 278 767 q 278 631 278 668 q 278 582 278 594 z "},"⅜":{"ha":833,"x_min":61,"x_max":781,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 583 489 q 662 478 626 489 q 722 447 697 467 q 760 399 747 426 q 774 340 774 372 l 774 333 q 758 270 774 300 q 711 222 742 240 q 639 199 681 203 l 675 224 l 675 175 l 560 211 q 651 262 622 232 q 679 328 679 292 l 679 332 q 677 357 679 346 q 669 379 675 368 q 633 390 657 386 q 585 394 610 394 q 509 374 535 394 q 483 318 483 353 q 504 266 483 286 q 569 232 525 246 l 657 206 q 721 174 693 196 q 765 125 749 153 q 781 65 781 97 l 781 57 q 755 -33 781 6 q 684 -92 729 -71 q 579 -112 639 -112 q 476 -93 521 -112 q 406 -39 431 -74 q 381 40 381 -4 l 381 47 q 397 108 381 78 q 447 160 414 139 q 528 183 481 182 l 481 157 l 481 196 l 596 169 q 503 119 532 153 q 469 46 474 86 q 506 -1 479 14 q 576 -17 532 -17 q 651 1 617 -17 q 693 51 685 18 q 667 110 690 89 q 597 144 643 131 l 515 169 q 449 203 476 182 q 406 252 421 224 q 390 317 390 281 l 390 324 q 413 408 390 371 q 480 467 436 444 q 583 489 524 489 m 436 946 q 401 855 436 893 q 292 797 365 817 l 331 831 l 331 786 l 292 814 q 380 783 347 803 q 428 736 413 764 q 443 669 443 708 l 443 664 q 417 578 443 615 q 344 519 390 540 q 239 499 299 499 q 138 513 175 499 q 83 546 101 528 q 67 573 72 558 q 61 608 61 588 q 62 622 61 615 q 64 634 63 628 q 67 647 65 640 q 72 658 69 653 l 81 658 q 146 616 111 631 q 228 601 181 601 q 309 617 272 601 q 356 675 346 632 q 332 713 350 696 q 282 743 314 731 q 204 758 250 756 q 176 771 185 758 q 167 808 167 783 q 167 819 167 814 q 169 831 168 825 q 172 842 171 836 q 252 853 217 843 q 311 881 288 864 q 343 919 335 897 q 308 971 339 953 q 232 989 278 989 q 153 975 186 989 q 90 929 119 961 l 82 929 q 77 940 79 935 q 74 951 75 946 q 73 963 74 957 q 72 974 72 968 q 78 1010 72 993 q 99 1044 83 1028 q 151 1076 115 1061 q 240 1092 186 1092 q 349 1072 306 1092 q 415 1022 393 1053 q 436 951 436 990 l 436 946 z "},"⅝":{"ha":833,"x_min":69,"x_max":781,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 583 489 q 662 478 626 489 q 722 447 697 467 q 760 399 747 426 q 774 340 774 372 l 774 333 q 758 270 774 300 q 711 222 742 240 q 639 199 681 203 l 675 224 l 675 175 l 560 211 q 651 262 622 232 q 679 328 679 292 l 679 332 q 677 357 679 346 q 669 379 675 368 q 633 390 657 386 q 585 394 610 394 q 509 374 535 394 q 483 318 483 353 q 504 266 483 286 q 569 232 525 246 l 657 206 q 721 174 693 196 q 765 125 749 153 q 781 65 781 97 l 781 57 q 755 -33 781 6 q 684 -92 729 -71 q 579 -112 639 -112 q 476 -93 521 -112 q 406 -39 431 -74 q 381 40 381 -4 l 381 47 q 397 108 381 78 q 447 160 414 139 q 528 183 481 182 l 481 157 l 481 196 l 596 169 q 503 119 532 153 q 469 46 474 86 q 506 -1 479 14 q 576 -17 532 -17 q 651 1 617 -17 q 693 51 685 18 q 667 110 690 89 q 597 144 643 131 l 515 169 q 449 203 476 182 q 406 252 421 224 q 390 317 390 281 l 390 324 q 413 408 390 371 q 480 467 436 444 q 583 489 524 489 m 79 1078 l 368 1078 q 419 1067 401 1078 q 436 1031 436 1057 q 436 1019 436 1025 q 435 1005 436 1013 q 431 990 433 997 q 426 978 429 983 l 122 978 q 81 988 93 978 q 69 1024 69 997 q 70 1036 69 1029 q 72 1050 71 1043 q 75 1065 74 1057 q 79 1078 76 1072 m 447 667 q 424 571 447 610 q 356 511 400 532 q 246 490 311 490 q 152 504 186 490 q 103 532 118 518 q 83 562 89 544 q 78 594 78 579 q 78 606 78 600 q 80 619 79 613 q 83 631 81 625 q 86 643 85 638 l 94 643 q 160 603 122 615 q 239 592 197 592 q 327 611 293 592 q 369 669 361 631 l 369 672 q 333 726 360 710 q 258 742 307 742 q 227 742 243 742 q 192 742 211 742 l 151 742 q 108 748 122 742 q 96 772 94 754 q 101 811 99 788 q 107 862 104 835 q 114 916 110 889 q 122 967 118 943 q 131 1008 126 992 q 156 1006 142 1008 q 183 999 171 1003 q 201 989 196 996 l 196 972 q 206 948 204 961 q 204 915 208 935 q 199 878 203 901 q 190 831 194 854 q 183 792 186 808 l 174 826 l 215 815 l 176 808 q 224 827 199 821 q 285 833 250 833 q 372 814 336 833 q 428 758 408 794 q 447 675 447 722 l 447 667 z "},"⅞":{"ha":833,"x_min":79,"x_max":781,"o":"m 506 571 q 545 635 528 603 q 576 701 563 668 q 600 767 590 733 q 618 835 610 801 q 631 905 626 869 q 640 976 636 940 q 652 981 646 979 q 665 983 658 982 q 681 984 672 983 q 699 985 689 985 q 741 972 728 985 q 754 929 754 958 q 749 876 754 906 q 736 815 744 847 q 716 751 728 783 q 690 687 704 718 q 658 629 675 656 q 622 583 640 603 q 597 563 610 568 q 567 558 585 558 q 549 559 557 558 q 533 562 542 560 q 519 566 525 564 q 506 571 513 568 m 328 400 q 289 336 307 369 q 257 270 271 303 q 233 204 243 238 q 215 137 222 171 q 202 67 207 103 q 193 -6 197 32 q 181 -8 188 -7 q 168 -11 175 -10 q 153 -12 161 -12 q 135 -12 144 -12 q 92 1 106 -12 q 79 42 79 14 q 84 94 79 65 q 97 156 89 124 q 117 221 106 189 q 144 284 129 253 q 176 342 158 315 q 211 389 193 369 q 235 408 224 404 q 265 413 246 413 q 283 412 275 413 q 300 410 292 411 q 315 406 308 408 q 328 400 321 404 m 583 489 q 662 478 626 489 q 722 447 697 467 q 760 399 747 426 q 774 340 774 372 l 774 333 q 758 270 774 300 q 711 222 742 240 q 639 199 681 203 l 675 224 l 675 175 l 560 211 q 651 262 622 232 q 679 328 679 292 l 679 332 q 677 357 679 346 q 669 379 675 368 q 633 390 657 386 q 585 394 610 394 q 509 374 535 394 q 483 318 483 353 q 504 266 483 286 q 569 232 525 246 l 657 206 q 721 174 693 196 q 765 125 749 153 q 781 65 781 97 l 781 57 q 755 -33 781 6 q 684 -92 729 -71 q 579 -112 639 -112 q 476 -93 521 -112 q 406 -39 431 -74 q 381 40 381 -4 l 381 47 q 397 108 381 78 q 447 160 414 139 q 528 183 481 182 l 481 157 l 481 196 l 596 169 q 503 119 532 153 q 469 46 474 86 q 506 -1 479 14 q 576 -17 532 -17 q 651 1 617 -17 q 693 51 685 18 q 667 110 690 89 q 597 144 643 131 l 515 169 q 449 203 476 182 q 406 252 421 224 q 390 317 390 281 l 390 324 q 413 408 390 371 q 480 467 436 444 q 583 489 524 489 m 103 1082 q 138 1081 122 1082 q 165 1076 154 1079 q 182 1067 176 1072 q 188 1054 188 1063 q 187 1016 188 1040 q 184 963 186 992 q 181 907 182 935 q 181 860 181 879 q 167 857 174 858 q 154 854 161 856 q 141 852 147 853 q 128 851 135 851 q 93 864 104 851 q 82 901 82 876 q 84 939 82 917 q 89 987 86 961 q 95 1037 92 1013 q 103 1082 99 1061 m 411 994 l 419 951 l 383 994 l 422 981 q 392 976 411 978 q 346 973 374 974 q 279 972 318 972 l 157 972 q 142 982 147 972 q 132 1006 136 992 q 126 1038 128 1021 q 125 1071 125 1056 q 167 1071 140 1071 q 229 1071 194 1071 q 301 1071 264 1071 q 370 1071 338 1071 q 426 1071 403 1071 q 458 1071 450 1071 q 484 1062 475 1071 q 497 1038 493 1053 q 501 1004 501 1022 l 501 996 q 491 954 501 979 q 465 898 481 929 q 431 831 449 867 q 396 754 413 794 q 367 677 378 714 q 349 608 356 640 q 339 549 342 576 q 335 499 336 522 q 326 496 331 497 q 315 493 321 494 q 303 490 310 492 q 292 489 297 489 q 279 489 286 489 q 240 501 251 489 q 229 538 229 513 q 233 571 229 549 q 244 622 236 593 q 261 683 251 651 q 285 742 271 714 q 331 835 307 792 q 376 917 356 878 q 411 994 397 957 z "},"_":{"ha":833,"x_min":78,"x_max":763,"o":"m 78 -110 l 701 -110 q 738 -119 725 -110 q 757 -147 751 -128 q 763 -193 763 -165 q 761 -215 763 -203 q 758 -237 760 -226 l 160 -237 q 108 -228 125 -237 q 84 -194 90 -218 q 78 -129 78 -171 q 78 -119 78 -125 q 78 -110 78 -114 z "},"-":{"ha":833,"x_min":147,"x_max":693,"o":"m 147 479 l 633 479 q 669 472 656 479 q 688 446 682 464 q 693 397 693 428 q 692 376 693 388 q 689 353 690 364 l 226 353 q 185 357 201 353 q 161 373 169 361 q 150 406 153 385 q 147 461 147 428 q 147 471 147 465 q 147 479 147 476 z "},"‐":{"ha":833,"x_min":147,"x_max":693,"o":"m 147 479 l 633 479 q 669 472 656 479 q 688 446 682 464 q 693 397 693 428 q 692 376 693 388 q 689 353 690 364 l 226 353 q 185 357 201 353 q 161 373 169 361 q 150 406 153 385 q 147 461 147 428 q 147 471 147 465 q 147 479 147 476 z "},"‒":{"ha":833,"x_min":147,"x_max":693,"o":"m 147 576 l 633 576 q 669 569 656 576 q 688 543 682 561 q 693 494 693 525 q 692 473 693 485 q 689 450 690 461 l 226 450 q 185 454 201 450 q 161 470 169 458 q 150 503 153 482 q 147 558 147 525 q 147 568 147 563 q 147 576 147 574 z "},"–":{"ha":833,"x_min":68,"x_max":765,"o":"m 68 479 l 704 479 q 741 470 728 479 q 760 443 754 461 q 765 397 765 425 q 764 376 765 388 q 761 353 763 364 l 149 353 q 102 363 119 353 q 76 397 85 374 q 68 461 68 421 q 68 471 68 465 q 68 479 68 476 z "},"—":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 479 l 803 479 q 838 470 825 479 q 856 443 851 461 q 861 397 861 425 q 860 376 861 388 q 857 353 858 364 l 50 353 q 5 363 22 353 q -20 397 -12 374 q -28 461 -28 421 q -28 471 -28 465 q -28 479 -28 476 z "},"―":{"ha":833,"x_min":-28,"x_max":861,"o":"m -28 479 l 803 479 q 838 470 825 479 q 856 443 851 461 q 861 397 861 425 q 860 376 861 388 q 857 353 858 364 l 50 353 q 5 363 22 353 q -20 397 -12 374 q -28 461 -28 421 q -28 471 -28 465 q -28 479 -28 476 z "},"(":{"ha":833,"x_min":283,"x_max":686,"o":"m 518 1031 q 558 1060 539 1051 q 599 1069 576 1069 q 635 1065 619 1069 q 663 1055 650 1061 q 686 1039 675 1049 l 686 1032 q 542 854 600 951 q 455 647 483 757 q 426 419 426 538 l 426 411 q 456 183 426 293 q 542 -24 485 74 q 686 -203 600 -121 l 686 -210 q 663 -225 675 -218 q 635 -235 650 -232 q 599 -239 619 -239 q 558 -230 576 -239 q 518 -200 539 -221 q 390 -30 443 -125 q 310 177 338 65 q 283 411 283 289 l 283 419 q 310 653 283 542 q 390 860 338 764 q 518 1031 443 956 z "},")":{"ha":833,"x_min":147,"x_max":550,"o":"m 315 -200 q 276 -230 296 -221 q 235 -239 257 -239 q 199 -235 215 -239 q 171 -225 183 -232 q 147 -210 158 -218 l 147 -203 q 292 -24 235 -121 q 378 183 350 74 q 407 411 407 293 l 407 419 q 378 648 407 539 q 291 854 349 757 q 147 1032 233 951 l 147 1039 q 171 1055 158 1049 q 199 1065 183 1061 q 235 1069 215 1069 q 276 1060 257 1069 q 315 1031 296 1051 q 443 860 390 956 q 523 653 496 764 q 550 419 550 542 l 550 411 q 523 177 550 289 q 443 -30 496 65 q 315 -200 390 -125 z "},"[":{"ha":833,"x_min":271,"x_max":715,"o":"m 711 -224 l 371 -224 q 340 -214 356 -224 q 313 -187 325 -204 q 292 -152 300 -171 q 283 -115 283 -133 q 283 139 283 11 q 283 394 283 267 q 283 648 283 522 q 283 897 283 774 q 281 974 283 938 q 271 1049 279 1011 q 300 1054 286 1053 q 332 1056 314 1056 l 664 1056 q 702 1035 690 1056 q 714 974 714 1014 q 713 949 714 961 q 707 929 711 938 l 417 929 q 417 673 417 801 q 417 416 417 544 q 417 159 417 288 q 417 -97 417 31 l 660 -97 q 702 -117 689 -97 q 715 -182 715 -137 q 714 -204 715 -193 q 711 -224 713 -215 z "},"]":{"ha":833,"x_min":118,"x_max":563,"o":"m 122 1056 l 463 1056 q 493 1046 478 1056 q 521 1019 508 1036 q 542 984 533 1003 q 550 947 550 965 q 550 693 550 821 q 550 438 550 565 q 550 184 550 310 q 550 -65 550 58 q 553 -142 550 -106 q 563 -217 556 -179 q 533 -222 547 -221 q 501 -224 519 -224 l 169 -224 q 131 -203 143 -224 q 119 -142 119 -182 q 121 -117 119 -128 q 126 -97 122 -106 l 417 -97 q 417 159 417 31 q 417 416 417 288 q 417 673 417 544 q 417 929 417 801 l 174 929 q 131 949 144 929 q 118 1014 118 969 q 119 1036 118 1025 q 122 1056 121 1047 z "},"{":{"ha":833,"x_min":157,"x_max":715,"o":"m 517 201 q 507 126 517 163 q 485 60 497 90 q 460 3 472 29 q 444 -42 449 -22 q 444 -54 444 -49 q 444 -64 443 -60 q 512 -97 469 -87 q 615 -106 554 -106 q 660 -102 640 -106 q 701 -92 679 -99 l 710 -92 q 713 -110 713 -99 q 714 -135 714 -122 q 692 -209 714 -179 q 624 -239 671 -239 l 617 -239 q 465 -222 529 -239 q 365 -171 400 -206 q 329 -81 329 -136 l 329 -75 q 339 -18 329 -47 q 362 43 349 11 q 385 110 375 75 q 394 188 394 146 q 374 275 394 238 q 313 334 353 313 q 217 356 274 356 l 213 356 q 169 374 182 356 q 157 429 157 392 q 159 453 157 442 q 165 475 161 465 l 186 475 q 301 497 254 475 q 371 556 347 518 q 394 643 394 593 q 385 720 394 685 q 362 785 375 756 q 339 844 349 815 q 329 900 329 872 l 329 908 q 368 996 329 960 q 474 1051 407 1032 q 625 1069 540 1069 l 632 1069 q 693 1043 671 1069 q 715 979 715 1017 q 714 951 715 964 q 710 926 713 938 l 701 926 q 665 935 683 933 q 621 938 646 938 q 516 925 564 938 q 444 886 468 913 q 445 878 444 882 q 446 868 446 874 q 462 824 450 849 q 486 769 474 800 q 508 704 499 739 q 517 629 517 669 q 475 499 517 551 q 356 421 433 446 l 356 413 q 477 333 438 386 q 517 201 517 279 z "},"}":{"ha":833,"x_min":118,"x_max":676,"o":"m 317 629 q 326 704 317 668 q 349 771 336 740 q 373 827 361 801 q 389 872 385 853 q 390 885 389 879 q 389 894 390 890 q 322 927 364 918 q 218 936 281 936 q 174 933 193 936 q 132 922 154 931 l 124 922 q 121 941 122 929 q 119 965 119 953 q 141 1040 119 1010 q 210 1069 163 1069 l 217 1069 q 369 1053 306 1069 q 469 1002 433 1036 q 504 911 504 968 l 504 906 q 494 849 504 878 q 472 788 485 819 q 449 720 458 756 q 439 643 439 685 q 460 556 439 594 q 521 497 481 518 q 617 475 561 475 l 621 475 q 664 457 651 475 q 676 401 676 439 q 674 377 676 389 q 668 356 672 365 l 647 356 q 533 335 579 356 q 463 276 486 314 q 439 188 439 238 q 449 110 439 146 q 472 45 458 75 q 494 -13 485 15 q 504 -69 504 -42 l 504 -78 q 465 -165 504 -129 q 360 -220 426 -201 q 208 -239 293 -239 l 201 -239 q 140 -212 163 -239 q 118 -149 118 -186 q 119 -119 118 -133 q 124 -96 121 -106 l 132 -96 q 169 -104 151 -101 q 213 -107 188 -107 q 317 -94 269 -107 q 389 -56 365 -82 q 389 -47 389 -51 q 388 -37 389 -43 q 372 6 383 -18 q 348 61 361 31 q 326 126 335 92 q 317 201 317 161 q 359 332 317 279 q 478 410 401 385 l 478 418 q 357 498 397 444 q 317 629 317 551 z "},"⟨":{"ha":833,"x_min":214,"x_max":615,"o":"m 615 18 l 615 10 q 597 4 606 7 q 578 0 588 1 q 556 -2 568 -1 q 528 -3 543 -3 q 470 9 492 -3 q 424 49 449 21 q 385 97 406 68 q 344 159 365 125 q 304 230 324 193 q 267 303 285 267 q 238 372 250 340 q 218 435 222 413 q 214 485 214 458 q 214 497 214 492 q 215 509 214 503 q 215 521 215 515 q 217 532 215 526 q 266 651 239 594 q 322 758 293 708 q 379 850 351 808 q 429 922 407 892 q 470 960 451 950 q 518 971 489 971 q 542 970 531 971 q 567 967 554 969 q 592 964 579 965 q 615 958 604 963 l 615 950 q 540 848 578 903 q 467 733 503 793 q 401 611 432 674 q 343 485 369 549 q 423 306 378 390 q 518 149 468 221 q 615 18 568 78 z "},"⟩":{"ha":833,"x_min":218,"x_max":619,"o":"m 218 949 l 218 957 q 237 963 228 961 q 256 967 246 965 q 278 969 265 968 q 306 971 290 971 q 363 959 342 971 q 410 918 385 947 q 448 870 428 899 q 489 808 468 842 q 529 738 510 774 q 566 665 549 701 q 594 596 583 628 q 615 532 611 556 q 619 482 619 508 q 619 470 619 476 q 619 458 619 464 q 618 447 618 453 q 617 436 618 442 q 567 317 594 374 q 511 209 540 260 q 455 117 482 158 q 404 46 428 76 q 364 8 382 18 q 315 -3 346 -3 q 291 -2 303 -3 q 267 0 279 -1 q 242 3 254 1 q 218 8 229 6 l 218 17 q 293 119 256 65 q 366 233 331 174 q 433 356 401 293 q 490 483 464 419 q 410 662 456 578 q 316 818 365 746 q 218 949 267 890 z "},"#":{"ha":833,"x_min":39,"x_max":793,"o":"m 300 993 q 322 999 310 997 q 346 1000 335 1000 q 388 990 371 1000 q 401 943 406 981 q 387 749 399 857 q 351 522 375 642 q 290 276 328 401 q 199 28 253 150 q 162 -18 182 -8 q 114 -26 142 -28 q 88 -23 97 -26 q 68 -15 78 -19 q 172 249 131 115 q 241 515 214 383 q 282 767 268 646 q 300 993 296 888 m 579 993 q 595 997 588 996 q 610 999 603 999 q 626 1000 618 1000 q 667 990 650 1000 q 682 943 685 979 q 667 749 679 857 q 630 521 654 642 q 568 274 606 400 q 476 26 531 149 q 441 -18 460 -8 q 393 -28 422 -28 q 374 -26 382 -28 q 360 -22 367 -25 q 349 -17 354 -19 q 452 249 410 115 q 521 515 494 383 q 561 767 547 646 q 579 993 575 889 m 793 608 l 164 608 q 117 626 129 608 q 104 679 104 644 q 104 688 104 683 q 105 697 104 692 q 106 706 106 701 q 108 715 107 710 q 111 724 110 719 l 713 724 q 749 719 736 724 q 769 708 761 715 q 787 676 781 696 q 793 626 793 657 q 793 623 793 625 q 793 619 793 621 q 793 615 793 617 q 793 611 793 613 q 793 608 793 610 m 39 364 l 689 364 q 737 347 724 364 q 750 293 750 329 q 749 285 750 289 q 749 276 749 281 q 748 267 749 271 q 747 258 747 263 q 746 249 746 253 l 119 249 q 84 253 97 249 q 64 264 71 257 q 45 296 51 276 q 39 346 39 315 q 39 349 39 347 q 39 353 39 351 q 39 358 39 356 q 39 361 39 360 q 39 364 39 363 z "},"%":{"ha":833,"x_min":29,"x_max":804,"o":"m 247 986 q 358 956 310 986 q 432 871 406 925 q 458 744 458 817 l 458 736 q 431 608 458 663 q 355 524 404 554 q 238 494 306 494 q 85 557 140 494 q 29 726 29 619 l 29 735 q 56 867 29 810 q 133 955 83 924 q 247 986 182 986 m 122 722 q 129 667 122 696 q 156 618 136 638 q 190 608 174 610 q 215 606 207 606 q 315 644 282 606 q 349 751 349 682 l 349 758 q 339 829 349 796 q 301 888 329 863 q 251 894 281 894 q 158 849 194 894 q 122 731 122 803 l 122 722 m 593 478 q 702 447 654 478 q 777 363 750 417 q 804 236 804 308 l 804 228 q 777 100 804 154 q 701 16 750 46 q 583 -14 651 -14 q 431 49 486 -14 q 375 218 375 111 l 375 226 q 402 358 375 301 q 478 447 429 415 q 593 478 528 478 m 468 214 q 474 158 468 188 q 500 110 481 129 q 535 99 518 101 q 560 97 551 97 q 661 135 628 97 q 694 243 694 174 l 694 250 q 685 321 694 288 q 646 379 675 354 q 596 386 625 386 q 503 340 539 386 q 468 222 468 294 l 468 214 m 494 564 q 533 630 515 597 q 564 696 550 663 q 588 763 578 729 q 606 831 599 796 q 619 901 614 865 q 625 974 624 936 q 641 977 633 975 q 658 981 649 979 q 675 983 667 982 q 692 983 683 983 q 729 977 715 983 q 750 958 743 971 q 757 922 757 944 q 751 869 757 899 q 737 808 746 840 q 714 744 728 776 q 684 681 700 711 q 650 626 668 651 q 613 581 632 600 q 578 558 593 564 q 544 551 564 551 q 531 552 538 551 q 517 555 524 553 q 506 559 511 557 q 494 564 500 561 m 339 407 q 301 342 318 375 q 269 276 283 308 q 245 209 256 243 q 227 141 235 175 q 215 71 219 107 q 208 -1 210 35 q 192 -6 200 -4 q 176 -10 185 -8 q 158 -12 167 -11 q 142 -12 150 -12 q 105 -6 119 -12 q 83 15 90 1 q 76 49 76 28 q 82 102 76 74 q 97 163 88 131 q 119 227 106 194 q 149 290 133 260 q 183 347 165 321 q 221 392 201 372 q 255 414 240 408 q 289 419 269 419 q 303 419 296 419 q 316 417 310 418 q 328 413 322 415 q 339 407 335 411 z "},"‰":{"ha":833,"x_min":15,"x_max":817,"o":"m 65 364 q 46 369 54 361 q 38 394 38 376 q 40 415 38 406 q 50 436 43 424 q 185 488 117 458 q 320 554 253 518 q 452 632 388 590 q 576 718 517 674 q 687 810 635 763 q 781 908 739 858 q 791 887 788 899 q 797 861 794 875 q 800 833 799 847 q 801 806 801 818 q 791 747 801 768 q 763 711 781 726 q 649 625 710 665 q 522 547 589 585 q 381 477 454 510 q 228 417 307 444 q 65 364 149 389 m 15 785 q 39 891 15 846 q 104 961 63 936 q 203 986 146 986 q 297 962 257 986 q 360 894 338 938 q 383 793 383 851 l 383 788 q 332 645 383 697 q 193 593 281 593 q 99 615 139 593 q 37 679 58 638 q 15 778 15 721 l 15 785 m 100 776 q 111 724 100 747 q 142 686 122 701 q 157 683 149 683 q 174 682 165 682 q 257 713 229 682 q 285 800 285 744 l 285 806 q 274 869 285 844 q 242 908 264 894 q 224 911 233 911 q 206 911 215 911 q 129 876 158 911 q 100 782 100 840 l 100 776 m 163 179 q 185 284 163 239 q 251 354 208 329 q 350 379 293 379 q 466 326 421 379 q 511 186 511 274 l 511 181 q 465 39 511 92 q 340 -14 419 -14 q 210 36 257 -14 q 163 172 163 86 l 163 179 m 247 169 q 258 118 247 142 q 289 79 269 94 q 303 76 296 76 q 321 75 311 75 q 404 106 376 75 q 432 193 432 138 l 432 200 q 422 264 432 239 q 389 303 411 289 q 372 304 381 304 q 353 304 363 304 q 276 269 306 304 q 247 176 247 235 l 247 169 m 817 181 q 765 39 817 92 q 626 -14 714 -14 q 506 36 550 -14 q 461 172 461 86 l 461 179 q 483 284 461 239 q 544 354 506 329 q 635 379 583 379 q 729 355 689 379 q 793 288 769 331 q 817 186 817 244 l 817 181 m 533 169 q 544 119 533 142 q 574 81 554 96 q 589 76 581 78 q 607 75 597 75 q 690 106 663 75 q 718 193 718 138 l 718 200 q 708 264 718 239 q 674 303 697 289 q 657 304 667 304 q 639 304 647 304 q 562 269 590 304 q 533 176 533 235 l 533 169 z "},"\'":{"ha":833,"x_min":315,"x_max":496,"o":"m 475 613 q 456 610 467 611 q 435 610 446 610 q 369 624 389 610 q 347 672 350 638 l 333 910 q 330 972 332 949 q 324 1010 328 994 q 315 1042 321 1025 q 338 1046 325 1044 q 363 1047 350 1047 q 465 1017 433 1047 q 492 919 496 986 l 475 613 z "},"\\"":{"ha":833,"x_min":156,"x_max":656,"o":"m 317 613 q 298 610 308 611 q 276 610 288 610 q 211 624 231 610 q 189 672 192 638 l 175 910 q 172 972 174 949 q 166 1010 169 994 q 156 1042 163 1026 q 180 1046 167 1044 q 208 1047 193 1047 q 307 1018 276 1047 q 333 929 338 989 l 317 613 m 633 613 q 615 610 625 611 q 594 610 606 610 q 530 624 550 610 q 508 672 510 638 l 486 1042 q 509 1046 499 1044 q 532 1047 519 1047 q 626 1017 596 1047 q 651 919 656 986 l 633 613 z "},"‘":{"ha":833,"x_min":310,"x_max":563,"o":"m 478 1049 q 522 1044 501 1049 q 563 1026 542 1039 q 508 903 528 964 q 479 774 488 843 q 471 613 471 704 q 453 608 461 610 q 436 605 444 606 q 419 603 428 604 q 401 603 411 603 q 353 610 374 603 q 321 634 332 617 q 310 682 310 651 q 325 817 310 750 q 367 940 340 885 q 424 1028 393 996 q 447 1044 436 1039 q 478 1049 458 1049 z "},"’":{"ha":833,"x_min":290,"x_max":543,"o":"m 375 603 q 331 608 351 603 q 290 625 310 614 q 345 749 325 689 q 374 878 365 808 q 382 1039 382 949 q 400 1044 392 1042 q 416 1047 408 1046 q 433 1048 424 1047 q 451 1049 442 1049 q 501 1042 481 1049 q 532 1017 521 1035 q 543 969 543 1000 q 528 834 543 901 q 486 712 513 767 q 429 625 460 657 q 406 608 418 613 q 375 603 394 603 z "},"“":{"ha":833,"x_min":157,"x_max":718,"o":"m 413 1026 q 366 927 385 976 q 335 828 347 878 q 318 724 324 778 q 313 613 313 671 q 298 608 304 610 q 283 605 292 606 q 267 603 275 604 q 249 603 258 603 q 183 617 210 603 q 157 676 157 632 q 168 781 158 729 q 194 880 178 833 q 231 965 210 926 q 276 1031 253 1004 q 297 1044 286 1040 q 329 1049 308 1049 q 350 1048 339 1049 q 372 1044 361 1047 q 392 1036 382 1040 q 413 1026 403 1032 m 718 1026 q 673 927 692 976 q 642 828 654 878 q 624 724 629 778 q 618 613 618 671 q 605 608 611 610 q 590 605 599 606 q 574 603 582 604 q 556 603 565 603 q 490 617 517 603 q 464 676 464 632 q 474 781 464 729 q 500 880 483 833 q 538 965 517 926 q 583 1031 560 1004 q 603 1044 592 1040 q 635 1049 615 1049 q 656 1048 646 1049 q 677 1044 667 1047 q 699 1036 688 1040 q 718 1026 710 1032 z "},"”":{"ha":833,"x_min":142,"x_max":703,"o":"m 449 625 q 494 724 476 675 q 525 824 513 774 q 543 927 538 874 q 549 1039 549 981 q 563 1044 556 1042 q 577 1047 569 1046 q 593 1048 585 1047 q 613 1049 601 1049 q 676 1034 650 1049 q 703 976 703 1019 q 693 870 703 922 q 667 772 683 818 q 628 686 650 725 q 585 621 607 647 q 563 607 575 611 q 532 603 551 603 q 510 603 521 603 q 490 608 500 604 q 469 615 479 611 q 449 625 458 619 m 142 625 q 188 724 169 675 q 219 824 207 774 q 236 927 231 874 q 242 1039 242 981 q 256 1044 250 1042 q 270 1047 263 1046 q 286 1048 278 1047 q 306 1049 294 1049 q 370 1034 344 1049 q 396 976 396 1019 q 386 870 396 922 q 360 772 376 818 q 323 686 344 725 q 278 621 301 647 q 256 607 268 611 q 225 603 244 603 q 204 603 215 603 q 183 608 193 604 q 162 615 172 611 q 142 625 151 619 z "},"‚":{"ha":833,"x_min":288,"x_max":540,"o":"m 372 -181 q 328 -175 349 -181 q 288 -157 308 -169 q 342 -34 322 -94 q 371 96 363 26 q 379 256 379 165 q 397 260 389 258 q 414 264 406 263 q 431 266 422 265 q 449 267 439 267 q 498 260 478 267 q 529 235 518 253 q 540 186 540 218 q 525 52 540 119 q 483 -71 510 -15 q 426 -158 457 -126 q 403 -175 415 -169 q 372 -181 392 -181 z "},"„":{"ha":833,"x_min":119,"x_max":681,"o":"m 426 -158 q 472 -59 454 -108 q 503 40 490 -10 q 521 144 515 90 q 526 256 526 197 q 540 260 533 258 q 555 263 547 263 q 571 265 563 264 q 590 265 579 265 q 654 251 628 265 q 681 193 681 236 q 671 87 681 139 q 644 -12 661 35 q 606 -97 628 -58 q 563 -162 585 -136 q 541 -176 553 -172 q 510 -181 529 -181 q 488 -180 499 -181 q 467 -176 478 -179 q 447 -168 457 -172 q 426 -158 436 -164 m 119 -158 q 166 -59 147 -108 q 197 40 185 -10 q 214 144 208 90 q 219 256 219 197 q 234 260 228 258 q 248 263 240 263 q 264 265 256 264 q 283 265 272 265 q 348 251 322 265 q 374 193 374 236 q 364 87 374 139 q 338 -12 354 35 q 301 -97 322 -58 q 256 -162 279 -136 q 234 -176 246 -172 q 203 -181 222 -181 q 182 -180 193 -181 q 160 -176 171 -179 q 140 -168 150 -172 q 119 -158 129 -164 z "},"‹":{"ha":833,"x_min":214,"x_max":606,"o":"m 606 146 l 606 138 q 559 128 588 131 q 503 125 531 125 q 454 131 475 125 q 407 156 433 138 q 381 174 394 164 q 354 198 368 185 q 325 228 340 211 q 292 267 310 244 q 254 317 274 289 q 222 372 231 351 q 214 418 214 392 q 214 435 214 426 q 214 451 214 443 q 263 524 239 492 q 312 584 288 556 q 363 637 336 613 q 421 685 390 661 q 459 703 442 699 q 500 708 476 708 q 556 706 526 708 q 606 696 585 703 l 606 688 q 494 601 540 640 q 411 518 447 561 q 340 418 375 475 q 407 322 371 365 q 492 236 443 278 q 606 146 540 194 z "},"›":{"ha":833,"x_min":228,"x_max":619,"o":"m 228 686 l 228 694 q 274 706 246 703 q 331 708 303 708 q 379 701 358 708 q 426 678 400 694 q 452 658 439 668 q 479 635 465 649 q 508 606 493 622 q 542 567 524 589 q 579 517 560 544 q 611 461 603 481 q 619 415 619 442 q 619 399 619 407 q 619 382 619 390 q 570 309 594 342 q 522 249 546 276 q 470 197 497 221 q 413 149 443 172 q 375 129 393 135 q 333 124 357 124 q 278 127 307 124 q 228 138 249 131 l 228 146 q 340 232 294 192 q 422 316 386 272 q 493 415 458 360 q 426 513 463 469 q 342 597 390 556 q 228 686 293 639 z "},"«":{"ha":833,"x_min":75,"x_max":772,"o":"m 444 146 l 444 138 q 409 128 426 131 q 364 125 392 125 q 315 131 336 125 q 268 156 294 138 q 242 174 256 164 q 215 198 229 185 q 186 228 201 211 q 153 267 171 244 q 115 317 135 289 q 83 372 92 351 q 75 418 75 392 q 75 435 75 426 q 75 451 75 443 q 124 524 100 492 q 173 584 149 556 q 224 637 197 613 q 282 685 251 661 q 320 703 303 699 q 361 708 338 708 q 406 706 388 708 q 444 696 424 703 l 444 688 q 331 600 378 640 q 249 517 285 560 q 178 418 214 475 q 245 322 208 365 q 330 236 282 278 q 444 146 378 194 m 772 146 l 772 138 q 737 128 754 131 q 692 125 719 125 q 642 131 663 125 q 596 156 622 138 q 570 174 583 164 q 543 198 557 185 q 514 228 529 211 q 481 267 499 244 q 443 317 463 289 q 411 372 419 351 q 403 418 403 392 q 403 435 403 426 q 403 451 403 443 q 451 524 428 492 q 500 584 475 556 q 552 637 525 613 q 610 685 579 661 q 647 703 631 699 q 689 708 664 708 q 733 706 714 708 q 772 696 751 703 l 772 688 q 659 600 706 640 q 577 517 613 560 q 506 418 542 475 q 572 322 536 365 q 657 236 608 278 q 772 146 706 194 z "},"»":{"ha":833,"x_min":61,"x_max":758,"o":"m 389 688 l 389 696 q 424 706 407 703 q 469 708 442 708 q 518 702 497 708 q 565 678 539 696 q 591 659 578 669 q 618 635 604 649 q 647 606 632 622 q 681 567 663 589 q 718 517 699 544 q 750 462 742 482 q 758 415 758 442 q 758 399 758 407 q 758 382 758 390 q 709 310 733 342 q 660 249 685 278 q 609 197 636 221 q 551 149 582 172 q 514 130 532 135 q 472 125 496 125 q 428 128 447 125 q 389 138 410 131 l 389 146 q 503 233 457 193 q 585 317 549 274 q 656 415 621 360 q 588 513 625 469 q 503 597 551 556 q 389 688 456 639 m 61 688 l 61 696 q 97 706 79 703 q 142 708 114 708 q 191 702 171 708 q 238 678 211 696 q 263 659 250 669 q 290 635 276 649 q 319 606 304 622 q 353 567 335 589 q 390 517 371 544 q 422 462 414 482 q 431 415 431 442 q 431 399 431 407 q 431 382 431 390 q 382 310 406 342 q 333 249 358 278 q 281 197 308 221 q 224 149 254 172 q 187 130 204 135 q 144 125 169 125 q 101 128 119 125 q 61 138 83 131 l 61 146 q 175 233 129 193 q 257 317 221 274 q 328 415 293 360 q 261 513 297 469 q 176 597 225 556 q 61 688 128 639 z "},"*":{"ha":833,"x_min":93,"x_max":740,"o":"m 411 757 q 474 731 460 757 q 482 646 489 704 q 474 587 478 613 q 466 538 471 561 q 454 488 461 514 l 463 482 q 517 525 489 504 q 583 573 544 546 q 679 638 622 600 q 697 617 690 626 q 708 599 704 608 q 724 540 726 565 q 694 503 721 515 q 622 471 654 485 q 560 446 590 457 q 494 421 531 435 l 494 413 q 572 382 535 397 q 650 349 610 367 q 740 307 690 331 q 733 281 738 292 q 722 260 729 271 q 678 219 703 228 q 624 229 653 210 q 565 271 590 253 q 515 308 539 289 q 460 351 492 328 l 451 346 q 460 288 457 313 q 466 238 464 263 q 471 178 468 213 q 476 142 474 158 q 484 112 479 125 q 493 85 489 99 q 458 78 475 81 q 424 75 442 75 q 359 103 374 75 q 353 185 344 131 q 360 242 357 218 q 369 290 364 267 q 379 346 374 314 l 371 351 q 301 299 333 324 q 234 251 268 275 q 157 197 200 226 q 141 215 149 206 q 125 236 133 224 q 112 294 108 267 q 142 333 115 322 q 209 364 178 351 q 273 388 240 376 q 342 414 306 400 l 342 422 q 260 457 297 442 q 183 490 222 472 q 93 531 143 507 q 101 554 97 542 q 111 576 106 567 q 155 616 131 607 q 203 608 179 625 q 268 565 239 586 q 324 524 297 544 q 376 482 350 503 l 385 488 q 377 543 381 518 q 371 595 374 568 q 364 658 368 622 q 355 706 358 688 q 342 746 351 725 q 372 753 354 750 q 411 757 389 757 z "},"†":{"ha":833,"x_min":76,"x_max":763,"o":"m 497 -210 q 484 -215 492 -212 q 468 -217 476 -217 q 444 -212 454 -217 q 421 -196 433 -207 q 401 -164 411 -186 q 381 -101 390 -142 q 366 6 372 -61 q 356 178 360 74 q 353 429 353 282 l 353 828 q 351 880 353 854 q 347 931 350 906 q 339 979 344 956 q 358 983 349 982 q 376 985 367 985 q 396 986 386 986 q 456 969 433 986 q 479 914 479 953 l 479 572 l 479 -8 q 480 -65 479 -39 q 483 -115 481 -92 q 489 -162 486 -139 q 497 -210 492 -185 m 81 568 q 78 585 79 575 q 76 606 76 594 q 93 672 76 650 q 157 694 110 694 l 656 694 q 719 685 696 694 q 753 658 743 676 q 763 611 763 640 q 761 590 763 603 q 758 568 760 578 l 81 568 z "},"‡":{"ha":833,"x_min":69,"x_max":763,"o":"m 396 986 q 458 969 435 986 q 481 914 481 953 l 481 -57 q 481 -97 481 -78 q 483 -135 482 -117 q 488 -172 485 -154 q 493 -210 490 -190 q 467 -214 481 -212 q 438 -215 454 -215 q 403 -212 418 -215 q 376 -199 388 -208 q 359 -177 365 -190 q 353 -143 353 -164 l 353 828 q 351 880 353 854 q 348 931 350 906 q 340 979 346 956 q 367 985 354 985 q 396 986 379 986 m 81 568 q 78 585 79 575 q 76 606 76 594 q 93 672 76 650 q 157 694 110 694 l 656 694 q 719 685 696 694 q 753 658 743 676 q 763 611 763 640 q 761 590 763 603 q 758 568 760 578 l 81 568 m 750 201 q 753 184 753 193 q 754 164 754 175 q 738 97 754 119 q 674 75 722 75 l 176 75 q 113 84 136 75 q 79 111 89 93 q 69 157 69 129 q 71 178 69 167 q 74 201 72 190 l 750 201 z "},".":{"ha":833,"x_min":307,"x_max":526,"o":"m 526 7 q 499 -3 514 1 q 467 -8 483 -7 q 435 -10 451 -10 q 369 -1 399 -10 q 324 27 340 7 q 307 82 307 47 l 307 194 q 335 210 321 204 q 367 218 350 215 q 404 221 385 221 q 465 211 438 221 q 510 180 493 201 q 526 121 526 158 l 526 7 z "},",":{"ha":833,"x_min":235,"x_max":517,"o":"m 331 -269 q 278 -262 300 -269 q 235 -237 257 -256 q 283 -136 264 -186 q 315 -31 303 -86 q 333 90 328 24 q 339 238 339 156 q 364 244 353 242 q 386 248 375 247 q 410 249 397 249 q 468 241 444 249 q 504 215 492 233 q 517 167 517 197 q 505 40 517 101 q 473 -78 493 -22 q 427 -178 453 -133 q 374 -253 401 -222 q 356 -265 365 -261 q 331 -269 346 -269 z "},":":{"ha":833,"x_min":307,"x_max":526,"o":"m 526 538 q 499 528 514 532 q 467 522 483 524 q 435 521 451 521 q 369 529 399 521 q 324 558 340 538 q 307 613 307 578 l 307 725 q 335 740 321 735 q 367 749 350 746 q 404 751 385 751 q 465 742 438 751 q 510 710 493 732 q 526 651 526 689 l 526 538 m 526 7 q 499 -3 514 1 q 467 -8 483 -7 q 435 -10 451 -10 q 369 -1 399 -10 q 324 27 340 7 q 307 82 307 47 l 307 194 q 335 210 321 204 q 367 218 350 215 q 404 221 385 221 q 465 211 438 221 q 510 180 493 201 q 526 121 526 158 l 526 7 z "},";":{"ha":833,"x_min":235,"x_max":526,"o":"m 526 535 q 499 525 514 529 q 467 519 483 521 q 435 518 451 518 q 369 526 399 518 q 324 555 340 535 q 307 610 307 575 l 307 722 q 335 738 321 732 q 367 746 350 743 q 404 749 385 749 q 465 739 438 749 q 510 708 493 729 q 526 649 526 686 l 526 535 m 331 -269 q 278 -262 300 -269 q 235 -237 257 -256 q 283 -136 264 -186 q 315 -31 303 -86 q 333 90 328 24 q 339 238 339 156 q 364 244 353 242 q 386 248 375 247 q 410 249 397 249 q 468 241 444 249 q 504 215 492 233 q 517 167 517 197 q 505 40 517 101 q 473 -78 493 -22 q 427 -178 453 -133 q 374 -253 401 -222 q 356 -265 365 -261 q 331 -269 346 -269 z "},"…":{"ha":833,"x_min":51,"x_max":782,"o":"m 235 4 q 217 -1 226 1 q 199 -6 208 -4 q 180 -9 190 -8 q 160 -10 169 -10 q 102 -2 126 -10 q 65 25 78 6 q 51 76 51 44 l 51 200 q 69 206 60 203 q 87 210 78 208 q 106 213 96 213 q 126 214 117 214 q 184 206 160 214 q 222 180 208 199 q 235 128 235 161 l 235 4 m 508 4 q 491 -1 500 1 q 473 -6 482 -4 q 453 -9 464 -8 q 433 -10 443 -10 q 376 -2 400 -10 q 338 25 351 6 q 325 76 325 44 l 325 200 q 342 206 333 203 q 360 210 351 208 q 380 213 369 213 q 400 214 390 214 q 457 206 433 214 q 494 180 481 199 q 508 128 508 161 l 508 4 m 782 4 q 765 -1 774 1 q 747 -6 756 -4 q 727 -9 738 -8 q 707 -10 717 -10 q 651 -2 675 -10 q 613 25 626 6 q 600 76 600 44 l 600 200 q 617 206 608 203 q 635 210 625 208 q 655 213 644 213 q 675 214 665 214 q 731 206 707 214 q 769 180 756 199 q 782 128 782 161 l 782 4 z "},"!":{"ha":833,"x_min":307,"x_max":526,"o":"m 468 363 l 456 363 q 406 370 424 363 q 375 392 388 378 q 363 429 368 401 q 353 502 357 457 q 346 609 349 547 q 343 747 343 671 l 343 828 q 340 905 343 868 q 329 978 338 942 q 360 984 346 982 q 397 986 375 986 q 447 977 426 986 q 480 951 468 968 q 492 904 492 933 l 492 744 q 489 597 492 665 q 481 471 486 529 q 468 363 475 413 m 526 7 q 499 -3 514 1 q 467 -8 483 -7 q 435 -10 451 -10 q 369 -1 399 -10 q 324 27 340 7 q 307 82 307 47 l 307 194 q 335 210 321 204 q 367 218 350 215 q 404 221 385 221 q 465 211 438 221 q 510 180 493 201 q 526 121 526 158 l 526 7 z "},"¡":{"ha":833,"x_min":307,"x_max":526,"o":"m 365 385 l 378 385 q 428 376 410 385 q 458 356 447 368 q 471 319 465 347 q 481 244 476 290 q 488 138 485 199 q 490 0 490 76 l 490 -81 q 493 -158 490 -121 q 504 -231 496 -194 q 473 -237 488 -235 q 436 -239 458 -239 q 386 -230 407 -239 q 353 -203 365 -221 q 342 -157 342 -186 l 342 3 q 344 150 342 82 q 353 276 347 218 q 365 385 360 335 m 307 740 q 335 750 321 746 q 366 756 350 754 q 399 757 382 757 q 464 749 435 757 q 510 720 493 740 q 526 665 526 700 l 526 551 q 499 538 514 544 q 467 529 483 532 q 429 526 450 526 q 368 536 396 526 q 324 567 340 546 q 307 626 307 589 l 307 740 z "},"?":{"ha":833,"x_min":122,"x_max":721,"o":"m 501 4 q 460 -6 482 -3 q 415 -10 439 -10 q 347 -2 378 -10 q 299 25 317 6 q 281 76 281 44 l 281 194 q 322 205 300 201 q 368 208 344 208 q 435 201 406 208 q 483 174 465 193 q 501 122 501 154 l 501 4 m 424 1000 q 559 980 503 1000 q 651 925 615 960 q 704 847 688 890 q 721 760 721 804 l 721 753 q 706 663 721 706 q 658 583 690 621 q 574 508 626 544 l 540 485 q 481 435 501 457 q 452 393 460 414 q 444 347 444 372 l 444 338 l 435 338 q 375 347 399 338 q 340 370 351 356 q 328 399 328 385 l 328 406 q 342 458 328 432 q 385 513 356 485 q 456 572 414 542 l 488 594 q 551 651 529 624 q 583 707 574 679 q 592 765 592 735 q 588 806 592 788 q 575 838 583 824 q 512 864 550 854 q 428 874 474 874 q 263 831 328 874 q 157 715 199 788 l 149 715 q 129 745 136 729 q 122 782 122 761 q 139 857 122 821 q 183 921 156 893 q 244 963 208 944 q 326 990 281 981 q 424 1000 372 1000 z "},"¿":{"ha":833,"x_min":122,"x_max":721,"o":"m 340 743 q 382 753 360 750 q 428 757 404 757 q 495 749 465 757 q 543 723 525 742 q 561 671 561 704 l 561 553 q 521 542 543 546 q 475 539 499 539 q 407 547 438 539 q 358 574 376 554 q 340 625 340 593 l 340 743 m 419 -253 q 284 -233 340 -253 q 192 -178 228 -212 q 139 -100 156 -143 q 122 -12 122 -57 l 122 -6 q 137 85 122 43 q 184 165 151 126 q 268 239 217 203 l 303 263 q 363 312 342 290 q 391 354 383 333 q 399 400 399 375 l 399 410 l 407 410 q 467 401 444 410 q 502 378 490 392 q 514 349 514 364 l 514 342 q 500 289 514 315 q 458 234 486 263 q 386 175 431 206 l 356 153 q 291 96 314 124 q 260 41 268 68 q 251 -18 251 14 q 256 -58 251 -40 q 268 -90 260 -75 q 331 -117 293 -107 q 415 -126 368 -126 q 579 -83 514 -126 q 686 32 644 -40 l 694 32 q 714 2 707 18 q 721 -35 721 -14 q 704 -110 721 -74 q 658 -174 688 -146 q 598 -215 635 -197 q 516 -243 561 -233 q 419 -253 471 -253 z "},"/":{"ha":833,"x_min":78,"x_max":768,"o":"m 768 1042 q 632 620 707 822 q 468 238 557 418 q 276 -101 379 57 q 235 -154 256 -135 q 194 -182 215 -174 q 149 -190 172 -190 q 110 -186 126 -190 q 78 -174 94 -182 q 117 -126 99 -151 q 156 -67 136 -101 q 339 269 256 96 q 491 626 422 442 q 614 1003 560 810 q 647 1044 622 1032 q 707 1057 672 1057 q 739 1053 725 1057 q 768 1042 753 1050 z "},"\\\\":{"ha":833,"x_min":100,"x_max":744,"o":"m 100 1042 q 129 1053 115 1050 q 161 1057 143 1057 q 203 1051 185 1057 q 234 1035 221 1046 q 251 1003 247 1024 q 361 626 299 810 q 501 269 424 442 q 669 -67 578 96 q 706 -126 689 -101 q 744 -174 724 -151 q 709 -186 726 -182 q 671 -190 692 -190 q 608 -175 635 -190 q 558 -124 581 -160 q 374 231 458 46 q 221 619 289 417 q 100 1042 153 822 z "},"⁄":{"ha":833,"x_min":-117,"x_max":951,"o":"m 446 539 q 533 606 493 574 q 607 672 572 639 q 672 738 642 704 q 726 808 701 771 q 772 885 750 844 q 814 971 794 925 q 829 977 821 975 q 847 981 838 979 q 865 983 856 982 q 886 983 875 983 q 938 963 924 983 q 936 906 951 942 q 902 838 921 871 q 860 774 883 806 q 811 713 838 742 q 754 656 785 685 q 689 601 724 628 q 615 550 654 575 q 565 528 590 536 q 515 519 540 519 q 494 521 504 519 q 476 525 485 522 q 460 531 467 528 q 446 539 453 535 m 388 432 q 301 365 342 397 q 226 301 261 333 q 163 235 192 268 q 108 165 133 201 q 60 88 82 128 q 19 1 39 47 q 4 -5 13 -3 q -13 -8 -4 -7 q -32 -10 -22 -10 q -53 -11 -42 -11 q -103 10 -90 -11 q -101 67 -117 31 q -67 133 -86 100 q -26 198 -49 167 q 23 259 -4 229 q 80 317 50 289 q 144 372 110 344 q 218 422 179 399 q 269 445 243 438 q 318 453 294 453 q 339 451 329 453 q 358 447 349 450 q 374 441 367 444 q 388 432 382 438 z "},"|":{"ha":833,"x_min":338,"x_max":483,"o":"m 338 1054 q 363 1060 351 1058 q 389 1061 375 1061 q 462 1032 440 1061 q 483 954 483 1003 q 483 719 483 838 q 483 483 483 601 q 483 248 483 365 q 483 13 483 131 q 483 -222 483 -106 q 470 -224 478 -224 q 454 -225 463 -225 q 378 -211 406 -225 q 350 -167 350 -197 q 350 100 350 -33 q 350 367 350 233 q 350 635 350 501 q 350 903 350 768 q 348 981 350 943 q 338 1054 346 1018 z "},"¦":{"ha":833,"x_min":338,"x_max":483,"o":"m 338 1054 q 363 1060 351 1058 q 389 1061 375 1061 q 437 1056 421 1061 q 463 1042 453 1051 q 479 1013 475 1029 q 483 972 483 997 l 483 514 q 470 512 478 513 q 454 511 463 511 q 378 525 406 511 q 350 569 350 539 l 350 903 q 348 981 350 943 q 338 1054 346 1018 m 350 318 q 371 324 358 322 q 396 325 383 325 q 464 308 444 325 q 483 254 483 290 l 483 -222 q 470 -224 478 -224 q 454 -225 463 -225 q 398 -219 421 -225 q 363 -200 375 -212 q 350 -167 350 -187 l 350 318 z "},"@":{"ha":833,"x_min":63,"x_max":769,"o":"m 442 990 q 585 958 524 990 q 687 863 646 926 q 749 706 728 800 q 769 488 769 611 l 769 468 q 755 286 769 367 q 713 149 740 206 q 648 64 686 93 q 564 35 610 35 l 561 35 q 485 66 518 35 q 433 157 451 97 q 414 299 414 217 q 416 403 414 357 q 422 484 418 449 q 431 547 425 519 q 444 600 436 575 q 457 633 450 617 q 472 666 464 649 q 492 700 481 683 l 499 700 q 540 678 529 700 q 550 604 550 656 q 550 518 550 564 q 550 423 550 472 q 550 324 550 374 q 550 232 550 275 q 554 162 550 192 q 568 110 558 132 l 574 110 q 635 167 611 122 q 670 290 658 213 q 682 475 682 367 l 682 496 q 676 625 682 565 q 656 738 669 685 q 619 840 642 792 q 570 871 596 860 q 515 888 544 882 q 449 893 485 893 q 289 820 356 893 q 186 613 222 747 q 150 289 150 478 l 150 276 q 158 144 150 208 q 184 24 167 79 q 231 -79 201 -32 q 319 -115 272 -101 q 421 -128 365 -128 q 508 -121 465 -128 q 586 -101 550 -114 q 650 -68 622 -87 l 657 -69 l 657 -81 q 649 -126 657 -104 q 619 -169 640 -149 q 574 -198 603 -186 q 508 -216 544 -210 q 432 -222 472 -222 q 266 -189 336 -222 q 151 -90 196 -156 q 84 69 106 -25 q 63 282 63 163 l 63 299 q 90 586 63 458 q 167 805 117 714 q 287 943 217 896 q 442 990 357 990 m 372 35 q 328 62 347 35 q 299 143 310 89 q 288 281 288 197 l 288 294 q 297 474 288 397 q 322 603 306 551 q 358 683 338 656 q 399 710 378 710 q 433 692 421 710 q 451 635 446 675 l 488 635 l 496 550 q 478 567 486 563 q 461 572 469 572 q 447 556 454 572 q 435 506 440 539 q 428 422 431 472 q 425 304 425 371 l 425 294 q 429 222 425 253 q 439 171 433 192 q 453 175 446 172 q 468 185 460 178 q 488 207 476 193 l 485 115 l 439 115 q 410 54 426 74 q 372 35 394 35 z "},"&":{"ha":833,"x_min":49,"x_max":796,"o":"m 342 511 q 376 449 357 481 q 417 385 396 417 q 463 322 439 353 q 513 261 488 290 q 565 206 539 232 q 651 140 611 161 q 722 119 690 119 q 756 124 743 119 q 781 140 769 129 l 789 140 q 794 112 793 128 q 796 78 796 96 q 789 33 796 51 q 771 3 782 14 q 747 -9 761 -4 q 714 -14 733 -14 q 654 -3 685 -14 q 588 36 624 8 q 503 113 551 64 q 446 174 475 142 q 389 241 417 206 q 335 314 361 276 q 285 390 308 351 q 240 467 261 428 q 196 563 215 517 q 167 654 176 610 q 157 739 157 699 l 157 744 q 178 836 157 793 q 241 913 200 879 q 338 967 282 947 q 464 986 394 986 q 537 981 504 986 q 594 965 569 975 q 633 940 619 954 q 656 903 650 924 q 663 857 663 883 q 660 828 663 842 q 653 803 658 814 l 644 803 q 562 844 610 829 q 451 858 514 858 q 347 840 389 858 q 283 790 304 821 q 279 763 281 779 q 278 736 278 747 q 285 667 278 704 q 308 592 293 631 q 342 511 322 553 m 285 -14 q 159 17 213 -14 q 77 103 106 49 q 49 228 49 158 l 49 233 q 102 392 49 333 q 233 468 156 451 l 249 503 l 307 411 q 238 385 269 404 q 187 335 206 367 q 168 254 168 303 l 168 250 q 205 144 168 186 q 307 101 242 101 q 407 118 368 101 q 479 181 446 135 l 551 104 l 503 104 q 419 17 474 49 q 285 -14 365 -14 m 600 550 q 613 552 606 551 q 629 553 621 553 q 704 536 678 553 q 731 486 731 519 l 731 481 q 713 382 731 431 q 663 288 696 333 q 582 201 629 243 l 582 149 l 513 221 q 581 357 561 288 q 600 508 600 426 q 600 530 600 521 q 600 550 600 539 z "},"§":{"ha":833,"x_min":92,"x_max":743,"o":"m 524 1000 q 567 996 547 1000 q 603 985 586 992 q 634 969 619 979 q 660 946 649 958 q 690 906 679 928 q 704 858 700 883 q 708 800 708 832 q 708 710 708 754 q 708 619 708 665 q 689 615 700 617 q 664 614 678 614 q 601 632 621 614 q 582 688 582 650 q 582 771 582 738 q 582 825 582 804 q 581 860 582 846 q 575 890 579 875 l 607 850 q 525 874 581 874 q 425 849 475 874 q 333 787 375 825 q 266 703 292 749 q 240 614 240 657 l 240 610 q 251 566 240 586 q 297 526 263 546 q 403 479 332 506 l 525 435 q 645 376 597 410 q 718 301 693 342 q 743 207 743 260 l 743 196 q 732 131 743 160 q 701 83 721 101 q 657 53 682 64 l 654 31 l 571 51 q 601 92 590 74 q 615 131 611 111 q 619 175 619 151 l 619 182 q 608 241 619 217 q 567 285 596 265 q 482 326 538 306 l 361 371 q 210 442 264 407 q 135 515 157 476 q 114 597 114 553 l 114 614 q 148 749 114 681 q 240 874 182 817 q 371 965 297 931 q 524 1000 444 1000 m 417 -219 q 551 -196 497 -219 q 629 -129 606 -172 l 628 -124 q 606 -74 622 -94 q 561 -35 589 -53 q 489 -1 533 -18 l 365 44 q 218 116 274 79 q 138 193 163 153 q 114 279 114 233 l 114 289 q 138 374 114 338 q 217 431 163 410 l 221 461 l 297 436 q 265 398 278 418 q 247 357 253 378 q 240 315 240 336 l 240 306 q 251 253 240 278 q 297 204 263 228 q 403 154 332 181 l 525 110 q 653 46 606 81 q 722 -28 700 11 q 743 -106 743 -67 l 743 -119 q 722 -214 743 -172 q 658 -285 700 -256 q 555 -331 615 -315 q 417 -347 494 -347 q 324 -342 368 -347 q 242 -326 279 -336 q 174 -300 204 -315 q 125 -265 144 -285 q 99 -224 107 -249 q 92 -164 92 -199 q 94 -128 92 -143 q 100 -99 96 -112 l 108 -99 q 237 -190 163 -160 q 417 -219 311 -219 z "},"¶":{"ha":833,"x_min":71,"x_max":785,"o":"m 501 867 q 353 828 411 867 q 267 724 294 790 q 240 571 240 658 l 240 550 q 258 463 240 503 q 315 397 276 422 q 411 367 353 371 l 422 357 l 422 279 q 394 268 410 272 q 360 264 379 264 l 351 264 q 199 299 261 264 q 103 399 136 333 q 71 551 71 464 l 71 569 q 126 792 71 699 q 281 936 182 886 q 506 986 379 986 l 511 986 q 673 967 613 986 q 763 919 733 949 q 780 890 775 906 q 785 853 785 875 q 784 836 785 844 q 782 819 783 828 q 778 800 781 810 l 769 800 q 690 840 729 826 q 605 860 650 854 q 501 867 560 867 m 464 907 l 464 853 q 479 826 474 840 q 488 792 485 811 q 490 746 490 774 q 490 503 490 625 q 490 262 490 382 q 490 22 490 142 q 490 -214 490 -97 q 474 -220 482 -218 q 454 -222 465 -222 q 397 -197 414 -222 q 379 -124 379 -172 q 379 26 379 -58 q 379 203 379 110 q 379 392 379 296 q 379 581 379 488 q 379 758 379 674 q 379 907 379 842 l 464 907 m 697 900 l 697 828 q 710 803 706 817 q 715 774 714 790 q 717 732 717 757 q 717 542 717 640 q 717 342 717 443 q 717 138 717 240 q 717 -64 717 36 q 719 -142 717 -104 q 731 -215 722 -179 q 708 -221 719 -219 q 685 -222 697 -222 q 624 -196 643 -222 q 606 -122 606 -169 q 606 61 606 -36 q 606 263 606 158 q 606 476 606 368 q 606 690 606 583 q 606 900 606 797 l 697 900 z "},"ℓ":{"ha":833,"x_min":82,"x_max":719,"o":"m 719 775 q 698 633 719 697 q 622 510 676 568 q 471 394 568 451 q 219 269 374 336 q 163 249 182 256 q 134 240 143 242 q 118 238 125 238 q 92 253 103 238 q 82 299 82 268 q 84 330 82 317 q 90 358 86 343 q 346 465 247 417 q 498 560 444 514 q 572 658 551 607 q 592 771 592 708 l 592 786 q 564 897 592 856 q 463 938 536 938 q 415 933 436 938 q 378 919 394 929 q 342 853 354 893 q 329 761 329 814 q 329 597 329 679 q 329 432 329 514 q 329 268 329 350 q 334 192 329 222 q 356 139 339 163 q 407 117 379 124 q 467 110 435 110 q 575 129 529 110 q 667 188 621 149 l 675 188 q 681 157 679 169 q 683 125 683 144 q 660 53 683 85 q 589 4 636 22 q 468 -14 542 -14 l 460 -14 q 313 19 369 -14 q 229 106 256 51 q 203 224 203 160 q 203 500 203 363 q 203 776 203 638 q 222 888 203 836 q 275 979 240 940 q 360 1040 310 1018 q 471 1061 410 1061 q 578 1042 532 1061 q 656 986 625 1022 q 703 901 686 950 q 719 793 719 851 l 719 775 z "},"№":{"ha":833,"x_min":36,"x_max":829,"o":"m 171 -3 q 150 -7 163 -6 q 124 -8 138 -8 q 82 0 99 -8 q 57 27 65 8 q 49 75 49 46 q 49 264 49 169 q 49 452 49 358 q 49 640 49 546 q 49 828 49 733 q 47 900 49 858 q 36 978 44 942 q 67 982 53 981 q 94 984 81 983 q 124 985 108 985 q 180 975 157 985 q 217 942 203 965 q 238 879 231 919 q 265 732 250 803 q 294 597 279 661 q 327 472 310 532 q 363 356 344 411 q 404 251 382 301 q 449 156 426 201 l 404 185 l 475 185 l 444 151 q 435 302 440 228 q 428 450 431 376 q 425 597 426 524 q 424 743 424 671 q 424 863 424 806 q 424 981 424 919 q 442 984 429 983 q 468 985 456 985 q 524 967 503 985 q 544 908 544 950 q 544 721 544 815 q 544 532 544 626 q 544 342 544 438 q 544 151 544 247 q 546 73 544 113 q 551 -6 547 33 q 531 -10 542 -8 q 507 -12 519 -11 q 481 -14 494 -14 q 437 -5 454 -14 q 404 29 419 4 q 335 160 368 83 q 269 336 301 236 q 206 558 236 436 q 149 824 176 681 l 182 783 l 121 783 l 144 826 q 157 661 151 750 q 165 480 163 572 q 169 300 168 388 q 171 138 171 213 q 171 68 171 103 q 171 -3 171 33 m 704 986 q 797 943 765 986 q 829 828 829 900 l 829 818 q 813 735 829 772 q 767 675 796 697 q 697 653 738 653 q 606 697 639 653 q 572 811 572 740 l 572 821 q 608 939 572 892 q 704 986 644 986 m 707 906 q 656 882 672 906 q 640 822 640 858 l 640 815 q 644 778 640 794 q 657 749 647 761 q 674 743 665 744 q 694 742 683 742 q 744 764 728 742 q 761 822 761 786 l 761 829 q 758 869 761 851 q 744 897 754 886 q 728 903 738 901 q 707 906 718 906 m 585 601 l 771 601 q 812 588 800 601 q 824 549 824 574 q 823 536 824 543 q 821 524 822 529 q 819 513 819 519 l 639 513 q 609 519 621 513 q 591 540 597 525 q 585 583 585 554 q 585 590 585 586 q 585 597 585 593 q 585 601 585 600 z "},"·":{"ha":833,"x_min":307,"x_max":526,"o":"m 526 319 q 499 310 514 314 q 467 304 483 306 q 435 303 451 303 q 369 311 399 303 q 324 340 340 319 q 307 394 307 360 l 307 507 q 335 522 321 517 q 367 531 350 528 q 404 533 385 533 q 465 524 438 533 q 510 492 493 514 q 526 433 526 471 l 526 319 z "},"•":{"ha":833,"x_min":244,"x_max":589,"o":"m 589 257 q 549 246 569 250 q 507 238 528 242 q 465 233 486 235 q 424 232 443 232 q 290 259 336 232 q 244 339 244 286 l 244 575 q 285 586 265 582 q 326 594 306 590 q 369 599 347 597 q 410 600 390 600 q 544 574 499 600 q 589 494 589 547 l 589 257 z "},"′":{"ha":833,"x_min":213,"x_max":547,"o":"m 293 603 q 265 605 279 603 q 239 613 251 607 q 213 625 226 618 q 288 749 254 683 q 346 887 321 814 q 386 1039 371 960 q 414 1045 401 1043 q 442 1048 426 1047 q 475 1049 457 1049 q 531 1035 514 1049 q 547 992 547 1021 q 531 908 547 957 q 489 806 515 858 q 432 707 463 753 q 372 633 401 661 q 334 609 354 615 q 293 603 314 603 z "},"″":{"ha":833,"x_min":118,"x_max":686,"o":"m 188 603 q 169 603 178 603 q 152 606 161 604 q 135 612 143 608 q 118 619 128 615 q 195 743 161 676 q 255 884 229 810 q 293 1039 281 958 q 312 1044 303 1042 q 330 1047 321 1046 q 349 1048 339 1047 q 374 1049 360 1049 q 419 1036 401 1049 q 438 990 438 1024 q 422 906 438 956 q 380 803 406 856 q 324 704 354 750 q 265 631 293 658 q 226 608 246 613 q 188 603 206 603 m 436 603 q 418 603 426 603 q 401 606 410 604 q 384 612 392 608 q 368 619 376 615 q 445 742 411 676 q 504 883 479 808 q 542 1039 529 958 q 560 1044 551 1042 q 578 1047 569 1046 q 598 1048 588 1047 q 622 1049 608 1049 q 668 1036 650 1049 q 686 990 686 1024 q 670 906 686 956 q 628 803 654 856 q 573 704 603 750 q 514 631 543 658 q 475 608 496 613 q 436 603 454 603 z "},"‾":{"ha":833,"x_min":78,"x_max":763,"o":"m 78 1239 l 701 1239 q 738 1230 725 1239 q 757 1202 751 1221 q 763 1156 763 1183 q 761 1134 763 1146 q 758 1111 760 1122 l 160 1111 q 108 1121 125 1111 q 84 1154 90 1131 q 78 1219 78 1178 q 78 1229 78 1224 q 78 1239 78 1235 z "},"+":{"ha":833,"x_min":74,"x_max":763,"o":"m 340 749 q 365 754 354 753 q 389 756 376 756 q 458 729 436 756 q 481 649 481 703 q 481 460 481 554 q 481 271 481 365 q 481 82 481 176 q 460 79 469 81 q 440 78 451 78 q 376 99 399 78 q 354 169 354 119 q 354 315 354 243 q 354 458 354 386 q 354 603 354 531 q 351 680 354 644 q 340 749 347 715 m 79 481 l 676 481 q 727 472 708 481 q 754 447 746 464 q 763 397 763 429 q 762 376 763 388 q 760 353 761 364 l 168 353 q 114 361 135 353 q 83 385 93 369 q 74 428 74 401 q 75 456 74 442 q 79 481 76 469 z "},"−":{"ha":833,"x_min":76,"x_max":761,"o":"m 82 481 l 685 481 q 728 473 711 481 q 753 449 744 465 q 761 406 761 432 q 760 380 761 393 q 756 353 758 367 l 154 353 q 110 361 126 353 q 85 385 93 369 q 76 428 76 401 q 78 454 76 440 q 82 481 79 468 z "},"±":{"ha":833,"x_min":74,"x_max":763,"o":"m 340 810 q 365 815 354 814 q 389 817 376 817 q 458 790 436 817 q 481 710 481 764 q 481 610 481 660 q 481 509 481 560 q 481 408 481 458 q 481 308 481 358 q 460 304 469 306 q 440 303 451 303 q 376 320 399 303 q 354 378 354 338 q 354 474 354 426 q 354 569 354 522 q 354 664 354 617 q 351 741 354 706 q 340 810 347 776 m 79 618 l 676 618 q 727 610 708 618 q 754 585 746 603 q 763 536 763 567 q 762 518 763 528 q 760 500 761 508 l 168 500 q 96 518 118 500 q 74 574 74 536 q 75 597 74 585 q 79 618 76 610 m 79 219 l 668 219 q 722 213 701 219 q 752 189 742 206 q 763 146 763 172 q 762 124 763 136 q 758 99 761 111 l 168 99 q 114 106 135 99 q 83 131 93 114 q 74 174 74 147 q 75 199 74 186 q 79 219 76 211 z "},"÷":{"ha":833,"x_min":78,"x_max":758,"o":"m 83 481 l 681 481 q 740 463 721 481 q 758 406 758 446 q 757 380 758 393 q 753 353 756 367 l 154 353 q 111 361 128 353 q 86 385 94 369 q 78 428 78 401 q 79 453 78 440 q 83 481 81 467 m 318 756 q 344 765 331 761 q 374 769 358 768 q 404 771 389 771 q 462 763 436 771 q 501 735 488 754 q 515 685 515 717 l 515 589 q 490 581 504 585 q 460 576 475 578 q 429 574 444 574 q 372 582 397 574 q 333 610 347 590 q 318 661 318 629 l 318 756 m 318 244 q 344 253 331 250 q 374 258 358 256 q 404 260 389 260 q 462 251 436 260 q 501 224 488 243 q 515 172 515 206 l 515 78 q 490 69 504 74 q 460 64 475 65 q 429 63 444 63 q 372 71 397 63 q 333 99 347 79 q 318 149 318 118 l 318 244 z "},"×":{"ha":833,"x_min":133,"x_max":707,"o":"m 228 683 q 267 660 247 683 q 475 430 364 542 q 707 219 586 318 q 701 213 704 217 q 694 206 697 210 q 650 171 669 182 q 613 160 631 160 q 589 165 600 160 q 558 188 578 171 q 412 319 485 250 q 270 460 339 388 q 138 610 201 533 q 151 630 143 621 q 167 649 158 639 q 201 676 188 668 q 228 683 214 683 m 133 219 q 360 422 251 311 q 574 660 468 532 q 594 678 585 674 q 613 683 603 683 q 640 676 626 683 q 674 649 653 668 q 682 640 678 644 q 690 630 686 635 q 697 619 693 625 q 703 610 701 614 q 571 461 639 533 q 431 321 503 389 q 282 188 358 253 q 252 165 263 171 q 226 160 242 160 q 191 171 210 160 q 146 206 172 182 q 143 210 144 208 q 140 213 142 211 q 137 216 139 214 q 133 219 135 218 z "},"=":{"ha":833,"x_min":78,"x_max":763,"o":"m 78 654 l 686 654 q 729 647 713 654 q 754 622 746 639 q 763 579 763 606 q 761 553 763 567 q 757 526 760 540 l 167 526 q 113 536 132 526 q 85 569 93 546 q 78 635 78 592 q 78 644 78 639 q 78 654 78 650 m 83 307 l 674 307 q 728 297 710 307 q 755 265 747 288 q 763 199 763 242 q 763 189 763 194 q 763 179 763 183 l 154 179 q 111 188 128 179 q 86 212 94 196 q 78 254 78 228 q 79 281 78 267 q 83 307 81 294 z "},"<":{"ha":833,"x_min":100,"x_max":733,"o":"m 103 454 q 214 562 151 510 q 354 660 276 614 q 524 745 432 707 q 726 810 617 783 q 732 786 731 800 q 733 758 733 772 q 723 703 733 725 q 685 674 713 682 q 574 634 626 654 q 474 590 521 614 q 381 535 426 565 q 292 469 336 506 q 199 388 247 433 l 229 456 l 229 367 l 197 439 q 315 339 258 381 q 428 265 371 297 q 547 208 485 233 q 685 160 610 182 q 723 131 713 153 q 733 75 733 108 q 732 48 733 61 q 726 22 731 35 q 488 100 593 56 q 301 200 383 144 q 151 318 219 256 q 119 352 131 339 q 104 379 108 365 q 100 413 100 393 q 101 435 100 425 q 103 454 101 444 z "},">":{"ha":833,"x_min":100,"x_max":733,"o":"m 731 378 q 619 270 682 322 q 479 172 557 218 q 309 88 401 126 q 107 22 217 50 q 102 47 104 35 q 100 75 100 60 q 110 130 100 108 q 149 160 121 151 q 260 199 207 178 q 360 244 313 219 q 452 298 407 268 q 542 364 497 328 q 635 446 586 400 l 604 376 l 604 465 l 636 394 q 519 494 575 453 q 406 567 463 536 q 286 624 349 599 q 149 672 224 650 q 110 703 121 681 q 100 757 100 725 q 102 785 100 772 q 107 810 104 799 q 345 733 240 778 q 533 633 450 688 q 682 514 615 578 q 714 481 703 496 q 729 453 725 467 q 733 421 733 440 q 733 399 733 408 q 731 378 732 389 z "},"≤":{"ha":833,"x_min":94,"x_max":739,"o":"m 94 213 l 678 213 q 726 196 714 213 q 739 147 739 179 q 738 134 739 142 q 737 119 738 126 q 735 103 736 111 l 175 103 q 113 126 131 103 q 94 194 94 149 q 94 201 94 197 q 94 207 94 204 q 94 213 94 210 m 96 551 q 204 617 150 589 q 315 667 258 644 q 434 708 372 690 q 565 742 496 726 q 637 756 607 751 q 683 760 667 760 q 722 738 706 760 q 738 678 738 715 q 738 666 738 671 q 738 656 738 661 q 576 631 649 644 q 442 600 504 618 q 319 556 379 582 q 196 496 260 531 l 235 547 l 235 479 l 194 526 q 316 474 261 496 q 425 438 371 453 q 544 410 479 422 q 696 386 608 399 q 726 373 715 385 q 736 332 736 361 q 735 302 736 318 q 731 274 733 286 q 494 313 599 289 q 305 367 389 336 q 147 435 221 399 q 116 457 128 446 q 100 481 104 468 q 96 510 96 494 q 96 531 96 521 q 96 551 96 542 z "},"≥":{"ha":833,"x_min":94,"x_max":742,"o":"m 94 213 l 678 213 q 726 196 714 213 q 739 147 739 179 q 738 133 739 142 q 737 118 738 125 q 735 103 736 111 l 175 103 q 113 126 131 103 q 94 194 94 149 q 94 201 94 197 q 94 207 94 204 q 94 213 94 210 m 742 481 q 632 416 686 444 q 521 365 578 388 q 402 325 464 343 q 272 290 340 307 q 201 277 231 282 q 153 272 171 272 q 115 294 131 272 q 100 354 100 317 q 100 367 100 361 q 100 378 100 372 q 259 401 188 389 q 392 433 331 414 q 514 476 454 451 q 639 536 574 501 l 599 476 l 599 565 l 640 508 q 518 560 572 539 q 410 597 464 582 q 293 623 357 611 q 140 646 229 635 q 111 661 122 649 q 100 701 100 674 q 101 731 100 715 q 107 760 103 747 q 343 722 239 746 q 532 667 447 697 q 689 599 617 636 q 731 565 721 582 q 742 524 742 547 q 742 503 742 513 q 742 481 742 493 z "},"≈":{"ha":833,"x_min":75,"x_max":758,"o":"m 589 578 q 671 597 635 578 q 740 656 707 615 l 749 656 q 755 638 753 647 q 758 617 757 628 q 758 599 758 607 q 756 557 758 574 q 746 528 753 540 q 693 470 728 493 q 603 447 658 447 q 511 471 556 447 q 423 524 467 494 q 335 578 379 554 q 244 601 292 601 q 163 583 199 601 q 93 524 126 564 l 85 524 q 79 540 82 531 q 76 560 76 550 q 75 581 75 571 q 78 622 75 604 q 88 650 82 639 q 140 708 106 686 q 231 731 175 731 q 322 708 278 731 q 410 654 367 685 q 498 601 454 624 q 589 578 542 578 m 589 236 q 671 255 635 236 q 740 314 707 274 l 749 314 q 755 296 753 306 q 758 276 757 286 q 758 256 758 265 q 756 215 758 232 q 746 186 753 199 q 693 128 728 151 q 603 106 658 106 q 511 128 556 106 q 423 182 467 151 q 335 235 379 213 q 244 258 292 258 q 163 240 199 258 q 93 181 126 221 l 85 181 q 79 199 82 189 q 76 219 76 208 q 75 239 75 229 q 78 280 75 263 q 88 308 82 297 q 140 366 106 343 q 231 389 175 389 q 322 366 278 389 q 410 313 367 343 q 498 259 454 282 q 589 236 542 236 z "},"≠":{"ha":833,"x_min":78,"x_max":763,"o":"m 632 818 q 587 649 611 732 q 534 486 563 565 q 473 332 506 407 q 404 187 440 257 q 329 49 368 117 q 294 14 314 25 q 243 3 275 3 q 204 7 221 3 q 176 17 188 11 q 203 57 193 40 q 226 96 214 74 q 296 226 264 160 q 356 359 328 292 q 410 496 385 426 q 456 638 435 565 q 496 788 478 711 q 515 819 500 808 q 560 829 531 829 q 599 826 581 829 q 632 818 617 822 m 78 654 l 686 654 q 729 647 713 654 q 754 622 746 639 q 763 579 763 606 q 761 553 763 567 q 757 526 760 540 l 167 526 q 113 536 132 526 q 85 569 93 546 q 78 635 78 592 q 78 644 78 639 q 78 654 78 650 m 83 307 l 674 307 q 728 297 710 307 q 755 265 747 288 q 763 199 763 242 q 763 189 763 194 q 763 179 763 183 l 154 179 q 111 188 128 179 q 86 212 94 196 q 78 254 78 228 q 79 281 78 267 q 83 307 81 294 z "},"¬":{"ha":833,"x_min":85,"x_max":738,"o":"m 86 596 l 664 596 q 706 584 690 596 q 730 549 722 572 q 738 489 738 525 q 738 339 738 414 q 738 189 738 264 q 725 188 732 189 q 711 188 718 188 q 663 195 683 188 q 630 218 642 203 q 618 257 618 233 q 618 392 618 325 q 618 528 618 460 l 669 476 l 181 476 q 126 486 147 476 q 94 515 104 496 q 85 568 85 535 q 85 583 85 575 q 86 596 85 590 z "},"⁒":{"ha":833,"x_min":60,"x_max":769,"o":"m 207 957 q 281 936 249 957 q 330 878 313 915 q 347 793 347 842 l 347 788 q 329 702 347 739 q 278 645 311 665 q 200 625 246 625 q 97 667 135 625 q 60 781 60 710 l 60 786 q 99 910 60 863 q 207 957 139 957 m 628 347 q 701 326 669 347 q 751 269 733 306 q 769 185 769 233 l 769 179 q 729 60 769 106 q 621 15 689 15 q 518 58 556 15 q 481 174 481 101 l 481 178 q 521 301 481 254 q 628 347 561 347 m 471 546 q 508 613 490 579 q 543 683 526 647 q 574 756 560 719 q 599 829 588 792 q 618 903 610 867 q 631 976 626 940 q 646 979 638 978 q 663 982 654 981 q 681 984 672 983 q 700 985 690 985 q 742 972 729 985 q 754 929 754 958 q 748 878 754 908 q 731 815 742 849 q 704 746 719 781 q 670 676 689 711 q 632 612 651 642 q 590 558 613 582 q 565 540 578 544 q 532 535 551 535 q 515 535 524 535 q 499 538 506 536 q 484 542 492 539 q 471 546 476 544 m 363 425 q 326 357 344 392 q 290 287 307 322 q 260 215 274 251 q 235 140 247 178 q 215 67 224 103 q 203 -6 207 31 q 188 -8 196 -7 q 170 -10 179 -10 q 152 -12 161 -11 q 133 -12 143 -12 q 92 1 104 -12 q 79 42 79 14 q 85 92 79 63 q 101 153 90 121 q 127 222 113 186 q 160 292 142 257 q 200 358 179 326 q 243 413 221 389 q 269 433 257 428 q 301 438 282 438 q 319 437 310 438 q 335 434 328 436 q 350 430 343 432 q 363 425 357 428 z "},"←":{"ha":833,"x_min":28,"x_max":806,"o":"m 275 518 q 357 529 319 524 q 430 538 394 535 q 501 544 465 542 q 578 548 538 547 q 668 549 619 549 l 740 549 q 791 530 776 549 q 806 472 806 511 q 803 445 806 457 q 797 421 801 433 l 667 421 q 593 422 626 421 q 531 423 560 422 q 476 424 501 424 q 424 428 450 425 q 372 433 399 431 q 315 439 346 435 q 281 456 293 443 q 269 492 269 469 q 271 506 269 499 q 275 518 272 514 m 28 518 l 28 501 q 31 463 28 479 q 49 428 35 447 q 90 375 63 408 q 162 303 124 338 q 243 237 200 268 q 334 178 286 206 q 436 126 382 150 q 550 79 490 101 q 559 101 556 89 q 565 128 563 114 q 567 154 567 142 q 560 194 567 179 q 537 222 554 210 q 483 249 519 235 q 381 294 428 271 q 290 347 333 318 q 204 415 247 375 q 115 510 161 454 l 139 436 l 139 536 l 115 463 q 203 558 161 519 q 290 626 246 597 q 382 678 335 656 q 485 724 429 701 q 537 749 519 738 q 560 778 554 761 q 567 818 567 794 q 565 837 567 826 q 562 858 564 847 q 557 877 560 868 q 550 893 554 886 q 338 797 433 850 q 167 675 243 743 q 28 518 90 607 z "},"↑":{"ha":833,"x_min":10,"x_max":824,"o":"m 383 740 q 397 747 389 744 q 414 749 404 749 q 446 737 435 749 q 461 703 457 725 q 468 647 465 674 q 473 594 471 619 q 476 542 475 568 q 478 488 478 517 q 479 425 479 458 q 479 351 479 392 q 479 246 479 299 q 479 140 479 193 q 481 71 479 106 q 486 0 482 36 q 457 -6 471 -4 q 429 -8 443 -8 q 372 7 390 -8 q 353 57 353 22 q 353 203 353 131 q 353 350 353 276 q 353 425 353 390 q 356 490 354 460 q 359 550 357 521 q 365 608 361 579 q 373 670 368 638 q 383 740 378 703 m 383 986 l 401 986 q 440 983 425 986 q 475 966 456 979 q 526 924 494 953 q 600 852 565 890 q 666 771 635 814 q 725 680 697 728 q 777 578 753 632 q 824 464 801 524 q 801 455 814 458 q 775 449 789 451 q 749 447 761 447 q 709 453 725 447 q 681 478 693 460 q 654 531 668 496 q 608 633 632 586 q 556 724 585 681 q 488 810 526 767 q 393 899 449 853 l 467 875 l 365 875 l 439 899 q 344 810 383 853 q 276 724 306 768 q 224 632 247 679 q 179 529 201 585 q 152 477 164 494 q 125 453 140 460 q 83 447 110 447 q 65 449 75 447 q 44 452 54 450 q 26 458 35 454 q 10 464 17 461 q 106 676 51 581 q 228 848 160 771 q 383 986 297 925 z "},"→":{"ha":833,"x_min":28,"x_max":806,"o":"m 558 451 q 476 440 514 446 q 403 431 439 435 q 332 425 368 428 q 255 422 296 422 q 165 421 214 421 l 93 421 q 42 440 57 421 q 28 497 28 458 q 30 524 28 513 q 36 549 32 536 l 167 549 q 240 548 207 549 q 303 547 274 547 q 358 545 332 546 q 409 542 383 544 q 462 537 435 539 q 518 531 489 535 q 552 514 540 526 q 564 478 564 501 q 563 463 564 471 q 558 451 561 456 m 806 451 l 806 468 q 802 507 806 492 q 785 542 799 522 q 743 594 772 561 q 672 667 710 632 q 590 733 633 701 q 499 792 547 764 q 397 844 451 819 q 283 890 343 869 q 274 868 278 881 q 269 842 271 856 q 267 815 267 829 q 273 776 267 792 q 297 747 279 760 q 350 721 315 735 q 453 675 406 699 q 543 623 500 651 q 629 555 586 594 q 718 460 672 515 l 694 533 l 694 433 l 718 507 q 630 411 672 450 q 543 343 588 372 q 451 291 499 314 q 349 246 404 268 q 297 219 314 232 q 273 192 279 207 q 267 151 267 176 q 268 132 267 142 q 272 112 269 122 q 277 92 274 101 q 283 76 281 83 q 495 173 400 119 q 667 295 590 226 q 806 451 744 364 z "},"↓":{"ha":833,"x_min":10,"x_max":824,"o":"m 450 232 q 438 226 444 229 q 419 224 431 224 q 388 235 399 224 q 372 269 376 247 q 365 326 368 300 q 360 378 363 353 q 357 430 358 404 q 355 485 356 456 q 354 547 354 514 q 354 621 354 581 q 354 726 354 674 q 354 832 354 779 q 353 903 354 868 q 347 972 351 938 q 376 978 363 976 q 404 981 390 981 q 462 966 443 981 q 481 915 481 951 q 481 769 481 842 q 481 622 481 696 q 480 547 481 582 q 478 482 479 513 q 474 422 476 451 q 469 364 472 393 q 460 302 465 335 q 450 232 456 269 m 450 -14 l 432 -14 q 394 -10 410 -14 q 358 7 378 -7 q 307 49 339 21 q 233 120 268 82 q 167 201 199 158 q 108 292 136 244 q 56 394 81 340 q 10 508 32 449 q 32 517 19 514 q 59 523 44 521 q 85 525 74 525 q 125 519 110 525 q 153 495 140 513 q 179 442 165 478 q 225 339 201 386 q 278 249 249 292 q 346 163 307 206 q 440 74 385 119 l 367 97 l 468 97 l 394 74 q 489 162 450 119 q 557 249 528 204 q 609 340 586 293 q 654 443 632 388 q 681 495 669 478 q 709 519 693 513 q 750 525 725 525 q 769 524 758 525 q 789 520 779 522 q 808 515 799 518 q 824 508 817 513 q 728 297 782 392 q 606 125 674 201 q 450 -14 538 49 z "},"↔":{"ha":833,"x_min":18,"x_max":815,"o":"m 403 429 q 363 430 383 429 q 321 431 342 431 q 281 434 300 432 q 243 439 261 436 q 208 444 225 442 q 181 459 192 449 q 171 490 171 469 q 172 504 171 497 q 172 517 172 511 q 213 526 192 522 q 258 532 235 529 q 306 536 281 535 q 356 539 331 538 q 404 540 381 540 l 435 540 q 471 540 451 540 q 511 538 490 539 q 553 535 532 538 q 593 531 574 533 q 628 525 613 528 q 656 511 646 521 q 667 479 667 501 q 666 465 667 472 q 664 453 665 458 q 622 444 644 447 q 576 438 600 440 q 526 433 551 435 q 478 431 501 432 q 432 429 454 429 l 403 429 m 18 518 l 18 501 q 20 463 18 479 q 31 428 22 447 q 58 375 39 408 q 105 303 81 338 q 156 238 129 268 q 214 179 183 207 q 278 126 244 151 q 351 79 313 101 q 358 100 356 89 q 363 123 361 111 q 364 147 364 135 q 360 189 364 174 q 344 217 356 204 q 310 244 332 229 q 247 291 275 268 q 192 344 218 314 q 139 413 165 374 q 85 510 113 453 l 99 436 l 99 536 l 85 463 q 139 559 113 519 q 192 628 165 599 q 247 681 218 658 q 310 728 275 704 q 344 756 332 743 q 360 784 356 768 q 364 825 364 800 q 363 843 364 833 q 360 861 361 853 q 356 878 358 869 q 351 893 354 886 q 215 795 276 849 q 106 674 154 742 q 18 518 57 607 m 815 454 l 815 471 q 814 510 815 494 q 803 544 813 525 q 776 597 794 564 q 730 669 754 635 q 678 735 706 704 q 621 793 651 765 q 556 846 590 821 q 482 893 521 871 q 476 872 479 883 q 472 849 474 861 q 471 825 471 838 q 475 784 471 800 q 491 756 479 768 q 525 728 503 743 q 588 681 560 704 q 642 628 615 658 q 695 559 669 599 q 750 463 721 519 l 735 536 l 735 436 l 750 510 q 695 413 721 453 q 642 344 669 374 q 587 291 615 314 q 524 244 558 268 q 490 217 501 229 q 475 188 479 204 q 471 147 471 172 q 472 129 471 139 q 474 111 472 119 q 477 94 475 103 q 482 79 479 86 q 618 177 557 124 q 728 298 679 231 q 815 454 776 365 z "},"∂":{"ha":833,"x_min":90,"x_max":743,"o":"m 376 703 q 485 682 438 703 q 568 624 533 661 l 642 632 l 625 483 q 520 560 572 536 q 400 583 468 583 q 297 551 339 583 q 235 464 256 518 q 214 344 214 410 l 214 335 q 220 257 214 297 q 245 181 226 217 q 300 121 264 146 q 344 110 321 114 q 393 107 367 107 q 523 140 474 107 q 596 229 572 172 q 619 357 619 286 l 619 374 q 606 526 619 454 q 565 663 592 597 q 498 790 538 729 q 407 911 458 851 q 293 1031 356 971 l 293 1039 q 327 1060 308 1051 q 374 1069 346 1069 q 415 1060 396 1069 q 453 1031 433 1051 q 549 922 504 978 q 630 803 594 865 q 691 675 665 742 q 730 536 717 608 q 743 386 743 464 l 743 367 q 702 160 743 246 q 586 30 661 75 q 408 -15 511 -15 q 244 26 317 -15 q 131 147 172 68 q 90 335 90 225 l 90 349 q 127 538 90 458 q 228 660 164 617 q 376 703 293 703 z "},"∅":{"ha":833,"x_min":18,"x_max":807,"o":"m 422 908 q 578 878 508 908 q 700 792 649 847 q 779 662 751 736 q 807 500 807 588 l 807 485 q 778 303 807 383 q 697 167 750 224 q 571 82 643 111 q 411 53 499 53 q 251 81 324 53 q 127 163 179 110 q 47 292 75 215 q 18 465 18 369 l 18 482 q 47 656 18 578 q 131 791 76 735 q 259 878 185 847 q 422 908 333 908 m 144 446 q 171 301 144 357 q 242 208 197 246 q 310 187 274 194 q 400 179 347 179 q 508 198 457 179 q 597 256 558 217 q 658 355 636 294 q 681 497 681 415 l 681 519 q 672 599 681 563 q 645 670 664 636 q 593 739 626 704 q 516 770 558 758 q 421 782 474 782 q 277 744 339 782 q 180 637 215 707 q 144 468 144 567 l 144 446 m 753 1007 q 673 790 719 899 q 570 574 626 681 q 453 368 514 467 q 327 183 392 269 q 197 28 263 96 q 167 -2 181 8 q 140 -16 153 -12 q 111 -19 126 -19 q 72 -14 89 -19 q 40 3 54 -8 q 177 154 110 69 q 308 335 244 239 q 426 536 371 432 q 529 744 482 640 q 611 947 576 849 q 631 990 621 975 q 656 1013 642 1006 q 689 1019 671 1019 q 721 1017 707 1019 q 753 1007 735 1014 z "},"∆":{"ha":833,"x_min":88,"x_max":749,"o":"m 390 986 q 451 980 425 986 q 488 964 478 974 q 526 917 506 944 q 568 846 546 890 q 656 628 615 756 q 721 342 696 501 q 749 0 746 183 l 182 0 q 115 13 143 0 q 88 57 88 25 q 105 337 88 203 q 157 588 122 471 q 242 806 192 706 q 357 986 292 906 q 374 986 365 986 q 390 986 382 986 m 219 121 l 549 121 q 582 119 565 121 q 614 115 599 118 q 593 347 608 238 q 552 553 578 457 q 490 731 526 649 q 404 882 453 813 l 456 863 l 379 863 l 431 882 q 340 725 378 804 q 277 556 301 646 q 239 360 253 467 q 219 121 225 253 z "},"∏":{"ha":833,"x_min":57,"x_max":772,"o":"m 64 972 l 718 972 q 752 962 740 972 q 768 933 764 951 q 772 890 772 915 q 771 865 772 876 q 767 846 769 854 l 110 846 q 76 857 88 846 q 60 887 64 868 q 57 925 57 906 q 59 951 57 939 q 64 972 61 963 m 163 889 l 264 889 l 264 838 q 283 809 276 825 q 293 769 290 793 q 296 706 296 746 q 296 510 296 608 q 296 315 296 413 q 296 119 296 217 q 296 -76 296 21 q 296 -272 296 -174 q 278 -276 289 -274 q 253 -278 267 -278 q 199 -267 218 -278 q 171 -237 179 -257 q 163 -189 163 -218 q 163 26 163 -82 q 163 242 163 133 q 163 458 163 350 q 163 674 163 565 q 163 889 163 782 m 538 889 l 643 889 l 643 838 q 665 805 658 825 q 671 750 671 785 q 671 533 671 642 q 671 315 671 424 q 671 98 671 207 q 671 -119 671 -11 q 674 -197 671 -160 q 683 -272 676 -235 q 658 -276 671 -275 q 632 -278 646 -278 q 575 -269 596 -278 q 546 -240 554 -261 q 538 -183 538 -219 q 538 20 538 -85 q 538 233 538 125 q 538 451 538 340 q 538 671 538 561 q 538 889 538 781 z "},"∑":{"ha":833,"x_min":63,"x_max":764,"o":"m 65 972 l 713 972 q 751 948 739 972 q 764 890 764 924 q 763 866 764 878 q 757 846 761 854 l 117 846 q 87 854 99 846 q 69 882 75 863 q 63 932 63 901 q 63 953 63 944 q 65 972 64 963 m 764 -231 q 763 -256 764 -243 q 761 -278 763 -268 l 154 -278 q 100 -250 121 -278 q 79 -183 79 -222 q 81 -162 79 -171 q 86 -144 82 -154 q 255 3 179 -71 q 389 160 331 78 q 486 336 447 243 q 366 444 421 386 q 266 572 311 503 q 185 726 221 642 q 118 911 149 810 l 251 911 l 251 838 q 289 810 275 826 q 319 756 303 793 q 440 549 365 640 q 631 374 515 457 q 631 363 631 368 q 631 350 631 357 q 626 319 631 335 q 613 283 622 303 q 551 167 586 222 q 472 60 515 113 q 378 -42 429 8 q 267 -143 326 -92 l 268 -151 l 710 -151 q 744 -162 732 -151 q 760 -190 756 -172 q 764 -231 764 -207 z "},"∕":{"ha":833,"x_min":78,"x_max":768,"o":"m 768 1042 q 632 620 707 822 q 468 238 557 418 q 276 -101 379 57 q 235 -154 256 -135 q 194 -182 215 -174 q 149 -190 172 -190 q 110 -186 126 -190 q 78 -174 94 -182 q 117 -126 99 -151 q 156 -67 136 -101 q 339 269 256 96 q 491 626 422 442 q 614 1003 560 810 q 647 1044 622 1032 q 707 1057 672 1057 q 739 1053 725 1057 q 768 1042 753 1050 z "},"∙":{"ha":833,"x_min":244,"x_max":589,"o":"m 589 257 q 549 246 569 250 q 507 238 528 242 q 465 233 486 235 q 424 232 443 232 q 290 259 336 232 q 244 339 244 286 l 244 575 q 285 586 265 582 q 326 594 306 590 q 369 599 347 597 q 410 600 390 600 q 544 574 499 600 q 589 494 589 547 l 589 257 z "},"√":{"ha":833,"x_min":26,"x_max":800,"o":"m 33 613 q 63 619 49 617 q 92 622 76 621 q 124 624 107 624 q 161 625 140 625 q 219 613 199 625 q 242 579 240 600 q 263 417 251 486 q 296 292 275 347 q 350 185 317 236 q 435 81 383 135 l 374 113 l 449 113 l 389 82 q 476 196 436 133 q 547 337 515 258 q 603 511 579 415 q 644 724 628 607 q 671 983 661 842 q 680 985 675 985 q 690 985 685 985 q 700 986 694 986 q 751 977 728 986 q 787 950 774 968 q 796 904 800 932 q 761 635 783 758 q 709 410 739 513 q 642 228 679 308 q 564 89 606 149 q 478 -8 522 29 q 467 -11 472 -10 q 456 -13 461 -12 q 443 -14 450 -14 q 426 -14 436 -14 q 374 -4 397 -14 q 322 33 350 6 q 229 149 267 89 q 169 291 192 208 q 133 494 146 374 l 126 499 q 100 492 111 494 q 83 488 89 489 q 69 486 76 486 q 38 504 50 486 q 26 556 26 522 q 27 571 26 564 q 28 585 28 578 q 31 598 29 592 q 33 613 32 604 z "},"∞":{"ha":833,"x_min":44,"x_max":789,"o":"m 597 688 l 604 688 q 701 656 660 688 q 766 568 743 625 q 789 432 789 511 q 767 284 789 347 q 703 185 744 221 q 601 150 663 150 l 594 150 q 517 170 553 150 q 453 231 482 190 q 404 332 425 271 l 367 438 q 327 526 346 496 q 289 570 308 557 q 244 585 269 583 l 243 585 q 181 556 203 582 q 151 489 160 529 q 143 404 143 449 q 163 301 143 335 q 221 257 183 267 q 228 256 225 257 q 236 256 232 256 q 297 277 272 256 q 344 343 322 299 q 386 456 365 388 l 425 318 l 401 318 q 333 195 378 240 q 229 150 289 150 l 224 150 q 128 182 168 150 q 66 272 88 214 q 44 406 44 329 q 57 517 44 465 q 93 606 69 568 q 151 666 117 644 q 229 688 185 688 l 233 688 q 312 669 276 688 q 379 604 347 650 q 440 476 411 558 l 481 368 q 533 279 506 303 q 607 251 560 256 l 610 251 q 672 311 653 267 q 690 432 690 356 q 667 539 690 503 q 607 583 644 575 l 604 583 q 511 540 547 583 q 443 399 475 496 l 401 528 l 429 528 q 494 648 453 608 q 597 688 535 688 z "},"∫":{"ha":833,"x_min":54,"x_max":779,"o":"m 600 1061 q 699 1049 658 1061 q 756 1019 739 1036 q 779 954 779 997 q 777 922 779 936 q 771 897 775 908 l 763 897 q 702 929 739 918 q 626 940 665 940 q 559 933 588 940 q 507 907 531 925 q 496 860 500 889 q 492 794 492 832 q 492 594 492 700 q 492 377 492 489 q 492 152 492 265 q 492 -69 492 39 q 460 -217 492 -156 q 368 -313 428 -279 q 226 -347 308 -347 q 163 -342 190 -347 q 115 -327 135 -336 q 82 -306 94 -318 q 54 -236 54 -281 q 57 -201 54 -215 q 64 -176 60 -187 l 72 -176 q 135 -215 104 -203 q 211 -226 167 -226 q 297 -211 263 -226 q 351 -157 332 -196 q 358 -109 356 -135 q 360 -54 360 -83 q 360 228 360 86 q 360 517 360 369 q 360 822 360 664 q 389 946 360 892 q 473 1031 418 1000 q 600 1061 528 1061 z "},"≡":{"ha":833,"x_min":78,"x_max":763,"o":"m 83 843 l 674 843 q 728 834 710 843 q 755 801 747 825 q 763 735 763 776 q 763 725 763 731 q 763 715 763 719 l 154 715 q 97 733 115 715 q 78 790 78 750 q 79 817 78 803 q 83 843 81 831 m 78 481 l 686 481 q 744 463 726 481 q 763 407 763 446 q 761 381 763 394 q 757 354 760 367 l 167 354 q 113 363 132 354 q 85 396 93 372 q 78 461 78 419 q 78 472 78 467 q 78 481 78 476 m 83 119 l 674 119 q 728 110 710 119 q 755 78 747 101 q 763 11 763 54 q 763 1 763 7 q 763 -8 763 -4 l 154 -8 q 97 9 115 -8 q 78 67 78 26 q 79 93 78 79 q 83 119 81 107 z "},"▷":{"ha":833,"x_min":68,"x_max":803,"o":"m 803 547 q 803 537 803 543 q 803 523 803 531 q 803 504 803 515 q 800 481 803 492 q 792 464 797 471 q 771 440 785 454 q 718 400 757 426 q 549 292 640 347 q 358 189 457 238 q 161 103 260 140 q 124 110 139 106 q 100 125 108 115 q 89 149 93 133 q 82 188 85 165 q 72 353 75 267 q 68 528 68 439 q 72 705 68 617 q 82 875 75 793 q 106 896 89 886 q 143 906 122 906 q 189 892 153 906 q 280 853 225 878 q 402 794 335 828 q 540 720 469 760 q 678 637 611 681 q 803 547 746 593 m 163 149 l 133 215 l 193 178 l 124 179 q 341 270 226 214 q 566 394 456 326 q 767 529 676 463 l 725 469 l 725 535 l 767 478 q 619 578 700 526 q 451 678 538 629 q 279 766 364 726 q 121 832 194 806 l 189 835 l 139 797 l 160 865 q 148 635 151 760 q 148 384 144 510 q 163 149 151 258 z "},"◁":{"ha":833,"x_min":31,"x_max":767,"o":"m 31 453 q 31 463 31 457 q 31 478 31 469 q 31 496 31 486 q 33 519 31 508 q 42 536 36 529 q 63 560 49 546 q 115 600 76 574 q 285 708 193 653 q 475 812 376 763 q 672 897 574 861 q 710 890 694 894 q 733 875 725 885 q 745 851 740 867 q 751 813 750 835 q 763 647 758 733 q 767 472 767 561 q 763 295 767 383 q 751 125 758 207 q 728 104 746 114 q 690 94 711 94 q 644 108 681 94 q 553 147 608 122 q 431 206 499 172 q 293 280 364 240 q 155 364 222 319 q 31 453 88 408 m 671 851 l 700 785 l 640 822 l 710 821 q 493 730 608 786 q 267 606 378 674 q 67 471 157 539 l 108 531 l 108 465 l 67 522 q 215 422 133 474 q 383 322 296 371 q 554 234 469 274 q 713 168 639 194 l 644 165 l 694 203 l 674 135 q 685 366 682 242 q 686 616 689 490 q 671 851 683 742 z "},"$":{"ha":833,"x_min":92,"x_max":749,"o":"m 417 -21 q 242 1 319 -21 q 125 64 165 24 q 99 106 107 81 q 92 165 92 131 q 94 201 92 185 q 100 232 96 217 l 108 232 q 236 137 163 168 q 417 106 310 106 q 554 134 496 106 q 636 214 613 163 l 636 224 q 619 288 635 260 q 572 340 604 317 q 489 382 540 364 l 365 428 q 241 485 290 456 q 165 545 192 514 q 126 610 138 576 q 114 679 114 643 l 114 696 q 145 810 114 756 q 232 908 176 864 q 360 976 288 951 q 518 1000 433 1000 q 644 986 594 1000 q 714 951 694 972 q 733 919 729 936 q 736 885 736 903 q 733 853 736 869 q 722 821 731 836 l 714 821 q 635 860 678 846 q 525 874 592 874 q 386 850 453 874 q 277 787 319 826 q 235 697 235 747 l 235 690 q 250 631 235 657 q 302 583 265 606 q 403 538 339 561 l 525 493 q 656 426 607 464 q 726 345 704 389 q 749 251 749 301 l 749 238 q 709 104 749 163 q 595 13 669 46 q 417 -21 521 -21 m 483 583 q 466 586 475 583 q 450 593 457 589 q 430 608 439 597 q 422 635 421 618 q 426 725 424 671 q 431 842 428 779 q 437 970 433 906 q 442 1092 440 1035 q 442 1131 443 1114 q 440 1164 442 1149 q 434 1193 438 1179 q 426 1221 431 1207 q 444 1225 435 1222 q 463 1228 453 1228 q 481 1229 472 1229 q 551 1201 532 1229 q 561 1118 571 1174 q 545 1007 553 1064 q 529 892 538 950 q 513 778 521 833 q 498 674 506 722 q 483 583 490 625 m 388 342 q 406 339 397 342 q 419 332 414 336 q 442 317 433 328 q 449 290 450 307 q 446 228 447 265 q 442 145 444 190 q 438 52 440 100 q 434 -44 436 4 q 431 -133 432 -92 q 430 -173 429 -156 q 433 -206 431 -190 q 438 -235 435 -221 q 446 -262 442 -249 q 429 -266 439 -264 q 410 -269 419 -268 q 390 -271 400 -271 q 337 -258 357 -271 q 310 -221 317 -246 q 311 -160 304 -196 q 324 -81 317 -126 q 339 17 331 -36 q 356 125 347 69 q 372 235 364 181 q 388 342 379 290 z "},"¢":{"ha":833,"x_min":90,"x_max":717,"o":"m 482 847 q 567 840 529 847 q 634 820 604 833 q 683 788 664 807 q 703 749 697 772 q 710 696 710 726 q 708 672 710 683 q 704 650 707 661 q 697 628 701 639 l 689 628 q 596 697 644 676 q 469 718 547 718 q 335 679 392 718 q 248 572 278 640 q 218 417 218 504 l 218 399 q 231 319 218 357 q 269 253 243 282 q 344 217 299 232 q 453 203 390 203 q 552 213 508 203 q 633 242 596 222 q 703 293 671 263 l 711 293 q 715 281 714 288 q 716 267 715 274 q 717 250 717 260 q 708 195 717 226 q 683 147 700 164 q 633 113 665 129 q 554 88 600 97 q 447 79 508 79 q 302 102 367 79 q 190 167 238 125 q 116 267 142 208 q 90 399 90 326 l 90 417 q 141 649 90 553 q 281 797 192 746 q 482 847 369 847 m 494 499 l 486 499 q 448 505 463 499 q 427 522 433 511 q 421 549 421 533 q 421 660 421 603 q 421 776 421 718 q 421 889 421 835 q 417 962 421 933 q 406 1018 414 990 q 422 1022 413 1019 q 442 1026 432 1025 q 460 1026 451 1026 q 513 1014 494 1026 q 538 977 532 1001 q 540 915 544 953 q 531 835 535 876 q 522 751 526 793 q 513 667 518 710 q 503 581 508 624 q 494 499 499 539 m 422 414 l 431 414 q 472 408 457 414 q 492 391 486 403 q 499 364 499 379 q 499 252 499 310 q 499 136 499 194 q 499 24 499 78 q 502 -49 499 -21 q 514 -106 506 -78 q 497 -110 507 -108 q 478 -113 488 -112 q 460 -114 468 -114 q 406 -101 425 -114 q 381 -64 388 -89 q 379 -3 375 -39 q 390 99 385 46 q 402 207 396 153 q 413 315 408 261 q 422 414 418 368 z "},"£":{"ha":833,"x_min":63,"x_max":778,"o":"m 63 521 l 563 521 q 606 513 590 521 q 628 487 622 504 q 635 444 635 469 q 635 430 635 438 q 633 415 635 422 q 632 400 632 407 l 167 400 q 105 409 128 400 q 72 440 82 418 q 63 501 63 463 q 63 508 63 504 q 63 515 63 511 q 63 521 63 518 m 453 872 q 352 861 393 872 q 286 831 311 850 q 259 791 269 814 q 246 742 249 768 q 266 610 246 674 q 313 484 286 546 q 359 358 339 422 q 379 222 379 293 q 378 197 379 210 q 376 173 378 185 q 371 149 374 161 l 361 197 l 385 146 l 351 182 q 432 151 396 164 q 499 129 468 138 q 559 117 531 121 q 614 113 588 113 q 674 119 649 113 q 717 142 699 126 q 747 181 735 157 l 756 181 q 772 142 765 164 q 778 93 778 121 q 744 8 778 36 q 638 -21 711 -21 q 590 -18 614 -21 q 542 -10 565 -15 q 494 3 518 -6 q 447 23 471 11 q 400 49 424 35 q 351 83 376 64 l 343 83 q 292 26 322 50 q 222 -9 261 3 q 131 -21 182 -21 q 77 1 92 -21 q 63 61 63 22 q 63 74 63 68 q 63 85 63 79 q 65 96 64 90 q 68 107 67 101 l 78 107 q 183 118 143 107 q 242 158 224 129 q 261 242 261 188 q 240 371 261 310 q 190 492 218 432 q 140 614 161 553 q 118 740 118 675 l 118 750 q 156 877 118 821 q 267 966 194 933 q 447 999 340 999 q 601 978 536 999 q 697 926 665 957 q 727 883 719 906 q 735 824 735 860 q 734 799 735 811 q 731 776 733 786 q 724 753 728 765 l 715 753 q 605 844 669 817 q 453 872 540 872 z "},"¤":{"ha":833,"x_min":113,"x_max":721,"o":"m 342 579 q 336 573 339 576 q 329 565 333 569 q 285 538 310 546 q 239 533 261 529 q 199 553 217 538 q 157 593 178 571 q 117 638 136 615 q 130 656 122 647 q 144 672 138 665 q 174 696 160 688 q 201 704 189 704 q 240 681 222 704 q 290 627 264 653 q 342 579 315 601 m 494 578 q 548 626 522 600 q 597 681 574 651 q 635 703 615 703 q 663 695 649 703 q 693 671 678 688 q 707 656 700 665 q 721 636 714 646 q 678 590 700 613 q 635 550 657 568 q 592 530 614 533 q 550 536 571 526 q 508 565 529 546 q 504 569 506 567 q 501 572 503 571 q 499 575 500 574 q 494 578 497 576 m 494 250 q 501 256 497 253 q 507 263 504 260 q 574 297 538 293 q 638 276 610 300 q 679 235 658 257 q 719 192 700 214 q 706 174 714 183 q 692 157 699 165 q 663 133 676 142 q 635 125 649 125 q 594 149 614 125 q 547 201 572 176 q 494 250 522 226 m 339 250 q 286 202 311 228 q 236 147 261 176 q 199 125 218 125 q 171 133 185 125 q 140 157 157 140 q 127 174 135 164 q 113 192 119 183 q 155 238 133 215 q 199 278 176 260 q 241 299 219 296 q 284 292 263 301 q 325 263 306 283 q 329 259 328 261 q 332 256 331 257 q 335 253 333 254 q 339 250 338 251 m 188 418 q 217 542 188 488 q 300 626 247 596 q 422 657 353 657 q 538 628 488 657 q 618 549 589 600 q 647 429 647 497 l 647 419 q 617 296 647 350 q 535 211 588 242 q 414 181 482 181 q 297 209 349 181 q 217 289 246 238 q 188 408 188 340 l 188 418 m 290 404 q 303 338 290 367 q 340 293 315 310 q 372 285 356 288 q 407 282 389 282 q 510 319 475 282 q 546 425 546 356 l 546 433 q 532 501 546 472 q 490 547 518 529 q 462 555 476 553 q 429 557 447 557 q 325 517 360 557 q 290 411 290 478 l 290 404 z "},"¥":{"ha":833,"x_min":35,"x_max":799,"o":"m 40 557 l 258 557 l 274 442 l 121 442 q 67 451 86 442 q 42 479 49 461 q 35 519 35 497 q 35 534 35 528 q 38 547 36 540 q 40 557 39 553 m 549 557 l 732 557 q 784 539 769 557 q 799 486 799 521 q 798 472 799 479 q 796 456 797 464 q 794 442 794 449 l 526 442 l 549 557 m 790 160 l 114 160 q 58 182 74 160 q 42 240 42 204 q 42 251 42 246 q 42 263 42 257 q 43 276 43 269 l 704 276 q 758 267 739 276 q 784 238 776 257 q 792 188 792 218 q 792 178 792 183 q 792 169 792 174 q 790 160 792 165 m 483 319 q 483 260 483 289 q 483 202 483 231 q 483 144 483 174 q 486 67 483 104 q 499 -6 489 29 q 484 -9 490 -8 q 472 -11 478 -10 q 458 -12 465 -12 q 444 -12 451 -12 q 385 1 406 -12 q 358 39 365 15 q 350 93 350 63 q 350 144 350 118 q 350 199 350 171 q 350 258 350 228 q 350 321 350 289 q 269 406 306 361 q 201 505 232 451 q 144 626 169 558 q 97 781 118 694 q 61 978 76 868 q 79 982 71 981 q 97 984 88 983 q 115 985 106 985 q 158 978 140 985 q 188 957 176 972 q 203 914 200 942 q 235 759 218 828 q 278 631 253 690 q 339 512 303 571 q 428 383 375 453 l 369 413 l 457 413 l 397 383 q 496 514 456 451 q 564 644 536 576 q 610 792 592 711 q 640 978 628 874 q 667 983 654 982 q 694 985 679 985 q 750 967 731 985 q 767 921 769 950 q 728 728 754 815 q 667 567 703 640 q 584 434 631 494 q 483 319 538 374 z "},"฿":{"ha":833,"x_min":49,"x_max":738,"o":"m 501 1110 q 498 1066 501 1090 q 486 1016 494 1042 q 468 965 478 990 q 447 915 458 939 l 360 915 q 365 953 363 935 q 367 990 367 972 q 369 1024 368 1007 q 369 1057 369 1040 q 369 1084 369 1071 q 369 1110 369 1097 q 366 1136 368 1124 q 363 1161 364 1149 q 374 1164 368 1163 q 385 1167 379 1165 q 399 1169 392 1168 q 413 1171 406 1171 q 429 1171 421 1171 q 485 1158 468 1171 q 501 1110 501 1146 m 307 -140 q 310 -101 307 -122 q 319 -55 313 -81 q 335 0 325 -29 q 360 63 346 29 l 447 63 q 442 17 444 39 q 440 -24 440 -4 q 438 -61 439 -43 q 438 -99 438 -79 q 438 -125 438 -112 q 439 -149 438 -137 q 441 -173 440 -161 q 443 -194 442 -185 q 433 -197 439 -196 q 422 -199 428 -199 q 410 -201 417 -200 q 395 -202 403 -201 q 379 -203 388 -203 q 326 -188 344 -203 q 307 -140 307 -174 m 382 -14 q 297 -8 335 -14 q 231 8 258 -3 q 183 30 203 18 q 153 53 164 42 q 132 84 139 68 q 125 121 125 100 q 125 314 125 218 q 125 506 125 410 q 125 699 125 601 q 125 897 125 797 l 242 897 l 225 854 q 250 810 243 836 q 257 747 257 783 q 257 595 257 671 q 257 442 257 519 q 257 287 257 365 q 257 128 257 208 q 288 117 271 122 q 326 110 304 113 q 379 108 347 108 q 493 124 442 108 q 574 176 544 140 q 604 271 604 213 l 604 286 q 582 354 604 324 q 515 406 560 385 q 399 439 469 428 l 272 439 l 272 469 l 586 467 l 586 444 q 692 380 654 425 q 731 275 731 335 l 731 254 q 684 106 731 167 q 559 16 638 46 q 382 -14 481 -14 m 53 972 q 243 994 154 989 q 411 1000 332 1000 q 554 978 493 1000 q 657 919 615 957 q 718 832 699 881 q 738 728 738 783 l 738 707 q 683 538 738 608 q 539 430 629 467 q 339 393 449 393 q 297 399 315 393 q 265 417 278 404 l 235 411 l 235 514 q 272 500 254 504 q 319 496 289 496 q 476 521 411 496 q 576 594 540 546 q 611 710 611 642 l 611 724 q 603 790 611 761 q 579 840 596 818 q 496 866 540 858 q 393 874 451 874 q 257 867 319 874 q 153 853 194 860 q 97 846 111 846 q 60 867 71 846 q 49 931 49 888 q 50 953 49 943 q 53 972 51 963 z "},"₡":{"ha":833,"x_min":101,"x_max":747,"o":"m 433 997 l 433 908 l 328 908 q 335 956 332 931 q 340 1007 338 981 q 342 1059 342 1033 q 344 1107 343 1085 q 344 1147 344 1129 q 358 1150 351 1149 q 374 1152 365 1151 q 393 1153 383 1153 q 439 1143 424 1153 q 454 1108 454 1133 q 452 1072 454 1090 q 445 1035 450 1053 q 433 997 440 1017 m 633 976 l 633 907 l 538 907 q 544 954 542 929 q 549 1006 547 979 q 553 1059 551 1033 q 555 1108 554 1085 q 556 1147 556 1131 q 568 1150 561 1149 q 584 1152 575 1151 q 603 1153 593 1153 q 647 1142 632 1153 q 663 1108 663 1132 q 660 1067 663 1089 q 651 1022 657 1044 q 633 976 644 999 m 279 11 l 279 60 l 375 60 q 367 10 371 38 q 361 -43 364 -17 q 356 -95 358 -69 q 351 -142 353 -121 q 350 -178 350 -162 q 340 -179 346 -178 q 328 -181 335 -181 q 315 -183 322 -182 q 300 -183 308 -183 q 254 -172 268 -183 q 240 -132 240 -160 q 244 -93 240 -115 q 257 -44 249 -71 q 279 11 265 -18 m 478 -35 l 478 58 l 578 58 q 572 9 575 35 q 567 -42 569 -17 q 564 -92 565 -68 q 562 -139 563 -117 q 561 -178 561 -161 q 551 -179 557 -178 q 540 -181 546 -181 q 528 -183 535 -182 q 517 -183 522 -183 q 467 -173 478 -183 q 456 -139 456 -162 q 458 -108 456 -125 q 467 -73 461 -92 q 478 -35 472 -54 m 460 -28 q 308 2 375 -28 q 196 85 242 32 q 126 209 150 139 q 101 361 101 279 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 576 993 549 1000 q 626 973 604 986 q 667 940 649 960 q 701 894 689 919 q 720 840 714 869 q 726 778 726 811 q 726 678 726 728 q 726 582 726 629 q 706 576 718 579 q 678 574 693 574 q 615 589 636 574 q 594 636 594 604 q 596 742 594 699 q 595 823 597 785 q 583 904 593 861 l 619 846 q 565 873 590 867 q 518 879 540 879 q 376 815 440 879 q 274 641 311 751 q 236 389 236 531 l 236 360 q 238 289 236 319 q 246 226 240 258 q 333 135 281 171 q 467 99 385 99 q 619 133 554 99 q 731 235 685 168 l 739 235 q 745 205 743 221 q 747 175 747 189 q 734 103 747 132 q 700 53 721 74 q 639 8 674 26 q 560 -19 604 -10 q 460 -28 515 -28 z "},"₦":{"ha":833,"x_min":22,"x_max":811,"o":"m 256 -3 q 247 -6 251 -4 q 237 -8 242 -7 q 226 -8 232 -8 q 214 -8 219 -8 q 156 11 176 -8 q 135 75 135 31 q 135 189 135 126 q 135 321 135 251 q 135 460 135 390 q 135 598 135 531 q 135 724 135 665 q 135 828 135 782 q 133 899 135 857 q 122 978 131 942 q 143 981 133 981 q 162 983 153 982 q 182 985 171 985 q 204 985 193 985 q 290 964 261 985 q 332 878 318 943 q 370 724 350 800 q 415 574 390 647 q 467 428 439 500 q 532 289 496 357 q 613 156 568 221 l 561 185 l 631 185 l 604 151 q 597 301 600 228 q 593 446 594 374 q 590 590 592 518 q 589 736 589 663 q 589 859 589 799 q 589 981 589 919 q 596 983 592 982 q 605 984 600 983 q 616 985 610 985 q 629 985 622 985 q 690 967 671 985 q 710 908 710 950 q 710 797 710 860 q 710 665 710 735 q 710 522 710 594 q 710 382 710 450 q 710 255 710 314 q 710 151 710 196 q 710 99 710 125 q 713 46 711 72 q 717 -6 714 19 q 706 -10 711 -8 q 695 -12 701 -11 q 683 -14 689 -14 q 671 -14 678 -14 q 620 -6 643 -14 q 575 26 597 3 q 484 147 531 71 q 392 324 438 222 q 308 552 347 426 q 240 824 269 678 l 274 783 l 214 783 l 236 826 q 247 665 243 750 q 253 489 251 579 q 255 310 254 399 q 256 138 256 221 q 256 102 256 119 q 256 67 256 85 q 256 33 256 50 q 256 -3 256 15 m 433 360 l 433 278 l 78 278 q 34 298 46 278 q 22 351 22 318 q 22 360 22 356 q 23 370 22 365 q 24 380 24 375 q 26 389 25 385 q 28 397 26 393 q 86 394 47 396 q 174 388 125 392 q 274 381 224 385 q 367 372 325 376 q 433 360 408 367 m 658 279 l 658 389 l 736 389 q 795 374 779 389 q 811 322 811 358 q 811 312 811 317 q 810 303 811 307 q 809 295 810 299 q 808 288 808 292 q 807 279 808 283 l 658 279 m 189 697 l 189 588 l 94 588 q 37 609 51 588 q 22 667 22 631 q 22 674 22 671 q 22 681 22 678 q 22 687 22 683 q 23 693 22 690 q 24 697 24 696 l 189 697 m 338 619 l 338 700 l 732 700 q 794 681 778 700 q 811 624 811 661 q 811 613 811 618 q 810 602 811 607 q 809 594 810 597 q 807 586 808 590 q 806 579 806 582 q 734 583 782 581 q 622 590 686 585 q 485 601 558 594 q 338 619 413 608 z "},"₨":{"ha":833,"x_min":24,"x_max":810,"o":"m 25 972 q 65 984 44 979 q 108 992 86 989 q 153 998 129 996 q 206 1000 178 1000 q 345 968 293 1000 q 421 869 397 936 q 444 699 444 803 l 444 646 q 430 470 444 542 q 389 355 415 399 q 330 292 363 311 q 260 272 297 272 q 227 274 242 272 q 201 283 213 276 q 179 299 189 289 l 150 299 l 150 396 q 173 389 163 392 q 194 385 183 386 q 217 385 206 385 q 290 409 261 385 q 333 489 319 433 q 347 635 347 544 l 347 661 q 342 778 347 731 q 319 856 336 825 q 282 869 306 864 q 221 874 258 874 q 159 867 188 874 q 108 853 131 860 q 68 846 86 846 q 49 850 57 846 q 35 864 40 854 q 26 890 29 874 q 24 931 24 907 q 24 953 24 943 q 25 972 25 963 m 147 958 l 147 854 q 160 833 156 843 q 167 811 164 822 q 170 788 169 800 q 171 758 171 775 q 171 656 171 708 q 171 551 171 604 q 171 443 171 497 q 171 335 171 389 q 171 228 171 282 q 171 121 171 175 q 171 82 171 99 q 172 51 171 65 q 175 23 174 36 q 179 -3 176 10 q 168 -6 174 -4 q 156 -8 163 -7 q 141 -9 149 -8 q 125 -10 133 -10 q 78 10 93 -10 q 64 74 64 29 q 64 199 64 136 q 64 328 64 263 q 64 458 64 393 q 64 588 64 524 q 64 716 64 653 q 64 840 64 779 q 64 958 64 901 l 147 958 m 568 -24 q 467 -12 510 -24 q 394 22 424 -1 q 340 85 364 46 q 302 163 318 121 q 274 253 286 206 q 249 349 261 301 l 318 361 q 351 264 333 308 q 396 185 369 219 q 443 133 419 151 q 497 108 467 115 q 565 101 526 101 q 665 122 629 101 q 713 185 701 142 q 694 256 710 226 q 636 310 679 285 l 596 333 q 532 382 557 357 q 496 442 507 407 q 485 531 485 478 q 507 647 485 596 q 570 727 529 699 q 671 756 611 756 q 733 744 710 756 q 769 717 757 733 q 784 685 781 703 q 788 647 788 668 q 788 633 788 640 q 786 621 788 626 q 784 610 785 615 q 782 600 783 604 l 774 600 q 731 622 753 615 q 678 629 708 629 q 603 597 629 629 q 578 521 578 565 q 586 469 578 490 q 615 431 594 449 q 669 392 635 413 l 696 376 q 765 325 740 353 q 799 262 789 297 q 810 176 810 226 q 746 28 810 79 q 568 -24 682 -24 z "},"₩":{"ha":833,"x_min":22,"x_max":811,"o":"m 94 972 q 109 976 101 975 q 124 979 117 978 q 141 981 132 981 q 160 981 150 981 q 211 958 196 981 q 225 867 226 935 q 226 590 224 710 q 234 378 228 469 q 252 217 240 288 q 282 90 264 147 l 249 124 l 303 124 l 267 92 q 322 227 301 154 q 353 387 343 300 q 367 582 364 474 q 371 825 371 690 q 381 825 376 825 q 392 825 386 825 q 401 825 397 825 q 451 811 435 825 q 467 768 467 797 q 472 549 467 651 q 488 361 476 447 q 520 208 500 275 q 572 90 540 140 l 524 124 l 603 124 l 554 92 q 584 208 572 150 q 602 336 596 267 q 611 494 608 406 q 613 701 614 583 q 608 972 611 818 q 622 976 615 975 q 637 978 629 976 q 651 981 644 981 q 667 981 658 981 q 710 972 694 981 q 731 940 725 963 q 738 875 738 917 q 735 608 738 722 q 724 406 732 493 q 703 250 717 319 q 670 120 690 181 q 621 -3 650 60 q 612 -6 617 -4 q 601 -8 607 -7 q 590 -8 596 -8 q 578 -8 585 -8 q 542 -1 556 -8 q 514 29 528 7 q 486 88 500 54 q 459 165 472 121 q 435 265 446 208 q 417 394 425 322 l 450 329 l 389 329 l 424 394 q 405 263 417 321 q 378 157 393 204 q 344 71 363 110 q 301 -3 325 32 q 293 -6 297 -4 q 284 -8 289 -7 q 274 -8 279 -8 q 263 -8 268 -8 q 222 1 238 -8 q 194 36 207 10 q 163 116 178 72 q 136 218 149 160 q 116 358 124 276 q 103 551 108 439 q 99 814 99 663 q 97 899 99 861 q 94 972 96 938 m 192 279 l 83 279 q 35 301 49 279 q 22 358 22 324 q 22 366 22 363 q 22 373 22 369 q 22 379 22 376 q 23 385 22 382 q 24 390 24 388 l 192 390 l 192 279 m 418 621 q 327 606 376 614 q 228 592 278 599 q 138 583 179 586 q 74 579 97 579 q 33 598 43 579 q 22 656 22 617 q 22 664 22 660 q 23 673 22 668 q 24 682 24 678 q 26 690 25 686 q 26 697 26 694 l 418 697 l 418 621 m 435 621 l 435 697 l 746 697 q 797 676 782 697 q 811 618 811 656 q 811 608 811 613 q 810 599 811 603 q 809 591 810 594 q 808 584 808 588 q 806 576 807 581 q 764 578 790 576 q 703 585 738 581 q 626 594 668 589 q 535 606 583 599 q 435 621 488 613 m 661 279 l 661 390 l 750 390 q 799 376 786 390 q 811 329 811 361 q 811 319 811 325 q 810 308 811 314 q 809 297 810 303 q 808 287 808 292 q 807 279 808 282 l 661 279 z "},"₪":{"ha":833,"x_min":43,"x_max":774,"o":"m 304 1000 q 458 969 401 1000 q 539 873 515 939 q 563 701 563 807 q 563 616 563 654 q 563 544 563 578 q 563 474 563 510 q 563 398 563 439 q 563 303 563 357 q 553 245 563 258 q 522 232 544 232 q 504 233 513 232 q 488 236 496 233 q 472 242 481 239 q 476 285 475 264 q 478 331 478 307 q 480 381 479 354 q 481 438 481 407 q 481 504 481 468 q 481 585 481 540 q 478 710 481 661 q 466 793 475 760 q 439 854 457 826 q 383 867 415 863 q 304 871 351 871 q 236 868 267 871 q 181 863 206 865 q 135 857 156 860 q 94 854 114 854 q 70 856 81 854 q 53 865 60 858 q 45 882 47 871 q 43 910 43 893 q 45 945 43 929 q 51 976 47 961 q 101 986 75 982 q 159 994 128 990 q 226 999 190 997 q 304 1000 263 1000 m 171 965 l 171 853 q 183 826 178 840 q 190 797 188 813 q 193 764 192 782 q 194 725 194 746 q 194 659 194 707 q 194 548 194 611 q 194 417 194 485 q 194 290 194 350 q 194 187 194 229 q 194 133 194 144 q 195 89 194 111 q 197 44 196 67 q 201 0 199 22 q 188 -3 194 -1 q 175 -6 182 -4 q 160 -8 168 -7 q 143 -8 153 -8 q 98 10 111 -8 q 85 72 85 28 q 85 158 85 97 q 85 301 85 219 q 85 472 85 382 q 85 647 85 561 q 85 804 85 733 q 85 919 85 875 q 85 965 85 963 l 171 965 m 653 993 q 665 997 658 996 q 678 999 671 999 q 692 1000 685 1000 q 708 1000 700 1000 q 758 981 743 1000 q 774 914 774 961 q 774 849 774 885 q 774 774 774 814 q 774 690 774 733 q 774 599 774 646 q 774 504 774 551 q 774 410 774 457 q 774 319 774 364 q 756 162 774 225 q 700 63 738 99 q 606 12 663 26 q 475 -3 550 -3 l 383 -3 q 316 22 338 -3 q 294 94 294 47 q 294 156 294 114 q 294 253 294 197 q 294 367 294 308 q 294 480 294 426 q 294 570 294 533 q 294 618 294 607 q 294 652 294 635 q 294 687 294 669 q 292 722 293 704 q 289 758 292 740 q 303 762 296 761 q 317 763 310 763 q 332 764 324 764 q 370 749 360 764 q 381 692 381 733 q 381 535 381 608 q 379 397 381 461 q 376 280 378 332 q 373 186 375 228 q 367 114 371 144 q 360 64 364 83 l 331 133 q 369 131 349 132 q 410 128 389 129 q 451 126 431 126 q 488 126 471 126 q 585 142 546 126 q 644 197 625 158 q 664 307 664 236 q 664 374 664 331 q 664 470 664 417 q 664 577 664 524 q 664 677 664 631 q 664 750 664 724 q 663 844 664 803 q 660 922 663 886 q 653 993 657 958 z "},"₫":{"ha":833,"x_min":79,"x_max":811,"o":"m 718 183 q 706 181 713 182 q 694 178 700 179 q 679 177 688 178 q 663 176 671 176 q 599 203 618 176 q 579 286 579 229 q 579 356 579 313 q 579 453 579 400 q 579 566 579 507 q 579 682 579 625 q 579 788 579 739 q 579 871 579 836 q 579 918 579 906 q 578 965 579 944 q 574 1006 576 986 q 567 1046 572 1026 q 578 1049 572 1047 q 592 1051 585 1050 q 609 1051 600 1051 q 628 1051 618 1051 q 675 1042 658 1051 q 699 1008 692 1032 q 707 938 707 983 q 707 856 707 906 q 707 744 707 806 q 707 619 707 683 q 707 494 707 554 q 707 386 707 433 q 707 311 707 339 q 708 261 707 283 q 710 221 708 239 q 718 183 713 203 m 81 103 l 667 103 q 716 87 703 103 q 729 40 729 71 q 728 29 729 35 q 727 19 728 24 q 726 9 726 14 q 724 0 725 4 l 140 0 q 92 18 106 0 q 79 71 79 36 q 79 80 79 75 q 79 88 79 85 q 80 95 79 92 q 81 103 81 99 m 283 944 l 750 944 q 798 930 785 944 q 811 889 811 915 q 810 876 811 882 q 810 867 810 871 q 808 858 810 863 q 806 847 807 853 l 343 847 q 294 864 308 847 q 281 914 281 881 q 281 922 281 918 q 281 931 281 926 q 282 938 282 935 q 283 944 282 942 m 571 660 l 614 660 l 614 576 l 594 542 q 547 604 576 575 q 480 651 518 633 q 396 669 442 669 q 259 608 306 669 q 213 447 213 546 l 213 438 q 216 379 213 407 q 228 329 219 351 q 272 300 246 308 q 331 292 297 292 q 433 317 383 292 q 524 399 483 343 q 586 540 564 454 l 614 518 l 614 361 l 571 361 q 497 249 540 292 q 402 188 453 207 q 300 169 351 169 q 188 199 236 169 q 111 283 139 228 q 83 419 83 339 l 83 435 q 119 617 83 542 q 217 734 156 693 q 354 775 278 775 q 484 744 431 775 q 571 660 538 713 z "},"€":{"ha":833,"x_min":21,"x_max":760,"o":"m 468 -28 q 276 22 356 -28 q 154 163 196 72 q 113 374 113 253 l 113 397 q 142 635 113 525 q 228 826 172 744 q 365 954 285 908 q 543 1000 444 1000 q 645 987 606 1000 q 708 951 685 974 q 735 914 728 933 q 743 869 743 894 q 740 841 743 856 q 731 815 736 826 q 715 792 725 803 l 707 792 q 642 858 682 836 q 535 881 603 881 q 385 824 453 881 q 278 658 318 767 q 239 388 239 549 l 239 368 q 240 329 239 354 q 242 278 240 304 q 286 186 257 226 q 363 123 315 146 q 483 100 411 100 q 632 131 571 100 q 742 229 693 163 l 750 229 q 756 208 754 218 q 759 189 758 199 q 760 169 760 179 q 751 106 760 135 q 718 53 742 76 q 621 -6 683 15 q 468 -28 558 -28 m 21 611 l 518 611 q 587 590 567 611 q 607 526 607 568 q 607 521 607 524 q 607 516 607 518 q 607 511 607 514 l 92 511 q 38 532 54 511 q 21 592 21 553 q 21 599 21 596 q 21 606 21 603 q 21 611 21 608 m 21 388 l 518 388 q 588 367 569 388 q 607 306 607 346 q 607 299 607 303 q 607 293 607 296 q 607 288 607 290 l 99 288 q 38 308 56 288 q 21 368 21 329 q 21 376 21 372 q 21 382 21 379 q 21 388 21 385 z "},"ƒ":{"ha":833,"x_min":31,"x_max":781,"o":"m 135 699 l 664 699 q 710 690 693 699 q 735 662 728 681 q 743 615 743 643 q 742 600 743 608 q 741 585 742 592 q 739 571 740 578 l 249 571 q 177 582 203 571 q 142 613 151 593 q 132 665 132 633 q 133 677 132 671 q 134 689 133 683 q 135 699 135 694 m 172 -222 q 223 -215 201 -222 q 260 -188 244 -207 q 282 -139 275 -169 q 294 11 286 -78 q 310 205 301 100 q 327 420 318 310 q 345 635 336 531 q 361 828 354 740 q 397 951 367 899 q 478 1032 426 1003 q 603 1061 531 1061 q 701 1049 663 1061 q 757 1019 740 1036 q 774 992 768 1008 q 781 954 781 975 q 780 938 781 946 q 778 922 779 929 q 776 909 776 915 q 772 897 775 903 l 764 897 q 726 921 749 911 q 679 935 704 931 q 628 940 654 940 q 549 932 583 940 q 493 904 515 924 q 489 860 490 885 q 487 808 488 835 q 485 755 486 781 q 483 708 485 729 q 471 559 478 642 q 456 388 464 476 q 441 212 449 299 q 427 51 433 125 q 417 -78 421 -24 q 378 -240 408 -181 q 297 -323 347 -299 q 172 -347 246 -347 q 95 -336 126 -347 q 50 -308 64 -325 q 35 -274 39 -294 q 31 -231 31 -254 q 32 -208 31 -219 q 35 -186 33 -196 q 40 -169 38 -176 l 49 -169 q 104 -210 76 -197 q 172 -222 132 -222 z "},"₭":{"ha":833,"x_min":26,"x_max":794,"o":"m 119 978 q 133 981 126 981 q 147 983 140 982 q 161 985 154 985 q 175 985 168 985 q 244 959 225 985 q 263 878 263 933 q 263 776 263 835 q 263 647 263 717 q 263 505 263 578 q 263 359 263 432 q 263 218 263 286 q 263 92 263 150 q 263 -8 263 35 q 253 -10 258 -10 q 242 -12 247 -11 q 232 -12 238 -12 q 219 -12 226 -12 q 156 7 179 -12 q 132 79 132 26 q 132 171 132 121 q 132 277 132 221 q 132 394 132 333 q 132 514 132 454 q 132 631 132 574 q 132 738 132 688 q 132 828 132 788 q 131 867 132 847 q 129 905 131 886 q 125 942 128 924 q 119 978 122 961 m 28 515 l 722 515 q 770 497 757 515 q 783 446 783 479 q 783 435 783 440 q 782 426 782 431 q 781 417 782 421 q 780 408 781 413 q 778 401 779 404 l 89 401 q 40 419 53 401 q 26 472 26 436 q 26 481 26 476 q 27 491 26 486 q 28 499 28 496 q 28 507 28 503 q 28 515 28 511 m 447 393 q 474 354 460 375 q 507 308 488 333 q 553 249 526 282 q 614 174 588 201 q 659 133 640 146 q 694 115 678 119 q 725 110 710 110 q 755 115 742 110 q 778 132 768 121 l 786 132 q 790 117 788 125 q 792 101 792 110 q 794 85 793 93 q 794 68 794 76 q 789 25 794 43 q 772 -4 783 7 q 744 -21 761 -14 q 700 -28 726 -28 q 631 -13 665 -28 q 560 37 597 1 q 479 136 524 72 q 417 226 444 183 q 365 312 389 269 q 317 401 342 354 l 214 401 l 214 449 l 447 449 l 447 393 m 446 524 l 446 463 l 214 463 l 214 506 l 306 506 q 408 610 358 554 q 501 726 458 665 q 578 851 544 786 q 635 986 613 917 l 657 986 q 734 972 713 986 q 756 929 756 957 q 741 856 756 894 q 685 761 726 817 q 634 697 663 729 q 574 633 606 664 q 509 574 542 601 q 446 524 476 546 z "},"₱":{"ha":833,"x_min":26,"x_max":794,"o":"m 69 972 q 186 990 135 983 q 285 998 238 996 q 382 1000 332 1000 q 513 987 456 1000 q 612 949 571 974 q 679 887 653 924 q 719 803 706 850 q 732 700 732 756 l 732 650 q 701 442 732 529 q 619 299 671 354 q 501 217 567 243 q 364 190 435 190 q 324 194 342 190 q 290 205 306 197 q 257 225 274 213 l 210 225 l 225 315 q 248 308 236 311 q 273 304 260 306 q 300 302 286 303 q 328 301 314 301 q 435 319 385 301 q 525 379 486 338 q 585 488 564 421 q 607 651 607 554 l 607 697 q 601 772 607 733 q 582 838 594 811 q 495 874 543 863 q 376 885 447 885 q 280 881 324 885 q 203 871 236 876 q 147 861 169 865 q 114 857 124 857 q 87 864 97 857 q 72 887 76 871 q 67 931 67 903 q 67 953 67 943 q 69 972 68 963 m 218 942 l 218 864 q 239 838 232 851 q 248 807 246 824 q 250 768 250 790 q 250 665 250 718 q 249 556 250 611 q 249 447 249 501 q 249 340 249 393 q 249 238 249 288 q 250 140 250 188 q 251 104 250 122 q 252 69 251 86 q 256 33 253 51 q 263 -1 258 15 q 251 -4 256 -3 q 240 -6 246 -6 q 229 -7 235 -7 q 218 -7 224 -7 q 162 4 182 -7 q 133 40 142 15 q 125 104 125 64 q 125 208 125 150 q 125 333 125 267 q 125 467 125 399 q 125 603 125 536 q 125 733 125 671 q 125 849 125 796 q 125 942 125 903 l 218 942 m 169 746 l 169 640 l 82 640 q 39 657 51 640 q 26 704 26 674 q 26 714 26 708 q 27 725 26 719 q 28 736 28 731 q 28 746 28 742 l 169 746 m 215 667 l 215 746 q 266 746 228 746 q 359 746 304 746 q 474 746 414 746 q 588 746 533 746 q 682 746 643 746 q 733 746 721 746 q 781 731 768 746 q 794 679 794 715 q 794 668 794 674 q 794 657 794 663 q 792 647 793 651 q 790 638 792 642 q 740 638 776 638 q 652 639 704 638 q 540 643 600 640 q 420 649 481 646 q 307 657 360 653 q 215 667 254 661 m 169 526 l 169 419 l 82 419 q 39 437 51 419 q 26 483 26 454 q 26 494 26 489 q 27 505 26 500 q 28 516 28 510 q 28 526 28 522 l 169 526 m 215 447 l 215 526 q 266 526 228 526 q 359 526 304 526 q 474 526 414 526 q 588 526 533 526 q 682 526 643 526 q 733 526 721 526 q 781 511 768 526 q 794 460 794 496 q 794 449 794 454 q 794 438 794 443 q 792 426 793 432 q 790 417 792 421 q 740 417 776 417 q 653 419 704 418 q 542 423 601 421 q 422 428 482 425 q 308 437 361 432 q 215 447 254 442 z "},"₲":{"ha":833,"x_min":88,"x_max":788,"o":"m 550 1107 q 546 1063 550 1086 q 533 1014 542 1039 q 515 964 525 989 q 492 915 504 939 l 408 915 q 417 990 414 954 q 419 1057 419 1025 q 419 1084 419 1071 q 417 1110 418 1097 q 415 1136 417 1124 q 411 1161 414 1149 q 423 1164 418 1163 q 434 1167 428 1165 q 448 1169 440 1168 q 464 1171 456 1171 q 481 1171 472 1171 q 533 1158 515 1171 q 550 1107 550 1144 m 339 -140 q 343 -100 339 -122 q 356 -52 347 -78 q 377 2 364 -26 q 408 63 390 31 l 479 63 q 474 5 476 32 q 470 -48 471 -22 q 469 -99 469 -74 q 470 -133 469 -117 q 472 -165 471 -150 q 475 -194 474 -181 q 465 -197 471 -196 q 453 -199 460 -199 q 440 -201 447 -200 q 424 -202 432 -201 q 407 -203 415 -203 q 358 -188 376 -203 q 339 -140 339 -174 m 417 449 l 729 449 q 764 438 751 449 q 782 406 776 428 q 788 347 788 385 l 788 333 l 522 333 q 472 340 493 333 q 438 356 451 346 q 419 383 425 367 q 413 421 413 400 q 414 437 413 429 q 417 449 415 444 m 501 1000 q 565 993 538 1000 q 617 972 593 986 q 660 938 640 958 q 703 873 690 908 q 717 786 717 838 q 717 742 717 764 q 717 697 717 719 q 717 654 717 675 q 696 648 708 650 q 668 646 683 646 q 609 660 629 646 q 589 707 589 674 q 590 790 589 758 q 588 848 590 822 q 574 901 585 874 l 610 847 q 560 874 585 867 q 508 881 535 881 q 357 818 424 881 q 252 646 290 756 q 214 397 214 536 l 214 376 q 216 308 214 340 q 224 232 218 275 q 311 135 257 172 q 447 99 365 99 q 547 122 503 99 q 617 187 592 146 q 642 282 642 228 q 640 315 642 300 q 638 342 639 329 q 632 368 636 356 l 725 368 l 711 326 q 735 290 726 311 q 743 236 743 268 q 722 134 743 181 q 669 54 701 88 q 610 11 644 31 q 533 -18 575 -8 q 440 -28 492 -28 q 292 0 357 -28 q 181 80 228 28 q 111 205 135 132 q 88 369 88 278 l 88 397 q 140 712 88 576 q 285 924 192 847 q 501 1000 379 1000 z "},"₴":{"ha":833,"x_min":35,"x_max":781,"o":"m 36 636 l 699 636 q 764 619 747 636 q 781 567 781 601 q 780 556 781 561 q 779 547 779 551 q 778 538 779 542 q 776 531 778 535 l 128 531 q 70 540 90 531 q 42 567 50 550 q 35 606 35 583 q 35 614 35 610 q 35 622 35 618 q 35 628 35 625 q 36 636 36 632 m 36 431 l 699 431 q 763 413 746 431 q 779 363 779 396 q 779 351 779 357 q 778 342 779 346 q 777 334 778 338 q 775 326 776 331 l 126 326 q 69 335 89 326 q 42 361 49 344 q 35 400 35 378 q 35 408 35 404 q 35 416 35 413 q 35 424 35 419 q 36 431 35 428 m 593 644 l 593 599 l 360 599 q 470 638 425 615 q 537 690 515 660 q 558 754 558 719 q 541 816 558 789 q 481 860 524 843 q 363 876 439 876 q 220 859 276 876 q 125 808 164 842 l 117 808 q 114 822 115 815 q 111 834 113 828 q 108 848 110 840 q 107 865 107 856 q 112 903 107 885 q 133 939 117 922 q 183 969 150 954 q 265 992 217 983 q 371 1000 313 1000 q 523 983 463 1000 q 619 936 583 965 q 671 871 656 907 q 686 796 686 835 l 686 783 q 664 701 686 738 q 593 644 642 665 m 199 318 l 199 371 l 381 349 q 275 281 303 317 q 247 203 247 244 q 265 148 247 171 q 326 113 283 125 q 442 100 368 100 q 602 124 540 100 q 699 196 664 147 l 707 196 q 713 180 711 188 q 717 165 715 172 q 719 148 718 157 q 719 131 719 139 q 711 85 719 104 q 685 51 703 67 q 622 12 660 28 q 533 -12 583 -4 q 417 -21 482 -21 q 251 -1 318 -21 q 151 58 185 18 q 118 157 118 97 l 118 168 q 136 248 118 210 q 199 318 154 286 z "},"₵":{"ha":833,"x_min":101,"x_max":747,"o":"m 506 869 q 360 813 424 869 q 261 651 296 757 q 226 392 226 544 l 226 375 q 227 319 226 350 q 232 261 228 288 q 275 178 249 215 q 346 118 301 140 q 457 96 390 96 q 618 128 551 96 q 729 229 685 161 l 738 229 q 742 214 740 221 q 745 199 744 207 q 747 185 746 192 q 747 169 747 178 q 735 101 747 131 q 704 53 724 72 q 604 -8 664 13 q 460 -28 544 -28 q 263 24 343 -28 q 142 167 183 76 q 101 369 101 257 l 101 397 q 131 639 101 529 q 216 830 161 749 q 347 956 271 911 q 514 1000 422 1000 q 633 988 589 1000 q 700 951 676 975 q 731 908 722 932 q 740 857 740 885 q 739 833 740 844 q 735 812 738 822 q 728 793 732 801 q 719 776 725 785 l 711 776 q 638 847 683 824 q 506 869 593 869 m 447 1179 q 456 1183 451 1182 q 467 1185 461 1185 q 478 1187 472 1186 q 491 1188 485 1188 q 504 1189 497 1189 q 568 1169 550 1189 q 586 1101 586 1150 q 581 1013 586 1065 q 570 901 576 961 q 556 776 564 840 q 538 650 547 711 q 524 538 529 589 q 506 539 514 538 q 490 542 497 540 q 476 547 482 544 q 453 560 461 550 q 447 586 446 569 q 451 697 449 632 q 456 832 454 763 q 460 962 458 901 q 463 1056 463 1022 q 461 1105 463 1083 q 457 1144 460 1126 q 447 1179 454 1161 m 368 -122 q 373 -37 368 -90 q 385 78 378 15 q 401 208 393 142 q 419 333 410 274 q 432 436 428 393 q 450 435 442 436 q 465 431 458 433 q 476 426 472 429 q 502 414 496 424 q 508 388 508 404 q 503 283 507 346 q 497 150 500 219 q 491 19 493 81 q 489 -76 489 -42 q 490 -126 489 -104 q 495 -165 492 -147 q 504 -201 499 -182 q 495 -204 500 -203 q 485 -206 490 -206 q 473 -208 479 -207 q 460 -210 467 -210 q 447 -210 454 -210 q 385 -190 403 -210 q 368 -122 368 -171 z "},"₸":{"ha":833,"x_min":49,"x_max":781,"o":"m 53 735 l 721 735 q 767 712 754 735 q 781 653 781 689 q 781 640 781 646 q 779 628 781 633 q 777 617 778 622 q 775 607 776 613 l 165 607 q 75 631 101 607 q 49 697 49 656 q 49 707 49 701 q 49 717 49 713 q 51 726 50 721 q 53 735 51 731 m 54 972 l 721 972 q 767 956 754 972 q 781 906 781 940 q 781 892 781 899 q 779 880 781 886 q 776 868 778 874 q 774 857 775 863 l 133 857 q 67 876 85 857 q 49 935 49 896 q 49 944 49 939 q 49 954 49 950 q 51 963 50 958 q 54 972 53 968 m 494 -1 q 484 -4 489 -3 q 474 -6 479 -6 q 462 -7 468 -7 q 449 -7 456 -7 q 372 22 393 -7 q 350 104 350 51 q 350 159 350 125 q 350 236 350 193 q 350 326 350 279 q 350 419 350 372 q 350 508 350 465 q 350 585 350 551 q 350 642 350 619 l 458 642 l 450 600 q 471 570 464 586 q 481 538 478 554 q 483 504 483 522 q 483 447 483 482 q 483 369 483 411 q 483 283 483 326 q 483 203 483 240 q 483 140 483 165 q 484 104 483 122 q 485 69 485 86 q 489 33 486 51 q 494 -1 492 15 z "},"₹":{"ha":833,"x_min":43,"x_max":813,"o":"m 581 886 l 644 924 l 644 829 l 608 894 q 703 809 681 857 q 726 699 726 761 l 726 672 q 695 506 726 579 q 606 381 664 432 q 472 304 549 331 q 303 278 394 278 q 256 278 278 278 q 213 281 233 279 q 174 284 193 282 q 140 289 156 286 q 107 296 124 292 q 66 315 78 303 q 54 358 54 326 q 55 374 54 367 q 57 390 56 382 q 60 406 58 399 q 64 419 63 413 q 106 410 85 414 q 149 404 128 407 q 194 399 171 401 q 242 397 218 397 q 292 396 267 396 q 456 428 386 396 q 564 526 525 460 q 603 689 603 592 l 603 710 q 593 783 603 751 q 565 838 583 814 q 477 871 524 863 q 367 879 431 879 q 294 876 329 879 q 228 869 260 874 q 170 861 196 865 q 126 854 144 857 q 94 851 107 851 q 60 870 72 851 q 49 931 49 889 q 49 942 49 936 q 50 952 50 947 q 51 963 50 957 q 53 972 53 968 q 136 983 92 978 q 228 992 181 988 q 324 998 275 996 q 421 1000 372 1000 q 513 999 467 1000 q 601 995 558 997 q 683 988 644 993 q 753 978 722 983 q 799 957 786 972 q 813 915 813 942 q 812 895 813 904 q 810 878 811 886 q 807 864 808 871 q 803 850 806 857 q 757 863 781 857 q 706 873 733 868 q 648 881 679 878 q 581 886 617 885 m 474 386 q 541 257 508 307 q 610 167 574 207 q 663 124 638 136 q 713 111 689 111 q 742 117 731 111 q 763 133 753 122 l 771 133 q 776 119 774 126 q 778 104 778 111 q 780 90 779 97 q 781 74 781 82 q 774 26 781 46 q 757 -4 768 7 q 728 -22 746 -15 q 682 -28 710 -28 q 619 -16 650 -28 q 562 20 589 -4 q 510 82 535 44 q 440 200 469 142 q 382 329 410 258 l 474 386 m 47 686 l 760 686 q 800 673 788 686 q 813 626 813 660 q 813 614 813 619 q 811 603 813 608 q 808 594 810 599 q 806 583 807 589 l 100 583 q 56 600 68 583 q 43 644 43 617 q 43 656 43 650 q 44 666 43 661 q 45 676 44 671 q 47 686 46 682 z "},"₺":{"ha":833,"x_min":31,"x_max":772,"o":"m 39 406 q 118 435 82 421 q 197 468 154 450 q 303 514 240 486 q 418 564 374 544 q 489 593 463 583 q 531 606 515 603 q 561 610 547 610 q 588 599 579 610 q 596 572 596 589 q 595 558 596 564 q 593 545 594 551 q 590 533 592 539 q 586 521 589 526 q 499 494 539 507 q 414 463 458 481 q 307 417 369 444 q 203 372 246 390 q 134 341 161 353 q 89 324 107 329 q 57 319 71 319 q 38 328 44 319 q 31 356 31 338 q 31 369 31 363 q 33 381 32 375 q 35 394 33 388 q 39 406 38 400 m 39 626 q 118 656 82 642 q 197 689 154 671 q 303 735 240 707 q 418 785 374 767 q 489 815 463 804 q 531 828 515 825 q 561 831 547 831 q 588 820 579 831 q 596 793 596 810 q 595 778 596 785 q 593 766 594 772 q 590 754 592 760 q 586 742 589 749 q 499 715 539 728 q 414 684 458 701 q 307 638 369 667 q 203 592 246 611 q 134 563 161 574 q 89 546 107 551 q 57 540 71 540 q 38 549 44 540 q 31 576 31 558 q 31 590 31 583 q 33 602 32 596 q 35 615 33 608 q 39 626 38 621 m 201 125 q 201 235 201 182 q 201 337 201 288 q 202 432 201 386 q 203 519 203 478 q 203 596 203 560 q 202 663 203 632 q 201 719 201 694 q 200 798 201 761 q 197 866 199 835 q 192 924 194 897 q 188 975 190 951 q 201 979 193 978 q 216 981 208 981 q 231 983 224 982 q 247 984 239 983 q 264 985 256 985 q 316 967 300 985 q 332 903 332 950 q 332 826 332 865 q 332 749 332 788 q 332 674 332 711 q 332 606 332 638 q 332 548 332 574 q 332 506 332 522 q 330 312 332 388 q 324 190 328 236 q 312 119 319 144 q 294 74 304 93 l 303 175 l 332 92 l 261 119 l 392 119 q 544 138 488 119 q 627 204 601 157 q 653 335 653 251 q 653 366 653 351 q 653 392 653 381 q 653 410 653 404 l 661 410 q 669 410 665 410 q 676 410 672 410 q 685 410 681 410 q 693 410 689 410 q 754 392 736 410 q 772 342 772 374 q 772 334 772 338 q 772 327 772 331 q 772 319 772 324 q 749 174 772 233 q 678 75 725 114 q 558 18 631 36 q 390 0 486 0 l 286 0 q 240 17 258 0 q 212 64 222 35 q 201 125 201 93 z "},"₼":{"ha":833,"x_min":57,"x_max":789,"o":"m 342 975 q 354 979 347 978 q 367 982 361 981 q 381 985 374 983 q 394 986 388 986 q 411 986 401 986 q 469 972 453 986 q 486 925 486 958 q 485 863 486 897 q 482 792 483 829 q 479 718 481 756 l 476 663 q 473 520 475 594 q 469 378 471 446 q 467 260 468 310 q 467 190 467 210 q 467 119 467 157 q 468 53 468 82 q 456 48 463 50 q 444 44 450 46 q 431 42 438 43 q 415 42 424 42 q 385 55 394 42 q 372 108 375 68 q 369 238 371 171 q 366 374 367 304 q 364 515 365 443 q 361 663 363 588 l 354 711 q 350 801 353 757 q 346 890 347 846 q 342 975 344 933 m 399 761 l 436 761 q 636 711 561 761 q 744 551 711 661 q 778 260 778 440 l 778 135 q 778 94 778 113 q 781 60 779 76 q 784 30 782 44 q 789 1 786 15 q 777 -2 783 0 q 764 -5 771 -4 q 750 -6 757 -6 q 735 -7 743 -7 q 689 2 706 -7 q 665 35 672 11 q 657 104 657 60 l 657 258 q 651 410 657 346 q 635 518 646 474 q 607 592 624 563 q 536 626 581 613 q 432 639 492 639 l 401 639 q 276 601 325 639 q 202 469 226 563 q 178 213 178 376 l 178 135 q 178 96 178 114 q 181 61 179 78 q 185 30 182 44 q 192 0 188 15 q 176 -3 183 -1 q 161 -5 169 -4 q 144 -6 153 -6 q 126 -7 136 -7 q 83 3 99 -7 q 63 39 68 14 q 57 104 57 64 l 57 257 q 98 540 57 428 q 216 706 139 651 q 399 761 293 761 z "},"₽":{"ha":833,"x_min":33,"x_max":760,"o":"m 71 972 q 138 983 106 979 q 202 991 171 988 q 265 997 233 994 q 327 999 296 999 q 392 1000 358 1000 q 553 981 483 1000 q 668 924 622 961 q 737 835 714 886 q 760 718 760 783 l 760 700 q 715 532 760 597 q 584 436 671 467 q 369 406 497 406 q 301 407 335 406 q 238 410 268 408 q 179 416 207 413 q 126 424 151 419 q 79 435 101 428 q 44 457 54 442 q 33 504 33 472 q 33 519 33 513 q 35 531 33 525 q 37 541 36 536 q 39 551 38 546 q 108 539 74 544 q 177 530 143 533 q 245 524 211 526 q 312 519 279 521 q 374 518 344 518 q 562 561 496 518 q 628 710 628 604 l 628 719 q 622 772 628 747 q 601 824 615 797 q 515 862 563 850 q 397 874 467 874 q 319 869 358 874 q 243 860 279 865 q 177 852 207 856 q 131 849 147 849 q 99 853 113 849 q 79 867 86 857 q 69 890 72 876 q 65 921 65 903 q 67 947 65 935 q 71 972 68 960 m 235 972 l 235 850 q 249 819 244 835 q 256 788 254 803 q 257 754 257 772 q 257 663 257 711 q 257 565 257 615 q 257 461 257 514 q 257 354 257 408 q 257 247 257 300 q 257 140 257 193 q 258 104 257 122 q 260 69 258 86 q 264 33 261 51 q 269 -1 267 15 q 259 -4 264 -3 q 249 -6 254 -6 q 237 -7 243 -7 q 225 -7 231 -7 q 149 19 172 -7 q 125 104 125 46 q 125 224 125 161 q 125 351 125 286 q 125 483 125 417 q 125 615 125 550 q 125 743 125 681 q 125 864 125 806 q 125 972 125 922 l 235 972 m 39 307 l 571 307 q 630 290 613 307 q 647 238 647 272 q 647 228 647 232 q 647 219 647 224 q 644 212 646 215 q 643 203 643 208 l 86 203 q 47 218 60 203 q 33 265 33 233 q 33 277 33 271 q 35 288 33 283 q 37 298 36 293 q 39 307 38 303 z "},"₿":{"ha":833,"x_min":49,"x_max":738,"o":"m 232 3 l 232 60 l 328 60 q 320 -2 324 32 q 314 -69 317 -36 q 310 -131 311 -103 q 308 -178 308 -160 q 299 -179 304 -178 q 289 -181 294 -181 q 276 -183 283 -182 q 261 -183 268 -183 q 215 -172 229 -183 q 201 -137 201 -161 q 205 -96 201 -118 q 215 -48 208 -74 q 232 3 222 -22 m 375 1008 l 375 908 l 265 908 q 275 991 272 946 q 279 1079 278 1036 q 281 1151 281 1122 q 294 1154 286 1153 q 310 1156 301 1156 q 328 1157 319 1157 q 374 1147 358 1157 q 390 1111 390 1136 q 388 1081 390 1099 q 383 1046 386 1064 q 375 1008 381 1028 m 442 -19 l 442 68 l 542 68 q 536 5 539 39 q 532 -63 533 -29 q 531 -126 531 -97 q 531 -178 531 -156 q 521 -179 526 -178 q 510 -181 515 -181 q 498 -183 504 -182 q 483 -183 492 -183 q 436 -173 449 -183 q 424 -139 424 -162 q 426 -106 424 -125 q 431 -65 428 -87 q 442 -19 435 -42 m 582 975 l 582 907 l 483 907 q 493 990 490 944 q 497 1080 496 1036 q 499 1151 499 1124 q 511 1154 504 1153 q 526 1156 518 1156 q 544 1157 535 1157 q 590 1147 574 1157 q 606 1111 606 1138 q 603 1071 606 1094 q 595 1022 600 1047 q 582 975 590 997 m 382 -14 q 297 -8 335 -14 q 231 8 258 -3 q 183 30 203 18 q 153 53 164 42 q 132 84 139 68 q 125 121 125 100 q 125 314 125 218 q 125 506 125 410 q 125 699 125 601 q 125 897 125 797 l 242 897 l 225 854 q 250 810 243 836 q 257 747 257 783 q 257 595 257 671 q 257 442 257 519 q 257 287 257 365 q 257 128 257 208 q 288 117 271 122 q 326 110 304 113 q 379 108 347 108 q 493 124 442 108 q 574 176 544 140 q 604 271 604 213 l 604 286 q 582 354 604 324 q 515 406 560 385 q 399 439 469 428 l 272 439 l 272 469 l 586 467 l 586 444 q 692 380 654 425 q 731 275 731 335 l 731 254 q 684 106 731 167 q 559 16 638 46 q 382 -14 481 -14 m 53 972 q 243 994 154 989 q 411 1000 332 1000 q 554 978 493 1000 q 657 919 615 957 q 718 832 699 881 q 738 728 738 783 l 738 707 q 683 538 738 608 q 539 430 629 467 q 339 393 449 393 q 297 399 315 393 q 265 417 278 404 l 235 411 l 235 514 q 272 500 254 504 q 319 496 289 496 q 476 521 411 496 q 576 594 540 546 q 611 710 611 642 l 611 724 q 603 790 611 761 q 579 840 596 818 q 496 866 540 858 q 393 874 451 874 q 257 867 319 874 q 153 853 194 860 q 97 846 111 846 q 60 867 71 846 q 49 931 49 888 q 50 953 49 943 q 53 972 51 963 z "},"^":{"ha":833,"x_min":82,"x_max":744,"o":"m 374 1056 q 396 1056 385 1056 q 418 1056 407 1056 q 453 1047 438 1056 q 493 1011 469 1039 q 572 917 536 965 q 638 810 607 868 q 695 681 668 753 q 744 519 722 610 q 721 514 732 515 q 694 513 710 513 q 636 520 658 513 q 608 549 614 528 q 567 670 588 618 q 524 767 547 722 q 467 857 500 813 q 386 953 433 901 l 456 929 l 364 929 l 432 953 q 346 846 382 896 q 282 745 310 796 q 234 638 254 694 q 197 510 214 581 l 179 510 q 125 516 147 510 q 92 533 103 522 q 82 557 82 544 q 89 595 82 568 q 110 661 96 622 q 163 781 133 725 q 225 887 192 838 q 296 978 258 936 q 374 1056 333 1021 z "},"~":{"ha":833,"x_min":60,"x_max":769,"o":"m 569 224 q 670 249 625 224 q 742 323 715 274 q 769 442 769 372 l 769 449 q 742 558 769 519 q 669 597 715 597 q 641 594 654 597 q 615 582 628 592 l 615 574 q 633 525 628 550 q 638 471 638 500 q 617 385 638 415 q 557 346 597 356 q 508 381 529 358 q 470 434 488 404 q 435 494 453 464 q 394 551 417 525 q 338 594 371 578 q 260 610 306 610 q 159 585 204 610 q 87 511 114 560 q 60 392 60 463 l 60 385 q 88 274 60 313 q 160 236 115 236 q 188 239 175 236 q 214 251 201 242 l 214 260 q 197 308 203 283 q 192 363 192 333 q 212 448 192 418 q 272 488 232 478 q 322 453 301 476 q 359 399 342 429 q 394 339 376 369 q 435 282 413 308 q 491 240 458 256 q 569 224 524 224 z "},"´":{"ha":833,"x_min":343,"x_max":625,"o":"m 510 1126 q 561 1124 539 1128 q 601 1111 583 1121 q 622 1089 617 1104 q 621 1060 626 1074 q 592 996 613 1026 q 545 940 571 965 q 489 896 519 914 q 449 878 469 883 q 406 874 428 874 q 373 878 389 874 q 343 892 357 882 q 420 965 388 928 q 476 1041 453 1001 q 510 1126 499 1081 z "},"`":{"ha":833,"x_min":263,"x_max":571,"o":"m 418 1035 q 452 884 432 951 q 502 757 472 817 q 571 633 532 697 q 538 616 556 622 q 497 610 519 610 q 462 615 475 610 q 432 635 449 621 q 376 703 406 660 q 321 796 347 746 q 278 894 294 846 q 263 979 263 943 q 281 1022 263 1008 q 325 1038 300 1035 q 354 1040 340 1039 q 384 1039 368 1040 q 418 1035 400 1038 z "},"˝":{"ha":833,"x_min":188,"x_max":749,"o":"m 354 1126 q 406 1124 383 1128 q 446 1111 428 1121 q 467 1089 463 1104 q 465 1060 471 1074 q 437 996 457 1026 q 390 940 417 965 q 333 896 364 914 q 293 878 314 883 q 250 874 272 874 q 217 878 233 874 q 188 892 201 882 q 265 965 233 928 q 320 1041 297 1001 q 354 1126 343 1081 m 633 1128 q 685 1124 663 1128 q 725 1113 707 1121 q 744 1090 740 1106 q 744 1060 749 1075 q 715 996 735 1026 q 669 940 694 965 q 613 897 643 914 q 572 879 592 885 q 529 874 551 874 q 497 878 513 874 q 467 892 481 882 q 544 965 511 929 q 599 1042 576 1001 q 633 1128 621 1082 z "},"ˆ":{"ha":833,"x_min":153,"x_max":700,"o":"m 389 1133 q 401 1133 394 1133 q 417 1133 407 1133 q 459 1127 439 1133 q 517 1094 479 1121 q 564 1057 539 1078 q 613 1010 589 1036 q 660 955 638 985 q 700 890 682 925 q 668 876 685 881 q 629 872 651 872 q 596 881 608 872 q 563 914 583 889 q 494 984 533 951 q 383 1054 454 1017 l 463 1035 l 372 1035 l 449 1056 q 319 963 369 1010 q 243 869 269 915 l 235 869 q 189 874 207 869 q 162 888 171 879 q 153 904 153 896 q 161 933 153 914 q 189 978 169 951 q 230 1024 207 1001 q 279 1068 253 1047 q 333 1106 306 1089 q 389 1133 361 1122 z "},"ˇ":{"ha":833,"x_min":135,"x_max":682,"o":"m 444 882 q 433 882 439 882 q 417 882 426 882 q 374 888 394 882 q 317 921 354 894 q 269 958 294 938 q 220 1005 244 979 q 174 1060 196 1031 q 133 1125 151 1090 q 166 1139 149 1135 q 204 1143 183 1143 q 238 1135 225 1143 q 271 1101 251 1126 q 341 1031 301 1064 q 450 961 381 997 l 371 981 l 463 981 l 385 960 q 515 1052 464 1006 q 590 1146 565 1099 l 599 1146 q 645 1141 628 1146 q 672 1128 663 1136 q 682 1111 682 1121 q 674 1082 682 1100 q 644 1036 665 1064 q 603 990 626 1014 q 554 947 581 967 q 500 910 528 926 q 444 882 472 893 z "},"˘":{"ha":833,"x_min":175,"x_max":658,"o":"m 417 990 q 525 1025 486 996 q 582 1115 564 1054 q 618 1108 601 1114 q 649 1093 635 1103 q 657 1076 656 1088 q 653 1051 658 1065 q 603 966 636 1001 q 526 913 571 931 q 422 894 481 894 l 411 894 q 308 913 353 894 q 231 966 263 931 q 181 1051 199 1001 q 176 1076 175 1065 q 185 1093 178 1088 q 215 1108 199 1103 q 251 1115 232 1114 q 308 1025 269 1054 q 417 990 347 996 z "},"˜":{"ha":833,"x_min":154,"x_max":679,"o":"m 539 1010 q 607 1025 581 1010 q 661 1082 633 1040 l 669 1082 q 675 1066 674 1075 q 678 1047 676 1057 q 679 1022 679 1036 q 672 978 679 1001 q 644 935 664 954 q 603 910 628 918 q 544 901 578 901 q 472 914 503 901 q 413 942 440 926 q 358 969 386 957 q 292 982 329 982 q 226 966 253 982 q 172 910 200 950 l 164 910 q 159 926 161 918 q 156 943 157 933 q 154 964 154 953 q 162 1012 154 989 q 186 1053 169 1035 q 227 1080 203 1069 q 285 1090 251 1090 q 361 1078 328 1090 q 422 1050 394 1065 q 476 1022 449 1035 q 539 1010 504 1010 z "},"¯":{"ha":833,"x_min":144,"x_max":690,"o":"m 144 1021 l 628 1021 q 676 1003 664 1021 q 689 950 689 986 q 688 937 689 943 q 687 924 688 931 q 685 911 686 917 l 247 911 q 182 921 204 911 q 152 951 160 931 q 144 1003 144 971 q 144 1009 144 1006 q 144 1015 144 1013 q 144 1021 144 1018 z "},"¨":{"ha":833,"x_min":194,"x_max":639,"o":"m 194 1053 q 225 1056 208 1056 q 256 1057 242 1057 q 303 1052 282 1057 q 337 1035 324 1047 q 350 1000 350 1022 l 350 896 q 319 892 336 893 q 288 892 303 892 q 242 897 264 892 q 208 915 221 901 q 194 949 194 928 l 194 1053 m 483 1053 q 514 1056 497 1056 q 544 1057 531 1057 q 592 1052 571 1057 q 626 1035 613 1047 q 639 1000 639 1022 l 639 896 q 608 892 625 893 q 576 892 592 892 q 531 897 553 892 q 497 915 510 901 q 483 949 483 928 l 483 1053 z "},"˙":{"ha":833,"x_min":324,"x_max":510,"o":"m 324 1044 q 342 1051 332 1049 q 362 1054 351 1053 q 384 1056 372 1056 q 406 1057 396 1057 q 481 1041 453 1057 q 510 988 510 1025 l 510 904 q 492 898 501 900 q 474 894 483 896 q 455 892 465 893 q 433 892 444 892 q 354 913 385 892 q 324 971 324 935 l 324 1044 z "},"˚":{"ha":833,"x_min":249,"x_max":585,"o":"m 421 1167 q 507 1147 469 1167 q 565 1091 544 1126 q 585 1008 585 1056 l 585 999 q 537 880 585 926 q 413 833 489 833 q 295 878 342 833 q 249 993 249 922 l 249 1001 q 271 1088 249 1050 q 332 1146 293 1125 q 421 1167 371 1167 m 422 1088 q 358 1066 381 1088 q 336 1006 336 1044 l 336 996 q 343 962 336 978 q 361 935 350 946 q 385 925 374 928 q 413 922 397 922 q 475 944 453 922 q 497 1001 497 965 l 497 1010 q 490 1047 497 1031 q 469 1074 483 1063 q 449 1084 460 1081 q 422 1088 438 1088 z "},"¸":{"ha":833,"x_min":257,"x_max":558,"o":"m 458 38 q 453 17 456 29 q 449 -8 451 4 q 446 -31 447 -21 q 442 -50 444 -42 l 442 -57 q 528 -92 497 -62 q 558 -174 558 -122 q 510 -283 558 -243 q 374 -324 461 -324 q 307 -312 333 -324 q 269 -283 281 -301 q 257 -244 257 -265 q 258 -225 257 -235 q 263 -206 260 -215 q 268 -187 265 -197 l 276 -187 q 316 -214 296 -206 q 369 -222 336 -222 q 428 -206 408 -222 q 449 -160 449 -190 q 433 -123 449 -136 q 385 -110 418 -110 q 365 -103 372 -110 q 357 -87 357 -97 q 358 -60 357 -75 q 363 -31 360 -46 q 372 -3 367 -17 q 382 19 376 10 q 393 31 385 26 q 417 37 401 35 q 458 38 433 39 z "},"˛":{"ha":833,"x_min":292,"x_max":589,"o":"m 517 26 q 535 23 524 28 q 569 0 546 18 q 559 -9 567 -4 q 533 -17 551 -14 q 431 -68 464 -33 q 397 -151 397 -103 q 419 -204 397 -185 q 483 -224 440 -224 q 528 -218 508 -224 q 568 -197 549 -212 l 576 -197 q 584 -216 582 -207 q 588 -233 586 -225 q 589 -254 589 -242 q 557 -324 589 -301 q 468 -347 525 -347 q 340 -304 389 -347 q 292 -185 292 -261 q 322 -76 292 -124 q 404 -3 353 -29 q 517 26 456 24 z "},"©":{"ha":833,"x_min":26,"x_max":807,"o":"m 417 993 q 630 936 543 993 q 762 767 717 879 q 807 490 807 656 l 807 468 q 761 201 807 310 q 628 36 715 93 q 417 -21 540 -21 q 213 31 301 -21 q 76 192 125 82 q 26 482 26 303 l 26 504 q 72 772 26 663 q 206 937 118 881 q 417 993 293 993 m 417 919 q 247 875 317 919 q 140 740 176 831 q 103 514 103 650 l 103 460 q 142 228 103 321 q 254 88 181 136 q 333 61 293 69 q 417 53 374 53 q 588 97 518 53 q 694 232 657 142 q 731 458 731 322 l 731 513 q 692 742 731 650 q 581 883 654 835 q 501 910 543 901 q 417 919 460 919 m 425 786 q 491 775 464 786 q 542 740 518 764 q 573 696 564 718 q 582 650 582 674 q 582 609 582 629 q 582 568 582 589 q 565 562 574 564 q 543 560 557 560 q 506 572 519 560 q 493 611 493 583 q 492 665 493 644 q 489 722 492 686 l 524 660 q 472 695 493 686 q 426 704 451 704 q 368 681 393 704 q 331 611 343 658 q 318 492 318 564 l 318 476 q 324 380 318 415 q 344 310 331 344 q 383 281 361 290 q 429 272 406 272 q 504 290 474 272 q 563 349 535 308 l 571 349 q 576 325 575 339 q 578 299 578 311 q 574 264 578 279 q 558 233 571 249 q 510 201 543 215 q 428 186 476 186 q 319 215 364 186 q 250 305 274 243 q 226 464 226 367 l 226 479 q 278 708 226 629 q 425 786 329 786 z "},"®":{"ha":833,"x_min":60,"x_max":774,"o":"m 417 1056 q 569 1031 503 1056 q 681 958 636 1007 q 750 838 726 910 q 774 672 774 767 l 774 651 q 750 492 774 561 q 680 375 726 422 q 567 303 633 328 q 415 279 501 279 q 222 322 301 279 q 101 450 142 365 q 60 658 60 535 l 60 679 q 83 841 60 771 q 153 959 107 911 q 265 1031 199 1007 q 417 1056 332 1056 m 417 988 q 294 969 349 988 q 203 914 240 951 q 147 822 167 876 q 126 692 126 767 l 126 640 q 156 490 126 551 q 238 389 185 428 q 324 357 279 368 q 417 346 368 346 q 539 364 485 346 q 630 419 593 382 q 687 512 667 457 q 707 639 707 567 l 707 692 q 678 844 707 781 q 596 946 649 908 q 510 977 554 967 q 417 988 465 988 m 329 842 l 329 800 q 346 770 342 786 q 350 726 350 754 q 350 644 350 685 q 350 560 350 603 q 352 508 350 532 q 360 457 354 483 q 343 453 351 454 q 325 451 335 451 q 283 470 297 451 q 268 521 268 489 q 268 628 268 575 q 268 735 268 682 q 268 842 268 789 l 329 842 m 429 889 q 518 872 483 889 q 571 828 553 856 q 589 768 589 800 l 589 754 q 570 688 589 717 q 522 638 551 658 q 460 606 492 617 q 400 594 428 594 q 397 594 399 594 q 392 594 394 594 q 372 597 379 594 q 358 603 365 599 l 310 603 l 310 658 l 329 658 q 463 685 419 658 q 507 750 507 711 l 507 760 q 506 780 507 771 q 500 796 504 789 q 407 813 471 813 q 338 809 368 813 q 288 801 308 806 q 253 796 267 796 q 238 807 243 796 q 232 836 232 818 q 233 856 232 847 q 238 872 235 865 q 340 885 293 882 q 429 889 386 889 m 488 665 q 505 621 496 644 q 519 578 514 597 q 539 539 532 547 q 556 531 546 531 q 566 533 561 531 q 576 539 571 535 l 585 539 q 588 523 588 531 q 589 503 589 515 q 578 465 589 478 q 543 451 567 451 l 538 451 q 494 468 514 451 q 463 517 475 485 q 445 568 454 539 q 429 624 436 597 l 488 665 z "},"™":{"ha":833,"x_min":14,"x_max":796,"o":"m 19 972 l 318 972 q 360 955 350 972 q 369 911 369 938 q 368 890 369 900 q 365 871 367 879 l 90 871 q 29 890 44 871 q 14 939 14 908 q 15 956 14 949 q 19 972 17 964 m 258 486 q 236 482 247 483 q 213 481 225 481 q 160 494 176 481 q 144 561 144 508 q 144 675 144 618 q 144 789 144 732 q 144 903 144 846 l 222 903 l 218 864 q 240 827 233 850 q 247 769 247 804 q 247 708 247 738 q 247 648 247 678 q 247 586 247 618 q 249 531 247 556 q 258 486 251 507 m 519 483 q 503 481 511 482 q 483 481 496 481 q 435 492 449 481 q 421 531 421 503 q 421 619 421 574 q 421 708 421 664 q 421 797 421 753 q 421 886 421 842 q 419 931 421 910 q 417 969 418 951 q 436 973 425 972 q 460 974 447 974 q 517 966 497 974 q 539 944 538 958 q 555 872 544 908 q 582 800 565 836 q 622 724 599 764 l 579 760 l 628 760 l 588 725 q 631 805 613 765 q 663 885 650 844 q 681 971 675 926 q 700 974 690 974 q 719 974 710 974 q 772 966 754 974 q 789 939 789 958 q 789 815 789 876 q 789 691 789 753 q 789 567 789 629 q 791 523 789 543 q 796 483 793 503 q 775 481 786 482 q 753 479 764 479 q 704 490 718 479 q 690 526 690 501 q 690 559 690 543 q 690 592 690 575 q 694 636 690 611 q 703 695 697 661 q 714 775 708 729 q 725 882 719 821 l 736 840 l 690 840 l 722 881 q 686 767 706 815 q 647 686 667 718 q 611 638 628 654 q 608 638 610 638 q 604 638 607 638 q 598 639 601 638 q 592 643 594 640 q 563 684 579 656 q 528 760 547 713 q 486 874 508 807 l 518 835 l 471 835 l 488 876 q 497 774 492 818 q 507 697 501 729 q 516 638 513 664 q 519 586 519 611 q 519 535 519 560 q 519 483 519 510 z "},"°":{"ha":833,"x_min":186,"x_max":646,"o":"m 421 986 q 537 958 486 986 q 617 878 588 929 q 646 758 646 826 l 646 749 q 616 625 646 679 q 533 540 586 571 q 413 510 481 510 q 296 539 347 510 q 215 619 244 568 q 186 738 186 669 l 186 747 q 216 871 186 817 q 299 956 246 925 q 421 986 351 986 m 406 604 q 509 642 474 604 q 544 750 544 681 l 544 760 q 485 882 544 844 q 457 890 471 888 q 428 892 443 892 q 323 853 358 892 q 288 746 288 815 l 288 736 q 342 617 288 656 q 372 607 357 610 q 406 604 388 604 z "},"℮":{"ha":833,"x_min":36,"x_max":797,"o":"m 417 -17 q 269 19 338 -17 q 148 119 200 56 q 66 268 96 183 q 36 450 36 353 q 66 632 36 547 q 148 781 96 717 q 269 881 200 844 q 417 917 338 917 q 565 881 496 917 q 685 781 633 844 q 767 632 738 717 q 797 450 797 547 l 797 439 l 222 439 q 217 433 217 439 l 217 122 q 220 108 217 114 q 228 94 224 101 q 419 11 303 11 q 559 53 493 11 q 672 167 625 96 l 725 167 q 590 33 669 83 q 417 -17 511 -17 m 222 464 l 611 464 q 619 472 619 464 l 619 783 q 606 814 619 800 q 522 869 571 850 q 419 889 472 889 q 314 867 364 889 q 228 808 264 846 q 220 794 224 803 q 217 778 217 785 l 217 472 q 222 464 217 464 z "},"↕":{"ha":833,"x_min":17,"x_max":815,"o":"m 385 986 l 401 986 q 439 983 424 986 q 474 970 454 981 q 524 936 493 960 q 612 862 571 901 q 689 776 653 822 q 756 678 725 731 q 815 564 788 625 q 795 556 806 560 q 773 551 785 553 q 750 550 761 550 q 694 563 713 550 q 654 618 676 575 q 609 701 632 663 q 558 774 586 739 q 489 844 529 810 q 393 915 449 879 l 465 896 l 367 896 l 439 915 q 342 844 382 879 q 274 774 303 810 q 223 701 246 739 q 178 617 200 663 q 138 563 157 575 q 83 550 119 550 q 65 551 74 550 q 48 553 57 551 q 31 558 39 556 q 17 564 24 560 q 112 736 60 660 q 231 874 164 813 q 385 986 297 936 m 654 354 q 694 410 675 397 q 749 422 713 422 q 767 421 758 422 q 784 418 775 419 q 801 414 793 417 q 815 408 808 411 q 720 236 772 313 q 601 98 668 160 q 447 -15 533 36 l 431 -15 q 394 -12 410 -15 q 359 2 378 -8 q 308 36 340 13 q 220 110 261 71 q 143 196 179 150 q 76 294 107 242 q 17 408 44 347 q 37 416 26 413 q 59 421 47 419 q 82 422 71 422 q 138 410 119 422 q 178 354 156 397 q 223 272 200 310 q 274 198 246 233 q 342 128 303 163 q 439 57 382 93 l 365 76 l 465 76 l 393 57 q 489 128 449 93 q 558 198 529 163 q 609 272 586 233 q 654 354 632 310 m 361 446 l 361 531 q 362 597 361 568 q 364 649 363 626 q 369 692 365 672 q 376 731 372 711 q 392 760 382 750 q 421 769 403 769 q 435 769 428 769 q 447 767 442 768 q 459 714 454 739 q 467 662 464 689 q 471 602 469 635 q 472 528 472 569 l 472 444 q 472 374 472 403 q 470 322 472 344 q 465 281 468 300 q 458 243 463 263 q 443 210 453 221 q 413 200 433 200 q 399 201 406 200 q 386 203 392 201 q 376 256 381 231 q 367 310 371 282 q 363 372 364 339 q 361 446 361 406 z "},"↖":{"ha":833,"x_min":28,"x_max":792,"o":"m 31 713 q 38 780 33 757 q 51 817 42 803 q 75 847 60 831 l 88 858 q 295 871 193 876 q 503 836 397 865 q 722 754 608 807 q 716 739 719 746 q 708 724 713 732 q 698 709 704 717 q 686 694 692 701 q 652 669 668 676 q 615 666 636 663 q 557 683 593 669 q 453 724 503 707 q 351 752 403 742 q 241 764 300 763 q 110 757 182 765 l 179 793 l 108 722 l 142 790 q 137 660 135 718 q 149 550 139 601 q 176 448 158 499 q 217 343 193 397 q 235 285 231 307 q 232 249 239 264 q 207 215 225 235 q 187 199 197 207 q 166 187 176 192 q 147 179 156 182 q 99 294 119 239 q 65 402 79 349 q 42 508 50 456 q 31 611 33 560 q 31 713 28 663 m 619 192 q 569 242 594 218 q 519 292 544 267 q 469 343 494 318 q 418 396 442 372 q 374 440 394 419 q 337 480 354 461 q 303 518 319 499 q 269 558 286 538 q 233 603 253 579 q 220 638 219 622 q 236 671 221 654 q 249 681 242 676 q 263 686 256 685 q 319 644 293 664 q 367 606 344 624 q 413 568 390 588 q 458 528 435 549 q 506 485 481 508 q 560 431 531 461 q 629 363 594 397 q 698 293 664 328 q 765 225 732 258 q 789 175 792 199 q 758 124 786 151 q 738 106 749 114 q 713 89 726 97 q 667 142 690 117 q 619 192 643 168 z "},"↗":{"ha":833,"x_min":19,"x_max":806,"o":"m 615 642 q 573 585 593 611 q 534 536 553 560 q 497 491 515 513 q 458 447 478 469 q 414 398 438 424 q 361 343 390 372 q 292 275 326 310 q 223 206 257 240 q 156 136 189 171 q 106 114 129 111 q 54 144 82 117 q 36 165 44 154 q 19 190 28 176 q 73 236 47 213 q 122 283 99 260 q 172 333 147 308 q 222 383 197 358 q 274 433 247 408 q 326 485 301 461 q 370 528 350 508 q 409 567 390 549 q 447 601 428 585 q 488 634 467 617 q 532 669 508 651 q 567 683 551 683 q 600 668 583 683 q 610 656 606 663 q 615 642 614 649 m 788 817 l 775 829 q 745 855 758 846 q 709 867 732 864 q 642 874 686 871 q 540 874 590 876 q 437 863 489 871 q 331 840 385 854 q 222 804 278 825 q 108 756 167 783 q 116 736 111 747 q 128 715 121 725 q 144 696 136 706 q 178 671 164 678 q 215 668 193 664 q 272 686 236 672 q 377 727 326 710 q 478 755 428 744 q 588 767 529 765 q 719 763 647 769 l 651 796 l 722 725 l 686 794 q 693 663 694 722 q 681 553 692 604 q 653 451 671 501 q 614 347 636 401 q 597 290 600 311 q 600 252 593 268 q 625 218 607 236 q 640 207 632 213 q 655 197 647 201 q 669 188 663 192 q 685 182 676 185 q 765 402 736 297 q 800 609 794 507 q 788 817 806 711 z "},"↘":{"ha":833,"x_min":44,"x_max":807,"o":"m 804 275 q 798 209 803 232 q 785 172 793 186 q 760 142 776 158 l 747 131 q 540 118 642 113 q 333 153 438 124 q 114 235 228 183 q 119 250 115 243 q 127 265 122 257 q 138 280 132 272 q 149 294 143 288 q 183 319 168 313 q 221 323 199 326 q 278 304 243 319 q 382 265 332 282 q 483 237 432 247 q 594 224 535 226 q 725 231 653 222 l 657 194 l 728 265 l 693 197 q 699 329 700 271 q 687 439 697 388 q 660 540 676 490 q 619 646 643 590 q 601 703 604 682 q 603 740 597 724 q 628 774 610 756 q 648 789 638 782 q 669 801 658 796 q 689 808 679 807 q 736 694 715 750 q 772 585 757 639 q 794 480 786 532 q 805 377 803 428 q 804 275 807 326 m 217 796 q 267 747 242 772 q 317 696 292 721 q 365 646 342 671 q 418 593 394 617 q 461 549 442 569 q 498 508 481 528 q 533 470 515 489 q 566 431 550 451 q 601 386 582 410 q 615 351 615 367 q 599 318 615 335 q 586 308 593 313 q 572 301 579 304 q 517 344 543 325 q 467 383 490 364 q 422 420 444 401 q 378 460 400 439 q 330 505 356 481 q 275 557 304 529 q 206 627 240 593 q 138 696 172 661 q 69 764 104 731 q 47 814 44 790 q 78 864 50 838 q 97 883 86 874 q 122 900 108 892 q 168 847 144 872 q 217 796 192 821 z "},"↙":{"ha":833,"x_min":29,"x_max":814,"o":"m 218 346 q 261 402 242 376 q 299 451 281 428 q 337 496 318 474 q 376 541 356 518 q 420 589 396 564 q 474 643 444 614 q 542 714 508 679 q 611 783 576 749 q 679 850 646 817 q 729 873 706 876 q 779 842 753 869 q 798 822 789 833 q 814 797 807 811 q 762 751 788 775 q 713 703 736 728 q 663 654 688 679 q 613 605 638 629 q 561 554 588 581 q 508 501 532 525 q 464 458 485 478 q 424 421 443 439 q 386 386 406 403 q 347 353 367 369 q 303 317 326 336 q 267 303 283 303 q 235 319 250 303 q 225 332 229 325 q 218 346 221 339 m 46 171 l 58 158 q 89 133 75 142 q 126 120 103 124 q 192 114 149 117 q 294 113 243 111 q 397 124 346 115 q 502 148 449 133 q 611 183 556 163 q 725 231 667 204 q 717 251 722 240 q 706 272 713 261 q 689 292 699 282 q 656 316 671 310 q 619 319 640 322 q 563 300 597 315 q 457 259 507 276 q 356 232 407 242 q 245 220 304 222 q 114 225 186 218 l 182 190 l 111 261 l 147 193 q 141 324 139 265 q 153 433 143 382 q 180 535 163 485 q 219 640 197 586 q 238 698 235 676 q 235 735 242 719 q 208 768 228 750 q 195 781 203 775 q 180 790 188 786 q 165 798 172 794 q 150 804 157 801 q 69 585 97 690 q 35 378 40 481 q 46 171 29 276 z "},"■":{"ha":833,"x_min":69,"x_max":764,"o":"m 69 833 l 732 833 q 756 813 749 833 q 764 756 764 792 l 764 139 l 101 139 q 77 160 85 139 q 69 217 69 181 l 69 833 z "},"□":{"ha":833,"x_min":64,"x_max":769,"o":"m 64 844 l 738 844 q 762 824 754 844 q 769 767 769 803 l 769 139 l 96 139 q 72 160 79 139 q 64 217 64 181 l 64 844 m 133 758 q 147 585 143 674 q 149 408 150 497 q 143 225 149 318 l 700 225 q 688 399 692 311 q 685 576 683 486 q 690 758 686 667 l 133 758 z "},"▲":{"ha":833,"x_min":21,"x_max":813,"o":"m 383 892 q 398 892 390 892 q 421 892 406 892 q 461 881 446 892 q 485 860 471 874 q 525 807 500 846 q 677 543 599 690 q 813 238 756 396 q 805 203 810 215 q 790 182 800 190 q 733 164 774 168 q 511 151 629 154 q 274 151 393 147 q 46 164 156 154 q 28 185 35 171 q 21 219 21 199 q 41 281 21 231 q 97 407 61 332 q 178 568 132 482 q 276 739 224 654 q 383 892 329 824 z "},"△":{"ha":833,"x_min":15,"x_max":818,"o":"m 378 892 q 390 892 382 892 q 407 892 397 892 q 426 892 417 892 q 467 881 451 892 q 491 860 476 874 q 531 807 506 846 q 632 638 581 729 q 732 444 683 546 q 818 238 781 343 q 810 200 815 215 q 796 176 806 185 q 772 165 788 169 q 733 158 756 161 q 568 148 654 151 q 393 144 482 144 q 216 148 304 144 q 46 158 128 151 q 25 182 35 165 q 15 219 15 199 q 29 266 15 229 q 69 360 43 303 q 128 485 94 417 q 203 625 163 553 q 289 766 244 697 q 378 892 333 835 m 772 240 l 706 210 l 743 269 l 742 201 q 651 422 707 304 q 529 652 596 539 q 394 856 463 765 l 454 813 l 389 813 l 446 856 q 345 706 397 789 q 244 534 293 624 q 156 358 196 444 q 89 199 115 272 l 88 265 l 125 215 l 56 238 q 287 226 163 229 q 537 226 411 222 q 772 240 663 229 z "},"▶":{"ha":833,"x_min":71,"x_max":803,"o":"m 803 542 q 803 531 803 536 q 803 510 803 525 q 800 487 803 497 q 792 469 797 476 q 771 446 785 460 q 718 406 757 432 q 549 298 640 353 q 358 194 457 243 q 161 108 260 146 q 126 116 139 111 q 106 131 114 121 q 88 188 92 147 q 74 410 78 293 q 74 647 71 528 q 88 875 78 765 q 108 893 94 886 q 143 900 122 900 q 203 881 154 900 q 326 826 253 861 q 483 746 399 792 q 651 648 568 700 q 803 542 735 596 z "},"▼":{"ha":833,"x_min":21,"x_max":813,"o":"m 450 122 q 436 122 444 122 q 413 122 428 122 q 372 133 388 122 q 348 154 363 140 q 308 207 333 168 q 156 471 235 324 q 21 776 78 618 q 28 811 24 799 q 43 832 33 824 q 100 850 60 846 q 323 863 206 860 q 559 863 440 867 q 788 850 678 860 q 806 830 799 844 q 813 794 813 815 q 792 733 813 783 q 737 607 772 682 q 656 446 701 532 q 557 275 610 360 q 450 122 504 190 z "},"▽":{"ha":833,"x_min":15,"x_max":818,"o":"m 456 122 q 444 122 451 122 q 427 122 436 122 q 407 122 418 122 q 367 133 382 122 q 342 154 357 140 q 303 207 328 168 q 202 376 254 285 q 102 569 150 468 q 15 776 54 671 q 23 814 18 799 q 38 838 28 829 q 62 849 46 844 q 100 856 78 854 q 265 867 179 863 q 440 871 351 871 q 617 867 529 871 q 788 856 706 863 q 808 833 799 850 q 818 794 818 815 q 804 748 818 785 q 765 654 790 711 q 705 529 739 597 q 630 389 671 461 q 545 248 589 317 q 456 122 501 179 m 61 774 l 128 804 l 90 744 l 92 813 q 182 593 126 711 q 305 362 238 475 q 439 158 372 249 l 379 201 l 444 201 l 388 158 q 488 308 436 225 q 589 480 540 390 q 678 656 638 569 q 744 815 718 742 l 746 749 l 708 799 l 778 776 q 547 788 672 785 q 297 789 422 792 q 61 774 171 786 z "},"◀":{"ha":833,"x_min":31,"x_max":763,"o":"m 31 458 q 31 470 31 465 q 31 490 31 475 q 33 513 31 503 q 42 531 36 524 q 63 554 49 540 q 115 594 76 568 q 285 702 193 647 q 475 806 376 757 q 672 892 574 856 q 707 884 694 889 q 728 869 719 879 q 746 813 742 853 q 759 590 756 707 q 759 353 763 472 q 746 125 756 235 q 726 107 740 114 q 690 100 711 100 q 630 119 679 100 q 508 174 581 139 q 350 254 435 208 q 182 352 265 300 q 31 458 99 404 z "},"◆":{"ha":833,"x_min":14,"x_max":819,"o":"m 819 488 q 787 417 819 469 q 668 276 754 365 q 594 202 632 239 q 524 135 557 165 q 463 83 490 104 q 442 78 453 79 q 421 76 432 76 q 389 83 407 76 q 347 108 371 89 q 197 246 275 169 q 61 397 119 322 q 25 446 36 429 q 14 476 14 463 q 23 511 14 494 q 64 569 32 528 q 145 666 94 610 q 256 782 196 722 q 375 890 317 842 q 395 896 386 894 q 417 897 404 897 q 451 891 436 897 q 490 865 467 885 q 639 727 564 803 q 771 579 714 651 q 808 528 796 547 q 819 488 819 510 z "},"◇":{"ha":833,"x_min":8,"x_max":825,"o":"m 825 488 q 811 448 825 475 q 764 378 797 421 q 674 276 731 336 q 599 201 638 239 q 525 131 560 163 q 463 78 490 99 q 442 72 453 74 q 421 71 432 71 q 389 77 407 71 q 347 103 371 83 q 246 192 299 143 q 144 294 193 242 q 56 397 94 347 q 19 446 31 429 q 8 476 8 463 q 17 511 8 494 q 58 569 26 528 q 117 640 82 599 q 195 726 151 681 q 285 815 239 771 q 375 896 331 860 q 395 901 386 900 q 417 903 404 903 q 451 897 436 903 q 490 871 467 890 q 590 780 539 829 q 690 679 642 731 q 776 579 739 628 q 813 528 801 547 q 825 488 825 510 m 82 488 q 178 367 121 431 q 308 238 236 303 q 458 108 379 172 l 372 146 l 465 146 l 379 108 q 531 240 461 174 q 656 370 601 307 q 749 488 711 433 q 655 605 711 543 q 528 732 599 667 q 378 863 458 797 l 461 825 l 369 825 l 457 864 q 306 729 376 799 q 178 597 235 660 q 82 488 121 535 z "},"◊":{"ha":833,"x_min":93,"x_max":749,"o":"m 388 988 q 410 988 399 988 q 432 988 421 988 q 467 979 451 988 q 508 943 483 971 q 572 868 542 907 q 628 785 601 829 q 678 692 656 740 q 721 589 701 643 q 741 526 733 553 q 749 488 749 499 q 742 449 749 475 q 721 386 735 422 q 669 270 699 326 q 606 162 640 214 q 534 65 572 110 q 456 -14 496 21 q 433 -14 444 -14 q 410 -14 422 -14 q 374 -6 390 -14 q 333 31 358 3 q 270 106 300 67 q 214 190 240 146 q 165 282 188 233 q 122 386 142 331 q 101 449 108 422 q 93 488 93 476 q 100 526 93 499 q 122 589 107 553 q 173 704 144 647 q 236 813 201 761 q 308 908 271 864 q 388 988 346 953 m 222 488 q 258 371 239 422 q 303 274 278 319 q 362 185 328 229 q 444 89 396 140 l 375 117 l 463 117 l 393 88 q 475 185 440 140 q 535 276 510 231 q 581 373 561 322 q 621 488 601 424 q 584 604 603 553 q 540 700 565 656 q 481 789 515 744 q 399 885 447 833 l 468 858 l 378 858 l 447 883 q 344 758 386 818 q 274 634 303 699 q 222 488 246 569 z "},"☐":{"ha":833,"x_min":28,"x_max":806,"o":"m 28 792 l 774 792 q 798 771 790 792 q 806 714 806 750 l 806 14 l 60 14 q 35 35 43 14 q 28 92 28 56 l 28 792 m 97 706 q 108 565 104 642 q 113 408 111 489 q 113 249 114 328 q 107 100 111 169 l 736 100 q 726 240 729 164 q 721 397 722 317 q 721 557 719 478 q 726 706 722 636 l 97 706 z "},"☑":{"ha":833,"x_min":28,"x_max":840,"o":"m 485 172 l 410 172 q 353 181 372 172 q 313 215 333 190 q 254 299 282 253 q 203 393 226 344 q 168 481 181 442 q 153 528 158 508 q 149 563 149 547 q 160 588 149 578 q 197 599 171 599 q 214 599 206 599 q 229 597 222 599 q 243 594 236 596 q 257 589 250 592 q 320 417 278 503 q 421 257 363 331 l 353 279 l 458 279 l 404 257 q 491 487 444 374 q 590 703 538 600 q 697 890 642 806 q 738 932 717 922 q 776 942 758 942 q 790 940 783 942 q 804 934 797 938 q 817 926 811 931 q 830 916 824 922 q 840 903 836 910 q 710 685 772 806 q 591 434 647 565 q 485 172 535 303 m 28 792 l 482 792 q 563 783 536 792 q 611 756 590 774 l 660 756 l 657 706 l 97 706 q 108 565 104 642 q 113 408 111 489 q 113 249 114 328 q 107 100 111 169 l 736 100 q 727 210 731 153 q 722 326 724 268 q 720 438 721 383 q 722 540 719 493 q 728 606 722 576 q 748 663 735 635 q 785 726 761 692 l 806 756 l 806 14 l 60 14 q 35 35 43 14 q 28 92 28 56 l 28 792 z "},"♡":{"ha":833,"x_min":15,"x_max":818,"o":"m 229 903 q 360 849 311 903 q 424 693 410 796 l 392 738 l 444 738 l 415 693 q 477 849 431 794 q 607 903 524 903 q 713 874 665 903 q 790 785 761 844 q 818 633 818 725 l 818 628 q 787 470 818 549 q 705 324 756 392 q 594 203 654 257 q 475 118 533 150 q 449 114 461 115 q 422 113 438 113 q 373 122 397 113 q 304 157 349 132 q 156 281 222 204 q 53 447 90 357 q 15 625 15 538 l 15 633 q 74 829 15 756 q 229 903 132 903 m 451 160 l 379 175 l 483 175 l 397 157 q 520 235 460 188 q 631 345 581 283 q 710 479 681 407 q 739 629 739 551 l 739 633 q 703 778 739 732 q 604 825 667 825 q 516 783 551 825 q 463 658 481 742 q 441 654 450 656 q 419 653 432 653 q 383 663 394 653 q 364 694 371 672 q 331 768 351 739 q 284 811 311 797 q 222 825 257 825 q 128 775 163 825 q 94 636 94 725 l 94 632 q 140 442 94 532 q 267 279 186 351 q 451 160 347 207 z "},"♥":{"ha":833,"x_min":15,"x_max":818,"o":"m 229 903 q 360 849 311 903 q 424 693 410 796 l 392 738 l 444 738 l 415 693 q 477 849 431 794 q 607 903 524 903 q 713 874 665 903 q 790 785 761 844 q 818 633 818 725 l 818 628 q 787 470 818 549 q 705 324 756 392 q 594 203 654 257 q 475 118 533 150 q 449 114 461 115 q 422 113 438 113 q 373 122 397 113 q 304 157 349 132 q 156 281 222 204 q 53 447 90 357 q 15 625 15 538 l 15 633 q 74 829 15 756 q 229 903 132 903 z "},"✓":{"ha":833,"x_min":149,"x_max":840,"o":"m 485 172 l 410 172 q 353 181 372 172 q 313 215 333 190 q 254 299 282 253 q 203 393 226 344 q 168 481 181 442 q 153 528 158 508 q 149 563 149 547 q 160 588 149 578 q 197 599 171 599 q 214 599 206 599 q 229 597 222 599 q 243 594 236 596 q 257 589 250 592 q 320 417 278 503 q 421 257 363 331 l 353 279 l 458 279 l 404 257 q 491 486 444 374 q 589 701 538 599 q 693 885 640 803 q 728 928 711 915 q 776 942 746 942 q 791 940 783 942 q 806 934 799 938 q 819 926 813 931 q 831 916 825 922 q 840 903 836 910 q 709 688 772 806 q 590 438 646 569 q 485 172 533 307 z "},"\\r":{"ha":833,"x_min":0,"x_max":0,"o":""},"­":{"ha":833,"x_min":147,"x_max":693,"o":"m 147 479 l 633 479 q 669 472 656 479 q 688 446 682 464 q 693 397 693 428 q 692 376 693 388 q 689 353 690 364 l 226 353 q 185 357 201 353 q 161 373 169 361 q 150 406 153 385 q 147 461 147 428 q 147 471 147 465 q 147 479 147 476 z "},"​":{"ha":0,"x_min":0,"x_max":0,"o":""},"":{"ha":833,"x_min":104,"x_max":853,"o":"m 142 744 q 185 739 161 744 q 224 718 210 733 q 246 679 240 701 q 251 618 251 657 q 251 530 251 574 q 251 442 251 486 q 251 353 251 397 q 251 267 251 310 q 253 194 251 225 q 260 138 254 164 q 294 119 275 126 q 339 113 314 113 q 392 119 368 113 q 432 139 415 125 l 439 139 q 441 118 440 128 q 442 99 442 108 q 433 47 442 72 q 414 11 425 22 q 376 -8 401 -1 q 317 -14 350 -14 q 235 1 272 -14 q 174 43 199 15 q 135 110 149 71 q 121 196 121 149 q 121 334 121 265 q 121 471 121 403 q 121 608 121 539 q 117 680 121 653 q 104 739 114 707 q 117 742 111 742 q 130 744 124 743 q 142 744 136 744 m 613 747 q 659 740 638 747 q 694 713 681 733 q 708 654 708 693 q 708 492 708 574 q 708 330 708 411 q 708 167 708 249 q 708 4 708 86 q 672 -185 710 -106 q 563 -306 635 -264 q 388 -347 490 -347 q 294 -341 335 -347 q 225 -324 253 -335 q 183 -299 197 -312 q 163 -263 169 -286 q 157 -212 157 -240 q 158 -192 157 -203 q 160 -174 158 -182 l 168 -174 q 233 -203 201 -192 q 302 -219 265 -214 q 389 -224 339 -224 q 474 -213 431 -224 q 551 -171 517 -203 q 574 -97 568 -139 q 581 8 581 -56 q 581 211 581 110 q 581 413 581 313 q 581 615 581 514 q 577 684 581 657 q 564 740 574 711 q 588 746 576 744 q 613 747 600 747 m 279 1126 q 331 1124 308 1128 q 371 1111 353 1121 q 391 1089 386 1104 q 390 1060 396 1074 q 361 996 382 1026 q 315 940 340 965 q 258 896 289 914 q 218 878 239 883 q 175 874 197 874 q 142 878 158 874 q 113 892 126 882 q 190 965 157 928 q 245 1041 222 1001 q 279 1126 268 1081 m 736 1126 q 788 1124 765 1128 q 828 1111 810 1121 q 848 1089 843 1104 q 847 1060 853 1074 q 818 996 839 1026 q 772 940 797 965 q 715 896 746 914 q 675 878 696 883 q 632 874 654 874 q 599 878 615 874 q 569 892 583 882 q 647 965 614 928 q 702 1041 679 1001 q 736 1126 725 1081 z "},"":{"ha":833,"x_min":89,"x_max":836,"o":"m 94 979 q 121 985 108 983 q 147 986 133 986 q 219 959 197 986 q 242 878 242 932 q 242 725 242 801 q 242 572 242 649 q 242 419 242 496 q 242 267 242 343 q 228 266 236 267 q 211 265 221 265 q 133 285 158 265 q 108 358 108 306 q 108 515 108 436 q 108 671 108 593 q 108 828 108 749 q 106 906 108 868 q 94 979 103 943 m 413 99 q 510 110 467 99 q 578 142 553 122 q 595 190 589 165 q 604 246 601 214 q 607 319 607 278 q 607 459 607 389 q 607 601 607 529 q 607 747 607 672 q 607 900 607 822 l 629 835 l 588 865 l 644 867 q 580 856 613 861 q 514 847 547 851 q 448 841 481 843 q 385 839 415 839 q 343 860 356 839 q 331 922 331 882 q 333 951 331 939 q 336 972 335 964 q 431 975 383 974 q 526 977 478 976 q 624 978 575 978 q 690 970 665 978 q 727 946 715 963 q 739 904 739 929 q 739 761 739 835 q 739 612 739 688 q 739 459 739 536 q 739 304 739 382 q 718 171 739 232 q 655 65 697 110 q 549 -3 613 21 q 397 -28 485 -28 q 297 -21 346 -28 q 210 -1 249 -14 q 146 33 171 13 q 123 67 131 47 q 115 115 115 86 q 117 150 115 135 q 122 176 119 165 l 131 176 q 265 116 197 133 q 413 99 332 99 m 260 1290 q 298 1289 281 1290 q 329 1285 315 1288 q 357 1278 343 1282 q 377 1258 374 1271 q 375 1231 381 1246 q 354 1189 367 1208 q 324 1151 342 1169 q 287 1118 307 1133 q 243 1090 267 1103 q 206 1075 225 1079 q 165 1071 188 1071 q 140 1073 153 1071 q 115 1079 128 1075 q 90 1090 103 1083 q 167 1152 133 1121 q 225 1217 201 1183 q 260 1290 249 1251 m 717 1290 q 755 1289 738 1290 q 786 1285 772 1288 q 814 1278 800 1282 q 834 1258 831 1271 q 832 1231 838 1246 q 811 1189 824 1208 q 781 1151 799 1169 q 744 1118 764 1133 q 700 1090 724 1103 q 663 1075 682 1079 q 622 1071 644 1071 q 597 1073 610 1071 q 572 1079 585 1075 q 547 1090 560 1083 q 624 1152 590 1121 q 682 1217 658 1183 q 717 1290 706 1251 z "},"":{"ha":833,"x_min":0,"x_max":833,"o":"m 0 -347 l 833 -347 l 833 1139 l 0 1139 l 0 -347 m 743 907 l 743 -12 l 150 -12 q 115 -4 128 -12 q 96 22 101 4 q 90 67 90 39 l 90 986 l 683 986 q 719 978 706 986 q 738 953 732 971 q 743 907 743 936 m 311 379 q 378 493 344 432 q 444 619 413 554 q 503 746 475 683 q 551 865 531 808 l 531 865 l 222 865 l 222 192 l 231 192 q 246 238 236 213 q 272 297 256 263 q 311 379 288 332 m 549 596 q 498 488 529 549 q 430 360 467 426 q 354 230 393 294 q 279 110 315 165 l 297 110 l 611 110 l 611 774 l 601 774 q 583 691 597 740 q 549 596 569 642 z "},"ﬁ":{"ha":1667,"x_min":93,"x_max":1342,"o":"m 93 721 l 1082 721 q 1152 712 1126 721 q 1189 685 1178 703 q 1200 639 1200 667 q 1199 615 1200 628 q 1196 594 1197 603 l 217 594 q 140 606 167 594 q 103 640 113 617 q 93 703 93 664 q 93 713 93 707 q 93 721 93 718 m 481 97 q 455 15 481 39 q 385 -8 429 -8 q 356 -6 368 -8 q 335 0 343 -3 q 348 63 343 33 q 353 140 353 93 q 353 290 353 215 q 353 441 353 365 q 353 592 353 517 q 353 740 353 667 q 374 881 353 821 q 440 980 396 940 q 551 1040 483 1019 q 714 1061 619 1061 q 814 1056 767 1061 q 894 1040 861 1050 q 940 1017 928 1029 q 958 987 953 1004 q 963 944 963 969 q 961 920 963 933 q 956 896 960 907 l 947 896 q 824 928 889 918 q 690 939 758 939 q 577 932 626 939 q 490 908 528 925 q 478 826 481 875 q 481 717 476 776 q 481 604 481 665 q 481 476 481 543 q 481 342 481 410 q 481 213 481 275 q 481 97 481 150 m 1157 1047 q 1174 1053 1164 1051 q 1194 1057 1183 1056 q 1216 1059 1204 1058 q 1239 1060 1228 1060 q 1314 1044 1286 1060 q 1342 990 1342 1028 l 1342 907 q 1326 901 1335 903 q 1307 897 1317 899 q 1288 895 1297 896 q 1267 894 1278 894 q 1188 916 1218 894 q 1157 974 1157 938 l 1157 1047 m 1178 743 q 1188 747 1182 744 q 1201 749 1193 749 q 1217 751 1208 750 q 1235 753 1225 753 q 1279 746 1261 753 q 1308 726 1297 739 q 1318 692 1318 714 q 1318 562 1318 628 q 1318 430 1318 496 q 1318 301 1318 364 q 1318 181 1318 238 q 1319 119 1318 147 q 1326 62 1321 90 q 1342 0 1332 33 q 1319 -4 1329 -3 q 1296 -6 1308 -6 q 1218 23 1244 -6 q 1192 132 1192 51 q 1192 210 1192 167 q 1192 301 1192 253 q 1192 399 1192 349 q 1192 497 1192 449 q 1192 589 1192 546 q 1190 647 1192 621 q 1186 697 1189 672 q 1178 743 1183 721 z "},"ﬃ":{"ha":1667,"x_min":79,"x_max":1533,"o":"m 374 97 q 348 15 374 39 q 278 -8 322 -8 q 248 -6 261 -8 q 228 0 235 -3 q 241 63 236 33 q 246 140 246 93 q 246 290 246 215 q 246 441 246 365 q 246 592 246 517 q 246 740 246 667 q 265 881 246 821 q 323 980 285 940 q 418 1040 361 1019 q 551 1061 475 1061 q 630 1056 596 1061 q 688 1040 664 1050 q 722 1017 711 1029 q 740 987 735 1004 q 744 944 744 969 q 743 920 744 933 q 739 896 742 907 l 729 896 q 675 919 707 910 q 609 933 643 928 q 540 939 575 939 q 453 932 490 939 q 383 908 415 925 q 372 826 374 875 q 374 717 369 778 q 374 604 374 665 q 374 476 374 543 q 374 342 374 410 q 374 213 374 275 q 374 97 374 150 m 79 721 l 1275 721 q 1344 712 1319 721 q 1381 685 1369 703 q 1392 639 1392 667 q 1391 615 1392 628 q 1389 594 1390 603 l 203 594 q 126 606 153 594 q 89 640 99 617 q 79 703 79 664 q 79 713 79 707 q 79 721 79 718 m 938 97 q 913 15 938 39 q 842 -8 888 -8 q 813 -6 825 -8 q 792 0 800 -3 q 805 63 800 33 q 810 140 810 93 q 810 290 810 215 q 810 441 810 365 q 810 592 810 517 q 810 740 810 667 q 828 881 810 821 q 883 980 847 940 q 968 1040 918 1019 q 1079 1061 1018 1061 q 1149 1056 1118 1061 q 1199 1040 1179 1050 q 1231 1017 1219 1029 q 1248 987 1242 1004 q 1254 944 1254 969 q 1253 920 1254 933 q 1249 896 1253 907 l 1240 896 q 1164 927 1204 915 q 1074 939 1124 939 q 1005 931 1035 939 q 947 908 975 924 q 935 826 938 875 q 938 717 933 778 q 938 604 938 665 q 938 476 938 543 q 938 342 938 410 q 938 213 938 275 q 938 97 938 150 m 1349 1047 q 1365 1053 1356 1051 q 1385 1057 1375 1056 q 1408 1059 1396 1058 q 1431 1060 1419 1060 q 1484 1053 1461 1060 q 1520 1031 1507 1046 q 1533 990 1533 1015 l 1533 907 q 1517 901 1525 903 q 1499 897 1508 899 q 1479 895 1489 896 q 1458 894 1469 894 q 1379 916 1410 894 q 1349 974 1349 938 l 1349 1047 m 1368 743 q 1379 747 1374 744 q 1392 749 1385 749 q 1408 751 1400 750 q 1426 753 1417 753 q 1470 746 1451 753 q 1499 726 1489 739 q 1510 692 1510 714 q 1510 562 1510 628 q 1510 430 1510 496 q 1510 301 1510 364 q 1510 181 1510 238 q 1511 119 1510 147 q 1518 62 1513 90 q 1532 0 1524 33 q 1510 -4 1521 -3 q 1488 -6 1500 -6 q 1408 23 1435 -6 q 1382 132 1382 51 q 1382 210 1382 167 q 1382 301 1382 253 q 1382 399 1382 349 q 1382 497 1382 449 q 1382 589 1382 546 q 1381 647 1382 621 q 1378 697 1381 672 q 1368 743 1375 721 z "},"µ":{"ha":833,"x_min":104,"x_max":786,"o":"m 164 218 l 226 218 l 240 36 l 219 18 q 244 -107 239 -53 q 250 -193 250 -161 q 250 -238 250 -224 q 250 -274 250 -253 q 231 -281 240 -278 q 204 -283 221 -283 q 161 -272 182 -283 q 128 -238 140 -261 q 115 -178 115 -215 q 120 -49 115 -110 q 136 78 125 13 q 164 218 147 143 m 147 744 q 209 728 183 744 q 249 673 235 713 q 264 560 264 633 l 264 553 q 260 444 264 496 q 252 336 257 393 q 239 208 247 279 q 274 144 250 165 q 335 122 299 122 q 403 140 368 122 q 470 199 438 157 q 534 311 503 240 q 594 488 565 382 l 594 204 l 569 204 q 503 81 539 131 q 428 8 467 32 q 347 -15 389 -15 q 260 2 300 -15 q 190 50 221 19 q 142 118 158 81 q 125 196 125 156 q 125 372 125 283 q 125 547 125 460 q 124 615 125 585 q 118 676 122 646 q 104 739 114 706 q 125 743 115 742 q 147 744 135 744 m 661 747 q 687 746 675 747 q 708 742 699 744 q 708 460 708 601 q 708 176 708 318 q 709 147 708 160 q 711 124 710 135 q 749 111 728 111 q 766 113 758 111 q 781 119 774 115 l 786 119 q 786 113 786 117 q 786 104 786 108 q 779 51 786 78 q 758 5 772 24 q 722 -14 744 -14 l 718 -14 q 644 9 675 -14 q 595 70 613 32 q 578 154 578 108 q 578 424 578 289 q 578 693 578 558 q 589 727 578 715 q 619 743 600 739 q 661 747 639 747 z "}},"familyName":"Recursive Monospace Casual","ascender":1319,"descender":-347,"underlinePosition":-268,"underlineThickness":100,"boundingBox":{"yMin":-458,"xMin":-382,"yMax":1563,"xMax":3306},"resolution":1000,"original_font_information":{"format":0,"copyright":"Copyright 2019 The Recursive Project Authors (github.com/arrowtype/recursive)","fontFamily":"Recursive Monospace Casual","fontSubfamily":"Regular","uniqueID":"1.078;ARRW;RecursiveMonospaceCasual-Regular","fullName":"Recursive Monospace Casual Regular","version":"Version 1.078","postScriptName":"RecursiveMonospaceCasual-Regular","licence":"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL","preferredFamily":"Recursive Monospace Casual","preferredSubfamily":"Regular","unknown1":"Single-story ‘a’","unknown2":"Single-story ‘g’","unknown3":"Simplified Mono ‘f’","unknown4":"Simplified Mono ‘i’","unknown5":"Simplified Mono ‘l’","unknown6":"Simplified Mono ‘r’","unknown7":"Simplified italic diagonals","unknown8":"No-serif ‘L’ & ‘Z’","unknown9":"Simplified Six & Nine","unknown10":"Dotted Zero","unknown11":"Simplified One","unknown12":"Simplified Mono ‘at’","unknown13":"Slashed Zero","unknown14":"Monospace","unknown15":"Casual","unknown16":"Weight","unknown17":"Slant","unknown18":"Cursive","unknown19":"Mono","unknown20":"Regular","unknown21":"Upright"},"cssFontWeight":"normal","cssFontStyle":"normal"}');class $s extends Ba{constructor(t){super(t)}load(t,e,q,n){const i=this,r=new Da(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(i.withCredentials),r.load(t,(function(t){let q;try{q=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),q=JSON.parse(t.substring(65,t.length-2))}const n=i.parse(q);e&&e(n)}),q,n)}parse(t){return new Ks(t)}}class Ks{constructor(t){this.type="Font",this.data=t}generateShapes(t,e=100){const q=[],n=function(t,e,q){const n=Array.from(t),i=e/q.resolution,r=(q.boundingBox.yMax-q.boundingBox.yMin+q.underlineThickness)*i,o=[];let a=0,s=0;for(let t=0;t<n.length;t++){const e=n[t];if("\n"===e)a=0,s-=r;else{const t=Qs(e,i,a,s,q);a+=t.offsetX,o.push(t.path)}}return o}(t,e,this.data);for(let t=0,e=n.length;t<e;t++)Array.prototype.push.apply(q,n[t].toShapes());return q}}function Qs(t,e,q,n,i){const r=i.glyphs[t]||i.glyphs["?"];if(!r)return void console.error('THREE.Font: character "'+t+'" does not exists in font family '+i.familyName+".");const o=new zs;let a,s,l,c,h,u,m,d;if(r.o){const t=r._cachedOutline||(r._cachedOutline=r.o.split(" "));for(let i=0,r=t.length;i<r;)switch(t[i++]){case"m":a=t[i++]*e+q,s=t[i++]*e+n,o.moveTo(a,s);break;case"l":a=t[i++]*e+q,s=t[i++]*e+n,o.lineTo(a,s);break;case"q":l=t[i++]*e+q,c=t[i++]*e+n,h=t[i++]*e+q,u=t[i++]*e+n,o.quadraticCurveTo(h,u,l,c);break;case"b":l=t[i++]*e+q,c=t[i++]*e+n,h=t[i++]*e+q,u=t[i++]*e+n,m=t[i++]*e+q,d=t[i++]*e+n,o.bezierCurveTo(h,u,m,d,l,c)}}return{offsetX:r.ha*e,path:o}}Ks.prototype.isFont=!0;class tl extends ha{constructor(t,e={}){const q=e.font;if(!q||!q.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Ze;const n=q.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),super(n,e),this.type="TextGeometry"}}const el={G:667428e-16,AU:1496e8,COR:1,SCALE:200/1496e8,TIME_STEP:3600,earthMass:5.97*10**24,radiusScale:1/12756,earthRadius:.5,earthVelocity:-29800,earthRotationScale:.1};class ql{constructor(t,e,q,n,i,r,o,a,s,l,c,h,u,m,d){if(this.experience=new kl,this.scene=this.experience.scene,this.name=t,e*=el.AU,q*=el.AU,n*=el.AU,this.position=new ct(e,q,n),this.radius=i*el.earthRadius,this.mass=r*el.earthMass,this.momentum=new ct(o*this.mass,a*this.mass,s*this.mass*el.earthVelocity),this.rotationalSpeed=l,this.rotationalSpeedScaled=1/l*el.earthRotationScale,this.orbit=new Ys(e*el.SCALE,q*el.SCALE,n*el.SCALE),this.ring=m,this.type=u,this.color=c,this.velocityLength=this.getVelocity().length(),0===u?(this.material=new Ie,this.starLight=new $a(16777215,1,11e3),this.starLight.position.set(e*el.SCALE,q*el.SCALE,n*el.SCALE),this.starLight.castShadow=!0,this.starLight.shadow.mapSize.width=1024,this.starLight.shadow.mapSize.height=1024,this.starLight.shadow.camera.top=10,this.starLight.shadow.camera.right=10,this.starLight.shadow.camera.bottom=-10,this.starLight.shadow.camera.left=-10,this.scene.add(this.starLight)):this.material=new fa,null!==h&&(this.material.map=h),null===h&&(this.material.color=new Re(c)),this.geometry=3==u||4==u?new po(this.radius):new pa(this.radius,32,32),this.mesh=new hq(this.geometry,this.material),0!==u&&(this.mesh.castShadow=!0,this.mesh.receiveShadow=!0),m){const t=new ma(7,11,64);let i=t.attributes.position,r=new ct;for(let e=0;e<i.count;e++)r.fromBufferAttribute(i,e),t.attributes.uv.setXY(e,r.length()<9?0:1,1);this.planetRings=new hq(t,new fa({map:d,side:1})),this.planetRings.receiveShadow=!0,this.planetRings.rotateX(Math.PI/1.9),this.planetRings.rotateY(.4),this.planetRings.position.set(e*el.SCALE,q*el.SCALE,n*el.SCALE),this.scene.add(this.planetRings)}if(4!=u){const t=(new $s).parse(Js);this.nameMesh=new hq(new tl(this.name,{font:t,size:4,height:.5,curveSegments:12,bevelEnabled:!1,bevelThickness:.1,bevelSize:.1,bevelSegments:.1}).center(),new Ie({color:"#FFFFFF"})),this.nameMesh.position.set(e*el.SCALE,q*el.SCALE+this.radius+10,n*el.SCALE),this.scene.add(this.nameMesh)}this.speedVector=new Cs(this.getVelocity(),this.mesh.position,this.radius+10+this.radius/2,"#FF00FF"),this.speedVector.visible=!1,this.scene.add(this.speedVector),this.forceVector=new Cs(new ct(0,0,0),this.mesh.position,this.radius+10+this.radius/2,"#FF0000"),this.forceVector.visible=!1,this.scene.add(this.forceVector),this.mesh.position.x=this.position.x*el.SCALE,this.mesh.position.y=this.position.y*el.SCALE,this.mesh.position.z=this.position.z*el.SCALE}getVelocity(){return this.momentum.clone().divideScalar(this.mass)}rotate(){this.mesh.rotation.y+=this.rotationalSpeedScaled*(el.TIME_STEP/3600),this.ring&&(this.planetRings.rotation.z+=.002)}gravitationalForce(t){const e=t.position.clone().sub(this.position),q=e.length();return e.divideScalar(q).multiplyScalar(-1*el.G*this.mass*t.mass/(q*q))}areCollided(t){return this.mesh.position.distanceTo(t.mesh.position)<=this.radius+t.radius}}var nl=q(489),il=q(963),rl=q(669),ol=q(946),al=q(370),sl=q(506),ll=q(816),cl=q(651),hl=q(466),ul=q(138),ml=q(248),dl=q(85),pl=q(475);const fl=new Ia,gl=new Fa(fl),xl=gl.load(nl),vl=gl.load(il),yl=gl.load(rl),_l=gl.load(ol),bl=gl.load(al),Al=gl.load(sl),wl=gl.load(ll),Ml=gl.load(cl),Sl=gl.load(hl),El=gl.load(ul),Cl=gl.load(ml),Tl={sun:xl,earth:vl,jupiter:yl,mars:_l,mercury:bl,venus:Al,saturn:wl,uranus:Ml,neptune:Sl,pluto:El,particle:gl.load(dl),saturnRing:gl.load(pl),moon:Cl};let zl=null;class Ll{constructor(){if(zl)return zl;zl=this,this.experience=new kl,this.scene=this.experience.scene,this.scene.background=new Re("#00001a"),this.sceneLight=new Qa(12170751,.12),this.sun=new ql("Sun",0,0,0,109,333152.42,0,0,0,27,"#ff9800",Tl.sun,0,!1,null),this.mercury=new ql("Mercury",.387,0,0,.383,.0553,0,0,1.59,58.8,"#7973dc",Tl.mercury,1,!1,null),this.venus=new ql("Venus",.723,0,0,.949,.815,0,0,1.18,-244,"#d67a19",Tl.venus,1,!1,null),this.earth=new ql("Earth",1,0,0,1,1,0,0,1,1,"#5592c6",Tl.earth,1,!1,null),this.mars=new ql("Mars",1.52,0,0,.532,.107,0,0,.808,1.03,"#3adede",Tl.mars,1,!1,null),this.jupiter=new ql("Jupiter",5.2,0,0,11.21,317.8,0,0,.439,.415,"#e96a76",Tl.jupiter,2,!1,null),this.saturn=new ql("Saturn",9.57,0,0,9.45,95.2,0,0,.325,.445,"#eba357",Tl.saturn,2,!0,Tl.saturnRing),this.uranus=new ql("Uranus",19.17,0,0,4.01,14.5,0,0,.228,-.72,"#89ebff",Tl.uranus,2,!1,null),this.neptune=new ql("Neptune",30.18,0,0,3.88,17.1,0,0,.182,.673,"#b7d0ff",Tl.neptune,2,!1,null),this.pluto=new ql("Pluto",39.48,0,0,.187,.0022,0,0,.157,6.41,"#ff9469",Tl.pluto,1,!1,null),this.planets=[this.sun,this.mercury,this.venus,this.earth,this.mars,this.jupiter,this.saturn,this.uranus,this.neptune,this.pluto],this.deleteList=[],this.scene.add(this.sceneLight,this.sun.mesh,this.mercury.mesh,this.venus.mesh,this.earth.mesh,this.mars.mesh,this.jupiter.mesh,this.saturn.mesh,this.uranus.mesh,this.neptune.mesh,this.pluto.mesh),this.scene.add(this.sun.orbit.line,this.mercury.orbit.line,this.venus.orbit.line,this.earth.orbit.line,this.mars.orbit.line,this.jupiter.orbit.line,this.saturn.orbit.line,this.uranus.orbit.line,this.neptune.orbit.line,this.pluto.orbit.line),this.planets.forEach((t=>{this.experience.controlPanel.editPlanet(t),this.experience.informationPanel.panel(t)}))}update(){this.planets.forEach((t=>{this.gravitationalForceUpdate(t),this.collisionUpdate(t),this.positionUpdate(t),t.rotate()})),this.deleteList.forEach((t=>{this.experience.controlPanel.deletePlanet(t)})),this.deleteList=[]}gravitationalForceUpdate(t){const e=new ct(0,0,0);this.planets.forEach((q=>{q!=t&&e.add(q.gravitationalForce(t))})),t.momentum=t.momentum.clone().add(e.multiplyScalar(el.TIME_STEP)),t.forceVector.setDirection(e)}collisionUpdate(t){this.planets.forEach((e=>{if(t!=e&&t.areCollided(e)){const q=t.position.clone().sub(e.position.clone()),n=q.clone().divideScalar(q.length());let i=new ct(-n.y,n.x,n.z);i=n.clone().cross(i).clone();const r=n.clone().dot(e.getVelocity().clone()),o=i.clone().dot(e.getVelocity().clone()),a=n.clone().dot(t.getVelocity().clone()),s=i.clone().dot(t.getVelocity().clone()),l=(r*e.mass+a*t.mass+t.mass*(a-r)*el.COR)/(t.mass+e.mass),c=(a*t.mass+r*e.mass+e.mass*(r-a)*el.COR)/(t.mass+e.mass),h=n.clone().multiplyScalar(l),u=i.clone().multiplyScalar(o),m=n.clone().multiplyScalar(c),d=i.clone().multiplyScalar(s),p=h.add(u.clone()),f=m.add(d.clone());e.momentum=p.multiplyScalar(e.mass),t.momentum=f.multiplyScalar(t.mass),0===t.type&&0!==e.type&&this.deleteList.push(e)}}))}positionUpdate(t){const e=t.momentum.clone().divideScalar(t.mass);t.position=t.position.clone().add(e.clone().multiplyScalar(el.TIME_STEP)),t.mesh.position.x=t.position.x*el.SCALE,t.mesh.position.y=t.position.y*el.SCALE,t.mesh.position.z=t.position.z*el.SCALE,t.speedVector.position.set(t.mesh.position.x,t.mesh.position.y,t.mesh.position.z),t.speedVector.setDirection(t.getVelocity()),t.forceVector.position.set(t.mesh.position.x,t.mesh.position.y,t.mesh.position.z),t.velocityLength=t.getVelocity().length(),void 0!==t.nameMesh&&null!=t.nameMesh&&(t.nameMesh.position.x=t.mesh.position.x,t.nameMesh.position.z=t.mesh.position.z,t.nameMesh.lookAt(this.experience.camera.instance.position)),0===t.type&&t.starLight.position.set(t.mesh.position.x,t.mesh.position.y,t.mesh.position.z),t.ring&&t.planetRings.position.set(t.mesh.position.x,t.mesh.position.y,t.mesh.position.z),this.drawPlanetOrbit(t)}drawPlanetOrbit(t){let e=t.orbit.pointCount;if(1e4===e){for(let e=3;e<3e4;e++)t.orbit.line.geometry.attributes.position.array[e-3]=t.orbit.line.geometry.attributes.position.array[e];e--,t.orbit.pointCount--}t.orbit.line.geometry.attributes.position.array[3*e]=t.position.x*el.SCALE,t.orbit.line.geometry.attributes.position.array[3*e+1]=t.position.y*el.SCALE,t.orbit.line.geometry.attributes.position.array[3*e+2]=t.position.z*el.SCALE,t.orbit.pointCount++,t.orbit.line.geometry.setDrawRange(0,t.orbit.pointCount),t.orbit.line.geometry.attributes.position.needsUpdate=!0}}var Rl=q(641);var Il=function(){var t=0,e=document.createElement("div");function q(t){return e.appendChild(t.dom),t}function n(q){for(var n=0;n<e.children.length;n++)e.children[n].style.display=n===q?"block":"none";t=q}e.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",e.addEventListener("click",(function(q){q.preventDefault(),n(++t%e.children.length)}),!1);var i=(performance||Date).now(),r=i,o=0,a=q(new Il.Panel("FPS","#0ff","#002")),s=q(new Il.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var l=q(new Il.Panel("MB","#f08","#201"));return n(0),{REVISION:16,dom:e,addPanel:q,showPanel:n,begin:function(){i=(performance||Date).now()},end:function(){o++;var t=(performance||Date).now();if(s.update(t-i,200),t>=r+1e3&&(a.update(1e3*o/(t-r),100),r=t,o=0,l)){var e=performance.memory;l.update(e.usedJSHeapSize/1048576,e.jsHeapSizeLimit/1048576)}return t},update:function(){i=this.end()},domElement:e,setMode:n}};Il.Panel=function(t,e,q){var n=1/0,i=0,r=Math.round,o=r(window.devicePixelRatio||1),a=80*o,s=48*o,l=3*o,c=2*o,h=3*o,u=15*o,m=74*o,d=30*o,p=document.createElement("canvas");p.width=a,p.height=s,p.style.cssText="width:80px;height:48px";var f=p.getContext("2d");return f.font="bold "+9*o+"px Helvetica,Arial,sans-serif",f.textBaseline="top",f.fillStyle=q,f.fillRect(0,0,a,s),f.fillStyle=e,f.fillText(t,l,c),f.fillRect(h,u,m,d),f.fillStyle=q,f.globalAlpha=.9,f.fillRect(h,u,m,d),{dom:p,update:function(s,g){n=Math.min(n,s),i=Math.max(i,s),f.fillStyle=q,f.globalAlpha=1,f.fillRect(0,0,a,u),f.fillStyle=e,f.fillText(r(s)+" "+t+" ("+r(n)+"-"+r(i)+")",l,c),f.drawImage(p,h+o,u,m-o,d,h,u,m-o,d),f.fillRect(h+m-o,u,o,d),f.fillStyle=q,f.globalAlpha=.9,f.fillRect(h+m-o,u,o,r((1-s/g)*d))}}};const Pl=Il;let Bl=null;class kl{constructor(t){if(Bl)return Bl;Bl=this,window.experience=this,this.canvas=t,this.sizes=new Is,this.time=new Ps,this.scene=new vr,this.camera=new Xs,this.axes=new class{constructor(){this.experience=new kl,this.scene=this.experience.scene,this.mainAxes=new Ts(100),this.mainAxes.visible=!1,this.scene.add(this.mainAxes)}},this.statsHelper=new class{constructor(){this.experience=new kl,this.scene=this.experience.scene,this.stats=Pl(),this.stats.dom.hidden=!0,this.stats.dom.style.marginTop="25px",document.body.appendChild(this.stats.dom)}},this.gridHelper=new class{constructor(){this.experience=new kl,this.scene=this.experience.scene,this.mainGridHelper=new ws(16e3,500,"#FF0000"),this.mainGridHelper.visible=!1,this.scene.add(this.mainGridHelper)}},this.informationPanel=new class{constructor(){this.planetMaterial=""}panel(t){0===t.type?this.planetMaterial="Star":1===t.type?this.planetMaterial="Terrestrial Planet":2===t.type?this.planetMaterial="Gas Planet":this.planetMaterial="Asteroid";const e=document.createElement("div");e.className=`information-panel ${t.name}`;const q=document.createElement("div");q.className="exit",q.onclick=this.hideAll,e.appendChild(q);const n=document.createElement("h2");n.className="planet-name",n.appendChild(document.createTextNode(`${t.name}`)),null!=t.color&&(n.style.color=`${t.color}`),e.appendChild(n);const i=document.createElement("div");i.className="material",i.appendChild(document.createTextNode(this.planetMaterial)),e.appendChild(i);const r=document.createElement("div");r.className="content";const o=document.createElement("div");o.className="X",o.appendChild(document.createTextNode(`${t.mesh.position.x.toFixed(4)}`)),null!=t.color&&(o.style.color=`${t.color}`),r.appendChild(o);const a=document.createElement("div");a.className="Y",a.appendChild(document.createTextNode(`${t.mesh.position.y.toFixed(4)}`)),null!=t.color&&(a.style.color=`${t.color}`),r.appendChild(a);const s=document.createElement("div");s.className="Z",s.appendChild(document.createTextNode(`${t.mesh.position.z.toFixed(4)}`)),null!=t.color&&(s.style.color=`${t.color}`),r.appendChild(s);const l=document.createElement("div");l.className="speed",l.appendChild(document.createTextNode(`${t.getVelocity().length().toFixed(4)}`)),null!=t.color&&(l.style.color=`${t.color}`),r.appendChild(l);const c=document.createElement("div");c.className="AU",c.appendChild(document.createTextNode(`${(t.mesh.position.length()/(el.AU*el.SCALE)).toFixed(4)}`)),null!=t.color&&(c.style.color=`${t.color}`),r.appendChild(c);const h=document.createElement("div");h.className="rotationalSpeed",h.appendChild(document.createTextNode(`${t.rotationalSpeed}`)),null!=t.color&&(h.style.color=`${t.color}`),r.appendChild(h);const u=document.createElement("div");u.className="radius",u.appendChild(document.createTextNode(`${(t.radius/el.earthRadius).toFixed(4)}`)),null!=t.color&&(u.style.color=`${t.color}`),r.appendChild(u);const m=document.createElement("div");m.className="mass",m.appendChild(document.createTextNode(`${t.mass}`)),null!=t.color&&(m.style.color=`${t.color}`),r.appendChild(m),e.appendChild(r),document.body.appendChild(e)}deletePanel(t){null!=document.querySelector(`.${t.name}`)&&document.querySelector(`.${t.name}`).remove()}hideAll(){let t=document.querySelectorAll(".information-panel");for(let e=0;e<t.length;e++)t[e].style.left="-500px"}update(t){document.querySelector(`.${t.name} .content .X`).firstChild.nodeValue=`${t.mesh.position.x.toFixed(4)}`,document.querySelector(`.${t.name} .content .Y`).firstChild.nodeValue=`${t.mesh.position.y.toFixed(4)}`,document.querySelector(`.${t.name} .content .Z`).firstChild.nodeValue=`${t.mesh.position.z.toFixed(4)}`,document.querySelector(`.${t.name} .content .speed`).firstChild.nodeValue=`${t.getVelocity().length().toFixed(4)}`,document.querySelector(`.${t.name} .content .AU`).firstChild.nodeValue=`${(t.mesh.position.length()/(el.AU*el.SCALE)).toFixed(4)}`,document.querySelector(`.${t.name} .content .mass`).firstChild.nodeValue=`${t.mass.toFixed(4)}`}show(t){this.update(t),this.hideAll(),document.querySelector(`.${t.name}`).style.left="0"}},this.controlPanel=new class{constructor(){this.experience=new kl,this.scene=this.experience.scene,this.tempPlanet={name:"",x:0,y:0,z:0,radius:.5,color:"#FFFFFF",mass:1,xV:0,yV:0,zV:1,rotationSpeed:.1,type:1},this.initialization(),this.addBody(),this.editConstants(),this.editHelper(),this.editControllers(),this.resetWorld()}initialization(){this.gui=new Rl.guify({title:"Control Panel",theme:"dark",width:"350px",align:"right",panelOverflowBehavior:"scroll"}),this.gui.Register([{type:"folder",label:"All Bodies"},{type:"folder",label:"Add Body"},{type:"folder",label:"Constants"},{type:"folder",label:"Helpers"},{type:"folder",label:"Controllers"}])}addBody(){this.gui.Register([{type:"text",label:"Warning",folder:"Add Body",initial:"! All values on earth scale !",enabled:!1},{type:"text",label:"Name:",folder:"Add Body",object:this.tempPlanet,property:"name"},{type:"range",label:"X axis:",folder:"Add Body",min:-100,max:100,step:.001,scale:"linear",object:this.tempPlanet,property:"x"},{type:"range",label:"Y axis:",folder:"Add Body",min:-100,max:100,step:.001,scale:"linear",object:this.tempPlanet,property:"y"},{type:"range",label:"Z axis:",folder:"Add Body",min:-100,max:100,step:.001,scale:"linear",object:this.tempPlanet,property:"z"},{type:"range",label:"Radius",folder:"Add Body",min:.001,max:500,step:.01,scale:"linear",object:this.tempPlanet,property:"radius"},{type:"color",label:"Color",folder:"Add Body",format:"hex",object:this.tempPlanet,property:"color"},{type:"range",label:"Mass",folder:"Add Body",object:this.tempPlanet,property:"mass",min:.001,max:1e7,step:1e-5,scale:"linear"},{type:"range",label:"X velocity",folder:"Add Body",min:-1e7,max:1e7,step:.1,scale:"linear",object:this.tempPlanet,property:"xV"},{type:"range",label:"Y velocity",folder:"Add Body",min:-1e7,max:1e7,step:.1,scale:"linear",object:this.tempPlanet,property:"yV"},{type:"range",label:"Z velocity",folder:"Add Body",min:-1e7,max:1e7,step:.1,scale:"linear",object:this.tempPlanet,property:"zV"},{type:"range",label:"Rotation speed",folder:"Add Body",min:.1,max:100,step:.1,scale:"linear",object:this.tempPlanet,property:"rotationSpeed"},{type:"select",label:"type",folder:"Add Body",options:["Terrestrial Planet","Gas Planet","Star","Asteroid"],onChange:t=>{this.tempPlanet.type="Star"===t?0:"Terrestrial Planet"===t?1:"Gas Planet"===t?2:3}},{type:"button",label:"Add Body",folder:"Add Body",action:t=>{const e=this.experience.world.planets;let q=!0;if(""===this.tempPlanet.name)return void this.gui.Toast("Please insert name for the body");if(this.tempPlanet.name.includes(" "))return void this.gui.Toast("Planet insert name without space");if(e.forEach((t=>{t.name.toLowerCase()===this.tempPlanet.name.toLowerCase()&&(this.gui.Toast("Body name already exists"),q=!1)})),!1===q)return;const n=new ql(this.tempPlanet.name,this.tempPlanet.x,this.tempPlanet.y,this.tempPlanet.z,this.tempPlanet.radius,this.tempPlanet.mass,this.tempPlanet.xV,this.tempPlanet.yV,this.tempPlanet.zV,this.tempPlanet.rotationSpeed,this.tempPlanet.color,null,this.tempPlanet.type,!1,null);e.forEach((t=>{n.areCollided(t)&&(this.gui.Toast("Body can not be added in this coordinates"),q=!1)})),!1!==q?(e.push(n),this.scene.add(n.mesh,n.orbit.line),this.experience.informationPanel.panel(n),this.editPlanet(n)):setTimeout((()=>{n.nameMesh.removeFromParent(),n.speedVector.removeFromParent(),n.forceVector.removeFromParent(),0===n.type&&n.starLight.removeFromParent(),n.ring&&n.planetRings.removeFromParent()}),1e3)}}]);for(let t=0;t<this.gui.loadedComponents.length;t++)"Warning"===this.gui.loadedComponents[t].opts.label&&this.gui.loadedComponents[t].SetEnabled(!1)}editPlanet(t){this.gui.Register([{type:"folder",label:t.name,folder:"All Bodies"},{type:"checkbox",label:"Visible",folder:t.name,object:t.mesh,property:"visible"},{type:"checkbox",label:"wireframe",folder:t.name,object:t.mesh.material,property:"wireframe"},{type:"checkbox",label:"orbit",folder:t.name,object:t.orbit.line,property:"visible"},{type:"checkbox",label:"Speed & Gravitational Force",folder:t.name,initial:!1,onChange:e=>{t.speedVector.visible=e,t.forceVector.visible=e}},{type:"color",label:"Color",folder:t.name,initial:t.mesh.material.color.getHexString(),format:"hex",onChange:e=>{t.mesh.material.color.set(e)}},{type:"range",label:"speed (km/s)",folder:t.name,min:0,max:1e5,step:.001,scale:"linear",precision:5,object:t,property:"velocityLength",onChange:e=>{const q=e*t.mass;t.momentum.setLength(q)}},{type:"range",label:"Mass (kg)",folder:t.name,min:1e15,max:4e30,step:1e3,scale:"linear",object:t,property:"mass"}]),0===t.type&&this.gui.Register([{type:"checkbox",label:"Star light",folder:t.name,object:t.starLight,property:"visible"}]),t.ring&&this.gui.Register([{type:"checkbox",label:"Planet rings",folder:t.name,object:t.planetRings,property:"visible"}]),this.gui.Register([{type:"button",label:`Go to ${t.name}`,folder:t.name,action:()=>{const e=2*t.radius/el.earthRadius;this.experience.camera.instance.position.set(t.mesh.position.x,t.mesh.position.y+t.radius+e,t.mesh.position.z+t.radius+e),this.experience.camera.instance.lookAt(t.mesh.position),"First Person Controls"===this.experience.camera.currentControls?this.experience.camera.controls.lookAt(t.mesh.position):"Orbit Controls"===this.experience.camera.currentControls&&(this.experience.camera.controls.target=t.mesh.position),this.experience.informationPanel.show(t)}},{type:"button",label:`Delete ${t.name}`,folder:t.name,action:()=>this.deletePlanet(t)}])}editConstants(){const t=el.G,e=el.AU,q=el.COR,n=el.SCALE,i=el.radiusScale,r=el.TIME_STEP,o=el.earthMass,a=el.earthRadius,s=el.earthVelocity;this.gui.Register([{type:"range",label:"G",folder:"Constants",min:0,max:1,setp:1e-4,scale:"linear",object:el,property:"G"},{type:"range",label:"AU",folder:"Constants",min:0,max:10*e,step:1e3,scale:"linear",object:el,property:"AU"},{type:"range",label:"COR",folder:"Constants",min:0,max:1,step:1e-4,scale:"linear",object:el,property:"COR"},{type:"range",label:"Scale",folder:"Constants",min:0,max:1,setp:1e-5,scale:"linear",precision:5,object:el,property:"SCALE"},{type:"range",label:"Radius Scale",folder:"Constants",min:0,max:1,step:1e-5,scale:"linear",precision:5,object:el,property:"radiusScale"},{type:"range",label:"Time step",folder:"Constants",min:0,max:10*r,step:60,scale:"linear",precision:4,object:el,property:"TIME_STEP"},{type:"range",label:"Earth Mass",folder:"Constants",min:0,max:100*o,step:1e3,scale:"linear",object:el,property:"earthMass"},{type:"range",label:"Earth Radius",folder:"Constants",min:0,max:10,step:.1,scale:"linear",precision:5,object:el,property:"earthRadius"},{type:"range",label:"Earth Velocity",folder:"Constants",min:100*s,max:-100*s,step:1e3,scale:"linear",object:el,property:"earthVelocity"},{type:"button",label:"Reset All",folder:"Constants",action:()=>{el.G=t,el.AU=e,el.COR=q,el.SCALE=n,el.TIME_STEP=r,el.earthMass=o,el.earthRadius=a,el.earthVelocity=s,el.radiusScale=i}}])}editHelper(){const t=this.experience.axes.mainAxes,e=this.experience.statsHelper.stats,q=this.experience.gridHelper.mainGridHelper;this.gui.Register([{type:"folder",label:"Axes",folder:"Helpers"},{type:"checkbox",label:"Axes",folder:"Axes",object:t,property:"visible"},{type:"range",label:"Axes size",folder:"Axes",min:1,max:1e3,step:1,scale:"linear",initial:100,onChange:e=>{t.geometry.attributes.position.array[3]=e,t.geometry.attributes.position.array[10]=e,t.geometry.attributes.position.array[17]=e,t.geometry.attributes.position.needsUpdate=!0}},{type:"checkbox",label:"grid",folder:"Helpers",object:q,property:"visible"},{type:"checkbox",label:"stats",folder:"Helpers",initial:!1,onChange:t=>e.dom.hidden=!t}])}editControllers(){this.gui.Register([{type:"select",label:"controls",folder:"Controllers",options:["Orbit Controls","Fly Controls","First Person Controls"],onChange:t=>this.experience.camera.setControls(t)},{type:"button",label:"Back to Center",folder:"Controllers",action:()=>{const t=new ct(0,0,0);this.experience.camera.instance.position.set(0,200,200),this.experience.camera.instance.lookAt(t),"First Person Controls"===this.experience.camera.currentControls?this.experience.camera.controls.lookAt(t):"Orbit Controls"===this.experience.camera.currentControls&&(this.experience.camera.controls.target=t),this.experience.informationPanel.hideAll()}}])}deletePlanet(t){const e=this.experience.world.planets,q=e.indexOf(t);e.splice(q,1),this.experience.informationPanel.deletePanel(t),t.mesh.removeFromParent(),t.orbit.line.removeFromParent(),t.speedVector.removeFromParent(),t.forceVector.removeFromParent(),void 0!==t.nameMesh&&null!==t.nameMesh&&t.nameMesh.removeFromParent(),0===t.type&&t.starLight.removeFromParent(),t.ring&&t.planetRings.removeFromParent(),this.gui.loadedComponents.forEach((e=>{e.opts.label!==`Delete ${t.name}`&&e.opts.label!==t.name||this.gui.Remove(e)}))}resetWorld(){this.gui.Register([{type:"button",label:"Reset The World",action:()=>document.location.reload()}])}},this.renderer=new Bs,this.world=new Ll,this.Particle=new class{constructor(){this.experience=new kl,this.scene=this.experience.scene,this.count=5e4,this.particlesGeometry=new Ze,this.positions=new Float32Array(3*this.count);for(let t=0;t<3*this.count;t++)this.positions[t]=5e4*(Math.random()-.5),this.positions[t]<=0?this.positions[t]-=80:this.positions[t]+=80;this.particlesGeometry.setAttribute("position",new ke(this.positions,3)),this.particlesMaterial=new ro,this.particlesMaterial.size=30,this.particlesMaterial.sizeAttenuation=!0,this.particlesMaterial.transparent=!0,this.particlesMaterial.alphaMap=Tl.particle,this.particlesMaterial.alphaTest=.01,this.particlesMaterial.depthTest=!0,this.particlesMaterial.depthWrite=!1,this.particlesMaterial.blending=2,this.particles=new co(this.particlesGeometry,this.particlesMaterial),this.scene.add(this.particles)}},this.sizes.on("resize",(()=>{this.resize()})),this.time.on("tick",(()=>{this.update()}))}resize(){this.camera.resize(),this.renderer.resize()}update(){this.camera.update(),this.world.update(),this.renderer.update(),this.statsHelper.stats.update()}}document.querySelector(".start-button").onclick=()=>{document.querySelector(".start-page").remove(),new kl(document.querySelector("canvas.webgl"))}},641:t=>{self,t.exports=(()=>{var t={379:t=>{var e={animationIterationCount:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,stopOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0};t.exports=function(t,q){return"number"!=typeof q||e[t]?q:q+"px"}},764:t=>{t.exports={light:{name:"Light",colors:{menuBarBackground:"rgb(227, 227, 227)",menuBarText:"rgb(36, 36, 36)",panelBackground:"rgb(227, 227, 227)",componentBackground:"rgb(204, 204, 204)",componentBackgroundHover:"rgb(190, 190, 190)",componentBackgroundDisabled:"rgb(200, 200, 200)",componentForeground:"rgb(105, 105, 105)",componentActive:"rgb(36, 36, 36)",textPrimary:"rgb(36, 36, 36)",textSecondary:"rgb(87, 87, 87)",textHover:"rgb(204, 204, 204)",textActive:"rgb(204, 204, 204)",textDisabled:"rgb(180, 180, 180)"}},dark:{name:"Dark",colors:{menuBarBackground:"rgb(35, 35, 35)",menuBarText:"rgb(235, 235, 235)",panelBackground:"rgb(35, 35, 35)",componentBackground:"rgb(54, 54, 54)",componentBackgroundHover:"rgb(76, 76, 76)",componentBackgroundDisabled:"rgb(24, 24, 24)",componentForeground:"rgb(112, 112, 112)",componentActive:"rgb(202, 202, 202)",textPrimary:"rgb(235, 235, 235)",textSecondary:"rgb(181, 181, 181)",textHover:"rgb(235, 235, 235)",textActive:"rgb(54, 54, 54)",textDisabled:"rgb(54, 54, 54)"}},yorha:{name:"YoRHa",colors:{menuBarBackground:"#CCC8B1",menuBarText:"#454138",panelBackground:"#CCC8B1",componentBackground:"#BAB5A1",componentBackgroundHover:"#877F6E",componentBackgroundDisabled:"#DED8C7",componentForeground:"#454138",componentActive:"#978F7E",textPrimary:"#454138",textSecondary:"#454138",textHover:"#CCC8B1",textActive:"#CCC8B1",textDisabled:"#BAB5A6"},font:{fontFamily:"helvetica, sans-serif",fontSize:"14px",fontWeight:"100",inputFontFamily:"ui-monospace, monospace"}}}},287:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-bar {\n    background-color: var(--color-menu-bar-background);\n    height: var(--size-menu-bar-height);\n    width: 100%;\n    opacity: 1.0;\n    position: relative;\n    top: 0;\n    cursor: default;\n}\n\n.guify-bar-title {\n    color: var(--color-menu-bar-text);\n    text-align: center;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    line-height: var(--size-menu-bar-height);\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.guify-bar-button {\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    color: var(--color-text-primary);\n    background-color: var(--color-component-background);\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    margin: 0;\n\n}\n\n/* Hide default accessibility outlines since we're providing our own visual feedback */\n.guify-bar-button:focus {\n    outline: none;\n}\n.guify-bar-button::-moz-focus-inner {\n    border: 0;\n}\n\n.guify-bar-button:hover,\n.guify-bar-button:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-bar-button:active {\n    color: var(--color-text-active) !important;\n    background-color: var(--color-component-active) !important;\n}","",{version:3,sources:["webpack://./src/components/internal/menu-bar.css"],names:[],mappings:"AAEA;IACI,kDAAkD;IAClD,mCAAmC;IACnC,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,MAAM;IACN,eAAe;AACnB;;AAEA;IACI,iCAAiC;IACjC,kBAAkB;IAClB,WAAW;IACX,kBAAkB;IAClB,MAAM;IACN,wCAAwC;IACxC,yBAAyB;IACzB,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,oBAAoB;IACpB,YAAY;IACZ,kBAAkB;IAClB,MAAM;IACN,gCAAgC;IAChC,mDAAmD;IACnD,yBAAyB;IACzB,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;IACjB,SAAS;;AAEb;;AAEA,sFAAsF;AACtF;IACI,aAAa;AACjB;AACA;IACI,SAAS;AACb;;AAEA;;IAEI,8BAA8B;IAC9B,mDAAmD;AACvD;;AAEA;IACI,0CAA0C;IAC1C,0DAA0D;AAC9D",sourcesContent:['@import "../variables.css";\n\n.guify-bar {\n    background-color: var(--color-menu-bar-background);\n    height: var(--size-menu-bar-height);\n    width: 100%;\n    opacity: 1.0;\n    position: relative;\n    top: 0;\n    cursor: default;\n}\n\n.guify-bar-title {\n    color: var(--color-menu-bar-text);\n    text-align: center;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    line-height: var(--size-menu-bar-height);\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.guify-bar-button {\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    color: var(--color-text-primary);\n    background-color: var(--color-component-background);\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    margin: 0;\n\n}\n\n/* Hide default accessibility outlines since we\'re providing our own visual feedback */\n.guify-bar-button:focus {\n    outline: none;\n}\n.guify-bar-button::-moz-focus-inner {\n    border: 0;\n}\n\n.guify-bar-button:hover,\n.guify-bar-button:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-bar-button:active {\n    color: var(--color-text-active) !important;\n    background-color: var(--color-component-active) !important;\n}'],sourceRoot:""}]);const l=s},153:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,"/* Container */\n\n.guify-panel-container {\n    position: absolute;\n    background: var(--color-panel-background);\n}\n\n.guify-panel-container-scrollable {\n    max-height: calc(100% - var(--size-menu-bar-height));\n    overflow: scroll;\n}\n\n/* Container modes (i.e. inner, outer) */\n\n.guify-panel-container-right-inner {\n    right: 0;\n    left: unset;\n}\n\n.guify-panel-container-left-inner {\n    right: unset;\n    left: 0;\n}\n\n.guify-panel-container-right-outer {\n    right: unset;\n    left: 100%;\n}\n\n.guify-panel-container-left-outer {\n    right: 100%;\n    left: unset;\n}\n\n.guify-fullscreen .guify-panel-container-right-inner,\n.guify-fullscreen .guify-panel-container-right-outer {\n    right: 0;\n    left: unset;\n}\n\n.guify-fullscreen .guify-panel-container-left-inner,\n.guify-fullscreen .guify-panel-container-left-outer {\n    right: unset;\n    left: 0;\n}\n\n/* Panel (in container) */\n\n.guify-panel {\n    padding: 14px;\n    /* Last component will have a margin, so reduce padding to account for this */\n    padding-bottom: calc(14px - var(--size-component-spacing));\n\n    /* all: initial;  */\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: default;\n    text-align: left;\n    box-sizing: border-box;\n}\n\n.guify-panel.guify-panel-hidden {\n    height: 0px;\n    display: none;\n}\n\n.guify-panel * {\n    box-sizing: content-box;\n    box-sizing: initial;\n    -webkit-box-sizing: initial;\n    -moz-box-sizing: initial;\n}\n\n.guify-panel input {\n    display: inline;\n}\n\n.guify-panel a {\n    color: inherit;\n    text-decoration: none;\n}\n\n.guify-panel-toggle-button {\n    position: absolute;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    width: 15px;\n    height: 15px;\n    line-height: 15px;\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    color: var(--color-text-primary);\n    background-color: var(--color-component-background);\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n}\n\n/* Open/Close button styling */\n.guify-panel-toggle-button svg {\n    fill-opacity: 0;\n    stroke-width: 3;\n    stroke: var(--color-component-foreground);\n}\n\n/* Remove browser default outlines since we're providing our own */\n.guify-panel-toggle-button:focus {\n    outline:none;\n}\n.guify-panel-toggle-button::-moz-focus-inner {\n    border: 0;\n}\n\n.guify-panel-toggle-button:hover,\n.guify-panel-toggle-button:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-panel-toggle-button:active {\n    color: var(--color-text-active);\n    background-color:var(--color-component-active);\n}","",{version:3,sources:["webpack://./src/components/internal/panel.css"],names:[],mappings:"AAEA,cAAc;;AAEd;IACI,kBAAkB;IAClB,yCAAyC;AAC7C;;AAEA;IACI,oDAAoD;IACpD,gBAAgB;AACpB;;AAEA,wCAAwC;;AAExC;IACI,QAAQ;IACR,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,OAAO;AACX;;AAEA;IACI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,WAAW;IACX,WAAW;AACf;;AAEA;;IAEI,QAAQ;IACR,WAAW;AACf;;AAEA;;IAEI,YAAY;IACZ,OAAO;AACX;;AAEA,yBAAyB;;AAEzB;IACI,aAAa;IACb,6EAA6E;IAC7E,0DAA0D;;IAE1D,mBAAmB;IACnB,yBAAyB;IACzB,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;IACjB,eAAe;IACf,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,uBAAmB;IAAnB,mBAAmB;IACnB,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,UAAU;IACV,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,oBAAoB;IACpB,gCAAgC;IAChC,mDAAmD;;IAEnD,yBAAyB;IACzB,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;;AAErB;;AAEA,8BAA8B;AAC9B;IACI,eAAe;IACf,eAAe;IACf,yCAAyC;AAC7C;;AAEA,kEAAkE;AAClE;IACI,YAAY;AAChB;AACA;IACI,SAAS;AACb;;AAEA;;IAEI,8BAA8B;IAC9B,mDAAmD;AACvD;;AAEA;IACI,+BAA+B;IAC/B,8CAA8C;AAClD",sourcesContent:['@import "../variables.css";\n\n/* Container */\n\n.guify-panel-container {\n    position: absolute;\n    background: var(--color-panel-background);\n}\n\n.guify-panel-container-scrollable {\n    max-height: calc(100% - var(--size-menu-bar-height));\n    overflow: scroll;\n}\n\n/* Container modes (i.e. inner, outer) */\n\n.guify-panel-container-right-inner {\n    right: 0;\n    left: unset;\n}\n\n.guify-panel-container-left-inner {\n    right: unset;\n    left: 0;\n}\n\n.guify-panel-container-right-outer {\n    right: unset;\n    left: 100%;\n}\n\n.guify-panel-container-left-outer {\n    right: 100%;\n    left: unset;\n}\n\n.guify-fullscreen .guify-panel-container-right-inner,\n.guify-fullscreen .guify-panel-container-right-outer {\n    right: 0;\n    left: unset;\n}\n\n.guify-fullscreen .guify-panel-container-left-inner,\n.guify-fullscreen .guify-panel-container-left-outer {\n    right: unset;\n    left: 0;\n}\n\n/* Panel (in container) */\n\n.guify-panel {\n    padding: 14px;\n    /* Last component will have a margin, so reduce padding to account for this */\n    padding-bottom: calc(14px - var(--size-component-spacing));\n\n    /* all: initial;  */\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: default;\n    text-align: left;\n    box-sizing: border-box;\n}\n\n.guify-panel.guify-panel-hidden {\n    height: 0px;\n    display: none;\n}\n\n.guify-panel * {\n    box-sizing: initial;\n    -webkit-box-sizing: initial;\n    -moz-box-sizing: initial;\n}\n\n.guify-panel input {\n    display: inline;\n}\n\n.guify-panel a {\n    color: inherit;\n    text-decoration: none;\n}\n\n.guify-panel-toggle-button {\n    position: absolute;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    width: 15px;\n    height: 15px;\n    line-height: 15px;\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    color: var(--color-text-primary);\n    background-color: var(--color-component-background);\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n}\n\n/* Open/Close button styling */\n.guify-panel-toggle-button svg {\n    fill-opacity: 0;\n    stroke-width: 3;\n    stroke: var(--color-component-foreground);\n}\n\n/* Remove browser default outlines since we\'re providing our own */\n.guify-panel-toggle-button:focus {\n    outline:none;\n}\n.guify-panel-toggle-button::-moz-focus-inner {\n    border: 0;\n}\n\n.guify-panel-toggle-button:hover,\n.guify-panel-toggle-button:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-panel-toggle-button:active {\n    color: var(--color-text-active);\n    background-color:var(--color-component-active);\n}'],sourceRoot:""}]);const l=s},56:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-toast-notification {\n    box-sizing: border-box;\n    position: relative;\n    width: 100%;\n    /* height: 20px; */\n    padding: 8px;\n    padding-left: 20px;\n    padding-right: 20px;\n    text-align: center;\n\n    font-family: var(--font-family);\n    font-size: var(--font-size);\n    font-weight: var(--font-weight);\n}\n\n.guify-toast-area .guify-toast-notification:nth-child(odd) {\n    color: var(--color-text-primary);\n    background-color:var(--color-panel-background);\n}\n\n.guify-toast-area .guify-toast-notification:nth-child(even) {\n    color: var(--color-text-primary);\n    background-color: var(--color-menu-bar-background);\n}\n\n.guify-toast-close-button {\n    color: var(--color-text-primary);\n    background: transparent;\n    position: absolute;\n    text-align: center;\n    margin-top: auto;\n    margin-bottom: auto;\n    border: none;\n    cursor: pointer;\n    top: 0;\n    bottom: 0;\n    right: 8px;\n}","",{version:3,sources:["webpack://./src/components/internal/toast-area.css"],names:[],mappings:"AAEA;IACI,sBAAsB;IACtB,kBAAkB;IAClB,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,kBAAkB;;IAElB,+BAA+B;IAC/B,2BAA2B;IAC3B,+BAA+B;AACnC;;AAEA;IACI,gCAAgC;IAChC,8CAA8C;AAClD;;AAEA;IACI,gCAAgC;IAChC,kDAAkD;AACtD;;AAEA;IACI,gCAAgC;IAChC,uBAAuB;IACvB,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,MAAM;IACN,SAAS;IACT,UAAU;AACd",sourcesContent:['@import "../variables.css";\n\n.guify-toast-notification {\n    box-sizing: border-box;\n    position: relative;\n    width: 100%;\n    /* height: 20px; */\n    padding: 8px;\n    padding-left: 20px;\n    padding-right: 20px;\n    text-align: center;\n\n    font-family: var(--font-family);\n    font-size: var(--font-size);\n    font-weight: var(--font-weight);\n}\n\n.guify-toast-area .guify-toast-notification:nth-child(odd) {\n    color: var(--color-text-primary);\n    background-color:var(--color-panel-background);\n}\n\n.guify-toast-area .guify-toast-notification:nth-child(even) {\n    color: var(--color-text-primary);\n    background-color: var(--color-menu-bar-background);\n}\n\n.guify-toast-close-button {\n    color: var(--color-text-primary);\n    background: transparent;\n    position: absolute;\n    text-align: center;\n    margin-top: auto;\n    margin-bottom: auto;\n    border: none;\n    cursor: pointer;\n    top: 0;\n    bottom: 0;\n    right: 8px;\n}'],sourceRoot:""}]);const l=s},54:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-component-container {\n    position: relative;\n    min-height: var(--size-component-height);\n    line-height: var(--size-component-height);\n    margin-bottom: var(--size-component-spacing);\n}","",{version:3,sources:["webpack://./src/components/partials/container.css"],names:[],mappings:"AAEA;IACI,kBAAkB;IAClB,wCAAwC;IACxC,yCAAyC;IACzC,4CAA4C;AAChD",sourcesContent:['@import "../variables.css";\n\n.guify-component-container {\n    position: relative;\n    min-height: var(--size-component-height);\n    line-height: var(--size-component-height);\n    margin-bottom: var(--size-component-spacing);\n}'],sourceRoot:""}]);const l=s},142:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-component-label {\n    left: 0;\n    width: calc(var(--size-label-width) - 2%);\n    display: inline-block;\n    margin-right: 2%;\n    vertical-align: top;\n    min-height: var(--size-component-height);\n    line-height: var(--size-component-height);\n\n    color: var(--color-text-primary);\n}\n\n/* Disabled styles */\n.disabled .guify-component-label {\n    color: var(--color-text-disabled);\n}","",{version:3,sources:["webpack://./src/components/partials/label.css"],names:[],mappings:"AAEA;IACI,OAAO;IACP,yCAAyC;IACzC,qBAAqB;IACrB,gBAAgB;IAChB,mBAAmB;IACnB,wCAAwC;IACxC,yCAAyC;;IAEzC,gCAAgC;AACpC;;AAEA,oBAAoB;AACpB;IACI,iCAAiC;AACrC",sourcesContent:['@import "../variables.css";\n\n.guify-component-label {\n    left: 0;\n    width: calc(var(--size-label-width) - 2%);\n    display: inline-block;\n    margin-right: 2%;\n    vertical-align: top;\n    min-height: var(--size-component-height);\n    line-height: var(--size-component-height);\n\n    color: var(--color-text-primary);\n}\n\n/* Disabled styles */\n.disabled .guify-component-label {\n    color: var(--color-text-disabled);\n}'],sourceRoot:""}]);const l=s},643:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-value-input {\n    position: absolute;\n    background-color: var(--color-component-background);\n    padding-left: 1%;\n    height: var(--size-component-height);\n    display: inline-block;\n    overflow: hidden;\n    border: none;\n\n    color: var(--color-text-secondary);\n    -webkit-user-select: text;\n       -moz-user-select: text;\n        -ms-user-select: text;\n            user-select: text;\n    cursor: text;\n    line-height: var(--size-component-height);\n    word-break: break-all;\n\n    box-sizing: border-box !important;\n    -moz-box-sizing: border-box !important;\n    -webkit-box-sizing: border-box !important;\n\n    font-family: var(--font-family-for-input);\n\n    border-radius: 0;\n}\n\n.guify-value-input-right {\n    right: 0 !important;\n}\n\n.disabled .guify-value-input {\n    pointer-events: none;\n    background-color: var(--color-component-background-disabled);\n    color: var(--color-text-disabled);\n}","",{version:3,sources:["webpack://./src/components/partials/value.css"],names:[],mappings:"AAEA;IACI,kBAAkB;IAClB,mDAAmD;IACnD,gBAAgB;IAChB,oCAAoC;IACpC,qBAAqB;IACrB,gBAAgB;IAChB,YAAY;;IAEZ,kCAAkC;IAClC,yBAAiB;OAAjB,sBAAiB;QAAjB,qBAAiB;YAAjB,iBAAiB;IACjB,YAAY;IACZ,yCAAyC;IACzC,qBAAqB;;IAErB,iCAAiC;IACjC,sCAAsC;IACtC,yCAAyC;;IAEzC,yCAAyC;;IAEzC,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,4DAA4D;IAC5D,iCAAiC;AACrC",sourcesContent:['@import "../variables.css";\n\n.guify-value-input {\n    position: absolute;\n    background-color: var(--color-component-background);\n    padding-left: 1%;\n    height: var(--size-component-height);\n    display: inline-block;\n    overflow: hidden;\n    border: none;\n\n    color: var(--color-text-secondary);\n    user-select: text;\n    cursor: text;\n    line-height: var(--size-component-height);\n    word-break: break-all;\n\n    box-sizing: border-box !important;\n    -moz-box-sizing: border-box !important;\n    -webkit-box-sizing: border-box !important;\n\n    font-family: var(--font-family-for-input);\n\n    border-radius: 0;\n}\n\n.guify-value-input-right {\n    right: 0 !important;\n}\n\n.disabled .guify-value-input {\n    pointer-events: none;\n    background-color: var(--color-component-background-disabled);\n    color: var(--color-text-disabled);\n}'],sourceRoot:""}]);const l=s},351:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-button {\n    box-sizing: border-box !important;\n    color: var(--color-text-secondary);\n    background-color: var(--color-component-background);\n\n    position: absolute;\n    text-align: center;\n    height: var(--size-component-height);\n    line-height: var(--size-component-height);\n    padding-top: 0px;\n    padding-bottom: 0px;\n    width: calc(100% - var(--size-label-width));\n    border: none;\n    cursor: pointer;\n    right: 0;\n    font-family: inherit;\n}\n\n.guify-button:focus {\n    outline:none;\n}\n.guify-button::-moz-focus-inner {\n    border:0;\n}\n\n.guify-button:hover,\n.guify-button:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-button:active {\n    color: var(--color-text-active) !important;\n    background-color: var(--color-component-active) !important;\n}\n\n*.disabled > .guify-button {\n    pointer-events: none;\n    background-color: var(--color-component-background-disabled);\n    color: var(--color-text-disabled);\n}","",{version:3,sources:["webpack://./src/components/public/button.css"],names:[],mappings:"AAEA;IACI,iCAAiC;IACjC,kCAAkC;IAClC,mDAAmD;;IAEnD,kBAAkB;IAClB,kBAAkB;IAClB,oCAAoC;IACpC,yCAAyC;IACzC,gBAAgB;IAChB,mBAAmB;IACnB,2CAA2C;IAC3C,YAAY;IACZ,eAAe;IACf,QAAQ;IACR,oBAAoB;AACxB;;AAEA;IACI,YAAY;AAChB;AACA;IACI,QAAQ;AACZ;;AAEA;;IAEI,8BAA8B;IAC9B,mDAAmD;AACvD;;AAEA;IACI,0CAA0C;IAC1C,0DAA0D;AAC9D;;AAEA;IACI,oBAAoB;IACpB,4DAA4D;IAC5D,iCAAiC;AACrC",sourcesContent:['@import "../variables.css";\n\n.guify-button {\n    box-sizing: border-box !important;\n    color: var(--color-text-secondary);\n    background-color: var(--color-component-background);\n\n    position: absolute;\n    text-align: center;\n    height: var(--size-component-height);\n    line-height: var(--size-component-height);\n    padding-top: 0px;\n    padding-bottom: 0px;\n    width: calc(100% - var(--size-label-width));\n    border: none;\n    cursor: pointer;\n    right: 0;\n    font-family: inherit;\n}\n\n.guify-button:focus {\n    outline:none;\n}\n.guify-button::-moz-focus-inner {\n    border:0;\n}\n\n.guify-button:hover,\n.guify-button:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-button:active {\n    color: var(--color-text-active) !important;\n    background-color: var(--color-component-active) !important;\n}\n\n*.disabled > .guify-button {\n    pointer-events: none;\n    background-color: var(--color-component-background-disabled);\n    color: var(--color-text-disabled);\n}'],sourceRoot:""}]);const l=s},11:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,':root {\n    --checkbox-border-width: 4px;\n}\n\ninput[type=checkbox].guify-checkbox {\n    opacity: 0;\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    margin: 0;\n    border-radius: 0;\n    border: none;\n    cursor: pointer;\n}\n\ninput[type=checkbox].guify-checkbox + label {\n    margin: 0;\n}\n\ninput[type=checkbox].guify-checkbox + label:before {\n    content: "";\n    display: inline-block;\n    width: var(--size-component-height);\n    height: var(--size-component-height);\n    padding: 0;\n    margin: 0;\n    vertical-align: middle;\n    background-color: var(--color-component-background);\n    border-radius: 0px;\n    cursor: pointer;\n    box-sizing: content-box;\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box;\n\n}\n\n/* Hover style */\ninput[type=checkbox].guify-checkbox:hover:not(:disabled) + label:before {\n    width: calc(var(--size-component-height) - (4px * 2));\n    width: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    height: calc(var(--size-component-height) - (4px * 2));\n    height: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    background-color: var(--color-component-background-hover);\n    border: solid 4px var(--color-component-background);\n}\n\n/* Checked style */\ninput[type=checkbox]:checked.guify-checkbox + label:before {\n    width: calc(var(--size-component-height) - (4px * 2));\n    width: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    height: calc(var(--size-component-height) - (4px * 2));\n    height: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    background-color: var(--color-component-foreground);\n    border: solid 4px var(--color-component-background);\n    border: solid var(--checkbox-border-width) var(--color-component-background);\n}\n\n/* Focused and checked */\ninput[type=checkbox]:checked.guify-checkbox:focus + label:before {\n    width: calc(var(--size-component-height) - (4px * 2));\n    width: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    height: calc(var(--size-component-height) - (4px * 2));\n    height: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    background-color: var(--color-component-foreground);\n    border: solid 4px var(--color-component-background-hover);\n    border: solid var(--checkbox-border-width) var(--color-component-background-hover);\n}\n\n/* Focus and unchecked */\ninput[type=checkbox].guify-checkbox:focus + label:before {\n    background-color: var(--color-component-background-hover);\n}\n\n/* Disabled styles */\n.disabled input[type=checkbox].guify-checkbox + label {\n    pointer-events: none;\n}\n.disabled input[type="checkbox"].guify-checkbox + label::before {\n    pointer-events: none;\n    background-color: var(--color-component-background-disabled);\n}',"",{version:3,sources:["webpack://./src/components/public/checkbox.css"],names:[],mappings:"AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,UAAU;IACV,gBAAgB;IAChB,qBAAqB;IACrB,wBAAwB;IACxB,SAAS;IACT,gBAAgB;IAChB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,WAAW;IACX,qBAAqB;IACrB,mCAAmC;IACnC,oCAAoC;IACpC,UAAU;IACV,SAAS;IACT,sBAAsB;IACtB,mDAAmD;IACnD,kBAAkB;IAClB,eAAe;IACf,uBAAuB;IACvB,4BAA4B;IAC5B,+BAA+B;;AAEnC;;AAEA,gBAAgB;AAChB;IACI,qDAA8E;IAA9E,8EAA8E;IAC9E,sDAA+E;IAA/E,+EAA+E;IAC/E,yDAAyD;IACzD,mDAAmD;AACvD;;AAEA,kBAAkB;AAClB;IACI,qDAA8E;IAA9E,8EAA8E;IAC9E,sDAA+E;IAA/E,+EAA+E;IAC/E,mDAAmD;IACnD,mDAA4E;IAA5E,4EAA4E;AAChF;;AAEA,wBAAwB;AACxB;IACI,qDAA8E;IAA9E,8EAA8E;IAC9E,sDAA+E;IAA/E,+EAA+E;IAC/E,mDAAmD;IACnD,yDAAkF;IAAlF,kFAAkF;AACtF;;AAEA,wBAAwB;AACxB;IACI,yDAAyD;AAC7D;;AAEA,oBAAoB;AACpB;IACI,oBAAoB;AACxB;AACA;IACI,oBAAoB;IACpB,4DAA4D;AAChE",sourcesContent:['@import "../variables.css";\n\n:root {\n    --checkbox-border-width: 4px;\n}\n\ninput[type=checkbox].guify-checkbox {\n    opacity: 0;\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    margin: 0;\n    border-radius: 0;\n    border: none;\n    cursor: pointer;\n}\n\ninput[type=checkbox].guify-checkbox + label {\n    margin: 0;\n}\n\ninput[type=checkbox].guify-checkbox + label:before {\n    content: "";\n    display: inline-block;\n    width: var(--size-component-height);\n    height: var(--size-component-height);\n    padding: 0;\n    margin: 0;\n    vertical-align: middle;\n    background-color: var(--color-component-background);\n    border-radius: 0px;\n    cursor: pointer;\n    box-sizing: content-box;\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box;\n\n}\n\n/* Hover style */\ninput[type=checkbox].guify-checkbox:hover:not(:disabled) + label:before {\n    width: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    height: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    background-color: var(--color-component-background-hover);\n    border: solid 4px var(--color-component-background);\n}\n\n/* Checked style */\ninput[type=checkbox]:checked.guify-checkbox + label:before {\n    width: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    height: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    background-color: var(--color-component-foreground);\n    border: solid var(--checkbox-border-width) var(--color-component-background);\n}\n\n/* Focused and checked */\ninput[type=checkbox]:checked.guify-checkbox:focus + label:before {\n    width: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    height: calc(var(--size-component-height) - (var(--checkbox-border-width) * 2));\n    background-color: var(--color-component-foreground);\n    border: solid var(--checkbox-border-width) var(--color-component-background-hover);\n}\n\n/* Focus and unchecked */\ninput[type=checkbox].guify-checkbox:focus + label:before {\n    background-color: var(--color-component-background-hover);\n}\n\n/* Disabled styles */\n.disabled input[type=checkbox].guify-checkbox + label {\n    pointer-events: none;\n}\n.disabled input[type="checkbox"].guify-checkbox + label::before {\n    pointer-events: none;\n    background-color: var(--color-component-background-disabled);\n}'],sourceRoot:""}]);const l=s},442:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,"/* Styling for simple-color-picker */\n\n.guify-color .Scp {\n    width: 125px;\n    height: 100px;\n    -webkit-user-select: none;\n        -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n    position: relative;\n    z-index: 1000;\n    cursor: pointer;\n}\n.guify-color .Scp-saturation {\n    position: relative;\n    width: calc(100% - 25px);\n    height: 100%;\n    background: linear-gradient(to right, #fff 0%, #f00 100%);\n    float: left;\n    margin-right: 5px;\n}\n.guify-color .Scp-brightness {\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(to top, #000 0%, rgba(255,255,255,0) 100%);\n}\n.guify-color .Scp-sbSelector {\n    border: 1px solid;\n    position: absolute;\n    width: 14px;\n    height: 14px;\n    background: #fff;\n    border-radius: 10px;\n    top: -7px;\n    left: -7px;\n    box-sizing: border-box;\n    z-index: 10;\n}\n.guify-color .Scp-hue {\n    width: 20px;\n    height: 100%;\n    position: relative;\n    float: left;\n    background: linear-gradient(to bottom, #f00 0%, #f0f 17%, #00f 34%, #0ff 50%, #0f0 67%, #ff0 84%, #f00 100%);\n}\n.guify-color .Scp-hSelector {\n    position: absolute;\n    background: #fff;\n    border-bottom: 1px solid #000;\n    right: -3px;\n    width: 10px;\n    height: 2px;\n}\n\n/* Disabled styles */\n.disabled .guify-color {\n    pointer-events: none;\n}","",{version:3,sources:["webpack://./src/components/public/color.css"],names:[],mappings:"AAEA,oCAAoC;;AAEpC;IACI,YAAY;IACZ,aAAa;IACb,yBAAyB;QACrB,sBAAsB;YAClB,qBAAqB;gBACjB,iBAAiB;IAC7B,kBAAkB;IAClB,aAAa;IACb,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,wBAAwB;IACxB,YAAY;IACZ,yDAAyD;IACzD,WAAW;IACX,iBAAiB;AACrB;AACA;IACI,WAAW;IACX,YAAY;IACZ,sEAAsE;AAC1E;AACA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;IACnB,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,WAAW;AACf;AACA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,WAAW;IACX,4GAA4G;AAChH;AACA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,6BAA6B;IAC7B,WAAW;IACX,WAAW;IACX,WAAW;AACf;;AAEA,oBAAoB;AACpB;IACI,oBAAoB;AACxB",sourcesContent:['@import "../variables.css";\n\n/* Styling for simple-color-picker */\n\n.guify-color .Scp {\n    width: 125px;\n    height: 100px;\n    -webkit-user-select: none;\n        -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n    position: relative;\n    z-index: 1000;\n    cursor: pointer;\n}\n.guify-color .Scp-saturation {\n    position: relative;\n    width: calc(100% - 25px);\n    height: 100%;\n    background: linear-gradient(to right, #fff 0%, #f00 100%);\n    float: left;\n    margin-right: 5px;\n}\n.guify-color .Scp-brightness {\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(to top, #000 0%, rgba(255,255,255,0) 100%);\n}\n.guify-color .Scp-sbSelector {\n    border: 1px solid;\n    position: absolute;\n    width: 14px;\n    height: 14px;\n    background: #fff;\n    border-radius: 10px;\n    top: -7px;\n    left: -7px;\n    box-sizing: border-box;\n    z-index: 10;\n}\n.guify-color .Scp-hue {\n    width: 20px;\n    height: 100%;\n    position: relative;\n    float: left;\n    background: linear-gradient(to bottom, #f00 0%, #f0f 17%, #00f 34%, #0ff 50%, #0f0 67%, #ff0 84%, #f00 100%);\n}\n.guify-color .Scp-hSelector {\n    position: absolute;\n    background: #fff;\n    border-bottom: 1px solid #000;\n    right: -3px;\n    width: 10px;\n    height: 2px;\n}\n\n/* Disabled styles */\n.disabled .guify-color {\n    pointer-events: none;\n}'],sourceRoot:""}]);const l=s},144:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-display {\n    display: inline-block;\n    height: unset;\n    min-height: var(--size-component-height);\n    width: calc(100% - var(--size-label-width));\n    border: none;\n    color: var(--color-text-secondary);\n    font-family: inherit;\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    vertical-align: sub;\n    line-height: 1rem;\n    -webkit-user-select: text;\n       -moz-user-select: text;\n        -ms-user-select: text;\n            user-select: text;\n}\n\n.disabled .guify-display {\n    color: var(--color-text-disabled);\n}","",{version:3,sources:["webpack://./src/components/public/display.css"],names:[],mappings:"AAEA;IACI,qBAAqB;IACrB,aAAa;IACb,wCAAwC;IACxC,2CAA2C;IAC3C,YAAY;IACZ,kCAAkC;IAClC,oBAAoB;IACpB,sBAAsB;IACtB,2BAA2B;IAC3B,8BAA8B;IAC9B,mBAAmB;IACnB,iBAAiB;IACjB,yBAAiB;OAAjB,sBAAiB;QAAjB,qBAAiB;YAAjB,iBAAiB;AACrB;;AAEA;IACI,iCAAiC;AACrC",sourcesContent:['@import "../variables.css";\n\n.guify-display {\n    display: inline-block;\n    height: unset;\n    min-height: var(--size-component-height);\n    width: calc(100% - var(--size-label-width));\n    border: none;\n    color: var(--color-text-secondary);\n    font-family: inherit;\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    vertical-align: sub;\n    line-height: 1rem;\n    user-select: text;\n}\n\n.disabled .guify-display {\n    color: var(--color-text-disabled);\n}'],sourceRoot:""}]);const l=s},191:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-file-container {\n    display: inline-block;\n    outline: none;\n    padding-top: 8px;\n    padding-bottom: 8px;\n    color: var(--color-text-primary);\n    background-color: var(--color-component-background);\n    cursor: pointer;\n}\n\n.guify-file-container:hover:not(:disabled),\n.guify-file-container:focus:not(:disabled) {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-file-container:active:not(:disabled) {\n    color: var(--color-text-active) !important;\n    background-color: var(--color-component-active) !important;\n}\n\n.guify-dragover:not(:disabled) {\n    background-color: var(--color-component-background);\n    box-shadow: inset 0 0 0 3px var(--color-component-foreground);\n}\n\n.disabled.guify-file-container {\n    pointer-events: none;\n    color: var(--color-text-disabled) !important;\n    background-color: var(--color-component-background-disabled) !important;\n    box-shadow: inset 0 0 0 3px var(--color-component-background-disabled) !important;\n}","",{version:3,sources:["webpack://./src/components/public/file.css"],names:[],mappings:"AAEA;IACI,qBAAqB;IACrB,aAAa;IACb,gBAAgB;IAChB,mBAAmB;IACnB,gCAAgC;IAChC,mDAAmD;IACnD,eAAe;AACnB;;AAEA;;IAEI,8BAA8B;IAC9B,mDAAmD;AACvD;;AAEA;IACI,0CAA0C;IAC1C,0DAA0D;AAC9D;;AAEA;IACI,mDAAmD;IACnD,6DAA6D;AACjE;;AAEA;IACI,oBAAoB;IACpB,4CAA4C;IAC5C,uEAAuE;IACvE,iFAAiF;AACrF",sourcesContent:['@import "../variables.css";\n\n.guify-file-container {\n    display: inline-block;\n    outline: none;\n    padding-top: 8px;\n    padding-bottom: 8px;\n    color: var(--color-text-primary);\n    background-color: var(--color-component-background);\n    cursor: pointer;\n}\n\n.guify-file-container:hover:not(:disabled),\n.guify-file-container:focus:not(:disabled) {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-file-container:active:not(:disabled) {\n    color: var(--color-text-active) !important;\n    background-color: var(--color-component-active) !important;\n}\n\n.guify-dragover:not(:disabled) {\n    background-color: var(--color-component-background);\n    box-shadow: inset 0 0 0 3px var(--color-component-foreground);\n}\n\n.disabled.guify-file-container {\n    pointer-events: none;\n    color: var(--color-text-disabled) !important;\n    background-color: var(--color-component-background-disabled) !important;\n    box-shadow: inset 0 0 0 3px var(--color-component-background-disabled) !important;\n}'],sourceRoot:""}]);const l=s},211:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-folder {\n    cursor: pointer;\n    padding-left: 0.5em;\n    color: var(--color-text-primary);\n}\n\n.guify-folder div {\n    display: inline-block;\n    vertical-align: sub;\n    line-height: var(--size-component-height);\n}\n\n.guify-folder:hover,\n.guify-folder:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n    outline: none;\n}\n\n\n.guify-folder-contents {\n    display: block;\n    box-sizing: border-box;\n    padding-left: 14px;\n    margin-bottom: 5px;\n    border-left: 2px solid var(--color-component-background);\n}\n\n.guify-folder-contents.guify-folder-closed {\n    height: 0;\n    display: none;\n}\n\n.guify-folder .guify-folder-arrow {\n    width: 1.5em;\n    vertical-align: middle;\n}\n\n/* Disabled styles */\n\n.guify-folder.disabled {\n    pointer-events: none;\n    color: var(--color-text-disabled);\n}\n\n.guify-folder.disabled + .guify-folder-contents {\n    pointer-events: none;\n}","",{version:3,sources:["webpack://./src/components/public/folder.css"],names:[],mappings:"AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,gCAAgC;AACpC;;AAEA;IACI,qBAAqB;IACrB,mBAAmB;IACnB,yCAAyC;AAC7C;;AAEA;;IAEI,8BAA8B;IAC9B,mDAAmD;IACnD,aAAa;AACjB;;;AAGA;IACI,cAAc;IACd,sBAAsB;IACtB,kBAAkB;IAClB,kBAAkB;IAClB,wDAAwD;AAC5D;;AAEA;IACI,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,sBAAsB;AAC1B;;AAEA,oBAAoB;;AAEpB;IACI,oBAAoB;IACpB,iCAAiC;AACrC;;AAEA;IACI,oBAAoB;AACxB",sourcesContent:['@import "../variables.css";\n\n.guify-folder {\n    cursor: pointer;\n    padding-left: 0.5em;\n    color: var(--color-text-primary);\n}\n\n.guify-folder div {\n    display: inline-block;\n    vertical-align: sub;\n    line-height: var(--size-component-height);\n}\n\n.guify-folder:hover,\n.guify-folder:focus {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n    outline: none;\n}\n\n\n.guify-folder-contents {\n    display: block;\n    box-sizing: border-box;\n    padding-left: 14px;\n    margin-bottom: 5px;\n    border-left: 2px solid var(--color-component-background);\n}\n\n.guify-folder-contents.guify-folder-closed {\n    height: 0;\n    display: none;\n}\n\n.guify-folder .guify-folder-arrow {\n    width: 1.5em;\n    vertical-align: middle;\n}\n\n/* Disabled styles */\n\n.guify-folder.disabled {\n    pointer-events: none;\n    color: var(--color-text-disabled);\n}\n\n.guify-folder.disabled + .guify-folder-contents {\n    pointer-events: none;\n}'],sourceRoot:""}]);const l=s},554:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,":root {\n    --interval-track-color: var(--color-component-background);\n    --interval-thumb-color: var(--color-component-foreground);\n    --interval-thumb-highlight: var(--color-component-active);\n\n    --interval-track-color-disabled: var(--color-component-background-disabled);\n    --interval-thumb-color-disabled: var(--color-text-disabled);\n}\n\n.guify-interval {\n    -webkit-appearance: none;\n    position: absolute;\n    height: var(--size-component-height);\n    margin: 0px 0;\n    width: 33%;\n    left: 54.5%;\n    background-color: var(--color-component-background);\n    background-color: var(--interval-track-color);\n    cursor: ew-resize;\n\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.guify-interval-handle {\n    background-color: var(--color-component-foreground);\n    background-color: var(--interval-thumb-color);\n    position: absolute;\n    height: var(--size-component-height);\n    min-width: 1px;\n}\n.guify-interval-handle:focus {\n    background: var(--color-component-active);\n    background: var(--interval-thumb-highlight);\n}\n\n.disabled .guify-interval {\n    pointer-events: none;\n    background-color: var(--color-component-background-disabled);\n    background-color: var(--interval-track-color-disabled);\n}\n\n.disabled .guify-interval .guify-interval-handle {\n    background: var(--color-text-disabled);\n    background: var(--interval-thumb-color-disabled);\n}","",{version:3,sources:["webpack://./src/components/public/interval.css"],names:[],mappings:"AAEA;IACI,yDAAyD;IACzD,yDAAyD;IACzD,yDAAyD;;IAEzD,2EAA2E;IAC3E,2DAA2D;AAC/D;;AAEA;IACI,wBAAwB;IACxB,kBAAkB;IAClB,oCAAoC;IACpC,aAAa;IACb,UAAU;IACV,WAAW;IACX,mDAA6C;IAA7C,6CAA6C;IAC7C,iBAAiB;;IAEjB,2BAA2B;IAC3B,yBAAyB;IAEzB,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;AACrB;AACA;IACI,mDAA6C;IAA7C,6CAA6C;IAC7C,kBAAkB;IAClB,oCAAoC;IACpC,cAAc;AAClB;AACA;IACI,yCAA2C;IAA3C,2CAA2C;AAC/C;;AAEA;IACI,oBAAoB;IACpB,4DAAsD;IAAtD,sDAAsD;AAC1D;;AAEA;IACI,sCAAgD;IAAhD,gDAAgD;AACpD",sourcesContent:['@import "../variables.css";\n\n:root {\n    --interval-track-color: var(--color-component-background);\n    --interval-thumb-color: var(--color-component-foreground);\n    --interval-thumb-highlight: var(--color-component-active);\n\n    --interval-track-color-disabled: var(--color-component-background-disabled);\n    --interval-thumb-color-disabled: var(--color-text-disabled);\n}\n\n.guify-interval {\n    -webkit-appearance: none;\n    position: absolute;\n    height: var(--size-component-height);\n    margin: 0px 0;\n    width: 33%;\n    left: 54.5%;\n    background-color: var(--interval-track-color);\n    cursor: ew-resize;\n\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.guify-interval-handle {\n    background-color: var(--interval-thumb-color);\n    position: absolute;\n    height: var(--size-component-height);\n    min-width: 1px;\n}\n.guify-interval-handle:focus {\n    background: var(--interval-thumb-highlight);\n}\n\n.disabled .guify-interval {\n    pointer-events: none;\n    background-color: var(--interval-track-color-disabled);\n}\n\n.disabled .guify-interval .guify-interval-handle {\n    background: var(--interval-thumb-color-disabled);\n}'],sourceRoot:""}]);const l=s},115:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,":root {\n    --range-track-color: var(--color-component-background);\n    --range-thumb-color: var(--color-component-foreground);\n    --range-thumb-highlight: var(--color-component-active);\n\n    --range-track-color-disabled: var(--color-component-background-disabled);\n    --range-thumb-color-disabled: var(--color-text-disabled);\n}\n\ninput[type=range].guify-range {\n    position: absolute; /* Gets rid of weird spacing below slider that I can't figure out the source of, seems internal */\n    -webkit-appearance: none;\n    width: 100%;\n    height: var(--size-component-height);\n    margin: 0px 0;\n    padding: 0;\n    display: inline-block;\n\n    /* Fixes for Safari iOS */\n    border-radius: 0;\n    border: none;\n    background-color: transparent;\n}\n\n.disabled input[type=range].guify-range {\n    pointer-events: none;\n}\n\n/* Remove outlines since we'll be adding our own */\ninput[type=range].guify-range:focus {\n    outline: none;\n}\ninput[type=range].guify-range::-moz-focus-outer {\n    border: 0;\n}\n\n/* Webkit */\ninput[type=range].guify-range::-webkit-slider-runnable-track {\n    width: 100%;\n    height: var(--size-component-height);\n    cursor: ew-resize;\n    background: var(--color-component-background);\n    background: var(--range-track-color);\n}\ninput[type=range].guify-range::-webkit-slider-thumb {\n    height: var(--size-component-height);\n    width: 10px;\n    background: var(--color-component-foreground);\n    background: var(--range-thumb-color);\n    cursor: ew-resize;\n    -webkit-appearance: none;\n    margin-top: 0px;\n    border: 0;\n}\ninput[type=range].guify-range:focus::-webkit-slider-runnable-track {\n    background: var(--color-component-active);\n    background: var(--range-thumb-highlight);\n    outline: none;\n}\n\n.disabled input[type=range].guify-range::-webkit-slider-runnable-track { /* Disabled track */\n    pointer-events: none;\n    background: var(--color-component-background-disabled);\n    background: var(--range-track-color-disabled);\n}\n\n.disabled input[type=range].guify-range::-webkit-slider-thumb { /* Disabled thumb */\n    pointer-events: none;\n    background: var(--color-text-disabled);\n}\n\n/* Gecko */\ninput[type=range].guify-range::-moz-range-track {\n    width: 100%;\n    height: var(--size-component-height);\n    cursor: ew-resize;\n    background: var(--color-component-background);\n    background: var(--range-track-color);\n}\ninput[type=range].guify-range:focus::-moz-range-track {\n    background: var(--color-component-active);\n    background: var(--range-thumb-highlight);\n}\ninput[type=range].guify-range::-moz-range-thumb {\n    height: var(--size-component-height);\n    width: 10px;\n    background: var(--color-component-foreground);\n    background: var(--range-thumb-color);\n    cursor: ew-resize;\n    border: none;\n    border-radius: 0;\n}\n\n.disabled input[type=range].guify-range::-moz-range-track { /* Disabled track */\n    pointer-events: none;\n    background: var(--color-component-background-disabled);\n    background: var(--range-track-color-disabled);\n}\n\n.disabled input[type=range].guify-range::-moz-range-thumb { /* Disabled thumb */\n    pointer-events: none;\n    background: var(--color-text-disabled);\n    background: var(--range-thumb-color-disabled);\n}","",{version:3,sources:["webpack://./src/components/public/range.css"],names:[],mappings:"AAEA;IACI,sDAAsD;IACtD,sDAAsD;IACtD,sDAAsD;;IAEtD,wEAAwE;IACxE,wDAAwD;AAC5D;;AAEA;IACI,kBAAkB,EAAE,iGAAiG;IACrH,wBAAwB;IACxB,WAAW;IACX,oCAAoC;IACpC,aAAa;IACb,UAAU;IACV,qBAAqB;;IAErB,yBAAyB;IACzB,gBAAgB;IAChB,YAAY;IACZ,6BAA6B;AACjC;;AAEA;IACI,oBAAoB;AACxB;;AAEA,kDAAkD;AAClD;IACI,aAAa;AACjB;AACA;IACI,SAAS;AACb;;AAEA,WAAW;AACX;IACI,WAAW;IACX,oCAAoC;IACpC,iBAAiB;IACjB,6CAAoC;IAApC,oCAAoC;AACxC;AACA;IACI,oCAAoC;IACpC,WAAW;IACX,6CAAoC;IAApC,oCAAoC;IACpC,iBAAiB;IACjB,wBAAwB;IACxB,eAAe;IACf,SAAS;AACb;AACA;IACI,yCAAwC;IAAxC,wCAAwC;IACxC,aAAa;AACjB;;AAEA,yEAAyE,mBAAmB;IACxF,oBAAoB;IACpB,sDAA6C;IAA7C,6CAA6C;AACjD;;AAEA,gEAAgE,mBAAmB;IAC/E,oBAAoB;IACpB,sCAAsC;AAC1C;;AAEA,UAAU;AACV;IACI,WAAW;IACX,oCAAoC;IACpC,iBAAiB;IACjB,6CAAoC;IAApC,oCAAoC;AACxC;AACA;IACI,yCAAwC;IAAxC,wCAAwC;AAC5C;AACA;IACI,oCAAoC;IACpC,WAAW;IACX,6CAAoC;IAApC,oCAAoC;IACpC,iBAAiB;IACjB,YAAY;IACZ,gBAAgB;AACpB;;AAEA,4DAA4D,mBAAmB;IAC3E,oBAAoB;IACpB,sDAA6C;IAA7C,6CAA6C;AACjD;;AAEA,4DAA4D,mBAAmB;IAC3E,oBAAoB;IACpB,sCAA6C;IAA7C,6CAA6C;AACjD",sourcesContent:["@import \"../variables.css\";\n\n:root {\n    --range-track-color: var(--color-component-background);\n    --range-thumb-color: var(--color-component-foreground);\n    --range-thumb-highlight: var(--color-component-active);\n\n    --range-track-color-disabled: var(--color-component-background-disabled);\n    --range-thumb-color-disabled: var(--color-text-disabled);\n}\n\ninput[type=range].guify-range {\n    position: absolute; /* Gets rid of weird spacing below slider that I can't figure out the source of, seems internal */\n    -webkit-appearance: none;\n    width: 100%;\n    height: var(--size-component-height);\n    margin: 0px 0;\n    padding: 0;\n    display: inline-block;\n\n    /* Fixes for Safari iOS */\n    border-radius: 0;\n    border: none;\n    background-color: transparent;\n}\n\n.disabled input[type=range].guify-range {\n    pointer-events: none;\n}\n\n/* Remove outlines since we'll be adding our own */\ninput[type=range].guify-range:focus {\n    outline: none;\n}\ninput[type=range].guify-range::-moz-focus-outer {\n    border: 0;\n}\n\n/* Webkit */\ninput[type=range].guify-range::-webkit-slider-runnable-track {\n    width: 100%;\n    height: var(--size-component-height);\n    cursor: ew-resize;\n    background: var(--range-track-color);\n}\ninput[type=range].guify-range::-webkit-slider-thumb {\n    height: var(--size-component-height);\n    width: 10px;\n    background: var(--range-thumb-color);\n    cursor: ew-resize;\n    -webkit-appearance: none;\n    margin-top: 0px;\n    border: 0;\n}\ninput[type=range].guify-range:focus::-webkit-slider-runnable-track {\n    background: var(--range-thumb-highlight);\n    outline: none;\n}\n\n.disabled input[type=range].guify-range::-webkit-slider-runnable-track { /* Disabled track */\n    pointer-events: none;\n    background: var(--range-track-color-disabled);\n}\n\n.disabled input[type=range].guify-range::-webkit-slider-thumb { /* Disabled thumb */\n    pointer-events: none;\n    background: var(--color-text-disabled);\n}\n\n/* Gecko */\ninput[type=range].guify-range::-moz-range-track {\n    width: 100%;\n    height: var(--size-component-height);\n    cursor: ew-resize;\n    background: var(--range-track-color);\n}\ninput[type=range].guify-range:focus::-moz-range-track {\n    background: var(--range-thumb-highlight);\n}\ninput[type=range].guify-range::-moz-range-thumb {\n    height: var(--size-component-height);\n    width: 10px;\n    background: var(--range-thumb-color);\n    cursor: ew-resize;\n    border: none;\n    border-radius: 0;\n}\n\n.disabled input[type=range].guify-range::-moz-range-track { /* Disabled track */\n    pointer-events: none;\n    background: var(--range-track-color-disabled);\n}\n\n.disabled input[type=range].guify-range::-moz-range-thumb { /* Disabled thumb */\n    pointer-events: none;\n    background: var(--range-thumb-color-disabled);\n}"],sourceRoot:""}]);const l=s},247:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-select-dropdown {\n    display: inline-block;\n    position: absolute;\n    width: calc(100% - var(--size-label-width));\n    padding-left: 1.5%;\n    height: var(--size-component-height);\n    border: none;\n    border-radius: 0;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    -o-appearance:none;\n    appearance: none;\n    font-family: inherit;\n    background-color: var(--color-component-background);\n    color: var(--color-text-secondary);\n    box-sizing: border-box !important;\n    -moz-box-sizing: border-box !important;\n    -webkit-box-sizing: border-box !important;\n}\n\n/* Disable default outline since we're providing our own */\n.guify-select-dropdown:focus {\n    outline: none;\n}\n.guify-select-dropdown::-moz-focus-inner {\n    border: 0;\n}\n\n\n.guify-select-dropdown:focus,\n.guify-select-dropdown:hover {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-select-dropdown::-ms-expand {\n    display:none;\n}\n.guify-select-triangle {\n    content: ' ';\n    border-right: 3px solid transparent;\n    border-left: 3px solid transparent;\n    line-height: var(--size-component-height);\n    position: absolute;\n    right: 2.5%;\n    z-index: 1;\n    pointer-events: none;\n}\n\n.guify-select-triangle--up {\n    bottom: 55%;\n    border-bottom: 5px solid var(--color-text-secondary);\n    border-top: 0px transparent;\n}\n\n.guify-select-triangle--down {\n    top: 55%;\n    border-top: 5px solid var(--color-text-secondary);\n    border-bottom: 0px transparent;\n}\n\n.guify-select-triangle--up-highlight {\n    border-bottom-color: var(--color-text-hover);\n}\n\n.guify-select-triangle--down-highlight {\n    border-top-color: var(--color-text-hover);\n}\n\n/* Disabled styles */\n\n.disabled .guify-select-dropdown {\n    pointer-events: none;\n    color: var(--color-text-disabled);\n    background-color: var(--color-component-background-disabled);\n}\n\n.disabled *[class^=\"guify-select-triangle\"] {\n    border-color: var(--color-text-disabled);\n}\n","",{version:3,sources:["webpack://./src/components/public/select.css"],names:[],mappings:"AAEA;IACI,qBAAqB;IACrB,kBAAkB;IAClB,2CAA2C;IAC3C,kBAAkB;IAClB,oCAAoC;IACpC,YAAY;IACZ,gBAAgB;IAChB,wBAAwB;IACxB,qBAAqB;IACrB,kBAAkB;IAClB,gBAAgB;IAChB,oBAAoB;IACpB,mDAAmD;IACnD,kCAAkC;IAClC,iCAAiC;IACjC,sCAAsC;IACtC,yCAAyC;AAC7C;;AAEA,0DAA0D;AAC1D;IACI,aAAa;AACjB;AACA;IACI,SAAS;AACb;;;AAGA;;IAEI,8BAA8B;IAC9B,mDAAmD;AACvD;;AAEA;IACI,YAAY;AAChB;AACA;IACI,YAAY;IACZ,mCAAmC;IACnC,kCAAkC;IAClC,yCAAyC;IACzC,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,oDAAoD;IACpD,2BAA2B;AAC/B;;AAEA;IACI,QAAQ;IACR,iDAAiD;IACjD,8BAA8B;AAClC;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,yCAAyC;AAC7C;;AAEA,oBAAoB;;AAEpB;IACI,oBAAoB;IACpB,iCAAiC;IACjC,4DAA4D;AAChE;;AAEA;IACI,wCAAwC;AAC5C",sourcesContent:['@import "../variables.css";\n\n.guify-select-dropdown {\n    display: inline-block;\n    position: absolute;\n    width: calc(100% - var(--size-label-width));\n    padding-left: 1.5%;\n    height: var(--size-component-height);\n    border: none;\n    border-radius: 0;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    -o-appearance:none;\n    appearance: none;\n    font-family: inherit;\n    background-color: var(--color-component-background);\n    color: var(--color-text-secondary);\n    box-sizing: border-box !important;\n    -moz-box-sizing: border-box !important;\n    -webkit-box-sizing: border-box !important;\n}\n\n/* Disable default outline since we\'re providing our own */\n.guify-select-dropdown:focus {\n    outline: none;\n}\n.guify-select-dropdown::-moz-focus-inner {\n    border: 0;\n}\n\n\n.guify-select-dropdown:focus,\n.guify-select-dropdown:hover {\n    color: var(--color-text-hover);\n    background-color: var(--color-component-foreground);\n}\n\n.guify-select-dropdown::-ms-expand {\n    display:none;\n}\n.guify-select-triangle {\n    content: \' \';\n    border-right: 3px solid transparent;\n    border-left: 3px solid transparent;\n    line-height: var(--size-component-height);\n    position: absolute;\n    right: 2.5%;\n    z-index: 1;\n    pointer-events: none;\n}\n\n.guify-select-triangle--up {\n    bottom: 55%;\n    border-bottom: 5px solid var(--color-text-secondary);\n    border-top: 0px transparent;\n}\n\n.guify-select-triangle--down {\n    top: 55%;\n    border-top: 5px solid var(--color-text-secondary);\n    border-bottom: 0px transparent;\n}\n\n.guify-select-triangle--up-highlight {\n    border-bottom-color: var(--color-text-hover);\n}\n\n.guify-select-triangle--down-highlight {\n    border-top-color: var(--color-text-hover);\n}\n\n/* Disabled styles */\n\n.disabled .guify-select-dropdown {\n    pointer-events: none;\n    color: var(--color-text-disabled);\n    background-color: var(--color-component-background-disabled);\n}\n\n.disabled *[class^="guify-select-triangle"] {\n    border-color: var(--color-text-disabled);\n}\n'],sourceRoot:""}]);const l=s},532:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-text-input {\n    position: absolute;\n    padding-left: 6px;\n    height: var(--size-component-height);\n    width: calc(100% - var(--size-label-width));\n    border: none;\n    background: var(--color-component-background);\n    color: var(--color-text-secondary);\n    font-family: inherit;\n    box-sizing: border-box !important;\n    resize: vertical;\n\n    /* Fixes for Safari iOS */\n    border-radius: 0;\n}\n\n.guify-text-input:focus {\n    outline: none;\n}\n\n.disabled .guify-text-input {\n    pointer-events: none;\n    color: var(--color-text-disabled);\n    background-color: var(--color-component-background-disabled);\n}","",{version:3,sources:["webpack://./src/components/public/text.css"],names:[],mappings:"AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,oCAAoC;IACpC,2CAA2C;IAC3C,YAAY;IACZ,6CAA6C;IAC7C,kCAAkC;IAClC,oBAAoB;IACpB,iCAAiC;IACjC,gBAAgB;;IAEhB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,iCAAiC;IACjC,4DAA4D;AAChE",sourcesContent:['@import "../variables.css";\n\n.guify-text-input {\n    position: absolute;\n    padding-left: 6px;\n    height: var(--size-component-height);\n    width: calc(100% - var(--size-label-width));\n    border: none;\n    background: var(--color-component-background);\n    color: var(--color-text-secondary);\n    font-family: inherit;\n    box-sizing: border-box !important;\n    resize: vertical;\n\n    /* Fixes for Safari iOS */\n    border-radius: 0;\n}\n\n.guify-text-input:focus {\n    outline: none;\n}\n\n.disabled .guify-text-input {\n    pointer-events: none;\n    color: var(--color-text-disabled);\n    background-color: var(--color-component-background-disabled);\n}'],sourceRoot:""}]);const l=s},146:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-title {\n    box-sizing: border-box;\n    width: 100%;\n    display: inline-block;\n    height: var(--size-component-height);\n    vertical-align: top;\n}\n\n.guify-title-text {\n    display: inline-block;\n    height: var(--size-component-height);\n    line-height: var(--size-component-height);\n    padding-left: 5px;\n    padding-right: 5px;\n    background-color: var(--color-text-primary);\n    color: var(--color-panel-background);\n}\n\n/* Disabled style */\n\n.disabled .guify-title-text {\n    background-color: var(--color-text-disabled);\n}\n\n/* Add a bit of top margin if immediately after another component */\n\n.guify-component-container > .guify-title {\n    margin-top: 0.5em;\n}","",{version:3,sources:["webpack://./src/components/public/title.css"],names:[],mappings:"AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,qBAAqB;IACrB,oCAAoC;IACpC,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;IACrB,oCAAoC;IACpC,yCAAyC;IACzC,iBAAiB;IACjB,kBAAkB;IAClB,2CAA2C;IAC3C,oCAAoC;AACxC;;AAEA,mBAAmB;;AAEnB;IACI,4CAA4C;AAChD;;AAEA,mEAAmE;;AAEnE;IACI,iBAAiB;AACrB",sourcesContent:['@import "../variables.css";\n\n.guify-title {\n    box-sizing: border-box;\n    width: 100%;\n    display: inline-block;\n    height: var(--size-component-height);\n    vertical-align: top;\n}\n\n.guify-title-text {\n    display: inline-block;\n    height: var(--size-component-height);\n    line-height: var(--size-component-height);\n    padding-left: 5px;\n    padding-right: 5px;\n    background-color: var(--color-text-primary);\n    color: var(--color-panel-background);\n}\n\n/* Disabled style */\n\n.disabled .guify-title-text {\n    background-color: var(--color-text-disabled);\n}\n\n/* Add a bit of top margin if immediately after another component */\n\n.guify-component-container > .guify-title {\n    margin-top: 0.5em;\n}'],sourceRoot:""}]);const l=s},72:(t,e,q)=>{"use strict";q.d(e,{Z:()=>l});var n=q(537),i=q.n(n),r=q(645),o=q.n(r),a=q(19),s=o()(i());s.i(a.Z),s.push([t.id,".guify-container {\n    position: absolute;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n/* Sub-elements of guify-container should appear over anything else. */\n.guify-container > * {\n    z-index: 9999;\n}\n\n.guify-container, .guify-container * {\n    font-family: var(--font-family);\n    font-size: var(--font-size);\n    font-weight: var(--font-weight);\n}\n\n.guify-container-overlay {\n    height: 100%;\n}\n\n.guify-container-above {\n    height: calc(100% + var(--size-menu-bar-height));\n    bottom: 0;\n}\n\n/* Overlay container when fullscreen */\n.guify-fullscreen .guify-container {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}","",{version:3,sources:["webpack://./src/gui.css"],names:[],mappings:"AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,WAAW;IACX,YAAY;AAChB;;AAEA,sEAAsE;AACtE;IACI,aAAa;AACjB;;AAEA;IACI,+BAA+B;IAC/B,2BAA2B;IAC3B,+BAA+B;AACnC;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,gDAAgD;IAChD,SAAS;AACb;;AAEA,sCAAsC;AACtC;IACI,eAAe;IACf,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;AAChB",sourcesContent:['@import "./components/variables.css";\n\n.guify-container {\n    position: absolute;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n/* Sub-elements of guify-container should appear over anything else. */\n.guify-container > * {\n    z-index: 9999;\n}\n\n.guify-container, .guify-container * {\n    font-family: var(--font-family);\n    font-size: var(--font-size);\n    font-weight: var(--font-weight);\n}\n\n.guify-container-overlay {\n    height: 100%;\n}\n\n.guify-container-above {\n    height: calc(100% + var(--size-menu-bar-height));\n    bottom: 0;\n}\n\n/* Overlay container when fullscreen */\n.guify-fullscreen .guify-container {\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}'],sourceRoot:""}]);const l=s},19:(t,e,q)=>{"use strict";q.d(e,{Z:()=>a});var n=q(537),i=q.n(n),r=q(645),o=q.n(r)()(i());o.push([t.id,':root {\n    --color-menu-bar-background: "black";\n    --color-menu-bar-text: "black";\n    --color-panel-background: "black";\n\n    --color-component-background: "black";\n    --color-component-background-hover: "black";\n    --color-component-background-disabled: "black";\n    --color-component-foreground: "black";\n    --color-component-active: "black";\n\n    --color-text-primary: "black";\n    --color-text-secondary: "black";\n    --color-text-hover: "black";\n    --color-text-active: "black";\n    --color-text-disabled: "black";\n\n    --size-menu-bar-height: 25px;\n    --size-component-height: 2rem;\n    --size-component-spacing: 5px;\n    --size-label-width: 42%;\n\n    --font-family: ui-monospace, monospace;\n    --font-height: 11px;\n    --font-weight: 400;\n}\n',"",{version:3,sources:["webpack://./src/components/variables.css"],names:[],mappings:"AAAA;IACI,oCAAoC;IACpC,8BAA8B;IAC9B,iCAAiC;;IAEjC,qCAAqC;IACrC,2CAA2C;IAC3C,8CAA8C;IAC9C,qCAAqC;IACrC,iCAAiC;;IAEjC,6BAA6B;IAC7B,+BAA+B;IAC/B,2BAA2B;IAC3B,4BAA4B;IAC5B,8BAA8B;;IAE9B,4BAA4B;IAC5B,6BAA6B;IAC7B,6BAA6B;IAC7B,uBAAuB;;IAEvB,sCAAsC;IACtC,mBAAmB;IACnB,kBAAkB;AACtB",sourcesContent:[':root {\n    --color-menu-bar-background: "black";\n    --color-menu-bar-text: "black";\n    --color-panel-background: "black";\n\n    --color-component-background: "black";\n    --color-component-background-hover: "black";\n    --color-component-background-disabled: "black";\n    --color-component-foreground: "black";\n    --color-component-active: "black";\n\n    --color-text-primary: "black";\n    --color-text-secondary: "black";\n    --color-text-hover: "black";\n    --color-text-active: "black";\n    --color-text-disabled: "black";\n\n    --size-menu-bar-height: 25px;\n    --size-component-height: 2rem;\n    --size-component-spacing: 5px;\n    --size-label-width: 42%;\n\n    --font-family: ui-monospace, monospace;\n    --font-height: 11px;\n    --font-weight: 400;\n}\n'],sourceRoot:""}]);const a=o},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var q="",n=void 0!==e[5];return e[4]&&(q+="@supports (".concat(e[4],") {")),e[2]&&(q+="@media ".concat(e[2]," {")),n&&(q+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),q+=t(e),n&&(q+="}"),e[2]&&(q+="}"),e[4]&&(q+="}"),q})).join("")},e.i=function(t,q,n,i,r){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(n)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);n&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),q&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=q):c[2]=q),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],q=t[3];if(!q)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(q)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(i," */"),o=q.sources.map((function(t){return"/*# sourceURL=".concat(q.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([r]).join("\n")}return[e].join("\n")}},879:(t,e,q)=>{var n=q(236),i=q(189),r={float:"cssFloat"},o=q(379);function a(t,e,q){var a=r[e];if(void 0===a&&(a=function(t){var e=i(t),q=n(e);return r[e]=r[t]=r[q]=q,q}(e)),a){if(void 0===q)return t.style[a];t.style[a]=o(a,q)}}function s(t,e){for(var q in e)e.hasOwnProperty(q)&&a(t,q,e[q])}function l(){2===arguments.length?"string"==typeof arguments[1]?arguments[0].style.cssText=arguments[1]:s(arguments[0],arguments[1]):a(arguments[0],arguments[1],arguments[2])}t.exports=l,t.exports.set=l,t.exports.get=function(t,e){return Array.isArray(e)?e.reduce((function(e,q){return e[q]=a(t,q||""),e}),{}):a(t,e||"")}},186:t=>{var e=[],q=[];function n(t,n){if(n=n||{},void 0===t)throw new Error("insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).");var i,r=!0===n.prepend?"prepend":"append",o=void 0!==n.container?n.container:document.querySelector("head"),a=e.indexOf(o);return-1===a&&(a=e.push(o)-1,q[a]={}),void 0!==q[a]&&void 0!==q[a][r]?i=q[a][r]:(i=q[a][r]=function(){var t=document.createElement("style");return t.setAttribute("type","text/css"),t}(),"prepend"===r?o.insertBefore(i,o.childNodes[0]):o.appendChild(i)),65279===t.charCodeAt(0)&&(t=t.substr(1,t.length)),i.styleSheet?i.styleSheet.cssText+=t:i.textContent+=t,i}t.exports=n,t.exports.insertCss=n},114:function(t,e){!function(q){"use strict";function n(t){return"number"==typeof t&&!isNaN(t)||!!(t=(t||"").toString().trim())&&!isNaN(t)}t.exports&&(e=t.exports=n),e.isNumeric=n}()},236:t=>{var e=null,q=["Webkit","Moz","O","ms"];t.exports=function(t){e||(e=document.createElement("div"));var n=e.style;if(t in n)return t;for(var i=t.charAt(0).toUpperCase()+t.slice(1),r=q.length;r>=0;r--){var o=q[r]+i;if(o in n)return o}return!1}},577:t=>{!function(){"use strict";var e="undefined"!=typeof window&&void 0!==window.document?window.document:{},q=t.exports,n=function(){for(var t,q=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n=0,i=q.length,r={};n<i;n++)if((t=q[n])&&t[1]in e){for(n=0;n<t.length;n++)r[q[0][n]]=t[n];return r}return!1}(),i={change:n.fullscreenchange,error:n.fullscreenerror},r={request:function(t){return new Promise(function(q,i){var r=function(){this.off("change",r),q()}.bind(this);this.on("change",r),t=t||e.documentElement,Promise.resolve(t[n.requestFullscreen]()).catch(i)}.bind(this))},exit:function(){return new Promise(function(t,q){if(this.isFullscreen){var i=function(){this.off("change",i),t()}.bind(this);this.on("change",i),Promise.resolve(e[n.exitFullscreen]()).catch(q)}else t()}.bind(this))},toggle:function(t){return this.isFullscreen?this.exit():this.request(t)},onchange:function(t){this.on("change",t)},onerror:function(t){this.on("error",t)},on:function(t,q){var n=i[t];n&&e.addEventListener(n,q,!1)},off:function(t,q){var n=i[t];n&&e.removeEventListener(n,q,!1)},raw:n};n?(Object.defineProperties(r,{isFullscreen:{get:function(){return Boolean(e[n.fullscreenElement])}},element:{enumerable:!0,get:function(){return e[n.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(e[n.fullscreenEnabled])}}}),q?t.exports=r:window.screenfull=r):q?t.exports={isEnabled:!1}:window.screenfull={isEnabled:!1}}()},994:t=>{"use strict";var e=[];function q(t){for(var q=-1,n=0;n<e.length;n++)if(e[n].identifier===t){q=n;break}return q}function n(t,n){for(var r={},o=[],a=0;a<t.length;a++){var s=t[a],l=n.base?s[0]+n.base:s[0],c=r[l]||0,h="".concat(l," ").concat(c);r[l]=c+1;var u=q(h),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var d=i(m,n);n.byIndex=a,e.splice(a,0,{identifier:h,updater:d,references:1})}o.push(h)}return o}function i(t,e){var q=e.domAPI(e);return q.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;q.update(t=e)}else q.remove()}}t.exports=function(t,i){var r=n(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<r.length;o++){var a=q(r[o]);e[a].references--}for(var s=n(t,i),l=0;l<r.length;l++){var c=q(r[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=s}}},569:t=>{"use strict";var e={};t.exports=function(t,q){var n=function(t){if(void 0===e[t]){var q=document.querySelector(t);if(window.HTMLIFrameElement&&q instanceof window.HTMLIFrameElement)try{q=q.contentDocument.head}catch(t){q=null}e[t]=q}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(q)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,q)=>{"use strict";t.exports=function(t){var e=q.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(q){!function(t,e,q){var n="";q.supports&&(n+="@supports (".concat(q.supports,") {")),q.media&&(n+="@media ".concat(q.media," {"));var i=void 0!==q.layer;i&&(n+="@layer".concat(q.layer.length>0?" ".concat(q.layer):""," {")),n+=q.css,i&&(n+="}"),q.media&&(n+="}"),q.supports&&(n+="}");var r=q.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,q)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},621:(t,e,q)=>{var n;!function(i){var r=/^\s+/,o=/\s+$/,a=0,s=i.round,l=i.min,c=i.max,h=i.random;function u(t,e){if(e=e||{},(t=t||"")instanceof u)return t;if(!(this instanceof u))return new u(t,e);var q=function(t){var e,q,n,a={r:0,g:0,b:0},s=1,h=null,u=null,m=null,d=!1,p=!1;return"string"==typeof t&&(t=function(t){t=t.replace(r,"").replace(o,"").toLowerCase();var e,q=!1;if(z[t])t=z[t],q=!0;else if("transparent"==t)return{r:0,g:0,b:0,a:0,format:"name"};return(e=V.rgb.exec(t))?{r:e[1],g:e[2],b:e[3]}:(e=V.rgba.exec(t))?{r:e[1],g:e[2],b:e[3],a:e[4]}:(e=V.hsl.exec(t))?{h:e[1],s:e[2],l:e[3]}:(e=V.hsla.exec(t))?{h:e[1],s:e[2],l:e[3],a:e[4]}:(e=V.hsv.exec(t))?{h:e[1],s:e[2],v:e[3]}:(e=V.hsva.exec(t))?{h:e[1],s:e[2],v:e[3],a:e[4]}:(e=V.hex8.exec(t))?{r:B(e[1]),g:B(e[2]),b:B(e[3]),a:N(e[4]),format:q?"name":"hex8"}:(e=V.hex6.exec(t))?{r:B(e[1]),g:B(e[2]),b:B(e[3]),format:q?"name":"hex"}:(e=V.hex4.exec(t))?{r:B(e[1]+""+e[1]),g:B(e[2]+""+e[2]),b:B(e[3]+""+e[3]),a:N(e[4]+""+e[4]),format:q?"name":"hex8"}:!!(e=V.hex3.exec(t))&&{r:B(e[1]+""+e[1]),g:B(e[2]+""+e[2]),b:B(e[3]+""+e[3]),format:q?"name":"hex"}}(t)),"object"==typeof t&&(G(t.r)&&G(t.g)&&G(t.b)?(e=t.r,q=t.g,n=t.b,a={r:255*I(e,255),g:255*I(q,255),b:255*I(n,255)},d=!0,p="%"===String(t.r).substr(-1)?"prgb":"rgb"):G(t.h)&&G(t.s)&&G(t.v)?(h=D(t.s),u=D(t.v),a=function(t,e,q){t=6*I(t,360),e=I(e,100),q=I(q,100);var n=i.floor(t),r=t-n,o=q*(1-e),a=q*(1-r*e),s=q*(1-(1-r)*e),l=n%6;return{r:255*[q,a,o,o,s,q][l],g:255*[s,q,q,a,o,o][l],b:255*[o,o,s,q,q,a][l]}}(t.h,h,u),d=!0,p="hsv"):G(t.h)&&G(t.s)&&G(t.l)&&(h=D(t.s),m=D(t.l),a=function(t,e,q){var n,i,r;function o(t,e,q){return q<0&&(q+=1),q>1&&(q-=1),q<1/6?t+6*(e-t)*q:q<.5?e:q<2/3?t+(e-t)*(2/3-q)*6:t}if(t=I(t,360),e=I(e,100),q=I(q,100),0===e)n=i=r=q;else{var a=q<.5?q*(1+e):q+e-q*e,s=2*q-a;n=o(s,a,t+1/3),i=o(s,a,t),r=o(s,a,t-1/3)}return{r:255*n,g:255*i,b:255*r}}(t.h,h,m),d=!0,p="hsl"),t.hasOwnProperty("a")&&(s=t.a)),s=R(s),{ok:d,format:t.format||p,r:l(255,c(a.r,0)),g:l(255,c(a.g,0)),b:l(255,c(a.b,0)),a:s}}(t);this._originalInput=t,this._r=q.r,this._g=q.g,this._b=q.b,this._a=q.a,this._roundA=s(100*this._a)/100,this._format=e.format||q.format,this._gradientType=e.gradientType,this._r<1&&(this._r=s(this._r)),this._g<1&&(this._g=s(this._g)),this._b<1&&(this._b=s(this._b)),this._ok=q.ok,this._tc_id=a++}function m(t,e,q){t=I(t,255),e=I(e,255),q=I(q,255);var n,i,r=c(t,e,q),o=l(t,e,q),a=(r+o)/2;if(r==o)n=i=0;else{var s=r-o;switch(i=a>.5?s/(2-r-o):s/(r+o),r){case t:n=(e-q)/s+(e<q?6:0);break;case e:n=(q-t)/s+2;break;case q:n=(t-e)/s+4}n/=6}return{h:n,s:i,l:a}}function d(t,e,q){t=I(t,255),e=I(e,255),q=I(q,255);var n,i,r=c(t,e,q),o=l(t,e,q),a=r,s=r-o;if(i=0===r?0:s/r,r==o)n=0;else{switch(r){case t:n=(e-q)/s+(e<q?6:0);break;case e:n=(q-t)/s+2;break;case q:n=(t-e)/s+4}n/=6}return{h:n,s:i,v:a}}function p(t,e,q,n){var i=[k(s(t).toString(16)),k(s(e).toString(16)),k(s(q).toString(16))];return n&&i[0].charAt(0)==i[0].charAt(1)&&i[1].charAt(0)==i[1].charAt(1)&&i[2].charAt(0)==i[2].charAt(1)?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function f(t,e,q,n){return[k(O(n)),k(s(t).toString(16)),k(s(e).toString(16)),k(s(q).toString(16))].join("")}function g(t,e){e=0===e?0:e||10;var q=u(t).toHsl();return q.s-=e/100,q.s=P(q.s),u(q)}function x(t,e){e=0===e?0:e||10;var q=u(t).toHsl();return q.s+=e/100,q.s=P(q.s),u(q)}function v(t){return u(t).desaturate(100)}function y(t,e){e=0===e?0:e||10;var q=u(t).toHsl();return q.l+=e/100,q.l=P(q.l),u(q)}function _(t,e){e=0===e?0:e||10;var q=u(t).toRgb();return q.r=c(0,l(255,q.r-s(-e/100*255))),q.g=c(0,l(255,q.g-s(-e/100*255))),q.b=c(0,l(255,q.b-s(-e/100*255))),u(q)}function b(t,e){e=0===e?0:e||10;var q=u(t).toHsl();return q.l-=e/100,q.l=P(q.l),u(q)}function A(t,e){var q=u(t).toHsl(),n=(q.h+e)%360;return q.h=n<0?360+n:n,u(q)}function w(t){var e=u(t).toHsl();return e.h=(e.h+180)%360,u(e)}function M(t){var e=u(t).toHsl(),q=e.h;return[u(t),u({h:(q+120)%360,s:e.s,l:e.l}),u({h:(q+240)%360,s:e.s,l:e.l})]}function S(t){var e=u(t).toHsl(),q=e.h;return[u(t),u({h:(q+90)%360,s:e.s,l:e.l}),u({h:(q+180)%360,s:e.s,l:e.l}),u({h:(q+270)%360,s:e.s,l:e.l})]}function E(t){var e=u(t).toHsl(),q=e.h;return[u(t),u({h:(q+72)%360,s:e.s,l:e.l}),u({h:(q+216)%360,s:e.s,l:e.l})]}function C(t,e,q){e=e||6,q=q||30;var n=u(t).toHsl(),i=360/q,r=[u(t)];for(n.h=(n.h-(i*e>>1)+720)%360;--e;)n.h=(n.h+i)%360,r.push(u(n));return r}function T(t,e){e=e||6;for(var q=u(t).toHsv(),n=q.h,i=q.s,r=q.v,o=[],a=1/e;e--;)o.push(u({h:n,s:i,v:r})),r=(r+a)%1;return o}u.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},getLuminance:function(){var t,e,q,n=this.toRgb();return t=n.r/255,e=n.g/255,q=n.b/255,.2126*(t<=.03928?t/12.92:i.pow((t+.055)/1.055,2.4))+.7152*(e<=.03928?e/12.92:i.pow((e+.055)/1.055,2.4))+.0722*(q<=.03928?q/12.92:i.pow((q+.055)/1.055,2.4))},setAlpha:function(t){return this._a=R(t),this._roundA=s(100*this._a)/100,this},toHsv:function(){var t=d(this._r,this._g,this._b);return{h:360*t.h,s:t.s,v:t.v,a:this._a}},toHsvString:function(){var t=d(this._r,this._g,this._b),e=s(360*t.h),q=s(100*t.s),n=s(100*t.v);return 1==this._a?"hsv("+e+", "+q+"%, "+n+"%)":"hsva("+e+", "+q+"%, "+n+"%, "+this._roundA+")"},toHsl:function(){var t=m(this._r,this._g,this._b);return{h:360*t.h,s:t.s,l:t.l,a:this._a}},toHslString:function(){var t=m(this._r,this._g,this._b),e=s(360*t.h),q=s(100*t.s),n=s(100*t.l);return 1==this._a?"hsl("+e+", "+q+"%, "+n+"%)":"hsla("+e+", "+q+"%, "+n+"%, "+this._roundA+")"},toHex:function(t){return p(this._r,this._g,this._b,t)},toHexString:function(t){return"#"+this.toHex(t)},toHex8:function(t){return function(t,e,q,n,i){var r=[k(s(t).toString(16)),k(s(e).toString(16)),k(s(q).toString(16)),k(O(n))];return i&&r[0].charAt(0)==r[0].charAt(1)&&r[1].charAt(0)==r[1].charAt(1)&&r[2].charAt(0)==r[2].charAt(1)&&r[3].charAt(0)==r[3].charAt(1)?r[0].charAt(0)+r[1].charAt(0)+r[2].charAt(0)+r[3].charAt(0):r.join("")}(this._r,this._g,this._b,this._a,t)},toHex8String:function(t){return"#"+this.toHex8(t)},toRgb:function(){return{r:s(this._r),g:s(this._g),b:s(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+s(this._r)+", "+s(this._g)+", "+s(this._b)+")":"rgba("+s(this._r)+", "+s(this._g)+", "+s(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:s(100*I(this._r,255))+"%",g:s(100*I(this._g,255))+"%",b:s(100*I(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+s(100*I(this._r,255))+"%, "+s(100*I(this._g,255))+"%, "+s(100*I(this._b,255))+"%)":"rgba("+s(100*I(this._r,255))+"%, "+s(100*I(this._g,255))+"%, "+s(100*I(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(L[p(this._r,this._g,this._b,!0)]||!1)},toFilter:function(t){var e="#"+f(this._r,this._g,this._b,this._a),q=e,n=this._gradientType?"GradientType = 1, ":"";if(t){var i=u(t);q="#"+f(i._r,i._g,i._b,i._a)}return"progid:DXImageTransform.Microsoft.gradient("+n+"startColorstr="+e+",endColorstr="+q+")"},toString:function(t){var e=!!t;t=t||this._format;var q=!1,n=this._a<1&&this._a>=0;return e||!n||"hex"!==t&&"hex6"!==t&&"hex3"!==t&&"hex4"!==t&&"hex8"!==t&&"name"!==t?("rgb"===t&&(q=this.toRgbString()),"prgb"===t&&(q=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(q=this.toHexString()),"hex3"===t&&(q=this.toHexString(!0)),"hex4"===t&&(q=this.toHex8String(!0)),"hex8"===t&&(q=this.toHex8String()),"name"===t&&(q=this.toName()),"hsl"===t&&(q=this.toHslString()),"hsv"===t&&(q=this.toHsvString()),q||this.toHexString()):"name"===t&&0===this._a?this.toName():this.toRgbString()},clone:function(){return u(this.toString())},_applyModification:function(t,e){var q=t.apply(null,[this].concat([].slice.call(e)));return this._r=q._r,this._g=q._g,this._b=q._b,this.setAlpha(q._a),this},lighten:function(){return this._applyModification(y,arguments)},brighten:function(){return this._applyModification(_,arguments)},darken:function(){return this._applyModification(b,arguments)},desaturate:function(){return this._applyModification(g,arguments)},saturate:function(){return this._applyModification(x,arguments)},greyscale:function(){return this._applyModification(v,arguments)},spin:function(){return this._applyModification(A,arguments)},_applyCombination:function(t,e){return t.apply(null,[this].concat([].slice.call(e)))},analogous:function(){return this._applyCombination(C,arguments)},complement:function(){return this._applyCombination(w,arguments)},monochromatic:function(){return this._applyCombination(T,arguments)},splitcomplement:function(){return this._applyCombination(E,arguments)},triad:function(){return this._applyCombination(M,arguments)},tetrad:function(){return this._applyCombination(S,arguments)}},u.fromRatio=function(t,e){if("object"==typeof t){var q={};for(var n in t)t.hasOwnProperty(n)&&(q[n]="a"===n?t[n]:D(t[n]));t=q}return u(t,e)},u.equals=function(t,e){return!(!t||!e)&&u(t).toRgbString()==u(e).toRgbString()},u.random=function(){return u.fromRatio({r:h(),g:h(),b:h()})},u.mix=function(t,e,q){q=0===q?0:q||50;var n=u(t).toRgb(),i=u(e).toRgb(),r=q/100;return u({r:(i.r-n.r)*r+n.r,g:(i.g-n.g)*r+n.g,b:(i.b-n.b)*r+n.b,a:(i.a-n.a)*r+n.a})},u.readability=function(t,e){var q=u(t),n=u(e);return(i.max(q.getLuminance(),n.getLuminance())+.05)/(i.min(q.getLuminance(),n.getLuminance())+.05)},u.isReadable=function(t,e,q){var n,i,r,o,a,s=u.readability(t,e);switch(i=!1,(r=q,"AA"!==(o=((r=r||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==o&&(o="AA"),"small"!==(a=(r.size||"small").toLowerCase())&&"large"!==a&&(a="small"),n={level:o,size:a}).level+n.size){case"AAsmall":case"AAAlarge":i=s>=4.5;break;case"AAlarge":i=s>=3;break;case"AAAsmall":i=s>=7}return i},u.mostReadable=function(t,e,q){var n,i,r,o,a=null,s=0;i=(q=q||{}).includeFallbackColors,r=q.level,o=q.size;for(var l=0;l<e.length;l++)(n=u.readability(t,e[l]))>s&&(s=n,a=u(e[l]));return u.isReadable(t,a,{level:r,size:o})||!i?a:(q.includeFallbackColors=!1,u.mostReadable(t,["#fff","#000"],q))};var z=u.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},L=u.hexNames=function(t){var e={};for(var q in t)t.hasOwnProperty(q)&&(e[t[q]]=q);return e}(z);function R(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function I(t,e){(function(t){return"string"==typeof t&&-1!=t.indexOf(".")&&1===parseFloat(t)})(t)&&(t="100%");var q=function(t){return"string"==typeof t&&-1!=t.indexOf("%")}(t);return t=l(e,c(0,parseFloat(t))),q&&(t=parseInt(t*e,10)/100),i.abs(t-e)<1e-6?1:t%e/parseFloat(e)}function P(t){return l(1,c(0,t))}function B(t){return parseInt(t,16)}function k(t){return 1==t.length?"0"+t:""+t}function D(t){return t<=1&&(t=100*t+"%"),t}function O(t){return i.round(255*parseFloat(t)).toString(16)}function N(t){return B(t)/255}var F,H,U,V=(H="[\\s|\\(]+("+(F="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+F+")[,|\\s]+("+F+")\\s*\\)?",U="[\\s|\\(]+("+F+")[,|\\s]+("+F+")[,|\\s]+("+F+")[,|\\s]+("+F+")\\s*\\)?",{CSS_UNIT:new RegExp(F),rgb:new RegExp("rgb"+H),rgba:new RegExp("rgba"+U),hsl:new RegExp("hsl"+H),hsla:new RegExp("hsla"+U),hsv:new RegExp("hsv"+H),hsva:new RegExp("hsva"+U),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function G(t){return!!V.CSS_UNIT.exec(t)}t.exports?t.exports=u:void 0===(n=function(){return u}.call(e,q,e,t))||(t.exports=n)}(Math)},189:(t,e,q)=>{var n=q(966);t.exports=function(t){return n(t).replace(/\s(\w)/g,(function(t,e){return e.toUpperCase()}))}},788:t=>{t.exports=function(t){return e.test(t)?t.toLowerCase():q.test(t)?(function(t){return t.replace(i,(function(t,e){return e?" "+e:""}))}(t)||t).toLowerCase():n.test(t)?function(t){return t.replace(r,(function(t,e,q){return e+" "+q.toLowerCase().split("").join(" ")}))}(t).toLowerCase():t.toLowerCase()};var e=/\s/,q=/(_|-|\.|:)/,n=/([a-z][A-Z]|[A-Z][a-z])/,i=/[\W_]+(.|$)/g,r=/(.)([A-Z]+)/g},966:(t,e,q)=>{var n=q(788);t.exports=function(t){return n(t).replace(/[\W_]+(.|$)/g,(function(t,e){return e?" "+e:""})).trim()}},877:(t,e,q)=>{var n=q(570),i=q(171),r=i;r.v1=n,r.v4=i,t.exports=r},327:t=>{for(var e=[],q=0;q<256;++q)e[q]=(q+256).toString(16).substr(1);t.exports=function(t,q){var n=q||0,i=e;return[i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]]].join("")}},217:t=>{var e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(e){var q=new Uint8Array(16);t.exports=function(){return e(q),q}}else{var n=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),n[e]=t>>>((3&e)<<3)&255;return n}}},570:(t,e,q)=>{var n,i,r=q(217),o=q(327),a=0,s=0;t.exports=function(t,e,q){var l=e&&q||0,c=e||[],h=(t=t||{}).node||n,u=void 0!==t.clockseq?t.clockseq:i;if(null==h||null==u){var m=r();null==h&&(h=n=[1|m[0],m[1],m[2],m[3],m[4],m[5]]),null==u&&(u=i=16383&(m[6]<<8|m[7]))}var d=void 0!==t.msecs?t.msecs:(new Date).getTime(),p=void 0!==t.nsecs?t.nsecs:s+1,f=d-a+(p-s)/1e4;if(f<0&&void 0===t.clockseq&&(u=u+1&16383),(f<0||d>a)&&void 0===t.nsecs&&(p=0),p>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=d,s=p,i=u;var g=(1e4*(268435455&(d+=122192928e5))+p)%4294967296;c[l++]=g>>>24&255,c[l++]=g>>>16&255,c[l++]=g>>>8&255,c[l++]=255&g;var x=d/4294967296*1e4&268435455;c[l++]=x>>>8&255,c[l++]=255&x,c[l++]=x>>>24&15|16,c[l++]=x>>>16&255,c[l++]=u>>>8|128,c[l++]=255&u;for(var v=0;v<6;++v)c[l+v]=h[v];return e||o(c)}},171:(t,e,q)=>{var n=q(217),i=q(327);t.exports=function(t,e,q){var r=e&&q||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var a=0;a<16;++a)e[r+a]=o[a];return e||i(o)}},75:function(t,e,q){var n;!function(e){"use strict";function i(){}var r=i.prototype,o=e.EventEmitter;function a(t,e){for(var q=t.length;q--;)if(t[q].listener===e)return q;return-1}function s(t){return function(){return this[t].apply(this,arguments)}}function l(t){return"function"==typeof t||t instanceof RegExp||!(!t||"object"!=typeof t)&&l(t.listener)}r.getListeners=function(t){var e,q,n=this._getEvents();if(t instanceof RegExp)for(q in e={},n)n.hasOwnProperty(q)&&t.test(q)&&(e[q]=n[q]);else e=n[t]||(n[t]=[]);return e},r.flattenListeners=function(t){var e,q=[];for(e=0;e<t.length;e+=1)q.push(t[e].listener);return q},r.getListenersAsObject=function(t){var e,q=this.getListeners(t);return q instanceof Array&&((e={})[t]=q),e||q},r.addListener=function(t,e){if(!l(e))throw new TypeError("listener must be a function");var q,n=this.getListenersAsObject(t),i="object"==typeof e;for(q in n)n.hasOwnProperty(q)&&-1===a(n[q],e)&&n[q].push(i?e:{listener:e,once:!1});return this},r.on=s("addListener"),r.addOnceListener=function(t,e){return this.addListener(t,{listener:e,once:!0})},r.once=s("addOnceListener"),r.defineEvent=function(t){return this.getListeners(t),this},r.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},r.removeListener=function(t,e){var q,n,i=this.getListenersAsObject(t);for(n in i)i.hasOwnProperty(n)&&-1!==(q=a(i[n],e))&&i[n].splice(q,1);return this},r.off=s("removeListener"),r.addListeners=function(t,e){return this.manipulateListeners(!1,t,e)},r.removeListeners=function(t,e){return this.manipulateListeners(!0,t,e)},r.manipulateListeners=function(t,e,q){var n,i,r=t?this.removeListener:this.addListener,o=t?this.removeListeners:this.addListeners;if("object"!=typeof e||e instanceof RegExp)for(n=q.length;n--;)r.call(this,e,q[n]);else for(n in e)e.hasOwnProperty(n)&&(i=e[n])&&("function"==typeof i?r.call(this,n,i):o.call(this,n,i));return this},r.removeEvent=function(t){var e,q=typeof t,n=this._getEvents();if("string"===q)delete n[t];else if(t instanceof RegExp)for(e in n)n.hasOwnProperty(e)&&t.test(e)&&delete n[e];else delete this._events;return this},r.removeAllListeners=s("removeEvent"),r.emitEvent=function(t,e){var q,n,i,r,o=this.getListenersAsObject(t);for(r in o)if(o.hasOwnProperty(r))for(q=o[r].slice(0),i=0;i<q.length;i++)!0===(n=q[i]).once&&this.removeListener(t,n.listener),n.listener.apply(this,e||[])===this._getOnceReturnValue()&&this.removeListener(t,n.listener);return this},r.trigger=s("emitEvent"),r.emit=function(t){var e=Array.prototype.slice.call(arguments,1);return this.emitEvent(t,e)},r.setOnceReturnValue=function(t){return this._onceReturnValue=t,this},r._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},r._getEvents=function(){return this._events||(this._events={})},i.noConflict=function(){return e.EventEmitter=o,i},void 0===(n=function(){return i}.call(e,q,e,t))||(t.exports=n)}("undefined"!=typeof window?window:this||{})}},e={};function q(n){var i=e[n];if(void 0!==i)return i.exports;var r=e[n]={id:n,exports:{}};return t[n].call(r.exports,r,r.exports,q),r.exports}q.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return q.d(e,{a:e}),e},q.d=(t,e)=>{for(var n in e)q.o(e,n)&&!q.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},q.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),q.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{"use strict";q.r(n),q.d(n,{guify:()=>Qe});var t=q(879),e=q.n(t),i=q(764),r=q.n(i);var o=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var q=r()[e];void 0===q&&(console.error("There is no theme preset with the name '".concat(e,"'! Defaulting to dark theme.")),q=r().dark),Object.assign(this,a,q)}var e;return(e=[{key:"Apply",value:function(){console.log(this);var t=document.documentElement;t.style.setProperty("--color-menu-bar-background",this.colors.menuBarBackground),t.style.setProperty("--color-menu-bar-text",this.colors.menuBarText),t.style.setProperty("--color-panel-background",this.colors.panelBackground),t.style.setProperty("--color-component-background",this.colors.componentBackground),t.style.setProperty("--color-component-background-hover",this.colors.componentBackgroundHover),t.style.setProperty("--color-component-background-disabled",this.colors.componentBackgroundDisabled),t.style.setProperty("--color-component-foreground",this.colors.componentForeground),t.style.setProperty("--color-component-active",this.colors.componentActive),t.style.setProperty("--color-text-primary",this.colors.textPrimary),t.style.setProperty("--color-text-secondary",this.colors.textSecondary),t.style.setProperty("--color-text-hover",this.colors.textHover),t.style.setProperty("--color-text-active",this.colors.textActive),t.style.setProperty("--color-text-disabled",this.colors.textDisabled),t.style.setProperty("--size-menu-bar-height",this.sizing.menuBarHeight),t.style.setProperty("--size-component-height",this.sizing.componentHeight),t.style.setProperty("--size-component-spacing",this.sizing.componentSpacing),t.style.setProperty("--size-label-width",this.sizing.labelWidth),t.style.setProperty("--font-family",this.font.fontFamily),t.style.setProperty("--font-size",this.font.fontSize),t.style.setProperty("--font-weight",this.font.fontWeight),t.style.setProperty("--font-family-for-input",this.font.inputFontFamily)}}])&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(t.prototype,e),t}(),a={name:"BaseTheme",colors:{menuBarBackground:"black",menuBarText:"black",panelBackground:"black",componentBackground:"black",componentBackgroundHover:"black",componentBackgroundDisabled:"black",componentForeground:"black",componentActive:"black",textPrimary:"black",textSecondary:"black",textHover:"black",textActive:"black",textDisabled:"black"},sizing:{menuBarHeight:"25px",componentHeight:"20px",componentSpacing:"5px",labelWidth:"42%"},font:{fontFamily:"'Hack', ui-monospace, monospace",fontSize:"11px",fontWeight:"400",inputFontFamily:"'Hack', ui-monospace, monospace"}},s=q(994),l=q.n(s),c=q(795),h=q.n(c),u=q(569),m=q.n(u),d=q(565),p=q.n(d),f=q(216),g=q.n(f),x=q(589),v=q.n(x),y=q(72),_={};_.styleTagTransform=v(),_.setAttributes=p(),_.insert=m().bind(null,"head"),_.domAPI=h(),_.insertStyleElement=g(),l()(y.Z,_),y.Z&&y.Z.locals&&y.Z.locals;var b=q(75),A=q.n(b),w=q(877),M=q(54),S={};S.styleTagTransform=v(),S.setAttributes=p(),S.insert=m().bind(null,"head"),S.domAPI=h(),S.insertStyleElement=g(),l()(M.Z,S),M.Z&&M.Z.locals&&M.Z.locals;const E=function(t,e,q){var n=t.appendChild(document.createElement("div"));return n.classList.add("guify-component-container"),n};function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function T(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function z(t,e){return z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},z(t,e)}function L(t,e){if(e&&("object"===C(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function R(t){return R=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},R(t)}var I=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&z(t,e)}(r,t);var e,q,n,i=(q=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=R(q);if(n){var i=R(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return L(this,t)});function r(t,e,q){var n,o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];return T(this,r),(n=i.call(this)).root=t,n.opts=e,n.theme=q,n.uuid=(0,w.v4)(),o&&(n.container=E(t,e.label)),n.SetEnabled(e.enabled||!0),n}return(e=[{key:"SetEnabled",value:function(t){var e,q;this.enabled=t,t?null===(e=this.container)||void 0===e||e.classList.remove("disabled"):null===(q=this.container)||void 0===q||q.classList.add("disabled")}},{key:"Remove",value:function(){this.container&&this.container.parentNode.removeChild(this.container)}}])&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(r.prototype,e),r}(A()),P=q(146),B={};function k(t){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k(t)}function D(t,e){return D=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},D(t,e)}function O(t,e){if(e&&("object"===k(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function N(t){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},N(t)}B.styleTagTransform=v(),B.setAttributes=p(),B.insert=m().bind(null,"head"),B.domAPI=h(),B.insertStyleElement=g(),l()(P.Z,B),P.Z&&P.Z.locals&&P.Z.locals;var F=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&D(t,e)}(i,t);var e,q,n=(e=i,q=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=N(e);if(q){var i=N(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return O(this,t)});function i(t,e,q){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i);var o=(r=n.call(this,t,e,q)).container.appendChild(document.createElement("div"));o.classList.add("guify-title");var a=o.appendChild(document.createElement("div"));return a.classList.add("guify-title-text"),a.innerHTML="&#9632; ".concat(e.label," &#9632;"),r}return i}(I),H=q(114),U=q.n(H),V=q(115),G={};G.styleTagTransform=v(),G.setAttributes=p(),G.insert=m().bind(null,"head"),G.domAPI=h(),G.insertStyleElement=g(),l()(V.Z,G),V.Z&&V.Z.locals&&V.Z.locals;var W=q(142),j={};j.styleTagTransform=v(),j.setAttributes=p(),j.insert=m().bind(null,"head"),j.domAPI=h(),j.insertStyleElement=g(),l()(W.Z,j),W.Z&&W.Z.locals&&W.Z.locals;const Z=function(t,e,q){var n=t.appendChild(document.createElement("div"));return n.classList.add("guify-component-label"),n.innerHTML=e,n};var X=q(643),Y={};Y.styleTagTransform=v(),Y.setAttributes=p(),Y.insert=m().bind(null,"head"),Y.domAPI=h(),Y.insertStyleElement=g(),l()(X.Z,Y),X.Z&&X.Z.locals&&X.Z.locals;const J=function(t,q,n,i,r){var o=t.appendChild(document.createElement("input"));return o.type="text",o.classList.add("guify-value-input"),o.value=q,r||o.classList.add("guify-value-input-right"),e()(o,{width:i}),o};function $(t){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},$(t)}function K(t,e){return K=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},K(t,e)}function Q(t,e){if(e&&("object"===$(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function tt(t){return tt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},tt(t)}var et=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&K(t,e)}(o,t);var q,n,i,r=(n=o,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=tt(n);if(i){var q=tt(this).constructor;t=Reflect.construct(e,arguments,q)}else t=e.apply(this,arguments);return Q(this,t)});function o(t,q,n){var i;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,q,n)).scale=q.scale,i.label=Z(i.container,q.label),i.input=i.container.appendChild(document.createElement("input")),i.input.type="range",i.input.classList.add("guify-range"),q.label&&i.input.setAttribute("aria-label",q.label+" input"),"log"===q.scale){if(q.min*q.max<=0)throw new Error("Log range min/max must have the same sign and not equal zero. Got min = "+q.min+", max = "+q.max);if(U()(q.step)&&console.warn("Step is unused for log scale sliders."),U()(q.steps)&&console.warn('"steps" option for log scale sliders has been removed.'),i.minPos=0,i.maxPos=1e6,i.min=Math.log(U()(q.min)?q.min:1e-6),i.max=Math.log(U()(q.max)?q.max:100),i.precision=U()(q.precision)?q.precision:3,i.logScale=(i.max-i.min)/(i.maxPos-i.minPos),i.initial=U()(q.initial)?q.initial:i.min,q.initial<0)throw new Error("Log range initial value must be > 0. Got initial value = ".concat(q.initial))}else if(i.minPos=U()(q.min)?q.min:0,i.maxPos=U()(q.max)?q.max:100,i.min=i.minPos,i.max=i.maxPos,i.precision=U()(q.precision)?q.precision:3,i.step=U()(q.step)?q.step:10/Math.pow(10,3),i.initial=U()(q.initial)?q.initial:i.min,0!=i.step){var a=Math.round((i.initial-i.min)/i.step);i.initial=i.min+i.step*a}return i.input.min=i.minPos,i.input.max=i.maxPos,U()(i.step)&&(i.input.step=i.step),i.input.value=i._Position(i.initial),e()(i.input,{width:"calc(100% - ".concat(n.sizing.labelWidth," - 16% - 0.5em)")}),i.valueComponent=J(i.container,i.initial,0,"16%"),q.label&&i.valueComponent.setAttribute("aria-label",q.label+" value"),setTimeout((function(){i.emit("initialized",parseFloat(i.input.value))})),i.userIsModifying=!1,i.input.addEventListener("focus",(function(){i.focused=!0})),i.input.addEventListener("blur",(function(){i.focused=!1})),i.input.addEventListener("mouseup",(function(){i.input.blur()})),i.input.oninput=function(t){var e=parseFloat(t.target.value),q=i._Value(e);i.valueComponent.value=i._FormatNumber(q,i.precision),i.emit("input",q)},i.valueComponent.onchange=function(){var t=i.valueComponent.value;if(Number(parseFloat(t))==t){var e=parseFloat(t);e=i._ValidatedInputValue(e),i.valueComponent.value=e,i.emit("input",e),i.lastValue=e}else i.valueComponent.value=i.lastValue},i}return q=[{key:"_Value",value:function(t){if("log"===this.scale){var e=(t-this.minPos)*this.logScale+this.min;return Math.exp(e)}return t}},{key:"_Position",value:function(t){return"log"===this.scale?this.minPos+(Math.log(t)-this.min)/this.logScale:t}},{key:"_ValidatedInputValue",value:function(t){var e;return"log"===this.scale?e=Math.min(Math.max(t,Math.exp(this.min)),Math.exp(this.max)):(e=Math.min(Math.max(t,this.min),this.max),e=Math.ceil((e-this.min)/this.step)*this.step+this.min),this._FormatNumber(e,this.precision)}},{key:"SetValue",value:function(t){var e=this._ValidatedInputValue(t);!0!==this.focused&&(this.valueComponent.value=this._FormatNumber(e,this.precision),this.input.value=this._Position(e),this.lastValue=e)}},{key:"GetValue",value:function(){return this._Value(this.input.value)}},{key:"_FormatNumber",value:function(t,e){return+parseFloat(t).toFixed(e)}}],q&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(o.prototype,q),o}(I),qt=q(351),nt={};function it(t){return it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},it(t)}function rt(t,e){return rt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},rt(t,e)}function ot(t,e){if(e&&("object"===it(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function at(t){return at=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},at(t)}nt.styleTagTransform=v(),nt.setAttributes=p(),nt.insert=m().bind(null,"head"),nt.domAPI=h(),nt.insertStyleElement=g(),l()(qt.Z,nt),qt.Z&&qt.Z.locals&&qt.Z.locals;var st=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&rt(t,e)}(i,t);var e,q,n=(e=i,q=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,n=at(e);if(q){var i=at(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return ot(this,t)});function i(t,e,q){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=n.call(this,t,e,q)).label=Z(r.container,""),r.input=r.container.appendChild(document.createElement("button")),r.input.classList.add("guify-button"),r.input.textContent=e.label,r.button=r.input,r.input.addEventListener("click",e.action),r.input.addEventListener("mouseup",(function(){r.input.blur()})),r}return i}(I),lt=q(11),ct={};function ht(t){return ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ht(t)}function ut(t,e){return ut=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},ut(t,e)}function mt(t,e){if(e&&("object"===ht(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function dt(t){return dt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},dt(t)}ct.styleTagTransform=v(),ct.setAttributes=p(),ct.insert=m().bind(null,"head"),ct.domAPI=h(),ct.insertStyleElement=g(),l()(lt.Z,ct),lt.Z&&lt.Z.locals&&lt.Z.locals;var pt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ut(t,e)}(r,t);var e,q,n,i=(q=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=dt(q);if(n){var i=dt(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return mt(this,t)});function r(t,e,q){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),(n=i.call(this,t,e,q)).label=Z(n.container,e.label),n.input=n.container.appendChild(document.createElement("input")),n.input.id="guify-checkbox-"+e.label+n.uuid,n.input.type="checkbox",n.input.checked=e.initial,n.input.classList.add("guify-checkbox"),e.label&&n.input.setAttribute("aria-label",e.label),n.container.appendChild(document.createElement("label")).htmlFor=n.input.id,setTimeout((function(){n.emit("initialized",n.input.checked)})),n.input.onchange=function(t){n.emit("input",t.target.checked)},n}return e=[{key:"SetValue",value:function(t){this.input.checked=t}},{key:"GetValue",value:function(){return this.input.checked}}],e&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(r.prototype,e),r}(I),ft=q(247),gt={};function xt(t){return xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},xt(t)}function vt(t,e){return vt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},vt(t,e)}function yt(t,e){if(e&&("object"===xt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _t(t){return _t=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},_t(t)}gt.styleTagTransform=v(),gt.setAttributes=p(),gt.insert=m().bind(null,"head"),gt.domAPI=h(),gt.insertStyleElement=g(),l()(ft.Z,gt),ft.Z&&ft.Z.locals&&ft.Z.locals;var bt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&vt(t,e)}(r,t);var e,q,n,i=(q=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_t(q);if(n){var i=_t(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return yt(this,t)});function r(t,e,q){var n,o,a,s,l,c,h,u;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),(n=i.call(this,t,e,q)).label=Z(n.container,e.label),n.input=document.createElement("select"),n.input.classList.add("guify-select-dropdown"),e.label&&n.input.setAttribute("aria-label",e.label),(a=document.createElement("span")).classList.add("guify-select-triangle","guify-select-triangle--down"),(s=document.createElement("span")).classList.add("guify-select-triangle","guify-select-triangle--up"),n.container.appendChild(a),n.container.appendChild(s),Array.isArray(e.options))for(o=0;o<e.options.length;o++)c=e.options[o],(h=document.createElement("option")).value=h.textContent=c,e.initial===c&&(h.selected="selected"),n.input.appendChild(h);else for(u=Object.keys(e.options),o=0;o<u.length;o++)l=u[o],(h=document.createElement("option")).value=l,e.initial===l&&(h.selected="selected"),h.textContent=e.options[l],n.input.appendChild(h);n.container.appendChild(n.input),n.input.onchange=function(t){n.emit("input",t.target.value)};var m=function(){a.classList.add("guify-select-triangle--down-highlight"),s.classList.add("guify-select-triangle--up-highlight")},d=function(){a.classList.remove("guify-select-triangle--down-highlight"),s.classList.remove("guify-select-triangle--up-highlight")},p=!1;return n.input.addEventListener("mouseover",m),n.input.addEventListener("focus",(function(){p=!0,m()})),n.input.addEventListener("blur",(function(){p=!1,d()})),n.input.addEventListener("mouseleave",(function(){p||d()})),n}return e=[{key:"SetValue",value:function(t){this.input.value=t}},{key:"GetValue",value:function(){return this.input.value}}],e&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(r.prototype,e),r}(I),At=q(532),wt={};function Mt(t){return Mt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Mt(t)}function St(t,e){return St=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},St(t,e)}function Et(t,e){if(e&&("object"===Mt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ct(t){return Ct=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ct(t)}wt.styleTagTransform=v(),wt.setAttributes=p(),wt.insert=m().bind(null,"head"),wt.domAPI=h(),wt.insertStyleElement=g(),l()(At.Z,wt),At.Z&&At.Z.locals&&At.Z.locals;var Tt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&St(t,e)}(r,t);var e,q,n,i=(q=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ct(q);if(n){var i=Ct(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return Et(this,t)});function r(t,e,q){var n,o,a,s;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),(n=i.call(this,t,e,q)).listenMode=e.listenMode||"input",(o=r,a=r,s=zt,function(t,e){if(t!==e)throw new TypeError("Private static access of wrong provenance")}(o,a),function(t,e){if(void 0===t)throw new TypeError("attempted to get private static field before its declaration")}(s),function(t,e){return e.get?e.get.call(t):e.value}(o,s)).includes(n.listenMode)||console.error('listenMode "'.concat(n.listenMode,'" is not supported for text component "').concat(e.label,'"! Falling back on "input".')),n.label=Z(n.container,e.label),n.input=n.container.appendChild(document.createElement("input")),n.input.type="text",n.input.classList.add("guify-text-input"),e.initial&&(n.input.value=e.initial),e.label&&n.input.setAttribute("aria-label",e.label),setTimeout((function(){n.emit("initialized",n.input.value)})),n.input.addEventListener(n.listenMode,(function(t){console.log(t),n.emit("input",t.target.value)})),n.input.addEventListener("focus",(function(){n.focused=!0})),n.input.addEventListener("blur",(function(){n.focused=!1})),n}return e=[{key:"SetValue",value:function(t){!0!==this.focused&&(this.input.value=t)}},{key:"GetValue",value:function(){return this.input.value}}],e&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(r.prototype,e),r}(I),zt={writable:!0,value:["input","change"]},Lt=q(186);function Rt(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function It(t,e,q){return e&&Rt(t.prototype,e),q&&Rt(t,q),t}function Pt(t){return"number"==typeof t&&!isNaN(t)}function Bt(t,e,q){return Math.min(Math.max(t,e),q)}function kt(t){if(0===t.type.indexOf("touch")){var e=t.touches[0];return{x:e.clientX,y:e.clientY}}return{x:t.clientX,y:t.clientY}}function Dt(t){return 1==t.length?"0"+t:""+t}var Ot=function(){function t(t){this._rgba={r:0,g:0,b:0,a:1},this._hsva={h:0,s:0,v:0,a:1},this.fromHex(t)}var e=t.prototype;return e.fromHex=function(t){t||(t=0),Pt(t)?(this._hexNumber=t,this._hexString=function(t){return"#"+("00000"+(0|t).toString(16)).substr(-6).toUpperCase()}(this._hexNumber)):(this._hexString=t.toUpperCase(),this._hexNumber=Nt(this._hexString));var e=function(t){return{r:(t>>16&255)/255,g:(t>>8&255)/255,b:(255&t)/255}}(this._hexNumber),q=e.g,n=e.b;this._rgba.r=e.r,this._rgba.g=q,this._rgba.b=n;var i=function(t){var e,q=t.r,n=t.g,i=t.b,r=Math.max(q,n,i),o=Math.min(q,n,i),a=r-o,s=0===r?0:a/r,l=r;if(r==o)e=0;else{switch(r){case q:e=(n-i)/a+(n<i?6:0);break;case n:e=(i-q)/a+2;break;case i:e=(q-n)/a+4}e/=6}return{h:e,s,v:l}}(this._rgba),r=i.s,o=i.v;this._hsva.h=i.h,this._hsva.s=r,this._hsva.v=o,this._updateBrightness()},e.fromHsv=function(t){var e=t.s,q=t.v;this._hsva.h=t.h,this._hsva.s=e,this._hsva.v=q;var n=function(t){var e=t.h,q=t.s,n=t.v;e*=6;var i=Math.floor(e),r=e-i,o=n*(1-q),a=n*(1-r*q),s=n*(1-(1-r)*q),l=i%6;return{r:[n,a,o,o,s,n][l],g:[s,n,n,a,o,o][l],b:[o,o,s,n,n,a][l]}}(this._hsva),i=n.g,r=n.b;this._rgba.r=n.r,this._rgba.g=i,this._rgba.b=r,this._hexString=function(t){var e=t.g,q=t.b;return["#",Dt(Math.round(255*t.r).toString(16)),Dt(Math.round(255*e).toString(16)),Dt(Math.round(255*q).toString(16))].join("").toUpperCase()}(this._rgba),this._hexNumber=Nt(this._hexString),this._updateBrightness()},e._updateBrightness=function(){var t=this._rgba;this._brightness=(299*t.r+587*t.g+114*t.b)/1e3,this._isDark=this._brightness<.5,this._isLight=!this._isDark},It(t,[{key:"rgb",get:function(){return this._rgba}},{key:"hsv",get:function(){return this._hsva}},{key:"hex",get:function(){return this._hexNumber}},{key:"hexString",get:function(){return this._hexString}},{key:"brightness",get:function(){return this._brightness}},{key:"isDark",get:function(){return this._isDark}},{key:"isLight",get:function(){return this._isLight}}]),t}();function Nt(t){return parseInt(t.replace("#",""),16)}var Ft=function(){function t(t){var e=this;void 0===t&&(t={}),this._widthUnits="px",this._heightUnits="px",this._huePosition=0,this._hueHeight=0,this._maxHue=0,this._inputIsNumber=!1,this._saturationWidth=0,this._isChoosing=!1,this._callbacks=[],this.width=0,this.height=0,this.hue=0,this.position={x:0,y:0},this.color=new Ot(0),this.backgroundColor=new Ot(0),this.hueColor=new Ot(0),this._onSaturationMouseDown=function(t){var q=e.$saturation.getBoundingClientRect(),n=kt(t),i=n.x,r=n.y;e._isChoosing=!0,e._moveSelectorTo(i-q.left,r-q.top),e._updateColorFromPosition(),e._window.addEventListener("mouseup",e._onSaturationMouseUp),e._window.addEventListener("touchend",e._onSaturationMouseUp),e._window.addEventListener("mousemove",e._onSaturationMouseMove),e._window.addEventListener("touchmove",e._onSaturationMouseMove),t.preventDefault()},this._onSaturationMouseMove=function(t){var q=e.$saturation.getBoundingClientRect(),n=kt(t);e._moveSelectorTo(n.x-q.left,n.y-q.top),e._updateColorFromPosition()},this._onSaturationMouseUp=function(){e._isChoosing=!1,e._window.removeEventListener("mouseup",e._onSaturationMouseUp),e._window.removeEventListener("touchend",e._onSaturationMouseUp),e._window.removeEventListener("mousemove",e._onSaturationMouseMove),e._window.removeEventListener("touchmove",e._onSaturationMouseMove)},this._onHueMouseDown=function(t){var q=e.$hue.getBoundingClientRect(),n=kt(t).y;e._isChoosing=!0,e._moveHueTo(n-q.top),e._updateHueFromPosition(),e._window.addEventListener("mouseup",e._onHueMouseUp),e._window.addEventListener("touchend",e._onHueMouseUp),e._window.addEventListener("mousemove",e._onHueMouseMove),e._window.addEventListener("touchmove",e._onHueMouseMove),t.preventDefault()},this._onHueMouseMove=function(t){var q=e.$hue.getBoundingClientRect(),n=kt(t);e._moveHueTo(n.y-q.top),e._updateHueFromPosition()},this._onHueMouseUp=function(){e._isChoosing=!1,e._window.removeEventListener("mouseup",e._onHueMouseUp),e._window.removeEventListener("touchend",e._onHueMouseUp),e._window.removeEventListener("mousemove",e._onHueMouseMove),e._window.removeEventListener("touchmove",e._onHueMouseMove)},this._window=t.window||window,this._document=this._window.document,this.$el=this._document.createElement("div"),this.$el.className="Scp",this.$el.innerHTML='\n      <div class="Scp-saturation">\n        <div class="Scp-brightness"></div>\n        <div class="Scp-sbSelector"></div>\n      </div>\n      <div class="Scp-hue">\n        <div class="Scp-hSelector"></div>\n      </div>\n    ',this.$saturation=this.$el.querySelector(".Scp-saturation"),this.$hue=this.$el.querySelector(".Scp-hue"),this.$sbSelector=this.$el.querySelector(".Scp-sbSelector"),this.$hSelector=this.$el.querySelector(".Scp-hSelector"),this.$saturation.addEventListener("mousedown",this._onSaturationMouseDown),this.$saturation.addEventListener("touchstart",this._onSaturationMouseDown),this.$hue.addEventListener("mousedown",this._onHueMouseDown),this.$hue.addEventListener("touchstart",this._onHueMouseDown),t.el&&this.appendTo(t.el),t.background&&this.setBackgroundColor(t.background),t.widthUnits&&(this._widthUnits=t.widthUnits),t.heightUnits&&(this._heightUnits=t.heightUnits),this.setSize(t.width||175,t.height||150),this.setColor(t.color)}var e=t.prototype;return e.appendTo=function(t){return"string"==typeof t?document.querySelector(t).appendChild(this.$el):t.appendChild(this.$el),this},e.remove=function(){this._callbacks=[],this._onSaturationMouseUp(),this._onHueMouseUp(),this.$saturation.removeEventListener("mousedown",this._onSaturationMouseDown),this.$saturation.removeEventListener("touchstart",this._onSaturationMouseDown),this.$hue.removeEventListener("mousedown",this._onHueMouseDown),this.$hue.removeEventListener("touchstart",this._onHueMouseDown),this.$el.parentNode&&this.$el.parentNode.removeChild(this.$el)},e.setColor=function(t){this._inputIsNumber=Pt(t),this.color.fromHex(t);var e=this.color.hsv,q=e.h,n=e.s,i=e.v;return isNaN(q)||(this.hue=q),this._moveSelectorTo(this._saturationWidth*n,(1-i)*this._hueHeight),this._moveHueTo((1-this.hue)*this._hueHeight),this._updateHue(),this},e.setSize=function(t,e){return this.width=t,this.height=e,this.$el.style.width=this.width+this._widthUnits,this.$el.style.height=this.height+this._heightUnits,this._saturationWidth=this.width-25,this.$saturation.style.width=this._saturationWidth+"px",this._hueHeight=this.height,this._maxHue=this._hueHeight-2,this},e.setBackgroundColor=function(t){return this.backgroundColor.fromHex(t),this.$el.style.padding="5px",this.$el.style.background=this.backgroundColor.hexString,this},e.setNoBackground=function(){return this.$el.style.padding="0px",this.$el.style.background="none",this},e.onChange=function(t){return this._callbacks.indexOf(t)<0&&(this._callbacks.push(t),t(this.getHexString())),this},e.getColor=function(){return this._inputIsNumber?this.getHexNumber():this.getHexString()},e.getHexString=function(){return this.color.hexString.toUpperCase()},e.getHexNumber=function(){return this.color.hex},e.getRGB=function(){return this.color.rgb},e.getHSV=function(){return this.color.hsv},e.isDark=function(){return this.color.isDark},e.isLight=function(){return this.color.isLight},e._moveSelectorTo=function(t,e){this.position.x=Bt(t,0,this._saturationWidth),this.position.y=Bt(e,0,this._hueHeight),this.$sbSelector.style.transform="translate("+this.position.x+"px, "+this.position.y+"px)"},e._updateColorFromPosition=function(){this.color.fromHsv({h:this.hue,s:this.position.x/this._saturationWidth,v:1-this.position.y/this._hueHeight}),this._updateColor()},e._moveHueTo=function(t){this._huePosition=Bt(t,0,this._maxHue),this.$hSelector.style.transform="translateY("+this._huePosition+"px)"},e._updateHueFromPosition=function(){var t=this.getHSV();this.hue=1-this._huePosition/this._maxHue,this.color.fromHsv({h:this.hue,s:t.s,v:t.v}),this._updateHue()},e._updateHue=function(){this.hueColor.fromHsv({h:this.hue,s:1,v:1}),this.$saturation.style.background="linear-gradient(to right, #fff, "+this.hueColor.hexString+")",this._updateColor()},e._updateColor=function(){this.$sbSelector.style.background=this.getHexString(),this.$sbSelector.style.borderColor=this.isDark()?"#fff":"#000",this._triggerChange()},e._triggerChange=function(){var t=this;this._callbacks.forEach((function(e){return e(t.getHexString())}))},It(t,[{key:"isChoosing",get:function(){return this._isChoosing}}]),t}();(0,Lt.insertCss)(".Scp{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative}.Scp-saturation{position:relative;height:100%;background:linear-gradient(90deg,#fff,red);float:left;margin-right:5px}.Scp-brightness{width:100%;height:100%;background:linear-gradient(hsla(0,0%,100%,0),#000)}.Scp-sbSelector{border:2px solid #fff;position:absolute;width:14px;height:14px;background:#fff;border-radius:10px;top:-7px;left:-7px;box-sizing:border-box;z-index:10}.Scp-hue{width:20px;height:100%;position:relative;float:left;background:linear-gradient(red,#f0f 17%,#00f 34%,#0ff 50%,#0f0 67%,#ff0 84%,red)}.Scp-hSelector{position:absolute;background:#fff;border-bottom:1px solid #000;right:-3px;width:10px;height:2px}");const Ht=Ft;var Ut=q(621),Vt=q.n(Ut),Gt=q(442),Wt={};function jt(t){return jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},jt(t)}function Zt(t,e){return Zt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Zt(t,e)}function Xt(t,e){if(e&&("object"===jt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Yt(t){return Yt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Yt(t)}Wt.styleTagTransform=v(),Wt.setAttributes=p(),Wt.insert=m().bind(null,"head"),Wt.domAPI=h(),Wt.insertStyleElement=g(),l()(Gt.Z,Wt),Gt.Z&&Gt.Z.locals&&Gt.Z.locals;var Jt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Zt(t,e)}(o,t);var q,n,i,r=(n=o,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Yt(n);if(i){var q=Yt(this).constructor;t=Reflect.construct(e,arguments,q)}else t=e.apply(this,arguments);return Xt(this,t)});function o(t,q,n){var i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),i=r.call(this,t,q,n),q.format=q.format||"rgb",q.initial=q.initial||"#123456",i.label=Z(i.container,q.label);var a=i.container.appendChild(document.createElement("span"));a.classList.add("guify-color");var s=J(i.container,"",0,"calc(100% - ".concat(n.sizing.labelWidth," - 12% - 0.5em)"));s.setAttribute("readonly","true"),a.onmouseover=function(){i.picker.$el.style.display=""};var l=q.initial;switch(q.format){case"rgb":case"hex":l=Vt()(l).toHexString();break;case"array":l=Vt().fromRatio({r:l[0],g:l[1],b:l[2]}).toHexString()}return i.picker=new Ht({el:a,color:l,background:n.colors.componentBackground,width:125,height:100}),e()(i.picker.$el,{marginTop:n.sizing.componentHeight,display:"none",position:"absolute"}),e()(a,{position:"absolute",display:"inline-block",width:"12.5%",height:n.sizing.componentHeight,backgroundColor:i.picker.getHexString()}),a.onmouseout=function(){i.picker.$el.style.display="none"},setTimeout((function(){i.emit("initialized",l)})),i.picker.onChange((function(t){s.value=i.Format(t),e()(a,{backgroundColor:t}),i.emit("input",i.Format(t))})),i}return q=[{key:"Format",value:function(t){switch(this.opts.format){case"rgb":return Vt()(t).toRgbString();case"hex":return Vt()(t).toHexString();case"array":var e=Vt()(t).toRgb();return[e.r/255,e.g/255,e.b/255].map((function(t){return t.toFixed(2)}));default:return t}}},{key:"SetValue",value:function(t){this.picker.isChoosing||this.picker.setColor(t)}},{key:"GetValue",value:function(){return this.Format(this.picker.getColor())}}],q&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(o.prototype,q),o}(I),$t=q(211),Kt={};function Qt(t){return Qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Qt(t)}function te(){return te="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,q){var n=ee(t,e);if(n){var i=Object.getOwnPropertyDescriptor(n,e);return i.get?i.get.call(arguments.length<3?t:q):i.value}},te.apply(this,arguments)}function ee(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ie(t)););return t}function qe(t,e){return qe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},qe(t,e)}function ne(t,e){if(e&&("object"===Qt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function ie(t){return ie=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ie(t)}Kt.styleTagTransform=v(),Kt.setAttributes=p(),Kt.insert=m().bind(null,"head"),Kt.domAPI=h(),Kt.insertStyleElement=g(),l()($t.Z,Kt),$t.Z&&$t.Z.locals&&$t.Z.locals;var re=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&qe(t,e)}(r,t);var e,q,n,i=(q=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ie(q);if(n){var i=ie(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return ne(this,t)});function r(t,e,q){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),(n=i.call(this,t,e,q)).container.classList.add("guify-folder"),n.container.setAttribute("role","button"),n.container.setAttribute("tabIndex","0"),n.arrow=n.container.appendChild(document.createElement("div")),n.arrow.classList.add("guify-folder-arrow"),n.arrow.innerHTML="&#9662;",n.label=n.container.appendChild(document.createElement("div")),n.label.classList.add("guify-folder-text"),n.label.innerHTML=e.label,n.container.onclick=function(){n.Toggle()},n.container.addEventListener("mouseup",(function(){n.container.blur()})),n.container.addEventListener("keydown",(function(t){"Enter"!==t.code&&"Space"!==t.code||(t.preventDefault(),n.Toggle())})),n.folderContainer=t.appendChild(document.createElement("div")),n.folderContainer.classList.add("guify-folder-contents"),n.open=n.opts.open||!1,n.SetOpen(n.open),n}return(e=[{key:"SetEnabled",value:function(t){var e,q;te(ie(r.prototype),"SetEnabled",this).call(this,t),t?null===(e=this.folderContainer)||void 0===e||e.classList.remove("disabled"):null===(q=this.folderContainer)||void 0===q||q.classList.add("disabled")}},{key:"Toggle",value:function(){this.open=!this.open,this.SetOpen(this.open)}},{key:"SetOpen",value:function(t){this.open=t,t?(this.folderContainer.classList.remove("guify-folder-closed"),this.arrow.innerHTML="&#9662;"):(this.folderContainer.classList.add("guify-folder-closed"),this.arrow.innerHTML="&#9656;")}},{key:"Remove",value:function(){this.folderContainer&&this.folderContainer.parentNode.removeChild(this.folderContainer),te(ie(r.prototype),"Remove",this).call(this)}}])&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(r.prototype,e),r}(I),oe=q(191),ae={};function se(t){return se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},se(t)}function le(t,e){return le=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},le(t,e)}function ce(t,e){if(e&&("object"===se(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function he(t){return he=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},he(t)}ae.styleTagTransform=v(),ae.setAttributes=p(),ae.insert=m().bind(null,"head"),ae.domAPI=h(),ae.insertStyleElement=g(),l()(oe.Z,ae),oe.Z&&oe.Z.locals&&oe.Z.locals;var ue=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&le(t,e)}(o,t);var q,n,i,r=(n=o,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=he(n);if(i){var q=he(this).constructor;t=Reflect.construct(e,arguments,q)}else t=e.apply(this,arguments);return ce(this,t)});function o(t,q,n){var i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,q,n)).opts.fileReadFunc=i.opts.fileReadFunc||"readAsDataURL",i.file=null,i.fileName=null,i.container.classList.add("guify-file-container"),i.container.setAttribute("role","button"),i.container.setAttribute("tabIndex","0"),e()(i.container,{width:"100%","box-sizing":"border-box","-moz-box-sizing":"border-box","-webkit-box-sizing":"border-box",height:"unset",padding:"8px"});var a=i.container.appendChild(document.createElement("div"));a.innerHTML=q.label,e()(a,"padding-bottom","5px"),i.input=i.container.appendChild(document.createElement("input")),i.input.setAttribute("type","file"),i.input.setAttribute("multiple",!1),i.input.style.display="none",q.label&&i.input.setAttribute("aria-label",q.label),i.fileLabel=i.container.appendChild(document.createElement("div")),i.fileLabel.innerHTML="Choose a file...";var s=function(t){var e;t.dataTransfer?e=t.dataTransfer.files:t.target&&(e=t.target.files);var q=new FileReader;q.onload=function(){i.file=q.result,i.fileLabel.innerHTML=e[0].name,i.emit("input",i.file)},q[i.opts.fileReadFunc](e[0])};return i.input.addEventListener("change",s),i.container.addEventListener("dragover",(function(t){t.preventDefault(),t.stopPropagation(),i.container.classList.add("guify-dragover")})),i.container.addEventListener("dragleave",(function(t){t.preventDefault(),t.stopPropagation(),i.container.classList.remove("guify-dragover")})),i.container.addEventListener("drop",(function(t){t.preventDefault(),t.stopPropagation(),i.container.classList.remove("guify-dragover"),s(t)})),i.container.onclick=function(){i.input.click()},i.container.addEventListener("keydown",(function(t){"Enter"!==t.code&&"Space"!==t.code||(t.preventDefault(),i.input.click())})),i.container.addEventListener("mouseup",(function(){i.container.blur()})),i}return(q=[{key:"SetValue",value:function(t){}},{key:"GetValue",value:function(){return this.file}}])&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(o.prototype,q),o}(I),me=q(144),de={};function pe(t){return pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pe(t)}function fe(t,e){return fe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},fe(t,e)}function ge(t,e){if(e&&("object"===pe(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function xe(t){return xe=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},xe(t)}de.styleTagTransform=v(),de.setAttributes=p(),de.insert=m().bind(null,"head"),de.domAPI=h(),de.insertStyleElement=g(),l()(me.Z,de),me.Z&&me.Z.locals&&me.Z.locals;var ve=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&fe(t,e)}(r,t);var e,q,n,i=(q=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=xe(q);if(n){var i=xe(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return ge(this,t)});function r(t,e,q){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),(n=i.call(this,t,e,q)).label=Z(n.container,e.label),n.text=n.container.appendChild(document.createElement("div")),n.text.classList.add("guify-display"),e.initial&&n.SetValue(e.initial),e.label&&n.text.setAttribute("aria-label",e.label),n}return e=[{key:"SetValue",value:function(t){this.text.innerHTML=t.toString()}},{key:"GetValue",value:function(){return this.text.innerHTML.toString()}}],e&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(r.prototype,e),r}(I),ye=q(554),_e={};function be(t){return be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},be(t)}function Ae(t,e){return Ae=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Ae(t,e)}function we(t,e){if(e&&("object"===be(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Me(t){return Me=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Me(t)}function Se(t,e,q){return Math.min(Math.max(t,e),q)}_e.styleTagTransform=v(),_e.setAttributes=p(),_e.insert=m().bind(null,"head"),_e.domAPI=h(),_e.insertStyleElement=g(),l()(ye.Z,_e),ye.Z&&ye.Z.locals&&ye.Z.locals;var Ee=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ae(t,e)}(o,t);var q,n,i,r=(n=o,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Me(n);if(i){var q=Me(this).constructor;t=Reflect.construct(e,arguments,q)}else t=e.apply(this,arguments);return we(this,t)});function o(t,e,q){var n;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(n=r.call(this,t,e,q)).label=Z(n.container,e.label),e.step&&e.steps)throw new Error("Cannot specify both step and steps. Got step = "+e.step+", steps = ",e.steps);if(n.input=n.container.appendChild(document.createElement("span")),n.input.classList.add("guify-interval"),n.handle=document.createElement("span"),n.handle.classList.add("guify-interval-handle"),n.input.appendChild(n.handle),Array.isArray(e.initial)||(e.initial=[]),n.scale=e.scale,"log"===e.scale){if(e.min*e.max<=0)throw new Error("Log range min/max must have the same sign and not equal zero. Got min = "+e.min+", max = "+e.max);U()(e.step)&&console.warn("Step is unused for log scale sliders."),U()(e.steps)&&console.warn('"steps" option for log scale sliders has been removed.'),n.minPos=0,n.maxPos=1e6,n.min=Math.log(U()(e.min)?e.min:1e-6),n.max=Math.log(U()(e.max)?e.max:100),n.precision=U()(e.precision)?e.precision:3,n.logScale=(n.max-n.min)/(n.maxPos-n.minPos),n.initial=[U()(e.initial[0])?e.initial[0]:n.min,U()(e.initial[1])?e.initial[1]:n.max]}else n.minPos=U()(e.min)?e.min:0,n.maxPos=U()(e.max)?e.max:100,n.min=n.minPos,n.max=n.maxPos,n.precision=U()(e.precision)?e.precision:3,n.step=U()(e.step)?e.step:10/Math.pow(10,3),n.initial=[U()(e.initial[0])?e.initial[0]:n.min,U()(e.initial[1])?e.initial[1]:n.max],0!=n.step&&(n.initial=n.initial.map((function(t){return n.min+n.step*Math.round((t-n.min)/n.step)})));n.value=e.initial,n._RefreshHandles(),n.lValue=J(n.container,n.value[0],0,"11%",!0),n.rValue=J(n.container,n.value[1],0,"11%",!1),e.label&&n.lValue.setAttribute("aria-label",e.label+" lower value"),e.label&&n.lValue.setAttribute("aria-label",e.label+" upper value"),n.activeIndex=-1,setTimeout((function(){n.emit("initialized",n.value)}));var i=function(t){return t.pageX-n.input.getBoundingClientRect().left},a=function(t){var e=Se(i(t)/n.input.offsetWidth,0,1);n._SetFromMousePosition(e)},s=function t(e){var q=Se(i(e)/n.input.offsetWidth,0,1);n._SetFromMousePosition(q),document.removeEventListener("mousemove",a),document.removeEventListener("mouseup",t),n.activeIndex=-1};return n.input.addEventListener("mousedown",(function(t){var e=Se(i(t)/n.input.offsetWidth,0,1),q=n._Position(n.value[0]),r=n._Position(n.value[1]),o=(q-n.minPos)/(n.maxPos-n.minPos),l=(r-n.minPos)/(n.maxPos-n.minPos);o-=1e-15*Math.abs(n.maxPos-n.minPos),l+=1e-15*Math.abs(n.maxPos-n.minPos);var c=Math.abs(o-e),h=Math.abs(l-e);n.activeIndex=c<h?0:1,console.log(n.activeIndex),document.addEventListener("mousemove",a),document.addEventListener("mouseup",s)})),n.input.addEventListener("mouseup",(function(){n.input.blur()})),n.input.oninput=function(){n.lValue.value=n.value[0],n.rValue.value=n.value[1],n.emit("input",n.value)},n.lValue.onchange=function(){var t=n.lValue.value,e=parseFloat(n.rValue.value);if(Number(parseFloat(t))==t){var q="log"==n.scale?Math.exp(n.min):n.min,i="log"==n.scale?Math.exp(n.max):n.max,r=parseFloat(t);r=Math.min(Math.max(r,q),i),n.step&&(r=Math.ceil((r-q)/n.step)*n.step+q),r=Math.min(r,e),r=n._RoundNumber(r,n.precision),n.lValue.value=r,n.value=[r,e],n.emit("input",[r,e]),n._RefreshHandles([r,e])}else n.lValue.value=n.lastValue[0]},n.rValue.onchange=function(){var t=n.rValue.value,e=parseFloat(n.lValue.value);if(Number(parseFloat(t))==t){var q="log"==n.scale?Math.exp(n.min):n.min,i="log"==n.scale?Math.exp(n.max):n.max,r=parseFloat(t);r=Math.min(Math.max(r,q),i),n.step&&(r=Math.ceil((r-q)/n.step)*n.step+q),r=Math.max(r,e),r=n._RoundNumber(r,n.precision),n.rValue.value=r,n.value=[e,r],n.emit("input",[e,r]),n._RefreshHandles()}else n.rValue.value=n.lastValue[1]},n}return q=[{key:"_Value",value:function(t){if("log"===this.scale){var e=(t-this.minPos)*this.logScale+this.min;return Math.exp(e)}return t}},{key:"_Position",value:function(t){return"log"===this.scale?this.minPos+(Math.log(t)-this.min)/this.logScale:t}},{key:"_SetFromMousePosition",value:function(t){if(-1!==this.activeIndex){if(0===this.activeIndex){var e=(this._Position(this.value[1])-this.minPos)/(this.maxPos-this.minPos);t=Math.min(e,t)}else{var q=(this._Position(this.value[0])-this.minPos)/(this.maxPos-this.minPos);t=Math.max(q,t)}var n,i=(1-(n=t))*this.minPos+n*this.maxPos,r=this._Value(i);this.step&&(r=this.min+this.step*Math.round((r-this.min)/this.step)),this.value[this.activeIndex]=this._RoundNumber(r,this.precision),this._RefreshHandles(),this.input.oninput()}}},{key:"SetValue",value:function(t){!0!==this.focused&&(this.lValue.value=this._RoundNumber(parseFloat(t[0]),this.precision),this.rValue.value=this._RoundNumber(parseFloat(t[1]),this.precision),this.lastValue=[parseFloat(t[0]),parseFloat(t[1])])}},{key:"_RoundNumber",value:function(t,e){return+parseFloat(t).toFixed(e)}},{key:"GetValue",value:function(){return[this.lValue.value,this.rValue.value]}},{key:"_RefreshHandles",value:function(){var t=(this._Position(this.value[0])-this.minPos)/(this.maxPos-this.minPos)*100,q=100-(this._Position(this.value[1])-this.minPos)/(this.maxPos-this.minPos)*100;e()(this.handle,{left:"".concat(t,"%"),right:"".concat(q,"%")})}}],q&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(o.prototype,q),o}(I);var Ce=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.theme=e,this.components={title:F,range:et,button:st,checkbox:pt,select:bt,text:Tt,color:Jt,folder:re,file:ue,display:ve,interval:Ee}}var e;return(e=[{key:"Create",value:function(t,e){var q=this.components[e.type];if(void 0===q)throw new Error("No component type named '".concat(e.type,"' exists."));return new q(t,e,this.theme)}}])&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(t.prototype,e),t}(),Te=q(577),ze=q.n(Te),Le=q(287),Re={};function Ie(t){return Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ie(t)}function Pe(t,e){return Pe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Pe(t,e)}function Be(t,e){if(e&&("object"===Ie(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function ke(t){return ke=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ke(t)}Re.styleTagTransform=v(),Re.setAttributes=p(),Re.insert=m().bind(null,"head"),Re.domAPI=h(),Re.insertStyleElement=g(),l()(Le.Z,Re),Le.Z&&Le.Z.locals&&Le.Z.locals;var De=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Pe(t,e)}(o,t);var q,n,i,r=(n=o,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ke(n);if(i){var q=ke(this).constructor;t=Reflect.construct(e,arguments,q)}else t=e.apply(this,arguments);return Be(this,t)});function o(t,q,n){var i;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,q,n,!1)).element=document.createElement("div"),i.element.classList.add("guify-bar"),t.appendChild(i.element),q.title){var a=i.element.appendChild(document.createElement("div"));a.classList.add("guify-bar-title"),a.innerHTML=q.title,i.label=a}var s=i.element.appendChild(document.createElement("button"));if(s.classList.add("guify-bar-button"),s.innerHTML="Controls",e()(s,{left:"left"==q.align?"0":"unset",right:"left"==q.align?"unset":"0"}),s.onclick=function(){i.emit("ontogglepanel")},ze().isEnabled){var l=i.element.appendChild(document.createElement("button"));l.classList.add("guify-bar-button"),l.innerHTML="「　」",l.setAttribute("aria-label","Toggle Fullscreen"),e()(l,{left:"left"==q.align?"unset":"0",right:"left"==q.align?"0":"unset"}),l.onclick=function(){i.emit("onfullscreenrequested")}}return i}return(q=[{key:"SetVisible",value:function(t){this.element.style.display=t?"block":"none"}}])&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(o.prototype,q),o}(I),Oe=q(153),Ne={};function Fe(t){return Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fe(t)}function He(t,e){return He=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},He(t,e)}function Ue(t,e){if(e&&("object"===Fe(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ve(t){return Ve=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ve(t)}Ne.styleTagTransform=v(),Ne.setAttributes=p(),Ne.insert=m().bind(null,"head"),Ne.domAPI=h(),Ne.insertStyleElement=g(),l()(Oe.Z,Ne),Oe.Z&&Oe.Z.locals&&Oe.Z.locals;var Ge=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&He(t,e)}(o,t);var q,n,i,r=(n=o,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ve(n);if(i){var q=Ve(this).constructor;t=Reflect.construct(e,arguments,q)}else t=e.apply(this,arguments);return Ue(this,t)});function o(t,q,n){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,q,n,!1)).container=t.appendChild(document.createElement("div")),i.container.classList.add("guify-panel-container"),e()(i.container,{width:q.width,opacity:q.opacity||1}),"left"==q.align?"outer"==q.panelMode?i.container.classList.add("guify-panel-container-left-outer"):"inner"==q.panelMode&&i.container.classList.add("guify-panel-container-left-inner"):"outer"==q.panelMode?i.container.classList.add("guify-panel-container-right-outer"):"inner"==q.panelMode&&i.container.classList.add("guify-panel-container-right-inner"),"scroll"==q.panelOverflowBehavior&&i.container.classList.add("guify-panel-container-scrollable"),"none"===q.barMode&&e()(i.container,{maxHeight:"100%"}),i.panel=i.container.appendChild(document.createElement("div")),i.panel.classList.add("guify-panel"),"none"===q.barMode&&q.title&&function(t,q,n){var i=t.appendChild(document.createElement("div"));i.innerHTML=q,e()(i,{width:"100%",textAlign:"center",color:n.colors.textSecondary,height:"20px",marginBottom:"4px"})}(i.panel,q.title,n),i}return(q=[{key:"SetVisible",value:function(t){t?(this.panel.classList.remove("guify-panel-hidden"),this.menuButton&&this.menuButton.setAttribute("alt","Close GUI")):(this.panel.classList.add("guify-panel-hidden"),this.menuButton&&this.menuButton.setAttribute("alt","Open GUI"))}},{key:"ToggleVisible",value:function(){this.panel.classList.contains("guify-panel-hidden")?this.SetVisible(!0):this.SetVisible(!1)}},{key:"_MakeToggleButton",value:function(){var t=this;this.menuButton=this.container.appendChild(document.createElement("button")),this.menuButton.className="guify-panel-toggle-button",e()(this.menuButton,{left:"left"==this.opts.align?"0px":"unset",right:"left"==this.opts.align?"unset":"0px"}),this.menuButton.onclick=function(){t.ToggleVisible()},this.menuButton.addEventListener("mouseup",(function(){t.menuButton.blur()})),this.menuButton.innerHTML='\n        <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">\n            <rect x="10%" y="10%" width="80%" height="80%"/>\n        </svg>\n        '}}])&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(o.prototype,q),o}(I),We=q(56),je={};function Ze(t){return Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ze(t)}function Xe(t,e){return Xe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Xe(t,e)}function Ye(t,e){if(e&&("object"===Ze(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Je(t){return Je=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Je(t)}je.styleTagTransform=v(),je.setAttributes=p(),je.insert=m().bind(null,"head"),je.domAPI=h(),je.insertStyleElement=g(),l()(We.Z,je),We.Z&&We.Z.locals&&We.Z.locals;var $e=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Xe(t,e)}(o,t);var q,n,i,r=(n=o,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Je(n);if(i){var q=Je(this).constructor;t=Reflect.construct(e,arguments,q)}else t=e.apply(this,arguments);return Ye(this,t)});function o(t,q,n){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,q,n,!1)).element=t.appendChild(document.createElement("div")),i.element.classList.add("guify-toast-area"),e()(i.element,{position:"absolute",width:"100%"}),i}return q=[{key:"CreateToast",value:function(t){var q=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5e3,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;console.log("[Toast] "+t);var i=this.element.appendChild(document.createElement("div"));i.classList.add("guify-toast-notification"),i.setAttribute("aria-live","polite"),i.innerHTML=t,e()(i,{});var r,o=i.appendChild(document.createElement("button"));o.innerHTML="&#10006;",o.classList.add("guify-toast-close-button");var a=function(){i.blur(),e()(i,{opacity:"0"}),clearTimeout(r),r=setTimeout((function(){i&&i.parentNode.removeChild(i)}),n)};r=setTimeout(a,q),o.onclick=a}}],q&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(o.prototype,q),o}(I);var Ke=function(){function t(e){var q=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.opts=e,this.hasRoot=void 0!==e.root,e.width=e.width||300,e.root=e.root||document.body,e.align=e.align||"left",e.opacity=e.opacity||1,e.barMode=e.barMode||"offset",e.panelMode=e.panelMode||"inner",e.panelOverflowBehavior=e.panelOverflowBehavior||"scroll",e.pollRateMS=e.pollRateMS||100,e.open=e.open||!1;var n=e.theme||"dark";this.theme=new o(n),this.theme.Apply(),this._ConstructElements(),this._LoadStyles(),ze().isEnabled&&ze().on("change",(function(){q.opts.root.classList.toggle("guify-fullscreen",ze().isFullscreen)})),this.componentManager=new Ce(this.theme),this.loadedComponents=[],this._UpdateComponents()}var q;return q=[{key:"_LoadStyles",value:function(){var t=function(t){var e=document.createElement("style");e.setAttribute("type","text/css"),e.setAttribute("rel","stylesheet"),e.setAttribute("href",t),document.getElementsByTagName("head")[0].appendChild(e)};this.theme.font&&this.theme.font.fontURL?t(this.theme.font.fontURL):t("//cdn.jsdelivr.net/font-hack/2.019/css/hack.min.css")}},{key:"_ConstructElements",value:function(){var t=this;if(this.container=document.createElement("div"),this.container.classList.add("guify-container"),this.hasRoot&&"above"==this.opts.barMode)this.container.classList.add("guify-container-above");else if(this.hasRoot&&"overlay"==this.opts.barMode)this.container.classList.add("guify-container-overlay");else if(this.hasRoot&&"offset"==this.opts.barMode){this.container.classList.add("guify-container-above"),console.log(window.getComputedStyle(this.opts.root).getPropertyValue("margin-top"));var q=window.getComputedStyle(this.opts.root).getPropertyValue("margin-top")||"0px";e()(this.opts.root,{marginTop:"calc(".concat(q," + var(--size-menu-bar-height))")})}this.opts.root.insertBefore(this.container,this.opts.root.childNodes[0]),"none"!==this.opts.barMode&&(this.bar=new De(this.container,this.opts,this.theme),this.bar.addListener("ontogglepanel",(function(){t.panel.ToggleVisible()})),this.bar.addListener("onfullscreenrequested",(function(){t.ToggleFullscreen()}))),this.panel=new Ge(this.container,this.opts,this.theme),"none"===this.opts.barMode||!0===this.opts.open?this.panel.SetVisible(!0):this.panel.SetVisible(!1),this.toaster=new $e(this.container,this.opts,this.theme)}},{key:"_UpdateComponents",value:function(){var t=this;this.loadedComponents.forEach((function(t){t.binding&&t.binding.object[t.binding.property]!=t.oldValue&&(t.SetValue(t.binding.object[t.binding.property]),t.oldValue=t.binding.object[t.binding.property])})),setTimeout((function(){window.requestAnimationFrame((function(){t._UpdateComponents()}))}),this.opts.pollRateMS)}},{key:"Register",value:function(t){var e=this,q=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Array.isArray(t)){var n=Object.assign(t,q);return this._Register(n)}t.forEach((function(t){var n=Object.assign(t,q);e._Register(n)}))}},{key:"Remove",value:function(t){t.Remove(),this.loadedComponents=this.loadedComponents.filter((function(e){return e!==t}))}},{key:"_Register",value:function(t){if(t.object&&t.property&&void 0===t.object[t.property])throw new Error("Object ".concat(t.object," has no property '").concat(t.property,"'"));t.object&&t.property&&(t.initial=t.object[t.property]);var e=this.panel.panel;if(t.folder){var q=this.loadedComponents.find((function(e){return e===t.folder||"folder"===e.opts.type&&e.opts.label===t.folder}));if(!q)throw new Error("No folder exists with the name ".concat(t.folder));e=q.folderContainer}var n=this.componentManager.Create(e,t);return t.object&&t.property&&(n.binding={object:t.object,property:t.property}),n.on&&(n.on("initialized",(function(e){t.onInitialize&&t.onInitialize(e)})),n.on("input",(function(e){t.object&&t.property&&(t.object[t.property]=e),t.onChange&&t.onChange(e)}))),this.loadedComponents.push(n),n}},{key:"Toast",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5e3,q=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;this.toaster.CreateToast(t,e,q)}},{key:"ToggleFullscreen",value:function(){ze().isFullscreen?ze().exit():(console.log("Request fullscreen"),ze().request(this.opts.root))}},{key:"_SetAllEnabled",value:function(t){this.loadedComponents.forEach((function(e){e.SetEnabled(t)}))}}],q&&function(t,e){for(var q=0;q<e.length;q++){var n=e[q];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(t.prototype,q),t}(),Qe=Ke})(),n})()},963:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/052ba30780c2b295.jpg"},669:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/b5a3c39c76ce53e5.jpg"},946:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/3eb27235c30bbd69.jpg"},370:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/889f5f67f3d78900.jpg"},248:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/054a44fa633e75e4.png"},466:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/eaaed7ccc2ba9921.jpg"},85:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/5dd38cae87e049c7.png"},138:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/b115f9c5f9b7f0c8.jpg"},475:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/7d94882a264fc3b0.jpg"},816:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/630a019530ef5704.jpg"},489:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/3322c3a2684e26b7.jpg"},651:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/c27eac851ca5324d.jpg"},506:(t,e,q)=>{"use strict";t.exports=q.p+"assets/images/28766d42010a86a2.jpg"}},e={};function q(n){var i=e[n];if(void 0!==i)return i.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,q),r.exports}q.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;q.g.importScripts&&(t=q.g.location+"");var e=q.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),q.p=t})(),q(831)})();
//# sourceMappingURL=bundle.11b12b7f478e388c.js.map